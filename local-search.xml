<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Go】日志</title>
    <link href="/2022/12/22/middleware-log/"/>
    <url>/2022/12/22/middleware-log/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>​</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>middleware</tag>
      
      <tag>log</tag>
      
      <tag>zap</tag>
      
      <tag>pkg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Middleware】Twitter与Discord api</title>
    <link href="/2022/06/07/middleware-api/"/>
    <url>/2022/06/07/middleware-api/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="twitter">Twitter</h3><p>Twitter接口文档：https://developer.twitter.com/en/portal/products</p><p>Twitter ID and username converter：https://tweeterid.com/</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.获取某用户的被关注用户总数：<br>GET /2/users/by/username/&#123;username&#125;?user.fields=public_metrics<br></code></pre></td></tr></table></figure><p><img src="/images/api/twitter1.png"></p><h3 id="discord">Discord</h3><p>接口文档：https://discord.com/developers/applications</p><p><strong>需求：</strong></p><ol type="1"><li><p>获取某Server的总人数：GET /invites/{invite.code} ?with_count=true</p></li><li><p>判断该用户是否在某Server内：GET users/<span class="citation" data-cites="me/guilds">@me/guilds</span>/{guild.id}/member</p></li><li><p>获取该用户在某Server内的角色：GET users/<span class="citation" data-cites="me/guilds">@me/guilds</span>/{guild.id}/member</p></li></ol><p><a href="https://discord.com/developers/docs/topics/rate-limits#global-rate-limit">QPS</a>：50/s</p><h4 id="discord获取用户信息实现">Discord获取用户信息实现：</h4><p><strong>1.</strong> 新建APP</p><p>访问<a href="https://discord.com/developers/applications">应用程序页面</a>，单击New Application来设置新应用，并在弹窗中输入应用的名称。</p><p><img src="/images/api/discord1.png"></p><p><strong>2.</strong> 设置API身份验证</p><p><em>这里使用<strong>OAuth2</strong>对用户进行身份验证；</em></p><p>获取Client ID、Client Secret和重定向URL并保存，图中重定向URL仅用于测试。</p><p><img src="/images/api/discord2.png"></p><p>这里的重定向URL之后可以设置成我们业务相关的链接，用于保存用户授权给应用的权限code</p><p><strong>3.</strong> 生成应用授权链接</p><p>在我们利用DiscordAPI获取某用户相关的discord信息前，用户必须将权限授权给我们的应用程序。因此，这里需要生成授权链接。</p><p><img src="/images/api/discord3.png"></p><p>根据需求，这里授权范围仅需要选择identify、guilds、guilds members read，并选择刚才设置的重定向URL。最后拷贝生成的授权URL，并在浏览器中打开，会出现以下界面。</p><p><img src="/images/api/discord4.png"></p><p>从上面的页面单击授权会将用户重定向到我们在上一步中指定的重定向 URL。但是，URL 中会有一些额外的查询字符串。如果授权成功，URL 应该看起来像这样链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://localhost/discord/redirect?code=lMBUR80fgEpTS9w3umTJRMaB5XzKZ9<br></code></pre></td></tr></table></figure><p>记下code参数的值，这是y3pnUdjLc0jWebnyK0zwwbbRaaiXki用于上述示例的。另请注意，此值对于每个会话都是唯一的。在下一步中，我们将使用code来检索用户授权token。</p><p><strong>4.</strong> 为用户请求授权令牌</p><p>为了获得授权令牌，我们需要向以下端点发出 HTTP 请求：https://discord.com/api/oauth2/token。将上一步获得的code生成访问token。本示例使用 Postman 发出所有请求，以下是请求的配置：</p><p><strong>Request type:</strong> POST, <strong>Content-type:</strong> x-www-form-urlencoded <strong>Body:</strong></p><p>• client_id: "第二步获得的ClientID"</p><p>• client_secret: "第二步获得的ClientSecret"</p><p>• grant_type: "authorization_code"</p><p>• code: ""第三步获得的code"</p><p>• redirect_uri: "http://localhost/discord/redirect"</p><p>参考Postman请求如图：</p><p><img src="/images/api/discord5.png"></p><p>如果请求成功，会获得如下响应，接下来则可以利用access_token调用第三步授权范围内的API来获取用户的相关信息，实现需求内容。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"> &#123;<br>    <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;z4HhmDy5ghijpIRL1YFzhCeVFabcdef&quot;</span>,<br>    <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">604800</span>,<br>    <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;5luvWWWACKJmsQS3HJUcYew5oxyzk&quot;</span>,<br>    <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;guilds.members.read guilds identify&quot;</span>,<br>    <span class="hljs-attr">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.</strong> 调用示例</p><p><img src="/images/api/discord6.png"></p><p>设置授权token，发送如下请求，可获取授权用户加入的所有服务器信息。</p><p><img src="/images/api/discord7.png"></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://stackoverflow.com/questions/70779246/how-to-get-the-twitter-followers-count-using-twitter-api-in-2022">How to get the Twitter followers count using Twitter API (in 2022)</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://dev.to/twitterdev/getting-the-follower-count-from-twitter-api-v2-4jh6">https://dev.to/twitterdev/getting-the-follower-count-from-twitter-api-v2-4jh6</a><a href="#fnref:2" rev="footnote"> ↩︎</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://discordapi.com/unofficial/comparison.html">https://discordapi.com/unofficial/comparison.html</a><a href="#fnref:3" rev="footnote"> ↩︎</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html">https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html</a><a href="#fnref:4" rev="footnote"> ↩︎</a></span></li></ol></div></div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>api</tag>
      
      <tag>twitter</tag>
      
      <tag>discord</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】定时任务</title>
    <link href="/2022/06/07/middleware-cron/"/>
    <url>/2022/06/07/middleware-cron/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/gorhill/cronexpr">cronexpr</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span></li></ol></div></div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cron</tag>
      
      <tag>linux</tag>
      
      <tag>middleware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ELK】elastic search</title>
    <link href="/2022/06/07/elk/"/>
    <url>/2022/06/07/elk/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/98record/tag/elk/">自在基拉</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.cnblogs.com/Finley/p/8372213.html">ElasticSearch索引与搜索</a><a href="#fnref:2" rev="footnote"> ↩︎</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.chenqicheng.com/article/39">安装elasticsearch+elasticsearch-head+analysis-ik分词</a><a href="#fnref:3" rev="footnote"> ↩︎</a></span></li></ol></div></div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Datebase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elk</tag>
      
      <tag>es</tag>
      
      <tag>Datebase</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】数据库编程与ORM</title>
    <link href="/2022/02/11/golang-db/"/>
    <url>/2022/02/11/golang-db/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><span id="more"></span><h4 id="初始化">初始化</h4><h5 id="open">Open</h5><h4 id="增删改查">增删改查</h4><h5 id="增删改">增删改</h5><ul><li>Exec或者ExecContext</li><li>ExecContext可以控制超时</li></ul><h5 id="查询">查询</h5><ul><li>QueryRow和QueryRowContext查询单行数据</li><li>Query和QueryContext查询多行数据</li><li>Rows迭代器设计，for rows.Next()</li><li>Row没有记录返回sql.ErrNoRow,Rows没有记录不会err</li></ul><h5 id="自定义json数据字段">自定义Json数据字段</h5><ul><li>字段自定义对象实现"database/sql/driver"包下Valuer interface的Value() (Value, error)方法，保存数据时可以在sql传参时不需要序列化</li><li>字段自定义对象实现"database/sql"包下Scanner interface的Scan(src any) error方法，查询数据时实现直接映射到对象</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;database/sql&quot;</span><br><span class="hljs-string">&quot;database/sql/driver&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// JsonColumn 代表存储字段的 json 类型</span><br><span class="hljs-comment">// 主要用于没有提供默认 json 类型的数据库</span><br><span class="hljs-comment">// T 可以是结构体，也可以是切片或者 map</span><br><span class="hljs-comment">// 一切可以被 json 库所处理的类型都能被用作 T</span><br><span class="hljs-keyword">type</span> JsonColumn[T any] <span class="hljs-keyword">struct</span> &#123;<br>Val   T<br>Valid <span class="hljs-keyword">bool</span><br>&#125;<br><br><span class="hljs-comment">// Value 返回一个 json 串。类型是 []byte</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(j JsonColumn[T])</span> <span class="hljs-title">Value</span><span class="hljs-params">()</span> <span class="hljs-params">(driver.Value, error)</span></span> &#123;<br><span class="hljs-keyword">if</span> !j.Valid &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> json.Marshal(j.Val)<br>&#125;<br><br><span class="hljs-comment">// Scan 将 src 转化为对象</span><br><span class="hljs-comment">// src 的类型必须是 []byte, *[]byte, string, sql.RawBytes, *sql.RawBytes 之一</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(j *JsonColumn[T])</span> <span class="hljs-title">Scan</span><span class="hljs-params">(src any)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">var</span> bs []<span class="hljs-keyword">byte</span><br><span class="hljs-keyword">switch</span> val := src.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> []<span class="hljs-keyword">byte</span>:<br>bs = val<br><span class="hljs-keyword">case</span> *[]<span class="hljs-keyword">byte</span>:<br>bs = *val<br><span class="hljs-keyword">case</span> <span class="hljs-keyword">string</span>:<br>bs = []<span class="hljs-keyword">byte</span>(val)<br><span class="hljs-keyword">case</span> sql.RawBytes:<br>bs = val<br><span class="hljs-keyword">case</span> *sql.RawBytes:<br>bs = *val<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">&quot;ekit：JsonColumn.Scan 不支持 src 类型 %v&quot;</span>, src)<br>&#125;<br><br><span class="hljs-keyword">if</span> err := json.Unmarshal(bs, &amp;j.Val); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>j.Valid = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="事务">事务</h5><h6 id="隔离级别">隔离级别</h6><ul><li>序列化</li><li>可重复度</li><li>已提交读</li><li>未提交读</li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】Go资源大全中文版扩展</title>
    <link href="/2022/02/10/golang-awesome-extends/"/>
    <url>/2022/02/10/golang-awesome-extends/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>本项目作为awesome-go的一个扩展，根据go语言中文社区提供的资料，还有互联网企业架构设计中的常见组件分类， 共精心挑选了154个开源项目。<span id="more"></span></p></blockquote><p>项目初衷是帮助到那些想学习和借鉴优秀golang开源项目， 和在互联网架构设计时期望快速寻找合适轮子的人。</p><p>ps: 以下项目<strong>star数均大于100</strong>，且会定期检查项目的url，剔除无效链接。 每个分类下的项目会按照<strong>star数从高到低</strong>进行排列。</p><p><a href="#目录">目录</a></p><ul><li><a href="#监控系统">监控系统</a></li><li><a href="#容器技术">容器技术</a></li><li><a href="#PaaS工具">PaaS工具</a></li><li><a href="#大数据">大数据</a></li><li><a href="#微服务">微服务</a></li><li><a href="#CI/CD">CI/CD</a></li><li><a href="#数据库技术">数据库技术</a></li><li><a href="#存储技术">存储技术</a></li><li><a href="#分布式系统">分布式系统</a></li><li><a href="#消息系统">消息系统</a></li><li><a href="#服务器管理">服务器管理</a></li><li><a href="#安全工具">安全工具</a></li><li><a href="#网络工具">网络工具</a></li><li><a href="#Web工具">Web工具</a></li><li><a href="#Web框架">Web框架</a></li><li><a href="#区块链技术">区块链技术</a></li><li><a href="#其它">其它</a></li></ul><h1 id="监控系统">监控系统</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/grafana/grafana">grafana/grafana</a></td><td>Grafana 是一个用于监控指标分析和图表展示的工具， 后端支持 Graphite, InfluxDB &amp; Prometheus &amp; Open-falcon等， 它是一个流行的监控组件， 目前在各大中小型公司中广泛应用</td><td>34113</td></tr><tr class="even"><td><a href="https://github.com/prometheus/prometheus">prometheus/prometheus</a></td><td>Prometheus 是一个开源的服务监控系统和时间序列数据库， 提供监控数据存储，展示，告警等功能</td><td>29808</td></tr><tr class="odd"><td><a href="https://github.com/bosun-monitor/bosun">bosun-monitor/bosun</a></td><td>专业的跨平台开源系统监控项目，go语言编写，灵活的模板和表达式配合上各种collector可以监控任何应用或系统级的运行数据，比 zabbix更轻量级、更易入手和更适合定制。</td><td>2961</td></tr><tr class="even"><td><a href="https://github.com/sourcegraph/checkup">sourcegraph/checkup</a></td><td>一个分布式的无锁的站点健康状态检查工具。 支持检查http， tcp， dns等的状态 并可将结果保存在s3。 自带了一个美观的界面。</td><td>2822</td></tr><tr class="odd"><td><a href="https://github.com/influxdata/kapacitor">influxdata/kapacitor</a></td><td>Kapacitor 是一个开源框架，用来处理、监控和警告时间序列数据。</td><td>1879</td></tr><tr class="even"><td><a href="https://github.com/rapidloop/rtop">rapidloop/rtop</a></td><td>rtop 是一个简单的无代理的远程服务器监控工具，基于 SSH 连接进行工作。无需在被监控的服务器上安装任何软件。rtop 直接通过 SSH 连接到待监控服务器，然后执行命令来收集监控数据。rtop 每几秒钟就自动更新监控数据，类似其他 *top 命令</td><td>1845</td></tr><tr class="odd"><td><a href="https://github.com/open-falcon/of-release">open-falcon/of-release</a></td><td>OpenFalcon是一款小米开源的监控系统。功能：数据采集免配置：agent自发现、支持Plugin、主动推送模式; 容量水平扩展：生产环境每秒50万次数据收集、告警、存储、绘图，可持续水平扩展。告警策略自发现：Web界面、支持策略模板、模板继承和覆盖、多种告警方式、支持回调动作。告警设置人性化：支持最大告警次数、告警级别设置、告警恢复通知、告警暂停、不同时段不同阈值、支持维护周期，支持告警合并。历史数据高效查询：秒级返回上百个指标一年的历史数据。Dashboard人性化：多维度的数据展示，用户自定义Dashboard等功能。架构设计高可用：整个系统无核心单点，易运维，易部署。</td><td>1237</td></tr><tr class="even"><td><a href="https://github.com/rach/pome">rach/pome</a></td><td>Pome 是 Postgres Metrics 的意思。Pome 是一个 PostgreSQL 的指标仪表器，用来跟踪你的数据库的健康状况。</td><td>1085</td></tr><tr class="odd"><td><a href="https://github.com/gy-games/smartping">gy-games/smartping</a></td><td>SmartPing为一个各机器(点)间间互PING检测工具，支持互PING，单向PING，绘制拓扑及报警功能。 系统设计为无中心化原则，所有的数据均存储自身点中，默认数据循环保留1个月时间，由自身点的数据绘制 出PING包 的状态，由各其他点的数据绘制 进PING包 的状态，并API接口获取其他点数据绘制整体PING拓扑图，拓扑图中存在报警功能。</td><td>856</td></tr><tr class="even"><td><a href="https://github.com/TalkingData/owl">TalkingData/owl</a></td><td>OWL是TalkingData公司推出的一款开源分布式监控系统, 演示环境http://54.223.127.87/ 登录账号密码demo/demo</td><td>758</td></tr><tr class="odd"><td><a href="https://github.com/pinggg/pingd">pinggg/pingd</a></td><td>pingd 是世界上最简单的监控服务，使用 golang 编写。软件支持 IPv6，但是服务器不支持. pingd 允许同时 ping 上千个 IPs，在此期间还可以管理监控的主机。用户提供主机名或者 IP，还有用户邮箱地址，就可以使用 3 个生成 URLs 来开启，停止或者删除你的追踪。每当你的服务器停机或者后台在线都会发送通知，还包含控制 URLs。</td><td>383</td></tr><tr class="even"><td><a href="https://github.com/cloudinsight/cloudinsight-agent">cloudinsight/cloudinsight-agent</a></td><td>提供可视化监控的saas平台cloudinsight开源的一个监控客户端。 Cloudinsight 探针可以收集它所在操作系统的各种指标，然后发送到 Cloudinsight 后端服务</td><td>357</td></tr><tr class="odd"><td><a href="https://github.com/gravitational/satellite">gravitational/satellite</a></td><td>用于监测kubernetes健康状态的一个工具／库。 其特点是：轻量级定期测试， 高可用性和弹性网络分区， 无单点故障， 以时间序列的格式存储监控数据。</td><td>166</td></tr><tr class="even"><td><a href="https://github.com/kovetskiy/zabbixctl">kovetskiy/zabbixctl</a></td><td>Zabbixctl 是采用Zabbix服务API的命令行工具，它提供了有效的方式去查询和处理trigger 状态、主机最新数据和用户组。</td><td>122</td></tr></tbody></table><h1 id="容器技术">容器技术</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/docker/docker">docker/docker</a></td><td>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架或包装系统。</td><td>56684</td></tr><tr class="even"><td><a href="https://github.com/vmware/harbor">vmware/harbor</a></td><td>容器应用的开发和运行离不开可靠的镜像管理。从安全和效率等方面考虑，部署在私有环境内的Registry是非常必要的。Project Harbor是由VMware公司中国团队为企业用户设计的Registry server开源项目，包括了权限管理(RBAC)、LDAP、审计、管理界面、自我注册、HA等企业必需的功能，同时针对中国用户的特点，设计镜像复制和中文支持等功能</td><td>11230</td></tr><tr class="odd"><td><a href="https://github.com/coreos/rkt">coreos/rkt</a></td><td>Rocket （也叫 rkt）是 CoreOS 推出的一款容器引擎，和 Docker 类似，帮助开发者打包应用和依赖包到可移植容器中，简化搭环境等部署工作。Rocket 和 Docker 不同的地方在于，Rocket 没有 Docker 那些为企业用户提供的“友好功能”，比如云服务加速工具、集群系统等。反过来说，Rocket 想做的，是一个更纯粹的业界标准。</td><td>8914</td></tr><tr class="even"><td><a href="https://github.com/coreos/clair">coreos/clair</a></td><td>Clair 是一个容器漏洞分析服务。它提供一个能威胁容器漏洞的列表，并且在有新的容器漏洞发布出来后会发送通知给用户。</td><td>6426</td></tr><tr class="odd"><td><a href="https://github.com/shipyard/shipyard">shipyard/shipyard</a></td><td>Shipyard 是一个基于 Web 的 Docker 管理工具，支持多 host，可以把多个 Docker host 上的 containers 统一管理；可以查看 images，甚至 build images；并提供 RESTful API 等等。 Shipyard 要管理和控制 Docker host 的话需要先修改 Docker host 上的默认配置使其支持远程管理。</td><td>6407</td></tr><tr class="even"><td><a href="https://github.com/zettio/weave">zettio/weave</a></td><td>Weave 创建一个虚拟网络并连接到部署在多个主机上的 Docker 容器。</td><td>5798</td></tr><tr class="odd"><td><a href="https://github.com/weaveworks/scope">weaveworks/scope</a></td><td>一个docker&amp;kubernetes的管理，监控可视化工具， 可以看到容器间的拓扑关系和tcp通信</td><td>4206</td></tr><tr class="even"><td><a href="https://github.com/alibaba/pouch">alibaba/pouch</a></td><td>Pouch 是 Alibaba 公司开源的容器引擎技术，其主要功能包括基本的容器管理能力，安全稳定的强容器隔离能力，以及对应用无侵入性的富容器技术。</td><td>4177</td></tr><tr class="odd"><td><a href="https://github.com/docker/swarmkit">docker/swarmkit</a></td><td>SwarmKit 是Docker公司开源的Docker集群管理和容器编排工具，其主要功能包括节点发现、基于raft算法的一致性和任务调度等。</td><td>2329</td></tr><tr class="even"><td><a href="https://github.com/emccode/rexray">emccode/rexray</a></td><td>REX-Ray 是一个 EMC {code} 团队领导的开源项目，为 Docker、Mesos 及其他容器运行环境提供持续的存储访问。其设计旨在囊括通用存储、虚拟化和云平台，提供高级的存储功能。</td><td>1743</td></tr><tr class="odd"><td><a href="https://github.com/docker/libnetwork">docker/libnetwork</a></td><td>Libnetwork 提供一个原生 Go 实现的容器连接，是容器的网络。libnetwork 的目标是定义一个健壮的容器网络模型（Container Network Model），提供一个一致的编程接口和应用程序的网络抽象。</td><td>1612</td></tr><tr class="even"><td><a href="https://github.com/cloud66/habitus">cloud66/habitus</a></td><td>一个快速实现docker build 流程的工具， 支持复杂的docker build流程，实现多个dockerfile的build流程，典型应用如将需要静态编译的程序，如go， java这类程序在一个docker build编译好之后，得到的二进制包用到后续的build流程</td><td>1090</td></tr><tr class="odd"><td><a href="https://github.com/vishvananda/wormhole">vishvananda/wormhole</a></td><td>WWormhole 是一个能识别命名空间的由 Socket 激活的隧道代理。可以让你安全的连接在不同物理机器上的 Docker 容器。可以用来完成一些有趣的功能，例如连接运行在容器本机的服务或者在连接后创建按需的服务。</td><td>370</td></tr></tbody></table><h1 id="paas工具">PaaS工具</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/kubernetes/kubernetes">kubernetes/kubernetes</a></td><td>Kubernetes 是来自 Google 云平台的开源容器集群管理系统。基于 Docker 构建一个容器的调度服务。该系统可以自动在一个容器集群中选择一个工作容器供使用。其核心概念是 Container Pod。</td><td>64452</td></tr><tr class="even"><td><a href="https://github.com/rancher/rancher">rancher/rancher</a></td><td>Rancher2是基于Go编写的k8s管理平台，采用k8s in k8s的方式，极大的简化了k8s部署，并能同时管理多套k8s集群，操作和安全俱佳，是一款非常好的Devops工具</td><td>13922</td></tr><tr class="odd"><td><a href="https://github.com/tsuru/tsuru">tsuru/tsuru</a></td><td>在 Tsuru 的 PaaS 服务下，你可以选择自己的编程语言，选择使用 SQL 或者 NoSQL 数据库，memcache、redis、等等许多服务，甚至与你可以使用 Git 版本控制工具来上传你应用。</td><td>3286</td></tr><tr class="even"><td><a href="https://github.com/laincloud/lain">laincloud/lain</a></td><td>Lain 是一个基于 docker 的 PaaS 系统。其面向技术栈多样寻求高效运维方案的高速发展中的组织，devops 人力缺乏的 startup ，个人开发者。统一高效的开发工作流，降低应用运维复杂度；在 IaaS / 私有 IDC 裸机的基础上直接提供应用开发，集成，部署，运维的一揽子解决方案。</td><td>449</td></tr><tr class="odd"><td><a href="https://github.com/ooyala/atlantis">ooyala/atlantis</a></td><td>Atlantis 是一款基于 Docker，使用 Go 编写，为 HTTP 应用准备的开源 PaaS。Atlantis 可以在路由请求中轻松的构建和部署应用到容器。Atlantis 在 Ooyala 的新应用中得到了很广泛的应用。</td><td>385</td></tr><tr class="even"><td><a href="https://github.com/weibocom/opendcp">weibocom/opendcp</a></td><td>OpenDCP是一个基于Docker的云资源管理与调度平台，集镜像仓库、多云支持、服务编排、服务发现等功能与一身，支持服务池的扩缩容，其技术体系源于微博用于支持节假日及热点峰值流量的弹性调度DCP系统。OpenDCP允许利用公有云服务器搭建起适应互联网应用的IT基础设施，并且将运维的工作量降到最低。</td><td>381</td></tr><tr class="odd"><td><a href="https://github.com/mesos/cloudfoundry-mesos">mesos/cloudfoundry-mesos</a></td><td>Cloud Foundry-Mesos框架由华为与Mesosphere的工程师合作完成，能够为应用提供安全可靠的、可伸缩、可扩展的云端运行环境，并且应用能够 享用Cloud Foundry生态圈内各类丰富的服务资源。企业能够通过Cloud Foundry开发云应用，并通过Cloud Foundry-Mesos将应用部署到DCOS上，使应用能够与DCOS上安装的其他服务及应用框架共享资源，实现资源利用率最大化，能够大幅降低企业 数据中心运营成本。DCOS能够运行在虚拟和物理环境上，能够支持Linux（以及很快支持Windows），并可适用于私有云、公有云及混合云环境。</td><td>107</td></tr></tbody></table><h1 id="微服务">微服务</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/istio/istio">istio/istio</a></td><td>Istio是由Google、IBM和Lyft开源的微服务管理、保护和监控框架。使用istio可以很简单的创建具有负载均衡、服务间认证、监控等功能的服务网络，而不需要对服务的代码进行任何修改。</td><td>22197</td></tr><tr class="even"><td><a href="https://github.com/go-kit/kit">go-kit/kit</a></td><td>Go-kit 是一个 Go 语言的分布式开发包，用于开发微服务。</td><td>16516</td></tr><tr class="odd"><td><a href="https://github.com/uber/jaeger">uber/jaeger</a></td><td>Jaeger是Uber的分布式跟踪系统 ，基于google dapper的原理构建， 以Cassandra作为存储层</td><td>10479</td></tr><tr class="even"><td><a href="https://github.com/micro/micro">micro/micro</a></td><td>Micro是一个专注于简化分布式系统开发的微服务生态系统。可插拔的插件化设计，提供强大的可插拔的架构来保证基础组件可以被灵活替换。</td><td>7764</td></tr><tr class="odd"><td><a href="https://github.com/eBay/fabio">eBay/fabio</a></td><td>fabio 是 ebay 团队用 golang 开发的一个快速、简单零配置能够让 consul 部署的应用快速支持 http(s) 的负载均衡路由器。这里有一篇中文文章http://dockone.io/article/1567介绍了如何用fabio＋consul实现服务发现，负载均衡，并阐述了原理， 最后还有demo程序</td><td>6289</td></tr><tr class="even"><td><a href="https://github.com/goadesign/goa">goadesign/goa</a></td><td>Goa 是一款用 Go 用于构建微服务的框架，采用独特的设计优先的方法。</td><td>3757</td></tr><tr class="odd"><td><a href="https://github.com/NYTimes/gizmo">NYTimes/gizmo</a></td><td>纽约时报开源的go微服务工具.提供如下特性:标准化配置和日志;可配置策略的状态监测端点;用于管理 pprof 端点和日志级别的配置;结构化日志，提供基本请求信息;端点的有用度量;优雅的停止服务; 定义期待和词汇的基本接口</td><td>3076</td></tr><tr class="even"><td><a href="https://github.com/koding/kite">koding/kite</a></td><td>一个基于go语言的微服务框架, Kite是Koding公司内部的一个框架, 该框架提供服务发现，多种认证功能，服务端通过RPC进行通信，同时还提供了websocket的js库，方便浏览器于服务器间进行通信。</td><td>2709</td></tr><tr class="odd"><td><a href="https://github.com/afex/hystrix-go">afex/hystrix-go</a></td><td>用来隔离远程系统调用， 第三方库调用 ，服务调用， 提供熔断机制，避免雪崩效应的库， Hystrix的go 版本。 注Hystrixs是Netflix开源的一个java库</td><td>2407</td></tr><tr class="even"><td><a href="https://github.com/fagongzi/gateway">fagongzi/gateway</a></td><td>Gateway是一个使用go实现的基于HTTP的API 网关。<strong>特性</strong> ：API 聚合 ; 流控; 熔断; 负载均衡; 健康检查; 监控; 消息路由; 后端管理WebUI . <strong>能做什么</strong>：规划更友好的URL给调用者。聚合多个API的结果返回给API调用者，利于移动端，后端可以实现原子接口。保护后端API服务不会被突发异常流量压垮。提供熔断机制，使得后端API Server具备自我恢复能力。借助消息路由能力，实现灰度发布，AB测试。</td><td>2364</td></tr><tr class="odd"><td><a href="https://github.com/goodrain/rainbond">goodrain/rainbond</a></td><td>云帮是一款以应用为中心的开源PaaS，深度整合Kubernetes的容器管理和Service Mesh微服务架构最佳实践，满足支撑业务高速发展所需的敏捷开发、高效运维和精益管理需求</td><td>2195</td></tr><tr class="even"><td><a href="https://github.com/sourcegraph/appdash">sourcegraph/appdash</a></td><td>go版本的分布式应用跟踪系统， 基于google dapper的原理构建</td><td>1622</td></tr><tr class="odd"><td><a href="https://github.com/andot/hprose">andot/hprose</a></td><td>Hprose 是高性能远程对象服务引擎（High Performance Remote Object Service Engine）的缩写 —— 微服务首选引擎。它是一个先进的轻量级的跨语言跨平台面向对象的高性能远程动态通讯中间件。它不仅简单易用，而且功能强大。你只需要稍许的时间去学习，就能用它轻松构建跨语言跨平台的分布式应用系统了。</td><td>609</td></tr></tbody></table><h1 id="cicd">CI/CD</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/drone/drone">drone/drone</a></td><td>Drone 是一个基于 Docker 的持续发布平台，使用 Go 语言开发</td><td>20737</td></tr><tr class="even"><td><a href="https://github.com/caicloud/cyclone">caicloud/cyclone</a></td><td>Cyclone 是一个打造容器工作流的云原生持续集成持续发布平台，简单易用，使用 Go 语言开发，有详尽的中文文档</td><td>877</td></tr></tbody></table><h1 id="数据库技术">数据库技术</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/pingcap/tidb">pingcap/tidb</a></td><td>TiDB 是国内 PingCAP 团队开发的一个分布式 SQL 数据库。其灵感来自于 Google 的 F1, TiDB 支持包括传统 RDBMS 和 NoSQL 的特性。</td><td>22947</td></tr><tr class="even"><td><a href="https://github.com/influxdata/influxdb">influxdata/influxdb</a></td><td>一个可以水平扩展的时间序列数据库， 内建http api， 支持对数据打tag，灵活的查询策略和数据的实时查询，支持类sql语句进行查询</td><td>18525</td></tr><tr class="odd"><td><a href="https://github.com/cockroachdb/cockroach">cockroachdb/cockroach</a></td><td>CockroachDB (蟑螂数据库）是一个可伸缩的、支持地理位置处理、支持事务处理的数据存储系统。CockroachDB 提供两种不同的的事务特性，包括快照隔离（snapshot isolation，简称SI）和顺序的快照隔离（SSI）语义，后者是默认的隔离级别。</td><td>17960</td></tr><tr class="even"><td><a href="https://github.com/google/cayley">google/cayley</a></td><td>Cayley 是 Google 的一个开源图(Graph)数据库，其灵感来自于 Freebase 和 Google 的 Knowledge Graph 背后的图数据库。</td><td>13277</td></tr><tr class="odd"><td><a href="https://github.com/dgraph-io/dgraph">dgraph-io/dgraph</a></td><td>dgraph 是可扩展的，分布式的，低延迟图形数据库。DGraph 的目标是提供 Google 生产水平的规模和吞吐量，在超过TB的结构数据里，未用户提供足够低延迟的实时查询。DGraph 支持 GraphQL 作为查询语言，响应 JSON。</td><td>12759</td></tr><tr class="even"><td><a href="https://github.com/wandoulabs/codis">wandoulabs/codis</a></td><td>Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有明显的区别 (不支持的命令列表), 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务.</td><td>10927</td></tr><tr class="odd"><td><a href="https://github.com/youtube/vitess">youtube/vitess</a></td><td>outube出品的开源分布式MySQL工具集Vitess，自动分片存储MySQL数据表，将单个SQL查询改写为分布式发送到多个MySQL Server上，支持行缓存（比MySQL本身缓存效率高），支持复制容错，已用于Youtube生产环境</td><td>9720</td></tr><tr class="even"><td><a href="https://github.com/sosedoff/pgweb">sosedoff/pgweb</a></td><td>gweb 是一个采用 Go 语言开发的基于 Web 的 PostgreSQL 管理系统。</td><td>6325</td></tr><tr class="odd"><td><a href="https://github.com/flike/kingshard">flike/kingshard</a></td><td>一个高性能的mysql中间件， 支持读写分离， 数据分片， 安全审计等功能</td><td>5070</td></tr><tr class="even"><td><a href="https://github.com/olivere/elastic">olivere/elastic</a></td><td>elastic是开源搜索引擎elasticsearch的golang客户端，API友好，支持绝大部分es的接口,支持的es版本全面，从1.x到最新的6.x全覆盖</td><td>4822</td></tr><tr class="odd"><td><a href="https://github.com/siddontang/ledisdb">siddontang/ledisdb</a></td><td>ledisdb是一个参考ssdb，采用go实现，底层基于leveldb，类似redis的高性能nosql数据库，提供了kv，list，hash以及zset数据结构的支持。</td><td>3246</td></tr><tr class="even"><td><a href="https://github.com/XiaoMi/Gaea">XiaoMi/Gaea</a></td><td>Gaea是小米商城/系统组研发的基于mysql协议的数据库中间件，目前在小米商城大陆和海外得到广泛使用。</td><td>1408</td></tr><tr class="odd"><td><a href="https://github.com/outbrain/orchestrator">outbrain/orchestrator</a></td><td>MySQL 复制拓扑可视化工具</td><td>787</td></tr><tr class="even"><td><a href="https://github.com/slicebit/qb">slicebit/qb</a></td><td>qb是用来让使更容易使用数据库的go语言的数据库工具包。它受Python最喜欢的ORM SQLAlchemy的启发，既是一个ORM，也是一个查询生成器。它在表达api和查询构建东西的情形下是相当模块化的。</td><td>524</td></tr><tr class="odd"><td><a href="https://github.com/hidu/mysql-schema-sync">hidu/mysql-schema-sync</a></td><td>mysql-schema-sync 是一款使用go开发的、跨平台的、绿色无依赖的 MySQL 表结构自动同步工具。用于将线上(其他环境)数据库结构变化同步到测试（本地）环境!</td><td>418</td></tr><tr class="even"><td><a href="https://github.com/chasex/redis-go-cluster">chasex/redis-go-cluster</a></td><td>redis-go-cluster 是基于 Redigo 实现的 Golang Redis 客户端。redis-go-cluster 可以在本地缓存 slot 信息，并且当集群修改的时候会自动更新。此客户端管理每个节点连接池，使用 goroutine 来尽可能的并发执行，达到了高效，低延迟。</td><td>375</td></tr><tr class="odd"><td><a href="https://github.com/mediocregopher/radix">mediocregopher/radix</a></td><td>radix是redis官方推荐的客户端之一，相比于redigo,radix.v2特点是轻量、接口实现优雅、API友好</td><td>327</td></tr><tr class="even"><td><a href="https://github.com/goshawkdb/server">goshawkdb/server</a></td><td>GoshawkDB 是一个采用 Go 语言开发支持多平台的分布式的对象存储服务，支持事务以及容错。GoshawkDB 的事务控制是在客户端完成的。GoshawkDB 服务器端使用 AGPL 许可，而 Go 语言客户端使用 Apache 许可证</td><td>204</td></tr><tr class="odd"><td><a href="https://github.com/degdb/degdb">degdb/degdb</a></td><td>DegDB 是分布式的经济图数据库。</td><td>201</td></tr></tbody></table><h1 id="存储技术">存储技术</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/ipfs/go-ipfs">ipfs/go-ipfs</a></td><td>IPFS 是分布式文件系统，寻求连接所有计算机设备的相同文件系统。在某些方面，这很类似于原始的 Web 目标，但是 IPFS 最终会更像单个比特流群交换的 git 对象。IPFS ＝ InterPlanetary File System</td><td>9425</td></tr><tr class="even"><td><a href="https://github.com/chrislusf/seaweedfs">chrislusf/seaweedfs</a></td><td>SeaweedFS 是简单，高伸缩性的分布式文件系统，包含两部分：存储数十亿的文件；快速为文件服务。SeaweedFS 作为支持全 POSIX 文件系统语义替代，Seaweed-FS 选择仅实现 key-file 的映射，类似 "NoSQL"，也可以说是 "NoFS"。</td><td>9348</td></tr><tr class="odd"><td><a href="https://github.com/spf13/afero">spf13/afero</a></td><td>Afero 是一个文件系统框架，提供一个简单、统一和通用的 API 和任何文件系统进行交互，作为抽象层还提供了界面、类型和方法。Afero 的界面十分简洁，设计简单，舍弃了不必要的构造函数和初始化方法。Afero 作为一个库还提供了一组可交互操作的后台文件系统，这样在与 Afero 协作时，还可以保留 os 和 ioutil 软件包的功能和好处。</td><td>2631</td></tr><tr class="even"><td><a href="https://github.com/coreos/torus">coreos/torus</a></td><td>Torus是一种针对容器集群量身打造的存储系统，可以为通过Kubernetes编排和管理的容器集群提供可靠可扩展的存储。这是继etcd、rkt、flannel，以及CoreOS Linux之后CoreOS发布的另一个开源产品。</td><td>1800</td></tr><tr class="odd"><td><a href="https://github.com/emccode/rexray">emccode/rexray</a></td><td>REX-Ray 是一个 EMC {code} 团队领导的开源项目，为 Docker、Mesos 及其他容器运行环境提供持续的存储访问。其设计旨在囊括通用存储、虚拟化和云平台，提供高级的存储功能。</td><td>1743</td></tr><tr class="even"><td><a href="https://github.com/Terry-Mao/bfs">Terry-Mao/bfs</a></td><td>bfs 是使用 Go 编写的分布式文件系统（小文件存储）。</td><td>1133</td></tr><tr class="odd"><td><a href="https://github.com/gostor/gotgt">gostor/gotgt</a></td><td>Gotgt 是使用 Go 编写的高性能、可扩展的 iSCSI target 服务。</td><td>161</td></tr></tbody></table><h1 id="分布式系统">分布式系统</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/chrislusf/seaweedfs">chrislusf/seaweedfs</a></td><td>SeaweedFS 是简单，高伸缩性的分布式文件系统，包含两部分：存储数十亿的文件；快速为文件服务。SeaweedFS 作为支持全 POSIX 文件系统语义替代，Seaweed-FS 选择仅实现 key-file 的映射，类似 "NoSQL"，也可以说是 "NoFS"。</td><td>9348</td></tr><tr class="even"><td><a href="https://github.com/kelseyhightower/confd">kelseyhightower/confd</a></td><td>Confd是一个轻量级的配置管理工具。通过查询Etcd，结合配置模板引擎，保持本地配置最新，同时具备定期探测机制，配置变更自动reload。</td><td>6887</td></tr><tr class="odd"><td><a href="https://github.com/hashicorp/nomad">hashicorp/nomad</a></td><td>Nomad 是一个集群管理器和调度器，专为微服务和批量处理工作流设计。Nomad 是分布式，高可用，可扩展到跨数据中心和区域的数千个节点。</td><td>5944</td></tr><tr class="even"><td><a href="https://github.com/chrislusf/glow">chrislusf/glow</a></td><td>Glow 是使用 Go 编写的易用分布式计算系统，是 Hadoop Map Reduce，Spark，Flint，Samza 等等的替代品。Glow 的目标是提供一个库，可以在并行线程或者分布式集群机器中进行更简单计算。</td><td>2760</td></tr><tr class="odd"><td><a href="https://github.com/chrislusf/gleam">chrislusf/gleam</a></td><td>此处是一个通过Go和LuaJIT编写的快速和可扩展的分布式map/reduce系统，很好的将Go的高并发性与Luajit高性能相结合，可独立运行或用于分布式计算。</td><td>2420</td></tr><tr class="even"><td><a href="https://github.com/purpleidea/mgmt">purpleidea/mgmt</a></td><td>mgmt 是一个分布式的，事件驱动的配置管理工具。该工具支持并行执行，其 librarification 作为新的及已存在的软件的基础管理工具。</td><td>2197</td></tr><tr class="odd"><td><a href="https://github.com/youtube/doorman">youtube/doorman</a></td><td>Doorman 是一个客户端速率限制的解决方案，客户端与共享资源进行通讯，包括数据库、gRPC 服务、RESTful API 等等可使用 Doorman 来限制对资源的调用。Doorman 使用 Go 语言开发，使用 gRPC 的通讯协议。其高可用特性需要一个分布式的锁管理器，当前支持 etcd，也可使用 Zookeeper 替代。</td><td>1521</td></tr><tr class="even"><td><a href="https://github.com/nanopack/yoke">nanopack/yoke</a></td><td>Yoke 是 Postgres 的高可用集群，具有自动切换和自动集群恢复。Postgres冗余/自动故障转移解决方案，提供一个高可用PostgreSQL集群的简单管理。</td><td>1372</td></tr><tr class="odd"><td><a href="https://github.com/huichen/zerg">huichen/zerg</a></td><td>基于docker的分布式爬虫服务</td><td>464</td></tr><tr class="even"><td><a href="https://github.com/silenceper/dcmp">silenceper/dcmp</a></td><td>DCMP是分布式配置管理平台。提供了一个etcd的管理界面，可通过界面修改配置信息，借助confd可实现配置文件的同步。</td><td>193</td></tr></tbody></table><h1 id="消息系统">消息系统</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/bitly/nsq">bitly/nsq</a></td><td>NSQ 是无中心设计、节点自动注册和发现的开源消息系统。可作为内部通讯框架的基础，易于配置和发布。</td><td>17388</td></tr><tr class="even"><td><a href="https://github.com/RichardKnop/machinery">RichardKnop/machinery</a></td><td>Machinery 是一个 Go 语言的异步任务队列和作业队列，基于分布式消息传递。类似 Python 的 Celery 框架。</td><td>3902</td></tr><tr class="odd"><td><a href="https://github.com/blackbeans/kiteq">blackbeans/kiteq</a></td><td>KiteQ 是一个基于 go + protobuff 实现的多种持久化方案的 mq 框架（消息队列）。</td><td>742</td></tr></tbody></table><h1 id="服务器管理">服务器管理</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/gravitational/teleport">gravitational/teleport</a></td><td>teleport 是 初创公司Gravitational 的一款基于ssh和https的远程管理linux 集群服务器的工具， 其特点是支持双重校验登陆；操作记录回放；session共享，便于协作排障；自动发现集群的服务器和容器</td><td>7928</td></tr><tr class="even"><td><a href="https://github.com/square/sharkey">square/sharkey</a></td><td>Sharkey 是OpenSSH管理证书使用的服务。Sharkey 分为客户端组件和服务端组件，服务端负责发布已签署的主机证书，客户端负责在机器上安装主机证书。</td><td>335</td></tr><tr class="odd"><td><a href="https://github.com/idcos/osinstall">idcos/osinstall</a></td><td>CloudBoot”(OSinstall)云装机平台，是金融云初创公司杭州云霁科技推出的一款X86服务器全自动装机工具，遵循Apache协议，完全开源免费。全自动构建物理机资源池，像创建虚拟机一样方便的安装物理机。</td><td>299</td></tr></tbody></table><h1 id="安全工具">安全工具</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/inconshreveable/ngrok">inconshreveable/ngrok</a></td><td>ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。</td><td>18297</td></tr><tr class="even"><td><a href="https://github.com/yahoo/gryffin">yahoo/gryffin</a></td><td>Gryffin 是雅虎开发的一个大规模 Web 安全扫描平台。它不是另外一个扫描器，其主要目的是为了解决两个特定的问题 —— 覆盖率和伸缩性。</td><td>2003</td></tr><tr class="odd"><td><a href="https://github.com/xiam/hyperfox">xiam/hyperfox</a></td><td>Hyperfox 是一个安全的工具用来代理和记录局域网中的 HTTP 和 HTTPS 通讯。</td><td>1310</td></tr><tr class="even"><td><a href="https://github.com/sheepbao/gomitmproxy">sheepbao/gomitmproxy</a></td><td>GomitmProxy是想用golang语言实现的mitmproxy，主要实现http代理，目前实现了http代理和https抓包功能。</td><td>277</td></tr></tbody></table><h1 id="网络工具">网络工具</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/containous/traefik">containous/traefik</a></td><td>Træfɪk 是一个新型的http反向代理、负载均衡软件，能轻易的部署微服务. 它支持多种后端 (Docker, Swarm, Mesos/Marathon, Consul, Etcd, Zookeeper, BoltDB, Rest API, file...) ,可以对配置进行自动化、动态的管理.</td><td>28027</td></tr><tr class="even"><td><a href="https://github.com/buger/gor">buger/gor</a></td><td>Gor 是用 Go 编写的简单 HTTP 流量复制工具，主要是为了从生产服务器返回流量到开发环境。使用 Gor 可以在实际的用户会话中测试代码。</td><td>12436</td></tr><tr class="odd"><td><a href="https://github.com/cyfdecyf/cow">cyfdecyf/cow</a></td><td>COW 是一个简化穿墙的 HTTP 代理服务器。它能自动检测被墙网站，仅对这些网站使用二级代理；支持多种协议：sock5、http、shadow、cow</td><td>8036</td></tr><tr class="even"><td><a href="https://github.com/google/seesaw">google/seesaw</a></td><td>Seesaw 是 Google 开源的一个基于 Linux 的负载均衡系统。Seesaw 包含基本的负载均衡特性，同时支持一些高级的功能，诸如：anycast, Direct Server Return (DSR), 支持多个 VLANs 和集中式配置。同时其设计的宗旨是易于维护。需要注意的是，尽管该项目挂靠在 Google 名下，但并非 Google 官方产品。</td><td>4978</td></tr><tr class="odd"><td><a href="https://github.com/mehrdadrad/mylg">mehrdadrad/mylg</a></td><td>myLG是一个开源的网络工具集，它包含了很多不同类型的网络诊断工具, 功能包括ping，trace， bgp， dns lookup， 端口扫描， 局域网网络发现，提供web界面, tcpdump等</td><td>2293</td></tr><tr class="even"><td><a href="https://github.com/uber/tchannel">uber/tchannel</a></td><td>TChannel 是用于 RPC 的网络复用和成帧协议。</td><td>1090</td></tr><tr class="odd"><td><a href="https://github.com/GameXG/TcpRoute2">GameXG/TcpRoute2</a></td><td>TcpRoute, TCP 层的路由器。对于 TCP 连接自动从多个线路(允许任意嵌套)、多个域名解析结果中选择最优线路。TcpRoute2 是 golang 重写的版本。通过 socks5 代理协议对外提供服务。代理功能拆分成了独立的库，详细代理url格式级选项请参见 ProxyClient，目前支持直连、socks4、socks4a、socks5、http、https、ss 代理线路</td><td>722</td></tr><tr class="even"><td><a href="https://github.com/jpillora/go-tcp-proxy">jpillora/go-tcp-proxy</a></td><td>go-tcp-proxy是一个简单的tcp代理， 可以用于tcp端口转发， 也可以用做http代理使用</td><td>379</td></tr></tbody></table><h1 id="web工具">Web工具</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/yudai/gotty">yudai/gotty</a></td><td>GoTTY 是个简单的命令行工具，可以把 CLI 工具共享成 Web 应用。GoTTY 可以把终端作为 Web 应用共享。</td><td>13682</td></tr><tr class="even"><td><a href="https://github.com/valyala/fasthttp">valyala/fasthttp</a></td><td>fasthttp 是 Go 的快速 HTTP 实现，当前在 1M 并发的生产环境使用非常成功，可以从单个服务器进行 100K qps 的持续连接。HTTP 服务器性能与 net/http 比较，fasthttp 比 net/http 快 10 倍</td><td>11804</td></tr><tr class="odd"><td><a href="https://github.com/gizak/termui">gizak/termui</a></td><td>Go语言编写的终端仪表盘</td><td>9661</td></tr><tr class="even"><td><a href="https://github.com/henrylee2cn/pholcus">henrylee2cn/pholcus</a></td><td>Pholcus（幽灵蛛）是一款纯Go语言编写的高并发、分布式、重量级爬虫软件，支持单机、服务端、客户端三种运行模式，拥有Web、GUI、命令行三种操作界面；规则简单灵活、批量任务并发、输出方式丰富（mysql/mongodb/csv/excel等）、有大量Demo共享；同时她还支持横纵向两种抓取模式，支持模拟登录和任务暂停、取消等一系列高级功能。</td><td>6297</td></tr><tr class="odd"><td><a href="https://github.com/lonelycode/tyk">lonelycode/tyk</a></td><td>Tyk 是一个开源的、轻量级的、快速可伸缩的 API 网关，支持配额和速度限制，支持认证和数据分析，支持多用户多组织，提供全 RESTful API。</td><td>5328</td></tr><tr class="even"><td><a href="https://github.com/etsy/hound">etsy/hound</a></td><td>快如闪电的代码搜索开源工具</td><td>4345</td></tr><tr class="odd"><td><a href="https://github.com/Terry-Mao/goim">Terry-Mao/goim</a></td><td>goim 是一个支持集群的im及实时推送服务（支持websocket，http和tcp协议）</td><td>4009</td></tr><tr class="even"><td><a href="https://github.com/huichen/wukong">huichen/wukong</a></td><td>WuKong 是一个全文搜索引擎。功能特性有：高效索引和搜索（1M条微博500M数据28秒索引完，1.65毫秒搜索响应时间，19K搜索QPS）；支持中文分词（使用sego分词包并发分词，速度27MB/秒）；支持计算关键词在文本中的紧邻距离（token proximity）；支持计算BM25相关度；支持自定义评分字段和评分规则；支持在线添加、删除索引；支持持久存储；可实现分布式索引和搜索等</td><td>3553</td></tr><tr class="odd"><td><a href="https://github.com/afex/hystrix-go">afex/hystrix-go</a></td><td>用来隔离远程系统调用， 第三方库调用 ，服务调用， 提供熔断机制，避免雪崩效应的库， Hystrix的go 版本。 注Hystrixs是Netflix开源的一个java库</td><td>2407</td></tr><tr class="even"><td><a href="https://github.com/tus/tusd">tus/tusd</a></td><td>实现文件上传的断点续传功能， 整套功能包含了协议实现，client， server。 client及server有多种语言的实现包括go， python， node等</td><td>1556</td></tr><tr class="odd"><td><a href="https://github.com/codetainerapp/codetainer">codetainerapp/codetainer</a></td><td>Codetainer 可以让你创建基于浏览器上的代码运行沙箱，可方便的嵌入到你的 Web 应用中。你可以把它当成是 codepicnic.com 的开源克隆) .</td><td>975</td></tr><tr class="even"><td><a href="https://github.com/ga0/netgraph">ga0/netgraph</a></td><td>netgraph 是一个 Go 语言编写的跨平台的 B/S 架构的 HTTP 抓包工具，方便在 Linux 服务器上直接查看 HTTP 包。</td><td>809</td></tr><tr class="odd"><td><a href="https://github.com/andyxning/shortme">andyxning/shortme</a></td><td>用Golang编写的URL短链接服务。</td><td>244</td></tr><tr class="even"><td><a href="https://github.com/hidu/pproxy">hidu/pproxy</a></td><td>http抓包代理程序,http协议调试工具</td><td>237</td></tr></tbody></table><h1 id="web框架">Web框架</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/gin-gonic/gin">gin-gonic/gin</a></td><td>Gin 是一个用 Go 语言开发的 Web 框架，提供类 Martini 的 API，但是性能更好。因为有了 httprouter 性能提升了 40 倍之多。</td><td>36433</td></tr><tr class="even"><td><a href="https://github.com/astaxie/beego">astaxie/beego</a></td><td>beego是一个用Go开发的应用框架，思路来自于tornado，路由设计来源于sinatra，</td><td>23525</td></tr><tr class="odd"><td><a href="https://github.com/kataras/iris">kataras/iris</a></td><td>通过Iris-Go，可以方便的帮助你来开发基于web的应用。简单来说：Iris-Go与国内大牛的BeeGo类似，但从其官方介绍的资料来看，Iris-Go的性能更优！</td><td>17776</td></tr><tr class="even"><td><a href="https://github.com/labstack/echo">labstack/echo</a></td><td>Echo 是个快速的 HTTP 路由器（零动态内存分配），也是 Go 的微型 Web 框架。</td><td>16793</td></tr><tr class="odd"><td><a href="https://github.com/codegangsta/martini">codegangsta/martini</a></td><td>Martini 是一个非常新的 Go 语言的 Web 框架，使用 Go 的 net/http 接口开发，类似 Sinatra 或者 Flask 之类的框架，你可使用自己的 DB 层、会话管理和模板。</td><td>10888</td></tr><tr class="even"><td><a href="https://github.com/hoisie/web">hoisie/web</a></td><td>web.go 跟 web.py 类似，但使用的是 Go 编程语言实现的 Web 应用开发框架。Go发布没多久该框架就诞生了，差不多是最早的Go框架。目前已经有段时间没有更新了。不过，该框架代码不多，其源码可以读一读。</td><td>3440</td></tr><tr class="odd"><td><a href="https://github.com/go-macaron/macaron">go-macaron/macaron</a></td><td>Macaron 是一个具有高生产力和模块化设计的 Go Web 框架。框架秉承了 Martini 的基本思想，并在此基础上做出高级扩展。</td><td>2952</td></tr><tr class="even"><td><a href="https://github.com/gernest/utron">gernest/utron</a></td><td>utron 是一个 Go 语言轻量级的 MVC 框架，用于快速构建可伸缩以及可靠的数据库驱动的 Web 应用。</td><td>2159</td></tr><tr class="odd"><td><a href="https://github.com/olahol/melody">olahol/melody</a></td><td>Melody 是一个 Go 语言的微型 WebSocket 框架，基于 github.com/gorilla/websocket 开发，</td><td>1771</td></tr><tr class="even"><td><a href="https://github.com/henrylee2cn/faygo">henrylee2cn/faygo</a></td><td>Faygo 是一款快速、简洁的Go Web框架，可用极少的代码开发出高性能的Web应用程序（尤其是API接口）。只需定义 struct Handler，Faygo 就能自动绑定、验证请求参数并生成在线API文档。</td><td>1503</td></tr><tr class="odd"><td><a href="https://github.com/lunny/tango">lunny/tango</a></td><td>Tango，微内核可扩展的Go语言Web框架。同时支持函数和结构体作为执行体，插件丰富。</td><td>835</td></tr><tr class="even"><td><a href="https://github.com/robfig/revel">robfig/revel</a></td><td>Revel 是 Go 语言的框架，其思路完全来自 Java 的 Play Framework。</td><td>159</td></tr><tr class="odd"><td><a href="https://github.com/go-baa/baa">go-baa/baa</a></td><td>Baa 一个简单高效的Go web开发框架。主要有路由、中间件，依赖注入和HTTP上下文构成。</td><td>141</td></tr></tbody></table><h1 id="区块链技术">区块链技术</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/ethereum/go-ethereum">ethereum/go-ethereum</a></td><td>go-ethereum客户端通常被称为geth，它是个命令行界面，执行在Go上实现的完整以太坊节点。通过安装和运行geth，可以参与到以太坊前台实时网络并进行以下操作：a. 挖掘真的以太币 b. 在不同地址间转移资金 c .创建合约，发送交易 d . 探索区块历史 e.很多其他功能</td><td>25587</td></tr><tr class="even"><td><a href="https://github.com/hyperledger/fabric">hyperledger/fabric</a></td><td>Fabric是一个开源区块链实现，开发环境建立在VirtualBox虚拟机上，部署环境可以自建网络，也可以直接部署在BlueMix上，部署方式可传统可docker化，共识达成算法插件化，支持用Go和JavaScript开发智能合约，尤以企业级的安全机制和membership机制为特色。你要是不知道这些术语什么意思，就记住一点，Fabric之于区块链，很可能正如Hadoop之于大数据。</td><td>9967</td></tr><tr class="odd"><td><a href="https://github.com/chain/chain">chain/chain</a></td><td><strong>金融领域的区块链项目 </strong>. Chain是由一家刚成立两年的美国创业公司Chain推出，是一个企业级的区块链平台架构，可以让机构构造从零开始更好的金融服务。Chain 开放标准在以下方面实现突破：• 全新的共识模型在不到一秒的时间里实现交易的最终完成，即便是交易量非常大也能支持;• 私密解决方案对区块链数据进行加密，并让相关对手方和监管者进行有选择的读取;• 智能合约框架和虚拟机支持简单的规则执行，以及进行键值存储的图灵完整程序; • 可伸缩的数据模型可以为网络参与者降低运行负荷; • 丰富的元数据层可支持满足KYC（了解你的客户）和 AML（反洗钱）要求</td><td>1671</td></tr></tbody></table><h1 id="其它">其它</h1><table><thead><tr class="header"><th>项目</th><th>简介</th><th>Star数</th></tr></thead><tbody><tr class="odd"><td><a href="https://github.com/gohugoio/hugo">gohugoio/hugo</a></td><td>Hugo是由Go语言实现的静态网站生成器；简单、易用、高效、易扩展、快速部署；相比于Hexo、Jekyll，hugo的优势是生成速度极快。</td><td>42615</td></tr><tr class="even"><td><a href="https://github.com/mattermost/platform">mattermost/platform</a></td><td>mattermost 是一个 Slack 的开源替代品。Mattermost 采用 Go 语言开发，这是一个开源的团队通讯服务。为团队带来跨 PC 和移动设备的消息、文件分享，提供归档和搜索功能。</td><td>17854</td></tr><tr class="odd"><td><a href="https://github.com/grpc/grpc-go">grpc/grpc-go</a></td><td>GRPC 是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持.GRPC 基于 HTTP/2 标准设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</td><td>10893</td></tr><tr class="even"><td><a href="https://github.com/Netflix/chaosmonkey">Netflix/chaosmonkey</a></td><td>Chaos Monkey是netflix公司开源的一个用于服务可用性测试的工具，通过有计划的在生产系统制造真实的故障（如cpu负载高， 内存溢出，磁盘写满，服务器宕机等）来检测系统的可用性。</td><td>8257</td></tr><tr class="odd"><td><a href="https://github.com/apex/apex">apex/apex</a></td><td>管理，部署aws lambda函数的工具， 支持用go语言编写lambda函数（注：目前aws官方不支持用go语言编写lambda函数，但是apex却可以变相支持）</td><td>8004</td></tr><tr class="even"><td><a href="https://github.com/rakyll/hey">rakyll/hey</a></td><td>Boom 是 google 一女工程师使用 Go 语言开发的类似 apache ab 的性能测试工具。相比 ab，boom跨平台性更好，而且更容易安装。</td><td>7859</td></tr><tr class="odd"><td><a href="https://github.com/visualfc/liteide">visualfc/liteide</a></td><td>LiteIDE是一款开源、跨平台的轻量级Go语言集成开发环境（IDE）。</td><td>5925</td></tr><tr class="even"><td><a href="https://github.com/yinghuocho/firefly-proxy">yinghuocho/firefly-proxy</a></td><td>穿墙工具。 GFW梯子。 提供客户端和服务端。支持多个平台， 包括linux， macos， windows ，android</td><td>4964</td></tr><tr class="odd"><td><a href="https://github.com/qor/qor">qor/qor</a></td><td>Qor 是基于 Golang 开发的的CMS 一系列工具库，基于 Qor可以快速搭建网站的后台管理系统。Qor 的工作库包含：1，后台管理：可以对数据库进去 CURD 管理，支持一对一，一对多，多对多关联关系维护等等； 2，支持上传图片到云以及 filesystem，resize、crop 图片等等 ；3，Publish 发布系统，可以修改数据，并且经过检查后，再发布到正式环境中； 4，状态机，可以用于开发工作流的系统； 5，I18n，翻译，可以通过在 WEB 界面翻译，并将翻译保存到数据库中； 6，L10n，本地化，不同于翻译，他可以针对某个地区来对内容，或者数据结构进行本地化。7，Roles，权限管理； 8，Exchange，通过 Excel，CSV 导入导出数据； 9，Worker，后台任务管理，可用于跑定时任务等等</td><td>4325</td></tr><tr class="even"><td><a href="https://github.com/golang/mobile">golang/mobile</a></td><td>Gomobile是一个应用于iOS和Android的优秀跨平台开发库，为开发者提供用于创建Android和iOS 移动平台代码的工具。</td><td>4074</td></tr><tr class="odd"><td><a href="https://github.com/getlantern/lantern">getlantern/lantern</a></td><td>Lantern是一个点对点科学上网软件。</td><td>2469</td></tr><tr class="even"><td><a href="https://github.com/vzex/dog-tunnel">vzex/dog-tunnel</a></td><td>狗洞是一个高速的 P2P 端口映射工具，同时支持Socks5代理。 0.5版后开始开源，UDP底层基于开源库KCP重写，效率大大提高，在恶劣环境下优势明显。 同时提供非P2P版本（Lite版本），两端连接过程完全不依赖中间服务器，支持加密和登陆认证，自动重连，但是需要人为确保两端能正常连通（否则请使用默认的P2P版本）</td><td>1782</td></tr><tr class="odd"><td><a href="https://github.com/prasmussen/glot">prasmussen/glot</a></td><td>glot 是可以可以在线运行各种编程语言代码片段的平台，项目采用 Haskell Script 、Go、Erlang 和 Shell 开发，运行环境基于 Docker 容器进行。</td><td>1268</td></tr><tr class="even"><td><a href="https://github.com/yanyiwu/gojieba">yanyiwu/gojieba</a></td><td>"结巴"中文分词的Golang语言版本。</td><td>1014</td></tr><tr class="odd"><td><a href="https://github.com/mikespook/gorbac">mikespook/gorbac</a></td><td>goRBAC 为 Go 语言应用提供了轻量级的基于角色的访问控制。</td><td>998</td></tr><tr class="even"><td><a href="https://github.com/mailslurper/mailslurper">mailslurper/mailslurper</a></td><td>MailSlurper 是一个便携的 SMTP 邮件服务器，对本地和团队应用开发来说非常有用。MailSlurper 体积小运行快速，支持 SQLite, MSSQL 和 MySQL. 数据库。</td><td>691</td></tr><tr class="odd"><td><a href="https://github.com/xjdrew/kone">xjdrew/kone</a></td><td>可用于家庭或者企业网络的透明代理，可用来翻墙等</td><td>621</td></tr><tr class="even"><td><a href="https://github.com/codeskyblue/gosuv">codeskyblue/gosuv</a></td><td>进程管理， 类似于python的supervisord ， 提供了web管理界面</td><td>591</td></tr><tr class="odd"><td><a href="https://github.com/oikomi/FishChatServer2">oikomi/FishChatServer2</a></td><td>FishChat（鱼传——鱼传尺素）分布式可伸缩 IM 服务器，是一款纯 golang 编写优秀的即时通讯软件(IM), 它集合了市面上已有产品的优点, 并具备 智能硬件网关管理(学习QQ物联思想, 构思中)。</td><td>466</td></tr><tr class="even"><td><a href="https://github.com/rafael-santiago/cherry">rafael-santiago/cherry</a></td><td>Cherry 是一个使用 Go 语言开发的 Web 聊天引擎。</td><td>215</td></tr><tr class="odd"><td><a href="https://github.com/robustirc/robustirc">robustirc/robustirc</a></td><td>RobustIRC 是不会有网络中断情况的 IRC。RobustIRC 主要特性：服务器不可用的时候不会有网络中断； 可以使用标准 IRC 客户端； 健壮，可以很好处理客户端和网络的连接问题</td><td>126</td></tr></tbody></table><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】Go资源大全中文版</title>
    <link href="/2022/02/10/golang-awesome/"/>
    <url>/2022/02/10/golang-awesome/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><a href="https://github.com/avelino/awesome-Go">awesome-go</a> 就是 <code>avelino</code> 发起维护的 Go 资源列表，内容包括：音频和音乐库、命令行工具、服务端应用、流处理、持续集成、数据库、机器学习、NLP、物联网、中间件、文本处理、安全、机器人技术等。<span id="more"></span></p></blockquote><h4 id="本项目的参与者">本项目的参与者</h4><ul><li><p>维护者：<code>开源前哨</code>和<code>Go开发大全</code>微信公号团队。 传送门：<a href="https://www.zhihu.com/column/c_1317124962785062912" class="uri">https://www.zhihu.com/column/c_1317124962785062912</a></p></li><li><p>贡献者： <a href="https://github.com/xiaokugua250">xiaokugua250</a>、<a href="https://github.com/hanxiaomax">艾凌风</a>、<a href="https://github.com/Allenxuxu">Allenxuxu</a>、<a href="https://github.com/sanrentai">sanrentai</a>、<a href="https://github.com/hawkwzh">wu.zhenhuan</a>、<a href="https://github.com/tangyouhua">tangyouhua</a>、<a href="https://github.com/roseduan">roseduan</a>、You</p></li></ul><h1 id="资源列表">资源列表</h1><ul><li><a href="#目录">目录</a><ul><li><a href="#音频和音乐库">音频和音乐库</a></li><li><a href="#认证和oauth授权">认证和OAuth授权</a></li><li><a href="#机器人相关">机器人相关</a></li><li><a href="#命令行工具">命令行工具</a><ul><li><a href="#标准-cli">标准 CLI</a></li></ul></li><li><a href="#高级控制台ui">高级控制台UI</a></li><li><a href="#配置管理">配置管理</a></li><li><a href="#持续集成">持续集成</a></li><li><a href="#css预处理">css预处理</a></li><li><a href="#数据结构">数据结构</a></li><li><a href="#数据库">数据库</a><ul><li><a href="#数据库工具">数据库工具</a></li><li><a href="#sql-查询语句构建库">SQL 查询语句构建库</a></li></ul></li><li><a href="#数据库驱动">数据库驱动</a></li><li><a href="#日期和时间">日期和时间</a></li><li><a href="#分布式系统">分布式系统</a></li><li><a href="#动态dns">动态DNS</a></li><li><a href="#邮件库">邮件库</a></li><li><a href="#脚本语言与嵌入式编程">脚本语言与嵌入式编程</a></li><li><a href="#错误处理">错误处理</a></li><li><a href="#文件处理">文件处理</a></li><li><a href="#金融领域相关库">金融领域相关库</a></li><li><a href="#表单">表单</a></li><li><a href="#函数式编程">函数式编程</a></li><li><a href="#游戏开发">游戏开发</a></li><li><a href="#代码生成与泛型">代码生成与泛型</a></li><li><a href="#位置信息与地理geo处理库">位置信息与地理GEO处理库</a></li><li><a href="#goroutines">Goroutines</a></li><li><a href="#gui">GUI</a></li><li><a href="#硬件">硬件</a></li><li><a href="#images-图像处理">Images 图像处理</a></li><li><a href="#物联网iot">物联网(IOT)</a></li><li><a href="#作业调度">作业调度</a></li><li><a href="#json">JSON</a></li><li><a href="#logging-日志库">Logging 日志库</a></li><li><a href="#机器学习">机器学习</a></li><li><a href="#microsoft-office">Microsoft Office</a><ul><li><a href="#excel">EXCEL</a></li></ul></li><li><a href="#其他杂项">其他杂项</a><ul><li><a href="#依赖性注入">依赖性注入</a></li><li><a href="#项目结构">项目结构</a></li><li><a href="#字符串处理">字符串处理</a></li><li><a href="#暂未分类">暂未分类</a></li></ul></li><li><a href="#自然语言处理">自然语言处理</a></li><li><a href="#网络相关库">网络相关库</a><ul><li><a href="#http-client">Http Client</a></li><li><a href="#opengl">OpenGL</a></li><li><a href="#orm">ORM</a></li></ul></li><li><a href="#go语言包管理">Go语言包管理</a><ul><li><a href="#查询语句">查询语句</a></li></ul></li><li><a href="#资源嵌入">资源嵌入</a></li><li><a href="#数据分析与数据科学">数据分析与数据科学</a></li><li><a href="#安全领域相关库">安全领域相关库</a></li><li><a href="#序列化">序列化</a></li><li><a href="#服务端应用">服务端应用</a></li><li><a href="#流处理">流处理</a></li><li><a href="#模板引擎">模板引擎</a></li><li><a href="#测试相关">测试相关</a></li><li><a href="#文本处理">文本处理</a></li><li><a href="#第三方api">第三方API</a></li><li><a href="#工具库">工具库</a></li><li><a href="#uuid">UUID</a></li><li><a href="#校验库">校验库</a><ul><li><a href="#版本控制">版本控制</a></li></ul></li><li><a href="#视频">视频</a></li><li><a href="#web框架">web框架</a></li><li><a href="#中间件">中间件</a><ul><li><a href="#中间件-1">中间件</a></li><li><a href="#创建http中间件的代码库">创建http中间件的代码库</a></li></ul></li><li><a href="#路由">路由</a></li><li><a href="#webassembly">WebAssembly</a></li><li><a href="#windows">Windows</a></li><li><a href="#xml">XML</a></li><li><a href="#相关工具">相关工具</a><ul><li><a href="#代码分析">代码分析</a></li></ul></li><li><a href="#编辑器插件">编辑器插件</a></li><li><a href="#go--代码生成工具">Go 代码生成工具</a></li><li><a href="#go工具">Go工具</a></li><li><a href="#软件包">软件包</a><ul><li><a href="#devops-工具">devops 工具</a></li><li><a href="#其他软件库和软件包">其他软件库和软件包</a></li></ul></li></ul></li></ul><h2 id="音频和音乐库">音频和音乐库</h2><ul><li><a href="https://github.com/mewkiz/flac">flac</a> : 原生<code>Go</code>语言编写的FLAC数据流编码与解码器。</li><li><a href="https://github.com/Comcast/gaad">gaad</a> : 原生<code>Go</code>语言编写的AAC比特流解析器。</li><li><a href="https://github.com/krig/go-sox">go-sox</a> : <code>libsox</code>库的<code>go</code>语言封装</li><li><a href="https://github.com/DylanMeeus/GoAudio">GoAudio</a> : 原生<code>Go</code>语言编写的音频处理库。</li><li><a href="https://github.com/dh1tw/gosamplerate">gosamplerate</a> : <code>libsamplerate</code>库的<code>Go</code>语言封装</li><li><a href="https://github.com/bogem/id3v2">id3v2</a> :<code>go</code>语言开发的<code>ID3</code>编码和解码库,具有快速和稳定的特性。</li><li><a href="https://github.com/gen2brain/malgo">malgo</a> :<code>go</code>语言开发的迷你音频库。</li><li><a href="https://github.com/tosone/minimp3">minimp3</a> : 轻量级<code>MP3</code>解码库。</li><li><a href="https://github.com/go-mix/mix">mix</a> : 针对音乐类应用程序的基于序列的<code>Go</code>原生音频混音器。</li><li><a href="https://github.com/tcolgate/mp3">mp3</a> : 原生Go语言的mp3解码器.</li><li><a href="https://github.com/go-music-theory/music-theory">music-theory</a> : 基于<code>go</code>语言音乐理论模型。</li><li><a href="https://github.com/hajimehoshi/oto">Oto</a> : 可用于在多个平台上播放音频的底层库</li><li><a href="https://github.com/gordonklaus/portaudio">PortAudio</a> : 音频<code>I/O</code>库<code>PortAudio</code>的<code>go</code>语言封装</li><li><a href="https://github.com/rakyll/portmidi">portmidi</a> : 音频<code>I/O</code>库<code>PortMidi</code>的<code>go</code>语言封装</li><li><a href="https://github.com/mccoyst/vorbis">vorbis</a> : <code>Go</code>语言版<code>Vorbis</code>解码器（使用到<code>CGO</code>,但并不依赖与cgo）</li><li><a href="https://github.com/mdlayher/waveform">waveform</a> : 基于音频流来生成音频波形图的<code>go</code>语言库</li></ul><hr><h2 id="认证和oauth授权">认证和OAuth授权</h2><ul><li><a href="https://github.com/volatiletech/authboss">authboss</a> : 针对<code>web</code>应用的模块化认证系统,尽量去除模版代码和硬编码来以灵活可配置的方式来嵌入到web应用程序中,从而避免重复编码和重复配置。</li><li><a href="https://github.com/hako/branca">branca</a> : <code>Branca Tokens</code>的<code>Golang</code>实现。</li><li><a href="https://github.com/hsluoyz/casbin">casbin</a> : 支持<code>ACL</code>、<code>RBAC</code>、<code>ABAC</code>等访问控制模型的授权与认证库。</li><li><a href="https://github.com/mengzhuo/cookiestxt">cookiestxt</a> : 支持<code>cookies.txt</code> 文件格式的解析器。</li><li><a href="https://github.com/dimuska139/go-email-normalizer">go-email-normalizer</a> : 用于支持电子邮件地址的规范表示的<code>Golang</code>库,。</li><li><a href="https://github.com/shaj13/go-guardian">go-guardian</a> : Go-Guardian支持以简洁又清晰的方式来进行<code>API</code>认证和<code>web</code>认证,认证模型支持<code>LDAP</code>、<code>Basic</code>、<code>Bearer token</code>和基于证书的认证</li><li><a href="https://github.com/square/go-jose">go-jose</a> : 相当完整地实现了JOSE工作组的<code>JSON Web Token</code>、<code>JSON Web Signatures</code>和<code>JSON Web Encryption</code>规范。</li><li><a href="https://github.com/RichardKnop/go-oauth2-server">go-oauth2-server</a> : 不需要其他依赖的、符合规范的、用<code>Golang</code> 编写的<code>OAuth2</code> 服务器。</li><li><a href="https://github.com/dghubble/gologin">gologin</a> : 适用于OAuth1和OAuth2多身份登录认证的实现方案</li><li><a href="https://github.com/mikespook/gorbac">gorbac</a> : Golang中一个轻量级的基于角色的访问控制<code>（RBAC）</code>实现。</li><li><a href="https://github.com/markbates/goth">goth</a> : 以简单、干净、常用的方式来使用<code>OAuth</code>和<code>OAuth2</code>。支持多种身份认证。</li><li><a href="https://github.com/goji/httpauth">httpauth</a> : <code>HTTP</code>认证中间件</li><li><a href="https://github.com/abraithwaite/jeff">jeff</a> : 简单、灵活、安全、习惯性的<code>Web</code>会话管理,支持可插拔的后端。</li><li><a href="https://github.com/robbert229/jwt">jwt</a> : 干净且易于使用的JSON网络令牌<code>JWT</code>的实现。</li><li><a href="https://github.com/pascaldekloe/jwt">jwt</a> : 轻量级<code>JSON</code>网络令牌（<code>JWT</code>）库。</li><li><a href="https://github.com/cristalhq/jwt">jwt</a> : 针对go语言的 安全、简单、快速的JSON Web Tokens 。</li><li><a href="https://github.com/adam-hanna/jwt-auth">jwt-auth</a> : 用于<code>Golang http</code>服务器的<code>JWT</code>中间件,有许多配置选项。</li><li><a href="https://github.com/dgrijalva/jwt-go">jwt-go</a> : -<code>JSON Web Tokens</code>（JWT）的Golang实现。</li><li><a href="https://github.com/tarent/loginsrv">loginsrv</a> : JWT登录微服务,具有可插拔的后端,如<code>OAuth2 (Github)</code>、<code>htpasswd</code>、<code>OSIAM</code>。</li><li><a href="https://github.com/golang/oauth2">oauth2</a> : 继承自<code>goauth2</code>。实现了JWT,Google APIs,GCE,GAE的通用<code>OAuth 2.0</code>授权包。</li><li><a href="https://github.com/openshift/osin">osin</a> :<code>Go</code>语言<code>OAuth2</code> 服务器库</li><li><a href="https://github.com/jltorresm/otpgo">otpgo</a> : 基于时间的一次性密码<code>TOTP</code>和基于<code>HMAC</code> 的一次性密码<code>HOTP</code>库。</li><li><a href="https://github.com/o1egl/paseto">paseto</a> : 平台无关的安全令牌<code>（PASETO)</code>的<code>Golang</code>实现。</li><li><a href="https://github.com/xyproto/permissions2">permissions2</a> : 用于跟踪用户、登录状态和权限的库,依赖安全<code>cookies</code>和<code>bcrypt</code>。</li><li><a href="https://github.com/zpatrick/rbac">rbac</a> : 用于Go应用程序的极简<code>RBAC</code>库。</li><li><a href="https://github.com/SonicRoshan/scope">scope</a> : 在<code>Go</code>中轻松管理<code>OAuth2</code>作用域。</li><li><a href="https://github.com/alexedwards/scs">scs</a> : <code>HTTP</code>服务器的会话管理器。</li><li><a href="https://github.com/chmike/securecookie">securecookie</a> : 高效的安全<code>cookie</code>编码/解码库。</li><li><a href="https://github.com/icza/session">session</a> : <code>Go</code> 语言会话管理(支持<code>Google App Engine - GAE</code>)</li><li><a href="https://github.com/f0rmiga/sessiongate-go">sessiongate-go</a> : 使用<code>SessionGate Redis</code>模块进行<code>Go</code>会话管理。</li><li><a href="https://github.com/adam-hanna/sessions">sessions</a> : 为<code>Go</code>语言<code>HTTP</code> 服务器开发的非常简单的、高性能的、高可定制的会话服务</li><li><a href="https://github.com/swithek/sessionup">sessionup</a> : 简单而有效的<code>HTTP</code>会话管理和标识库。</li><li><a href="https://github.com/brianvoe/sjwt">sjwt</a> : - 简单的<code>jwt</code>生成器和解析器。</li></ul><hr><h2 id="机器人相关">机器人相关</h2><p><code>构建和使用机器人的库</code></p><ul><li><a href="https://github.com/ewohltman/ephemeral-roles">ephemeral-roles</a> : 根据语音频道成员是否出现来管理临时角色的机器人。</li><li><a href="https://github.com/go-chat-bot/bot">go-chat-bot</a> : 用<code>Go</code> 编写的<code>IRC</code>、<code>Slack</code> 和<code>Telegram</code>机器人。</li><li><a href="https://joe-bot.net">go-joe</a> : 受 Hubot 启发,用 Go 编写的通用型机器人库。</li><li><a href="https://github.com/oklahomer/go-sarah">go-sarah</a> : 为聊天服务如<code>LINE</code>、<code>Slack</code>、<code>Gitter</code> 等构建机器人的框架。</li><li><a href="https://github.com/olebedev/go-tgbot">go-tgbot</a> : 由swagger文件、基于会话的路由器和中间件生成的纯<code>Golang</code>实现的<code>Telegram</code>机器人API封装。</li><li><a href="https://github.com/gempir/go-twitch-irc">go-twitch-irc</a> : 用于编写<code>twitch.tv</code>聊天机器人的库。</li><li><a href="https://github.com/saniales/golang-crypto-trading-bot">Golang CryptoTrading Bot</a> :<code>golang</code>实现的基于控制台的加密货币交易所交易机器人库</li><li><a href="https://github.com/nikepan/govkbot">govkbot</a> : 简单的<code>Go VK</code>机器人库。</li><li><a href="https://github.com/sbstjn/hanu">hanu</a> : 用于编写<code>Slack</code>机器人的框架。</li><li><a href="https://github.com/stellar/kelp">Kelp</a> : <code>Stellar DEX</code>的官方交易机器人。开箱即用,用Golang编写,兼容中心化交易所和自定义交易策略。</li><li><a href="https://github.com/zhulik/margelet">margelet</a> : 用于构建<code>Telegram</code>机器人的框架。</li><li><a href="https://github.com/onrik/micha">micha</a> : 封装<code>Telegram</code>机器人api的<code>Go</code>库。</li><li><a href="https://github.com/olivia-ai/olivia">olivia</a> : 一个用人工神经网络构建的聊天机器人。</li><li><a href="https://github.com/shomali11/slacker">slacker</a> : 用于创建<code>Slack</code>机器人的简单易用框架。</li><li><a href="https://github.com/alexandre-normand/slackscot">slackscot</a> : 构建<code>Slack</code>机器人的框架。</li><li><a href="https://github.com/yanzay/tbot">tbot</a> : <code>Telegram</code>机器人服务器,其API类似于<code>net/http</code>。</li><li><a href="https://github.com/tucnak/telebot">telebot</a> : 用<code>Go</code>编写的<code>Telegram</code>机器人框架。</li><li><a href="https://github.com/Syfaro/telegram-bot-api">telegram-bot-api</a> : 简单干净的<code>Telegram</code>机器人客户端。</li><li><a href="https://github.com/kyleterry/tenyks">Tenyks</a> : 使用<code>Redis</code> 和<code>JSON</code>进行消息传递的面向服务的<code>IRC</code>机器人。</li></ul><hr><h2 id="命令行工具">命令行工具</h2><h3 id="标准-cli">标准 CLI</h3><p><code>用于创建一个标准命令行应用程序的库</code></p><ul><li><a href="https://github.com/gopinath-langote/1build">1build</a> : 管理项目专用命令的命令行工具。</li><li><a href="https://github.com/akamensky/argparse">argparse</a> : 受<code>Python</code>的<code>argparse</code>模块启发的命令行参数解析器。</li><li><a href="https://github.com/cosiner/argv">argv</a> : 用于分隔使用<code>bash</code>的语法的命令行字符串并将其作为参数的<code>Go</code>语言库,</li><li><a href="https://github.com/mkideal/cli">cli</a> : 功能强大,使用简单的命令行软件库,基于<code>Golang</code>结构体<code>tag</code>实现</li><li><a href="https://github.com/teris-io/cli">cli</a> : 一个功能丰富、易于使用的命令行工具包</li><li><a href="http://github.com/tucnak/climax">climax</a> : 可以显示“人脸”的命令替代库。</li><li><a href="https://github.com/leaanthony/clir">clîr</a> : 一个简单而清晰的<code>CLI</code>库,不需要其他依赖。</li><li><a href="https://github.com/posener/cmd">cmd</a> : 扩展了标准<code>flag</code>包,具有支持子命令的特性</li><li><a href="https://github.com/hedzr/cmdr">cmdr</a> : 一个<code>POSIX/GNU</code>风格,类似于<code>getopt</code>的命令行UI的Go库。</li><li><a href="https://github.com/spf13/cobra">cobra</a> : 一个现代化的命令行。</li><li><a href="https://github.com/jaffee/commandeer">commandeer</a> : 开发友好的<code>CLI</code>应用程序：基于结构字段和标签设置标志参数、默认值和用法。</li><li><a href="https://github.com/posener/complete">complete</a> : 使用 <code>Go</code>语言编写的<code>bash</code> 命令补全工具以及<code>Go</code>命令补全工具</li><li><a href="https://github.com/dnote/dnote">Dnote</a> : 支持多设备同步的命令行笔记工具。</li><li><a href="https://github.com/codingconcepts/env">env</a> : 基于<code>tag</code>的结构体环境配置。</li><li><a href="https://github.com/cosiner/flag">flag</a> : 简单而强大的<code>Go</code>命令行选项解析库,支持子命令。</li><li><a href="https://github.com/integrii/flaggy">flaggy</a> : 功能强大的<code>flag</code>包,具有出色的子命令支持。</li><li><a href="https://github.com/sgreben/flagvar">flagvar</a> : <code>Go</code>标准标志包的标志参数类型集合。</li><li><a href="https://github.com/alexflint/go-arg">go-arg</a> : <code>Go</code>中基于结构体的参数解析。</li><li><a href="https://github.com/yitsushi/go-commander">go-commander</a> : 用于简化<code>CLI</code>工作流程的 <code>Go</code> 库。</li><li><a href="https://github.com/jessevdk/go-flags">go-flags</a> : <code>GO</code>命令行选项解析器。</li><li><a href="https://github.com/DavidGamba/go-getoptions">go-getoptions</a> : <code>Go</code> 选项解析器,灵感来自 <code>Perl</code>中灵活性的 <code>GetOpt::Long</code>。</li><li><a href="https://github.com/devfacet/gocmd">gocmd</a> : 用于构建命令行应用程序的 <code>Go</code>库。</li><li><a href="https://github.com/hidevopsio/hiboot/tree/master/pkg/app/cli">hiboot cli</a> : 具有自动配置和依赖注入功能的 cli 应用程序框架。</li><li><a href="https://github.com/liujianping/job">job</a> : 将你的短期命令转化为长期作业。</li><li><a href="https://github.com/alecthomas/kingpin">kingpin</a> : 支持子命令的命令行和标志位解析器。</li><li><a href="https://github.com/peterh/liner">liner</a> : 命令行文本解析器</li><li><a href="https://github.com/mitchellh/cli">mitchellh/cli</a> : 用于实现命令行交互的 <code>Go</code>语言库</li><li><a href="https://github.com/jawher/mow.cli">mow.cli</a> : 用于构建命令行程序的工具库,支持更加精准的标记及选项解析和验证</li><li><a href="https://github.com/nanovms/ops">ops</a> : <code>Unikernel</code>编辑器和生成器</li><li><a href="https://github.com/spf13/pflag">pflag</a> : Go flag软件包的替代品, 实现了<code>POSIX/GNU</code>风格的<code>flags</code>.</li><li><a href="https://github.com/Zaba505/sand">sand</a> : 用于创建解释器等工具的简单API库。</li><li><a href="https://github.com/octago/sflags">sflags</a> : 基于结构体的 <code>flag</code>生成器,支持<code>flag, urfave/cli, pflag, cobra, kingpin</code>等其他库</li><li><a href="https://github.com/antham/strumt">strumt</a> : 用于创建提示链的库。</li><li><a href="https://github.com/liujianping/ts">ts</a> : 时间戳转换和比较工具。</li><li><a href="https://github.com/ukautz/clif">ukautz/clif</a> : 一个小型命令行程序开发框架</li><li><a href="https://github.com/urfave/cli">urfave/cli</a> : 简单、快速、有趣的、用于构建 Go 语言命令行程序的软件包。</li><li><a href="https://github.com/dixonwille/wlog">wlog</a> : 简单的日志接口,具有跨平台和并发支持等特性</li><li><a href="https://github.com/dixonwille/wmenu">wmenu</a> : 为命令行程序提供简单的菜单结构选项来提供给用户来进行选择</li></ul><hr><h2 id="高级控制台ui">高级控制台UI</h2><p><code>用于构建控制台应用程序和控制台用户界面的库.</code></p><ul><li><a href="https://github.com/guptarohit/asciigraph">asciigraph</a> : 没有其他依赖的可以在命令行应用中制作轻量级的<code>ASCII</code>行图┈┈╭╯的go语言工具包</li><li><a href="https://github.com/logrusorgru/aurora">aurora</a> : <code>ANSI</code> 终端颜色,支持 <code>fmt.Printf/Sprintf</code></li><li><a href="https://github.com/mingrammer/cfmt">cfmt</a> : 受<code>bootstrap</code>颜色类启发的上下文<code>fmt</code>。</li><li><a href="https://github.com/i582/cfmt">cfmt</a> : 简单方便的格式化风格化输出，与<code>fmt</code>库完全兼容</li><li><a href="https://github.com/ttacon/chalk">chalk</a> : 符合直觉的用于美化命令行输出的库</li><li><a href="https://github.com/TreyBastian/colourize">colourize</a> : 支持终端输出带色彩的<code>ANSI</code>字符。</li><li><a href="https://github.com/wzshiming/ctc">ctc</a> : 非侵入式的跨平台终端颜色库，不需要修改打印方法</li><li><a href="https://github.com/workanator/go-ataman">go-ataman</a> : 用于在终端中渲染<code>ANSI</code> 彩色文本模板的<code>Go</code> 库。</li><li><a href="https://github.com/mattn/go-colorable">go-colorable</a> : <code>Windows</code>上使用的可以输出彩色文本的库</li><li><a href="https://github.com/daviddengcn/go-colortext">go-colortext</a> : 用于在终端进行多彩文字输出的库<br></li><li><a href="https://github.com/mattn/go-isatty">go-isatty</a> : <code>go</code>语言版本的<code>isatty</code></li><li><a href="https://github.com/c-bata/go-prompt">go-prompt</a> : 受 <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> 的启发，用于构建强大的交互式提示符的go语言库</li><li><a href="https://github.com/jroimartin/gocui">gocui</a> : 极简的控制台用户界面创建库.</li><li><a href="https://github.com/labstack/gommon/tree/master/color">gommon/color</a> ：多样的命令行文本<br></li><li><a href="https://github.com/gookit/color">gookit/color</a> : 格式化终端文本。</li><li><a href="https://github.com/vbauerster/mpb">mpb</a> : 为命令行提供多个进度条的工具</li><li><a href="https://github.com/schollz/progressbar">progressbar</a> : 适用于各种操作系统的,线程安全进度条管理库。</li><li><a href="https://github.com/pterm/pterm">pterm</a> : 在每个平台上美化控制台输出的库,有许多可组合的组件。</li><li><a href="https://github.com/alexeyco/simpletable">simpletable</a> : 在终端中用<code>Go</code>实现简单的表格。</li><li><a href="https://github.com/cheynewallace/tabby">tabby</a> : 超级简单的<code>Golang</code>表格的库。</li><li><a href="https://github.com/tomlazar/table">table</a> : 基于终端颜色的表格库。</li><li><a href="https://github.com/InVisionApp/tabular">tabular</a> : 从命令行工具中打印<code>ASCII</code>表格,而不需要向<code>API</code>传递大量数据集。</li><li><a href="https://github.com/nsf/termbox-go">termbox-go</a> : Termbox是一个用于创建跨平台文本界面的库。</li><li><a href="https://github.com/mum4k/termdash">termdash</a> : 基于 <code>termbox-go</code>的 <code>Go</code> 终端仪表盘,灵感来自 <a href="https://github.com/gizak/termui">termui</a> 。<br></li><li><a href="https://github.com/gizak/termui">termui</a> : 基于 <code>termbox-go</code> 的 <code>Go</code> 终端仪表盘,灵感来源于<a href="https://github.com/yaronn/blessed-contrib">blessed-contrib</a> 。</li><li><a href="https://github.com/gosuri/uilive">uilive</a> : 用于实时更新终端输出的库</li><li><a href="https://github.com/gosuri/uiprogress">uiprogress</a> ：用于渲染进度条的库</li><li><a href="https://github.com/gosuri/uitable">uitable</a> : 用于改善命令行中，表格数据可读性的库</li><li><a href="https://github.com/theckman/yacspin">yacspin</a> : 用于终端的<code>CLi Spinner</code> 工具包。</li></ul><hr><h2 id="配置管理">配置管理</h2><p><code>配置解析库</code></p><ul><li><a href="https://github.com/cristalhq/aconfig">aconfig</a> : 简单、有用的配置加载器。</li><li><a href="https://github.com/ilyakaznacheev/cleanenv">cleanenv</a> : 简约的配置读取器(从文件、<code>ENV</code>以及任何你想要的地方读取)。</li><li><a href="https://github.com/golobby/config">config</a> : 一个轻量级但功能强大的<code>Go</code>项目配置包。</li><li><a href="https://github.com/JeremyLoy/config">config</a> : 云端本地应用配置。只需两行就可以将ENV绑定到结构上</li><li><a href="https://github.com/olebedev/config">config</a> : 具有环境变量和标志解析功能的<code>JSON</code>或<code>YAML</code>配置包装器。</li><li><a href="https://github.com/BoRuDar/configuration">configuration</a> : 用于从环境变量、文件、标志和 "默认 "标签初始化配置结构的库。</li><li><a href="https://github.com/paked/configure">configure</a> : 可以通过多种途径进行配置,包括 <code>JSON</code> 标记位以及环境变量</li><li><a href="https://github.com/sherifabdlnaby/configuro">configuro</a> : 来自<code>ENV</code>和<code>Files</code>的意见性配置加载和验证框架,专注于<code>12-Factor</code>兼容应用程序。</li><li><a href="https://github.com/heetch/confita">confita</a> : 从多个后端级联加载配置到一个结构中。</li><li><a href="https://github.com/the4thamigo-uk/conflate">conflate</a> : 从任意URL合并多个<code>JSON/YAML/TOML</code>文件的库/工具,对<code>JSON</code>模式进行验证,并应用模式中定义的默认值。</li><li><a href="https://github.com/caarlos0/env">env</a> : 解析环境变量为<code>Go</code> 语言结构体</li><li><a href="https://github.com/tomazk/envcfg">envcfg</a> : 解析环境变量为 <code>Go</code> 语言结构体</li><li><a href="https://github.com/ian-kent/envconf">envconf</a> : 通过环境变量来配置</li><li><a href="https://github.com/vrischmann/envconfig">envconfig</a> : 通过环境变量读取配置</li><li><a href="https://github.com/antham/envh">envh</a> : 管理环境变量的助手</li><li><a href="https://github.com/kkyr/fig">fig</a> : 用于从文件和环境变量中读取配置的小型库（带有验证和默认值）。</li><li><a href="https://github.com/go-gcfg/gcfg">gcfg</a> : 读取类似 <code>INI</code> 类型的配置文件为 <code>Go</code>语言结构体,支持自定义类型。</li><li><a href="https://github.com/sakirsensoy/genv">genv</a> : 通过 <code>dotenv</code> 支持轻松读取环境变量。</li><li><a href="https://github.com/PaddleHQ/go-aws-ssm">go-aws-ssm</a> : 从<code>AWS System Manager - Parameter Store</code> 获取参数的<code>Go</code> 包。</li><li><a href="https://github.com/subpop/go-ini">go-ini</a> : Go 包,可对 INI 文件进行整理和解整理。</li><li><a href="https://github.com/ianlopshire/go-ssm-config">go-ssm-config</a> : 用于从 <code>AWS SSM</code>（参数存储）加载配置参数的 <code>Go</code>工具。</li><li><a href="https://github.com/ufoscout/go-up">go-up</a> : 一个简单的配置库,具有递归占位符解析功能,没有各种怪招。</li><li><a href="https://github.com/crgimenes/goConfig">goConfig</a> : 解析一个结构作为输入,并将命令行、环境变量和配置文件中的参数填充到该结构的字段中。</li><li><a href="https://github.com/joho/godotenv">godotenv</a> : 把 <code>Ruby</code>的 <code>dotenv</code>库移植到 <code>Go</code>（从 <code>.env</code>中加载环境变量）。</li><li><a href="https://github.com/ian-kent/gofigure">gofigure</a> : 让<code>Go</code> 语言应用程序配置变得简单</li><li><a href="https://github.com/One-com/gone/tree/master/jconf">gone/jconf</a> ： 模块化 JSON 配置工具。允许你将配置参数结构体和使用它的代码放在一起,而不需要让主配置文件了解所有子模块的细节来进行序列</li><li><a href="https://github.com/gookit/config">gookit/config</a> : 应用程序配置管理(<code>load,get,set</code>),支持<code>JSON、YAML、TOML、INI、HCL</code></li><li><a href="https://github.com/beatlabs/harvester">harvester</a> : <code>Harvester,</code>一个易于使用的静态和动态配置包,支持 <code>envars</code> 和 <code>Consul</code> 集成。</li><li><a href="https://github.com/hjson/hjson-go">hjson</a> : 便于程序员使用和阅读的配置文件格式。具有更加轻松的语法,更少的错误和更多的注释</li><li><a href="https://github.com/gurkankaymak/hocon">hocon</a> : 用于使用<code>HOCON</code>(一种人类友好的JSON超集)格式的配置库,支持环境变量、引用其他值、注释和多文件等功能。</li><li><a href="https://github.com/schachmat/ingo">ingo</a> : 将配置标记持久化到一个类似 <code>ini</code>的文件中</li><li><a href="https://github.com/go-ini/ini">ini</a> : 用于读写INI 文件的库</li><li><a href="https://github.com/joshbetz/config">joshbetz/config</a> : 消息配置库,可以解析环境变量、<code>JSON</code>文件并根据<code>SIGHUP</code>自动重新载入</li><li><a href="https://github.com/kelseyhightower/envconfig">kelseyhightower/envconfig</a> : 用于管理环境变量配置数据的<code>Go</code> 库。</li><li><a href="https://github.com/knadh/koanf">koanf</a> : 轻量级、可扩展的库,用于读取Go应用程序中的配置。内置支持<code>JSON、TOML、YAML、env</code>、命令行。</li><li><a href="https://github.com/lalamove/konfig">konfig</a> : 为分布式处理时代的<code>Go</code>提供可组合、可观察和可执行的配置处理。</li><li><a href="https://github.com/sasbury/mini">mini</a> : 用于解析类 <code>ini</code> 文件的库</li><li><a href="https://github.com/nasermirzaei89/env">nasermirzaei89/env</a> : 用于读取环境变量的简单实用包</li><li><a href="http://github.com/goraz/onion">onion</a> : 基于分层结构的Go配置库,支持<code>JSON、TOML、YAML、properties、etcd、env</code>以及使用<code>PGP</code>加密。</li><li><a href="https://github.com/tucnak/store">store</a> : <code>Go</code>的轻量级配置管理器,支持<code>JSON、TOML、YAML、properties</code>等。</li><li><a href="https://github.com/oblq/swap">swap</a> : 基于构建环境,递归地实例化/配置结构解析库。</li><li><a href="https://github.com/diegomarangoni/typenv">typenv</a> : 简约、零依赖、类型化的环境变量库。</li><li><a href="https://github.com/spf13/viper">viper</a> :<code>Go</code>语言配置工具</li><li><a href="https://github.com/OpenPeeDeeP/xdg">xdg</a> : 遵守<code>XDG</code> 标准 的配置工具<a href="https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG 标准</a></li></ul><hr><h2 id="持续集成">持续集成</h2><p><code>持续集成的辅助工具</code></p><ul><li><a href="https://github.com/ovh/cds">CDS</a> : 企业级<code>CI/CD</code>和<code>DevOps</code>自动化开源平台。</li><li><a href="https://github.com/drone/drone">drone</a> : <code>Drone</code> 是一个基于<code>Docker</code>的持续集成平台,使用 <code>Go</code>语言编写</li><li><a href="https://github.com/duck8823/duci">duci</a> : 简单的<code>ci</code>服务器,不需要特定领域的语言。</li><li><a href="https://github.com/nikogura/gomason">gomason</a> : 从一个干净的工作空间测试、构建、签署和发布你的<code>go</code>二进制文件</li><li><a href="https://github.com/mattn/goveralls">goveralls</a> : <code>Coveralls.io</code>是一个持续代码覆盖率检测系统,这个库提供了 <code>Go</code>语言的支持</li><li><a href="https://github.com/go-playground/overalls">overalls</a> : 针对多<code>package</code> 的<code>Go</code> 语言项目,为 <code>Goveralls</code> 这样的工具生成覆盖率报告</li><li><a href="https://github.com/LawrenceWoodman/roveralls">roveralls</a> : 回归覆盖测试工具</li></ul><hr><h2 id="css预处理">CSS预处理</h2><p><code>预处理css文件的库</code></p><ul><li><a href="https://github.com/yosssi/gcss">gcss</a> : 纯 <code>Go</code> 语言编写的 <code>CSS</code>预处理器</li><li><a href="https://github.com/wellington/go-libsass">go-libsass</a> : 100%兼容 <code>Sass</code> 的库 <code>libsass</code> 的<code>Go</code> 语言封装</li></ul><hr><h2 id="数据结构">数据结构</h2><p><code>go语言实现的数据结构与算法</code></p><ul><li><a href="https://github.com/shady831213/algorithms">algorithms</a> : 算法和数据结构学习资料</li><li><a href="https://github.com/zhuangsirui/binpacker">binpacker</a> : 二进制数据封包拆包工具,帮你构建自定义的二进制数据流</li><li><a href="https://github.com/yourbasic/bit">bit</a> : <code>Go</code>语言集合数据结构。提供了额外的位操作功能</li><li><a href="https://github.com/willf/bitset">bitset</a> : 实现了 <code>bitset</code>的 <code>Go</code>语言包.</li><li><a href="https://github.com/zhenjl/bloom">bloom</a> : <code>Go</code>语言实现的布隆过滤器（<code>bloom filter</code>）</li><li><a href="https://github.com/yourbasic/bloom">bloom</a> : <code>Go</code>语言实现的布隆过滤器</li><li><a href="https://github.com/tylertreat/BoomFilters">boomfilters</a> ： 概率统计数据结构,用于处理大量连续的数据。<br></li><li><a href="https://github.com/lrita/cmap">cmap</a> : 一个用于<code>go</code>的线程安全的并发地图,支持使用<code>interface&#123;&#125;</code>作为键</li><li><a href="https://github.com/free/concurrent-writer">concurrent-writer</a> : <code>bufio.Writer</code>的高并发<code>drop-in</code>替代品<br></li><li><a href="https://github.com/InVisionApp/conjungo">conjungo</a> : 一个小巧、强大、灵活的合并库。</li><li><a href="https://github.com/seiflotfy/count-min-log">count-min-log</a> : <code>Go</code>语言实现的 <code>Count-Min-Log sketch</code>算法(类似 Count-Min sketch 算法,但是使用的内存更少)</li><li><a href="https://github.com/superwhiskers/crunch">crunch</a> : <code>Go</code>包,实现缓冲区,方便处理各种数据类型。</li><li><a href="https://github.com/seiflotfy/cuckoofilter">cuckoofilter</a> : <code>Cuckoo</code>过滤器：一个用go语言实现的计数布隆过滤器的替代品</li><li><a href="https://github.com/edwingeng/deque">deque</a> : 高度优化的双端队列。</li><li><a href="https://github.com/gammazero/deque">deque</a> : 快速的环形缓冲区<code>deque</code>（双端队列）。</li><li><a href="https://github.com/srfrog/dict">dict</a> : <code>Go</code> 的类似<code>Python</code>的字典<code>(dict)</code></li><li><a href="https://github.com/zhenjl/encoding">encoding</a> : 整型压缩库</li><li><a href="https://github.com/plar/go-adaptive-radix-tree">go-adaptive-radix-tree</a> : <code>Go</code>语言实现的自适应基数树</li><li><a href="https://github.com/Workiva/go-datastructures">go-datastructures</a>:一组有用的、高性能的、线程安全的数据结构<br></li><li><a href="https://github.com/hbollon/go-edlib">go-edlib</a> : 与 Unicode 兼容的 Go 字符串比较和编辑距离算法库（<code>Levenshtein、LCS、Hamming、Damerau levenshtein、Jaro-Winkler</code> 等）。</li><li><a href="https://github.com/amallia/go-ef">go-ef</a> : <code>Elias-Fano</code>编码的<code>Go</code>实现。</li><li><a href="https://github.com/hailocab/go-geoindex">go-geoindex</a> : 基于内存存储的地理索引</li><li><a href="https://github.com/OrlovEvgeny/go-mcache">go-mcache</a> : 快速的内存<code>key:value</code>存储/缓存库。</li><li><a href="https://github.com/aurelien-rainone/go-rquad">go-rquad</a> : 区域四叉树,支持有效点位置和领域发现</li><li><a href="https://github.com/eko/gocache">gocache</a> : 完整的<code>Go</code>缓存库,支持多个存储（内存、<code>memcache、redis......</code>）。</li><li><a href="https://github.com/enriquebris/goconcurrentqueue">goconcurrentqueue</a> : 并发<code>FIFO</code>队列。</li><li><a href="https://github.com/emirpasic/gods">gods</a> :<code>Go</code>语言数据结构、容器、集合、列表、栈、键值对、 <code>BidiMaps</code>、树、<code>HashSet</code>等</li><li><a href="https://github.com/xxjwxc/gofal">gofal</a> : <code>Go</code>的微分算法库。</li><li><a href="https://github.com/deckarep/golang-set">golang-set</a> : 线程安全和非线程安全的高性能集合</li><li><a href="https://github.com/zoumo/goset">goset</a> : <code>Go</code>集合实现。</li><li><a href="https://github.com/ryszard/goskiplist">goskiplist</a> : <code>Go</code>语言实现的跳跃表</li><li><a href="https://github.com/liyue201/gostl">gostl</a> : 数据结构和算法库,旨在提供类似于<code>C++ STL</code> 的功能。</li><li><a href="https://github.com/kniren/gota">gota</a> : 为go语言实现了数据帧,序列以及数据噪音的方法</li><li><a href="https://github.com/yaa110/goterator">goterator</a> : 迭代器的实现,提供映射和减少功能。</li><li><a href="https://github.com/emvi/hide">hide</a> :具有hash 函数功能,以防止向客户端发送敏感ID`。</li><li><a href="https://github.com/google/hilbert">hilbert</a> : 用于映射空间填充曲线（例如希尔伯特曲线和皮亚诺曲线）和数值的库。</li><li><a href="https://github.com/axiomhq/hyperloglog">hyperloglog</a> : <code>HyperLogLog</code> 的go语言实现</li><li><a href="https://github.com/disksing/iter">iter</a> : <code>C++ STL</code>迭代器和算法的Go实现。</li><li><a href="https://github.com/agext/levenshtein">levenshtein</a> : 编辑距离（<code>levenshtein distance</code>）和相似性度量计算库</li><li><a href="https://github.com/agnivade/levenshtein">levenshtein</a> : 在Go中计算<code>levenshtein</code>距离的实现。</li><li><a href="https://github.com/smartystreets/mafsa">mafsa</a> : Go 语言实现的 <code>MA-FSA</code> ,包含最小完美哈希实现</li><li><a href="https://github.com/cbergoon/merkletree">merkletree</a> : 实现了梅克尔树,提供了一种高效、安全的数据结构内容验证方法</li><li><a href="https://github.com/BlackRabbitt/mspm">mspm</a> : 用于信息检索的多字符串模式匹配算法。</li><li><a href="https://github.com/kak-tus/nan">nan</a> : 在一个库中实现了零分配的<code>Nullable</code>结构,并提供了方便的转换函数。</li><li><a href="https://github.com/emvi/null">null</a> : 可为<code>null</code>的<code>Go</code>类型,它们可以被`marshalled/unmarshalled到JSON。</li><li><a href="https://github.com/MonaxGT/parsefields">parsefields</a> : - 用于解析<code>JSON</code>类日志的工具,用于收集特殊字段和特定事件。</li><li><a href="https://github.com/hyfather/pipeline">pipeline</a> : 一个带有扇形输入和扇形输出的管道的实现。</li><li><a href="https://github.com/viant/ptrie">ptrie</a> : 前缀树的实现</li><li><a href="https://github.com/rocketlaunchr/remember-go">remember-go</a> : 用于缓存慢速数据库查询的通用接口（由<code>redis、memcached、ristretto</code>或内存支持）。</li><li><a href="https://github.com/TheTannerRyan/ring">ring</a> : 高性能、线程安全的 <code>bloom</code>过滤器的 Go 实现。</li><li><a href="https://github.com/RoaringBitmap/roaring">roaring</a> : 实现了压缩<code>bitsets</code>算法的Go语言库</li><li><a href="https://github.com/StudioSol/set">set</a> : 在 <code>Go</code>中使用 <code>LinkedHashMap</code>实现简单的集合数据结构。</li><li><a href="https://github.com/MauriceGit/skiplist">skiplist</a> : 非常快的<code>Go Skipipllist</code>实现。</li><li><a href="https://github.com/gansidui/skiplist">skiplist</a> : 在 <code>Go</code>中实现的<code>Skiplist</code>。</li><li><a href="https://github.com/srfrog/slices">slices</a> : <code>slice</code>操作函数</li><li><a href="https://github.com/zekroTJA/timedmap">timedmap</a> : 具有过期键值对的<code>map</code>。</li><li><a href="https://github.com/perdata/treap">treap</a> : 使用树堆的持久化快速有序<code>map</code></li><li><a href="https://github.com/derekparker/trie">trie</a> : <code>Go</code>语言实现的<code>Trie</code>树</li><li><a href="https://github.com/ReneKroon/ttlcache">ttlcache</a> : 基于过期时间的内存字符串缓存接口。</li><li><a href="https://github.com/gurukami/typ">typ</a> : 空类型安全的基础类型转换器和从复杂结构中取值的开发库。</li><li><a href="https://github.com/willf/bloom">willf/bloom</a> : 实现了布隆过滤器的库</li></ul><hr><h2 id="数据库">数据库</h2><p><code>go语言实现的数据库</code></p><ul><li><a href="https://github.com/dgraph-io/badger">badger</a> : <code>Go</code>中的快速键值存储库。</li><li><a href="https://github.com/etcd-io/bbolt">bbolt</a> : <code>Go</code>的嵌入式键值数据库。</li><li><a href="https://github.com/iwanbk/bcache">bcache</a> : 最终一致的分布式内存缓存<code>Go</code>库。</li><li><a href="https://github.com/allegro/bigcache">BigCache</a> : 为GB量级数据设计的高效键/值缓存</li><li><a href="https://github.com/prologic/bitcask">Bitcask</a> : <code>Bitcask</code> 是一个用纯 Go 编写的可嵌入的、持久的、快速的键值（KV）数据库,由于采用了 <code>bitcask</code> 盘上布局（LSM+WAL）,它具有可预测的读/写性能、低延迟和高吞吐量。</li><li><a href="https://github.com/tidwall/buntdb">buntdb</a> : 快速,可嵌入的,内存键值数据库,可定义索引及 <code>spatial</code></li><li><a href="https://github.com/akyoto/cache">cache</a> : 内存中的<code>key:value</code>存储,有过期时间,0依赖,&lt;100 LoC,100%覆盖。</li><li><a href="https://github.com/muesli/cache2go">cache2go</a> : 基于内存存储的键值缓存,支持自动基于超时的自动失效</li><li><a href="https://github.com/oaStuff/clusteredBigCache">clusteredBigCache</a> : <code>BigCache</code>支持集群和单个项目过期。</li><li><a href="https://github.com/cockroachdb/cockroach">cockroach</a> : 可扩展的、一致的事务型数据库</li><li><a href="https://github.com/claygod/coffer">Coffer</a> : 简单的<code>ACID</code>键值数据库,支持事务。</li><li><a href="https://github.com/codingsince1985/couchcache">couchcache</a> : <code>RESTful</code> 缓存微服务,基于<code>Couchbase</code>数据库</li><li><a href="https://github.com/CovenantSQL/CovenantSQL">CovenantSQL</a> : <code>CovenantSQL</code>是一个区块链上的SQL数据库。</li><li><a href="https://github.com/paranoidguy/databunker">Databunker</a> : 为符合<code>GDPR</code>和<code>CCPA</code>而构建的个人身份信息<code>PII</code>存储服务。</li><li><a href="https://github.com/dgraph-io/dgraph">dgraph</a> : 可扩展的、分布式的、低延时、高吞吐的图数据库</li><li><a href="https://github.com/peterbourgon/diskv">diskv</a> : 具有 <code>disk-backed</code> 功能的持久化键值存储</li><li><a href="https://github.com/krotik/eliasdb">eliasdb</a> : 无依赖、事物型图数据库,支持 <code>REST API</code>、短语搜索以及类<code>SQL</code> 的查询语言</li><li><a href="https://github.com/VictoriaMetrics/fastcache">fastcache</a> : 针对大量条目的快速线程安全内存缓存。将<code>GC</code>开销降到最低。</li><li><a href="https://github.com/bluele/gcache">GCache</a> : 支持缓存过期、 <code>LFU、 LRU</code>和 <code>ARC</code>的缓存库</li><li><a href="https://github.com/pmylund/go-cache">go-cache</a> : 基于内存存储的缓存,适用于分布式部署的应用</li><li><a href="https://github.com/syndtr/goleveldb">goleveldb</a> : <code>Go</code>中<a href="https://github.com/google/leveldb">LevelDB</a>键/值数据库的实现<br></li><li><a href="https://github.com/golang/groupcache">groupcache</a> : <code>Groupcache</code>是一个缓存及缓存填充库,在很多情况下用于替代 <code>memcached</code>.</li><li><a href="https://github.com/codenotary/immudb">immudb</a> : <code>immudb</code>是一个轻量级、高速的不可变数据库,适用于用<code>Go</code>编写的系统和应用程序。</li><li><a href="https://github.com/influxdb/influxdb">influxdb</a> : 用于度量、事件和实时分析的可扩展数据存储。</li><li><a href="https://github.com/go-kivik/kivik">Kivik</a> : <code>Kivik</code>为<code>CouchDB、PouchDB</code>和类似的数据库提供了一个通用的<code>Go</code>和<code>GopherJS</code>客户端库。</li><li><a href="https://github.com/siddontang/ledisdb">ledisdb</a> : <code>Ledisdb</code>是一个高性能 <code>NoSQL</code> 数据库,类似 <code>Redis</code></li><li><a href="https://github.com/jmhodges/levigo">levigo</a> : <code>LeviGo</code>是 <code>LevelDB</code>的 <code>Go</code>语言封装</li><li><a href="https://github.com/couchbase/moss">moss</a> : <code>Moss</code> 是一个简单的 <code>LSM</code>键值存储引擎,100% Go 语言实现</li><li><a href="https://github.com/xujiajun/nutsdb">nutsdb</a> : <code>Nutsdb</code>是一个用纯<code>Go</code>编写的简单、快速、可嵌入、持久化的键/值存储。它支持完全可序列化的事务和许多数据结构,如列表、集合、排序集合。</li><li><a href="https://github.com/fern4lvarez/piladb">piladb</a> : 轻量级 <code>RESTful</code> 数据库引擎,基于堆栈结构</li><li><a href="https://github.com/akrylysov/pogreb">pogreb</a> : 嵌入式键值存储,适用于重读工作负载。</li><li><a href="https://github.com/prometheus/prometheus">prometheus</a> : 监控系统及时间序列数据库</li><li><a href="https://github.com/recoilme/pudge">pudge</a> : 使用 <code>Go</code> 的标准库编写的快速、简单的键值存储。</li><li><a href="https://github.com/roseduan/rosedb">rosedb</a> : 一个基于 LSM+WAL 的内嵌 k-v数据库，支持多种数据结构，如字符串、列表、哈希表、集合、有序集合</li><li><a href="https://github.com/rqlite/rqlite">rqlite</a> : 基于 <code>SQLite</code>的轻量级的、分布式的关系型数据库</li><li><a href="https://github.com/nanobox-io/golang-scribble">Scribble</a> : 小巧的 <code>JSON</code> 文件存储</li><li><a href="https://github.com/recoilme/slowpoke">slowpoke</a> : 具有持久性的键值存储。</li><li><a href="https://github.com/rafaeljesus/tempdb">tempdb</a> : 临时数据的键值对存储</li><li><a href="https://github.com/pingcap/tidb">tidb</a> : <code>TiDB</code> 是一个分布式的<code>SQL</code> 数据库。受到了<code>Google F1</code>的启发</li><li><a href="https://github.com/HouzuoGuo/tiedot">tiedot</a> : 基于<code>Go</code>语言的<code>NoSQ</code>L 数据库</li><li><a href="https://github.com/unit-io/unitdb">unitdb</a> : 用于物联网、实时消息应用的快速时序数据库。</li><li><a href="https://github.com/chrislusf/vasto">Vasto</a> : 一个分布式高性能键值存储。在磁盘上。最终一致。HA。能够在不中断服务的情况下增长或收缩。</li><li><a href="https://github.com/VictoriaMetrics/VictoriaMetrics">VictoriaMetrics</a> : 快速、资源高效、可扩展的开源时间序列数据库。可作为<code>Prometheus</code>的长期远程存储。支持<code>PromQL</code>。</li></ul><p>#### 数据库迁移工具</p><ul><li><a href="https://github.com/khezen/avro">avro</a> : 发现<code>SQL</code>模式并将其转换为<code>AVRO</code>模式。查询<code>SQL</code>记录到<code>AVRO</code>字节。</li><li><a href="https://github.com/GuiaBolso/darwin">darwin</a> : 数据库模式增量库</li><li><a href="https://github.com/RichardKnop/go-fixtures">go-fixtures</a> : 类似<code>DjanGo fixtures</code>,用于 Golang 的內建<code>dababase/sql</code> 库</li><li><a href="https://github.com/robinjoseph08/go-pg-migrations">go-pg-migrations</a> : 帮助使用 <code>go-pg/pg</code>编写迁移的<code>Go</code> 包。</li><li><a href="https://github.com/emvi/gondolier">gondolier</a> : 使用<code>struct</code>装饰器的数据库迁移库。</li><li><a href="https://github.com/pressly/goose">goose</a> : 数据库迁移工具。你可以通过编写增量 <code>SQL</code>或 <code>Go</code> 语言脚本来管理你的数据库</li><li><a href="https://github.com/go-gormigrate/gormigrate">gormigrate</a> : 数据库模式迁移帮助工具,用于<code>Gorm ORM.</code></li><li><a href="https://github.com/golang-migrate/migrate">migrate</a> : 数据库迁移。命令行及 <code>Go</code>语言库</li><li><a href="https://github.com/lopezator/migrator">migrator</a> : 简单的<code>Go</code>数据库迁移库。</li><li><a href="https://github.com/pravasan/pravasan">pravasan</a> : 简单的迁移工具,目前支持 <code>MySQL</code>但是近期打算支持<code>Postgres, SQLite, MonGoDB</code> 等等</li><li><a href="https://github.com/adlio/schema">schema</a> : 在你的Go二进制文件中嵌入数据库/sql兼容数据库的模式迁移库。</li><li><a href="https://github.com/skeema/skeema">skeema</a> : <code>MySQL</code>的纯SQL模式管理系统,支持<code>sharding</code>和外部在线模式变更工具</li><li><a href="https://github.com/gobuffalo/pop/tree/master/soda">soda</a> : 数据库迁移、创建、 ORM等等,用于<code>MySQL, PostgreSQL,</code>以及 <code>SQLite</code>.</li><li><a href="https://github.com/rubenv/sql-migrate">sql-migrate</a> : 数据库迁移工具,允许利用 <code>Go-bindata</code> 将数据库迁移嵌入应用程序</li></ul><h3 id="数据库工具">数据库工具</h3><ul><li><a href="https://github.com/PumpkinSeed/bucket">bucket</a> : 为<code>Couchbase</code>优化的数据结构框架,专门针对<code>bucket</code>的使用进行了优化。</li><li><a href="https://github.com/Vertamedia/chproxy">chproxy</a> : <code>HTTP</code>代理的<code>ClickHouse</code>数据库。</li><li><a href="https://github.com/nikepan/clickhouse-bulk">clickhouse-bulk</a> : 收集小的插入请求后一并发送大的请求到<code>ClickHouse</code>服务器。</li><li><a href="https://github.com/codingconcepts/datagen">datagen</a> : 快速的数据生成器,支持多表并支持多行<code>DML</code></li><li><a href="https://github.com/sj14/dbbench">dbbench</a> : 数据库基准测试工具,支持多个数据库和脚本。</li><li><a href="https://github.com/siddontang/go-mysql">go-mysql</a> : 用于处理<code>MySQL</code> 协议及复制的<code>Go</code>语言工具集</li><li><a href="https://github.com/siddontang/go-mysql-elasticsearch">go-mysql-elasticsearch</a> : 将你的 <code>MySQL</code> 数据自动同步到<code>Elasticsearch</code></li><li><a href="https://github.com/flike/kingshard">kingshard</a> : <code>kingshard</code>是一个<code>Go</code>语言编写的高性能 <code>MySQL</code>数据库代理</li><li><a href="https://github.com/2tvenom/myreplication">myreplication</a> : <code>MySql</code> 二进制 <code>log</code> 复制监听器,支持基于语句和基于行的复制</li><li><a href="https://github.com/knocknote/octillery">octillery</a> : 用于<code>sharding</code>数据库的<code>Go</code>包（支持所有ORM或原始SQL）。</li><li><a href="https://github.com/github/orchestrator">orchestrator</a> : <code>MySQL</code>复制拓扑管理器及可视化工具</li><li><a href="https://github.com/cybertec-postgresql/pg_timetable">pg_timetable</a> : <code>PostgreSQL</code> 的高级调度。<br></li><li><a href="https://github.com/sosedoff/pgweb">pgweb</a> : 基于 <code>Web</code> 的 <code>PostgreSQL</code> 数据库浏览工具</li><li><a href="https://github.com/hexdigest/prep">prep</a> : 无需更改代码使用已准备好的<code>SQL</code> 语句的库</li><li><a href="https://github.com/nuveo/prest">pREST</a> : 为 <code>PostgreSQL</code>数据库提供 <code>RESTful API</code></li><li><a href="https://github.com/andizzle/rwdb">rwdb</a> : <code>rwdb</code>为多个数据库服务器的设置提供读取复制功能。</li><li><a href="https://github.com/youtube/vitess">vitess</a> : <code>vitess</code> 提供了能够使大型 <code>web</code>服务 <code>MySQL</code> 数据库的扩展变得更加容易的服务器及工具</li></ul><h3 id="sql-查询语句构建库">SQL 查询语句构建库</h3><ul><li><a href="https://github.com/arthurkushman/buildsqlx">buildsqlx</a> : 针对<code>PostgreSQL</code>的<code>Go</code>数据库查询构建库。</li><li><a href="https://github.com/rocketlaunchr/dbq">dbq</a> : <code>Go</code>的数据库操作库。</li><li><a href="https://github.com/gchaincl/dotsql">Dotsql</a> : <code>Go</code>语言库,帮助你将 <code>sql</code> 文件保存在一个地方并且方便的取用</li><li><a href="https://github.com/didi/gendry">gendry</a> : 非侵入式<code>SQL</code>构建器和强大的数据绑定器。</li><li><a href="https://github.com/xujiajun/godbal">godbal</a> : Go的数据库抽象层（<code>dbal</code>）。支持<code>SQL</code>构建器,并能轻松获得数据库结果。</li><li><a href="https://github.com/doug-martin/goqu">goqu</a> : 地道的 <code>SQL</code> 语句创建器和查询库</li><li><a href="https://github.com/twharmon/gosql">gosql</a> : 具有更好的空值支持的SQL查询生成器。</li><li><a href="https://github.com/galeone/igor">igor</a> : <code>PostgreSQL</code> 的抽象层,支持高级功能以及类<code>Gorm</code> 的语法</li><li><a href="https://github.com/go-jet/jet">jet</a> : 在<code>Go</code>中编写类型安全的<code>SQL</code>查询框架,能够轻松地将数据库查询结果转换为所需的任意对象结构。</li><li><a href="https://github.com/spacetab-io/mpath-go">mpath</a> : 用于 <code>SQL</code>记录的<code>MPTT (Modified Preorder Tree Traversal)</code> 包 - 实物化路径的实现</li><li><a href="https://github.com/pupizoid/ormlite">ormlite</a> : 轻量级软件包,包含一些类似于<code>ORM</code>的功能,以及针对<code>sqlite</code>数据库的帮助程序。</li><li><a href="https://github.com/go-ozzo/ozzo-dbx">ozzo-dbx</a> : 强大的数据检索方法以及与<code>DB</code>无关的查询构建能力。</li><li><a href="https://github.com/HnH/qry">qry</a> : 从带有原始<code>SQL</code>查询的文件中生成常量的工具。</li><li><a href="https://github.com/bokwoon95/go-structured-query">sq</a> : 适用于<code>Go</code>的类型安全<code>SQL</code>构建器和结构映射器。</li><li><a href="https://github.com/leporo/sqlf">sqlf</a> : 快速的<code>SQL</code>查询构建器。</li><li><a href="https://github.com/lqs/sqlingo">sqlingo</a> : 在<code>Go</code> 中构建 <code>SQL</code> 的轻量级 <code>DSL</code>。</li><li><a href="https://github.com/elgris/sqrl">sqrl</a> : <code>SQL</code>查询创建器,是 <code>Squirrel</code> 的一个分叉版本,进行了性能方面的优化</li><li><a href="https://gitlab.com/qosenergy/squalus">Squalus</a> : <code>Go SQL</code>包的薄层,使其更容易执行查询。</li><li><a href="https://github.com/Masterminds/squirrel">Squirrel</a> : 一个帮助你构建 <code>SQL</code> 查询的库</li><li><a href="https://github.com/knq/xo">xo</a> : 基于已知的数据库表或自定义查询生成地道的<code>Go</code>语言代码,支持 <code>PostgreSQL, MySQL, SQLite, Oracle</code>, 以及 <code>Microsoft SQL Server</code>.</li></ul><hr><h2 id="数据库驱动">数据库驱动</h2><p><code>连接和操作数据库工具</code></p><ul><li>关系型数据库<ul><li><a href="https://github.com/apache/calcite-avatica-go">avatica</a><code>Apache Phoenix/Avatica SQL</code>驱动<br></li><li><a href="https://github.com/viant/bgc">bgc</a> : 数据库连接工具包,用于通过 <code>Go</code>语言访问<code>BigQuery</code></li><li><a href="https://github.com/nakagami/firebirdsql">firebirdsql</a> : <code>Firebird RDBMS SQL</code>驱动</li><li><a href="https://github.com/mattn/go-adodb">go-adodb</a> : <code>Microsoft ActiveX</code>对象数据库驱动</li><li><a href="https://github.com/denisenkom/go-mssqldb">go-mssqldb</a> : 适用于Go的<code>Microsoft MSSQL</code>驱动。</li><li><a href="https://github.com/mattn/go-oci8">go-oci8</a> : <code>Oracle</code>驱动</li><li><a href="https://github.com/go-sql-driver/mysql">go-sql-driver/mysql</a> : Go 语言 <code>MySQL</code>驱动</li><li><a href="https://github.com/mattn/go-sqlite3">go-sqlite3</a> : Go 语言的 <code>SQLite3</code>驱动</li><li><a href="https://github.com/minus5/gofreetds">gofreetds</a> : <code>Microsoft MSSQL</code>驱动。 <code>FreeTDS</code>的go语言封装</li><li><a href="http://www.freetds.org">FreeTDS</a> : <code>Microsoft MSSQL</code>驱动。是FreeTDS的Go封装器。</li><li><a href="https://github.com/go-goracle/goracle">goracle</a> : 用于 <code>Go</code>的 <code>Oracle</code>驱动程序,使用 <code>ODPI-C</code> 驱动程序。</li><li><a href="https://github.com/jackc/pgx">pgx</a> : <code>PostgreSQL</code> 驱动,支持比 <code>database/sql</code>更多的特性</li><li><a href="https://github.com/lib/pq">pq</a> : 用于<code>database/sql</code>的<code>Pure Go Postgres</code>驱动。</li><li><a href="https://github.com/cvilsmeier/sqinn-go">Sqinn-Go</a> : 纯Go的<code>SQLite</code>驱动。</li></ul></li></ul><hr><ul><li>NoSQL数据库<ul><li><a href="https://github.com/aerospike/aerospike-client-go">aerospike-client-go</a> : <code>Go</code>语言的<code>Aerospike</code>客户端。</li><li><a href="https://github.com/solher/arangolite">arangolite</a> : <code>ArangoDB</code>的轻量级<code>golang</code>驱动</li><li><a href="https://github.com/viant/asc">asc</a> : 用于<code>Aerospike for go</code>的数据存储连接。</li><li><a href="https://github.com/underarmour/dynago">dynago</a> : <code>Dynago</code> 是 <code>DynamoDB</code> 的客户端。</li><li><a href="https://github.com/couchbase/goforestdb">forestdb</a> : <code>ForestDB</code>的<code>Go</code>语言封装</li><li><a href="https://github.com/couchbase/go-couchbase">go-couchbase</a> :<code>Go</code>语言<code>Couchbase</code>客户端</li><li><a href="https://github.com/pilosa/go-pilosa">go-pilosa</a> : 用于Pilosa的Go客户端库。</li><li><a href="https://github.com/nitishm/go-rejson">go-rejson</a> : <code>Redislabs</code> 的 <code>ReJSON</code>模块的 <code>Golang</code> 客户端,使用 <code>Redigo golang</code>客户端。在<code>redis</code>中轻松地将结构体作为<code>JSON</code>对象进行存储和操作。</li><li><a href="https://github.com/couchbase/gocb">gocb</a> : <code>Couchbase Go</code>官方SDK。</li><li><a href="http://gocql.github.io">gocql</a> : <code>Apache Cassandra</code> 的 Go 语言驱动</li><li><a href="https://github.com/piaohao/godis">godis</a> : 由 <code>golang</code> 实现的<code>redis</code> 客户端,灵感来自 <code>jedis</code>。</li><li><a href="https://github.com/defcronyke/godscache">godscache</a> : <code>Google Cloud Platform Go Datastore</code>包的封装器,使用memcached增加缓存。</li><li><a href="https://github.com/bradfitz/gomemcache/">gomemcache</a> : <code>Go</code>编程语言的<code>memcache</code>客户端库。</li><li><a href="https://github.com/dancannon/gorethink">gorethink</a> : <code>RethinkDB</code>的Go语言驱动。</li><li><a href="https://github.com/zegl/goriak">goriak</a> : <code>Riak KV</code> 的 <code>Go</code>语言驱动</li><li><a href="https://github.com/kamva/mgm">mgm</a> : 用于 <code>Go</code> 的基于<code>MongoDB</code> 模型的<code>ODM</code>（基于官方 MongoDB 驱动程序）</li><li><a href="https://github.com/globalsign/mgo">mgo</a> :<code>MonGoDB</code> 驱动,通过简单的 <code>API</code> 现了丰富的、经过测试的特性,这些 API 遵循 Go 语言的习惯</li><li><a href="https://github.com/mongodb/mongo-go-driver">mongo-go-driver</a> : <code>Go</code>语言的官方<code>MongoDB</code>驱动。</li><li><a href="https://github.com/cihangir/neo4j">neo4j</a> : <code>Neo4j Rest API</code>的 <code>Go</code> 语言接口</li><li><a href="https://github.com/davemeehan/Neo4j-GO">Neo4j-GO</a> : <code>Go</code> 语言实现的 <code>Neo4j REST</code>客户端</li><li><a href="https://github.com/jmcvetta/neoism">neoism</a> : <code>Go</code> 语言 <code>Neo4j</code> 客户端</li><li><a href="https://github.com/qiniu/qmgo">qmgo</a> : Go的<code>MongoDB</code>驱动。它基于官方的<code>MongoDB</code>驱动,但和Mgo一样更容易使用。</li><li><a href="https://github.com/bsm/redeo">redeo</a> : <code>Redigo</code>是<code>Redis</code>数据库的Go客户端。</li><li><a href="https://github.com/gomodule/redigo">redigo</a> : <code>RediGo</code>是 <code>Redis</code> 数据库的<code>Go</code> 语言客户端.</li><li><a href="https://github.com/go-redis/redis">redis</a> : 兼容R<code>edis</code>协议的 <code>TCP</code> 服务器/服务.</li><li><a href="https://github.com/shomali11/xredis">xredis</a> : 类型安全的、可定制的、简洁易用的 <code>Redis</code> 客户端</li></ul></li></ul><hr><ul><li>搜索引擎和文本数据库<ul><li><a href="https://github.com/blevesearch/bleve">bleve</a> : 现代文本索引库</li><li><a href="https://github.com/olivere/elastic">elastic</a> : <code>Go</code> 语言的 <code>Elasticsearch</code>客户端</li><li><a href="https://github.com/cch123/elasticsql">elasticsql</a>将<code>sql</code> 转换为 <code>elasticsearch dsl</code></li><li><a href="https://github.com/mattbaird/elastigo">elastigo</a> : <code>Elasticsearch</code>客户端库</li><li><a href="https://github.com/elastic/go-elasticsearch">go-elasticsearch</a> : Go的官方<code>Elasticsearch</code>客户端。</li><li><a href="https://github.com/OwnLocal/goes">goes</a> : 用于和 <code>Elasticsearch</code> 交互的库</li><li><a href="https://github.com/go-ego/riot">riot</a> : <code>Go</code>开源,分布式,简单高效的搜索引擎。</li><li><a href="https://github.com/seiflotfy/skizze">skizze</a> : 概率数据结构服务和存储。</li></ul></li><li>多个后端:<ul><li><a href="https://github.com/fabiorphp/cachego">cachego</a> : <code>Golang Cache</code>组件,支持多个驱动。</li><li><a href="https://github.com/google/cayley">cayley</a> : 支持多个后端的图形数据库。</li><li><a href="https://github.com/viant/dsc">dsc</a> : <code>SQL、NoSQL</code>、结构化文件的数据存储连接。</li><li><a href="https://github.com/philippgille/gokv">gokv</a> : 为<code>go（Redis、Consul、etcd、bbolt、BadgerDB、LevelDB、Memcached、DynamoDB、S3、PostgreSQL、MongoDB、CockroachDB</code>等）提供简单的键值存储抽象和实现。</li></ul></li></ul><hr><h2 id="日期和时间">日期和时间</h2><p><code>用于处理日期和时间的库</code></p><ul><li><a href="https://github.com/uniplaces/carbon">carbon</a> : 简单的时间扩展程序,有很多有用的方法,是<code>PHP Carbon</code>库的接口</li><li><a href="https://github.com/1set/cronrange">cronrange</a> : 解析<code>Cron</code>风格的时间范围表达式,检查给定时间是否在任何范围内。</li><li><a href="https://github.com/rickb777/date">date</a> : 增强了Time的功能,用于处理日期、日期范围、时间跨度、时间段和日期时间。</li><li><a href="https://github.com/araddon/dateparse">dateparse</a> : 在不知道格式的情况下解析日期。</li><li><a href="https://github.com/hako/durafmt">durafmt</a> : 持续时间格式化</li><li><a href="https://github.com/wlbr/feiertage">feiertage</a> : 一组计算德国公共假期的函数,比如复活节、感恩节等</li><li><a href="https://github.com/yaa110/go-persian-calendar">go-persian-calendar</a> : - 太阳历</li><li><a href="https://github.com/xhit/go-str2duration">go-str2duration</a> : 将字符串转换为持续时间。支持<code>time.Duration</code>返回字符串等。</li><li><a href="https://github.com/nathan-osman/go-sunrise">go-sunrise</a> : 计算指定地点的日出和日落时间。</li><li><a href="https://github.com/stoewer/go-week">go-week</a> : 处理星期的库</li><li><a href="https://github.com/relvacode/iso8601">iso8601</a> : 有效地解析<code>ISO8601</code>日期时间,而无需使用<code>regex</code>。</li><li><a href="https://github.com/GuilhermeCaruso/kair">kair</a> : 日期和时间 - <code>Golang</code>格式化库。</li><li><a href="https://github.com/jinzhu/now">now</a> : <code>Now</code> 是一个 <code>Go</code> 语言的时间工具集</li><li><a href="https://github.com/kirillDanshin/nulltime">NullTime</a> : -时间可以是 <code>NULL</code> 的库<br></li><li><a href="https://github.com/awoodbeck/strftime">strftime</a> : <code>C99</code>兼容的<code>strftime</code>格式化器。</li><li><a href="https://github.com/SaidinWoT/timespan">timespan</a> : 用于与时间间隔交互,定义为开始时间和持续时间</li><li><a href="https://github.com/leekchan/timeutil">timeutil</a> : 为 <code>Go</code> 语言时间包扩展了有用的功能,例如时间间隔和格式化</li><li><a href="https://github.com/osteele/tuesday">tuesday</a> : <code>Ruby</code>兼容的<code>Strftime</code>函数。</li></ul><hr><h2 id="分布式系统">分布式系统</h2><ul><li><a href="https://github.com/lesismal/arpc">arpc</a> : 更有效的网络通信,支持双向呼叫、通知、广播。</li><li><a href="https://github.com/svcavallar/celeriac.v1">celeriac</a> : 利用 <code>Go</code> 语言对<code>Celery</code>的<code>worker</code>ß任务事件进行交互和监控的库</li><li><a href="https://github.com/buraksezer/consistent">consistent</a> : 有限负载的一致哈希算法库。</li><li><a href="https://github.com/mbrostami/consistenthash">consistenthash</a> : 使用可配置的副本实现一致的哈希。</li><li><a href="https://github.com/anacrolix/dht">dht</a> : <code>BitTorrent Kademlia DHT</code>的实现。</li><li><a href="https://github.com/digota/digota">digota</a> grpc电子商务微服务。<br></li><li><a href="https://github.com/dotchain/dot/">dot</a> ： 使用操作转换/OT的分布式同步库。</li><li><a href="https://github.com/edwingeng/doublejump">doublejump</a> : 改版后的<code>Google</code>的跳转一致哈希。</li><li><a href="https://github.com/lni/dragonboat">dragonboat</a> : <code>Go</code>中一个功能完整且高性能的多组<code>Raft</code>库。</li><li><a href="https://github.com/dgruber/drmaa">drmaa</a> : 集群调度工具的任务提交库,基于标准 <code>DRMAA</code></li><li><a href="https://cirello.io/dynamolock">dynamolock</a> : <code>DynamoDB</code>支持的分布式锁的实现。</li><li><a href="https://github.com/tylfin/dynatomic">dynatomic</a> : 将 <code>DynamoDB</code> 作为原子计数器使用的库。</li><li><a href="https://github.com/emitter-io/emitter">emitter-io</a> : 使用<code>MQTT、Websockets</code> 和 <code>love</code> 构建的高性能、分布式、安全和低延迟的发布-订阅平台。</li><li><a href="https://github.com/vectaport/flowgraph">flowgraph</a> : 基于流的编程包实现的MPI 风格的读取,发送协同层；</li><li><a href="https://github.com/chrislusf/gleam">gleam</a> : 快速、可扩展的分布式<code>map/reduce</code> 系统,使用纯<code>Go</code> 语言和<code>Luajit</code> 编写,融合了 Go 语言的高并发能力和 Luajit 的高性能,可以独立或分布式部署运行。</li><li><a href="https://github.com/chrislusf/glow">glow</a> : 易于使用的可扩展的分布式大数据处理、<code>Map-Reduce、DAG</code>执行,全部用纯Go编写。</li><li><a href="https://github.com/gmsec/micro">gmsec</a> : Go分布式系统开发框架。</li><li><a href="https://github.com/InVisionApp/go-health">go-health</a> : 用于在服务中启用异步依赖性健康检查的库。</li><li><a href="https://github.com/dgryski/go-jump">go-jump</a> : <code>Google "Jump"</code>一致性哈希函数的接口</li><li><a href="https://github.com/go-kit/kit">go-kit</a> : 为服务工具吧,支持服务发现、负载均衡 、可插拔传输以及请求追踪等</li><li><a href="https://github.com/micro/go-micro">go-micro</a> : 一个分布式系统开发框架。</li><li><a href="https://github.com/sanketplus/go-mysql-lock">go-mysql-lock</a> : 基于<code>MySQL</code>的分布式锁。</li><li><a href="https://github.com/pdupub/go-pdu">go-pdu</a> : 基于身份的去中心化社交网络。</li><li><a href="https://github.com/AppsFlyer/go-sundheit">go-sundheit</a> : 为 <code>golang</code>服务定义异步服务健康检查提供支持的库。</li><li><a href="https://github.com/valyala/gorpc">gorpc</a> : 简单、快速、可扩展的<code>RPC</code> 库,针对高负载场景</li><li><a href="https://github.com/grpc/grpc-go">grpc-go</a> : <code>gRPC</code>的Go语言实现。基于<code>HTTP/2的RPC</code>。</li><li><a href="https://github.com/hprose/hprose-golang">hprose</a> : 非常新颖的RPC库,现在支持25种以上的语言。</li><li><a href="https://github.com/osamingo/jsonrpc">jsonrpc</a> : <code>jsonrpc</code> 包实现了 <code>JSON-RPC 2.0</code>.</li><li><a href="https://github.com/ybbus/jsonrpc">jsonrpc</a> : <code>JSON-RPC 2.0 HTTP</code>客户端实现</li><li><a href="https://github.com/devopsfaith/krakend">KrakenD</a> : 带有中间件的,高性能<code>API</code>网关框架</li><li><a href="https://github.com/liftbridge-io/liftbridge">liftbridge</a> : 用于<code>NATS</code>的轻量级、容错消息流。</li><li><a href="https://github.com/micro/micro">micro</a> : 面向云计算及其他领域的分布式系统运行时。</li><li><a href="https://github.com/nats-io/gnatsd">NATS</a> : 轻量级、高性能微服务系统,用于微服务、物联网以及云</li><li><a href="https://github.com/italolelis/outboxer">outboxer</a> : <code>Outboxer</code>是一个实现<code>outbox</code>模式的<code>go</code>库。</li><li><a href="https://cirello.io/pglock">pglock</a> : <code>PostgreSQL</code>支持的分布式锁的实现。</li><li><a href="https://github.com/hashicorp/raft">raft</a> : <code>Raft</code> 共识协议的 <code>Golang</code>实现,由 <code>HashiCorp</code>.开发。</li><li><a href="https://github.com/coreos/etcd/tree/master/raft">raft</a> : <code>Raft</code>共识协议的 <code>Go</code> 实现,由 <code>CoreOS</code> 提供。</li><li><a href="https://github.com/cenkalti/rain">rain</a> : <code>BitTorrent</code>客户端和库。</li><li><a href="https://github.com/bsm/redislock">redis-lock</a> : 使用Redis实现的简化的分布式锁。</li><li><a href="https://resgate.io/">resgate</a> : 用于构建 <code>REST</code>、实时和 <code>RPC API</code> 的实时 <code>API</code> 网关,所有客户端都可以无缝同步</li><li><a href="https://github.com/uber/ringpop-go">ringpop-go</a> : 为<code>Go</code>应用提供可扩展、容错的应用层分片。</li><li><a href="https://github.com/smallnest/rpcx">rpcx</a> : <code>rpcx</code>是一个类似阿里巴巴<code>Dubbo</code> 和微博<code>Motan</code> 的分布式的<code>RPC</code>服务框架</li><li><a href="https://github.com/jexia/semaphore">Semaphore</a> : 直接的（微）服务协调器。</li><li><a href="https://github.com/ursiform/sleuth">sleuth</a> : 在 <code>HTTP</code>服务之间进行无主<code>p2p</code> 自动发现和 RPC通信(使用 <a href="https://github.com/zeromq/libzmq">ZeroMQ</a>)ß</li><li><a href="https://github.com/tendermint/tendermint">tendermint</a> : 使用<code>Tendermint</code> 一致性及区块链协议的高性能的中间件,用于将任何语言编写的状态机转换为一个拜占庭容错状态机,</li><li><a href="https://github.com/anacrolix/torrent">torrent</a> : <code>BitTorrent</code> 客户端</li></ul><hr><h2 id="动态dns">动态DNS</h2><p><code>更新动态dns记录的库和工具</code></p><ul><li><a href="https://github.com/skibish/ddns">DDNS</a> : 以<code>digital ocean</code>DNS为后台的个人DDNS客户端。</li><li><a href="https://gitlab.com/alcastle/dyndns">dyndns</a> : 后台<code>Go</code>进程,定期自动检查您的IP地址,并在您的地址发生变化时更新（一个或多个）谷歌域名的动态DNS记录。</li><li><a href="https://github.com/timothyye/godns">GoDNS</a> : 用Go编写的动态<code>DNS</code>客户端工具,支持<code>DNSPod</code>和<code>HE.net</code>。</li></ul><hr><h2 id="邮件库">邮件库</h2><p><code>邮件管理和发送的go语言库</code></p><ul><li><a href="https://blitiri.com.ar/p/chasquid">chasquid</a> : 用Go编写的SMTP服务器。</li><li><a href="https://github.com/aymerick/douceur">douceur</a> : <code>HTML</code> 邮件中的内联 <code>CSS</code> 库</li><li><a href="https://github.com/jordan-wright/email">email</a> : 健壮的、灵活的 <code>email</code>库</li><li><a href="https://github.com/toorop/go-dkim">go-dkim</a> : <code>DKIM</code> 库,用于对 <code>email</code> 进行签名和验证</li><li><a href="https://github.com/emersion/go-imap">go-imap</a> : <code>IMAP</code> 库,用于客户端和服务器</li><li><a href="https://github.com/emersion/go-message">go-message</a> : 用于互联网消息格式和邮件的库</li><li><a href="https://github.com/vanng822/go-premailer">go-premailer</a> : 在<code>Go</code>中为<code>HTML</code>邮件提供在线样式。</li><li><a href="https://github.com/xhit/go-simple-mail">go-simple-mail</a> : <code>go</code>语言实现的基于简单<code>smtp</code>协议的邮件发送库</li><li><a href="https://github.com/hectane/hectane">Hectane</a> : 轻量级 <code>SMTP</code>客户端,提供 <code>HTTP API</code></li><li><a href="https://github.com/matcornic/hermes">hermes</a> : 一个用于生成干净、响应式 <code>HTML e-mail</code> 的包</li><li><a href="https://github.com/mailchain/mailchain">mailchain</a> : 用<code>go</code>写的用于发送加密邮件到区块链地址的邮件库</li><li><a href="https://github.com/mailgun/mailgun-go">mailgun-go</a> : 使用<code>Mailgun API</code>发送邮件的Go库。</li><li><a href="https://github.com/mailhog/MailHog">MailHog</a> : <code>Email</code> 及 <code>SMTP</code> 测试工具,具有 web 及 API 接口</li><li><a href="https://github.com/sendgrid/sendgrid-go">SendGrid</a> : <code>SendGrid</code>的 Go 语言库,用于发送电子邮件</li><li><a href="https://github.com/mailhog/smtp">smtp</a> : <code>SMTP</code> 服务器协议状态机</li></ul><hr><h2 id="脚本语言与嵌入式编程">脚本语言与嵌入式编程</h2><p><code>在你的go代码中嵌入其他脚本语言</code></p><ul><li><a href="https://github.com/mattn/anko">anko</a> : <code>Go</code>语言编写的解释器</li><li><a href="https://github.com/alexeyco/binder">binder</a> : 基于<a href="https://github.com/yuin/gopher-lua">gopher-lua</a>的go语言Lua 接口,</li><li><a href="https://github.com/google/cel-go">cel-go</a> : 快速、可移植、非图灵完全表达式评估和渐进分型。</li><li><a href="https://github.com/antonmedv/expr">expr</a> : <code>Go</code> 的表达式评估引擎，具有快速、非图灵完备、动态类型化、静态类型化的特性。</li><li><a href="https://github.com/gentee/gentee">gentee</a> : 可嵌入脚本编程语言。</li><li><a href="https://github.com/jcla1/gisp">gisp</a> : <code>Go</code>中的简单<code>LISP</code>。</li><li><a href="https://github.com/olebedev/go-duktape">go-duktape</a> : <code>Go</code>的<code>Duktape JavaScript</code>引擎封装。</li><li><a href="https://github.com/Shopify/go-lua">go-lua</a> : <code>Lua 5.2</code>虚拟机的纯 Go 语言接口</li><li><a href="https://github.com/deuill/go-php">go-php</a> : <code>PHP</code> 的<code>Go</code> 语言接口</li><li><a href="https://github.com/sbinet/go-python">go-python</a> : <code>CPython C-API</code> 的<code>Go</code> 语言接口</li><li><a href="https://github.com/dop251/goja">goja</a> : 在 Go 中实现 <code>ECMAScript 5.1(+)</code> 。</li><li><a href="https://github.com/aarzilli/golua">golua</a> : <code>lua C API</code>的 <code>Go</code>语言接口。</li><li><a href="https://github.com/yuin/gopher-lua">gopher-lua</a> : <code>Go</code> 语言编写的 <code>Lua 5.1</code> 虚拟机和编译器</li><li><a href="https://github.com/PaesslerAG/gval">gval</a> : Go编写的高度可定制的表达式语言。</li><li><a href="https://github.com/db47h/ngaro">ngaro</a> : 可嵌入的Ngaro虚拟机实现,可在<code>Retro</code>中编写脚本。</li><li><a href="https://github.com/ian-kent/purl">purl</a> : 嵌入 <code>Go</code> 语言的 <code>Perl 5.18.2</code></li><li><a href="https://github.com/d5/tengo">tengo</a> : <code>Go</code>的字节码编译脚本语言。</li></ul><hr><h2 id="错误处理">错误处理</h2><p><code>go 语言错误处理库</code></p><ul><li><a href="https://github.com/emperror/emperror">emperror</a> : <code>Go</code>库和应用程序的错误处理工具和最佳实践。</li><li><a href="https://github.com/rotisserie/eris">eris</a> : 在<code>Go</code>中处理、跟踪和记录错误的更好方法。与标准错误库和<code>github.com/pkg/errors</code>兼容。</li><li><a href="https://github.com/snwfdhmp/errlog">errlog</a> : 用于确定错误的责任源代码（以及其他一些快速调试功能，可以嵌入到任何的日志服务中。</li><li><a href="https://github.com/emperror/errors">errors</a> : 标准库错误包和<code>github.com/pkg/errors</code> 的替代包。提供各种错误处理单元。</li><li><a href="https://github.com/pkg/errors">errors</a> : 提供简单错误处理单元的包。</li><li><a href="https://github.com/neuronlabs/errors">errors</a> : 简单的 <code>golang</code>错误处理包。</li><li><a href="https://github.com/PumpkinSeed/errors">errors</a> : 最简单的错误封装器,性能卓越,内存开销最小。</li><li><a href="https://github.com/bnkamalesh/errors">errors</a> : 最小的错误处理包,具有自定义错误类型等特性</li><li><a href="https://github.com/joomcode/errorx">errorx</a> : 功能丰富的错误处理包,包括堆栈信息获取、错误组成分析等</li><li><a href="https://github.com/SonicRoshan/falcon">Falcon</a> : 简单但功能强大的错误处理包。</li><li><a href="https://github.com/hashicorp/go-multierror">go-multierror</a> : 用于将错误列表表示为单个错误的包</li><li><a href="https://github.com/ztrue/tracerr">tracerr</a> ： 带有堆栈跟踪和源片段的<code>Golang</code>错误处理包。</li></ul><hr><h2 id="文件处理">文件处理</h2><p><code>处理文件和文件系统操作的库</code></p><ul><li><a href="https://github.com/spf13/afero">afero</a> : <code>go</code>语言编写的对文件系统进行抽象的系统框架</li><li><a href="https://github.com/viant/afs">afs</a> : 适用于 <code>Go</code> 的抽象文件存储。</li><li><a href="https://github.com/xis/baraka">baraka</a> : 用于轻松处理 <code>http</code>文件上传的库。</li><li><a href="https://github.com/bigfile/bigfile">bigfile</a> : 文件传输系统,支持用<code>http api、rpc</code>调用和<code>ftp</code>客户端管理文件。</li><li><a href="https://github.com/codingsince1985/checksum">checksum</a> : 计算大文件的信息摘要,如<code>MD5</code>和<code>SHA256</code>。</li><li><a href="https://github.com/otiai10/copy">copy</a> : 递归复制目录。</li><li><a href="https://github.com/homedepot/flop">flop</a> : 文件操作库,目的是与 <a href="https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html">GNU cp</a>进行镜像。<br></li><li><a href="https://github.com/artonge/go-csv-tag">go-csv-tag</a> : 使用 <code>tag</code> 导入 <code>csv</code></li><li><a href="https://github.com/hugocarreira/go-decent-copy">go-decent-copy</a> : 文件复制功能库。</li><li><a href="https://github.com/barasher/go-exiftool">go-exiftool</a> : 为<code>ExifTool</code>提供绑定服务,<code>ExifTool</code>是一个著名的库,用于从文件（图片、PDF、office...）中提取尽可能多的元数据</li><li><a href="https://github.com/artonge/go-gtfs">go-gtfs</a> : 用<code>go</code>加载<code>gtfs</code>文件</li><li><a href="https://github.com/1set/gut">gut/yos</a> : 简单可靠的文件操作包,支持对文件、目录和符号链接的<code>copy/move/diff/list</code>。</li><li><a href="https://github.com/rjeczalik/notify">notify</a> : 类似 <code>os/signal</code>的文件系统提示库,具有简单的 API.</li><li><a href="https://github.com/qmuntal/opc">opc</a> : 为<code>Go</code>加载<code>Open Packaging Conventions (OPC)</code>文件</li><li><a href="https://github.com/parsyl/parquet">parquet</a> : 读取和写入<a href="https://parquet.apache.org">parquet</a> 文件。</li><li><a href="https://github.com/pdfcpu/pdfcpu">pdfcpu</a> : PDF 处理器。</li><li><a href="https://github.com/dixonwille/skywalker">skywalker</a> : 允许你简单方便的并发浏览文件系统</li><li><a href="https://gitlab.com/russoj88/stl">stl</a> : 读取和写入<code>STL</code>文件的模块，采取并发的读取算法。</li><li><a href="https://github.com/posener/tarfs">tarfs</a> : 为 <code>tar</code> 文件实现的文件系统接口</li><li><a href="https://github.com/1set/todotxt">todotxt</a><code>todo.txt</code>文件的go语言解析器。</li><li><a href="https://github.com/C2FO/vfs">vfs</a> : 适用于 <code>Go</code> 的多个文件系统类型,如 <code>os、S3</code>和 <code>GCS</code>的可插拔、可扩展的文件系统功能库。</li></ul><hr><h2 id="金融领域相关库">金融领域相关库</h2><p><code>处理货币与金融领域的库</code></p><ul><li><a href="https://github.com/leekchan/accounting">accounting</a> : <code>Go</code>语言金钱及货币格式</li><li><a href="https://github.com/bojanz/currency">currency</a> : 处理货币金额,提供货币信息和格式。</li><li><a href="https://github.com/bnkamalesh/currency">currency</a> : 高性能、精确的货币计算包。</li><li><a href="https://github.com/shopspring/decimal">decimal</a> : 支持任意精度的十进制数的go包</li><li><a href="https://github.com/newity/fastme">fastme</a> : <code>Go</code>实现的 快速可扩展的匹配引擎 。</li><li><a href="https://github.com/FlashBoys/go-finance">go-finance</a> : <code>Go</code>中的综合金融市场数据。</li><li><a href="https://github.com/alpeb/go-finance">go-finance</a> : 用于货币时间价值（年金）、现金流、利率转换、债券和折旧计算的金融函数库。</li><li><a href="https://github.com/pieterclaerhout/go-finance">go-finance</a> : 用于获取汇率、通过VIES查询增值税号和查询IBAN银行账号的模块。</li><li><a href="https://github.com/m1/go-finnhub">go-finnhub</a> : 来自<code>finnhub.io</code>的股市、外汇和加密数据客户端。访问来自60多家证券交易所、10家外汇经纪商和15家以上加密交易所的实时金融市场数据。</li><li><a href="https://github.com/rhymond/go-money">go-money</a> : <code>Fowler's Money</code>模式的实现。</li><li><a href="https://github.com/aclindsa/ofxgo">ofxgo</a> : 查询 <code>OFX</code>服务器并解析其响应 (有一个示例的命令行客户端)</li><li><a href="https://github.com/i25959341/orderbook">orderbook</a> : <code>Golang</code>中的限价订单簿的匹配引擎。</li><li><a href="https://github.com/sdcoffey/techan">techan</a> : 具有高级市场分析和交易策略的技术分析库。</li><li><a href="https://github.com/claygod/transaction">transaction</a> : 以多线程模式运行的嵌入式的账户交易数据库,。</li><li><a href="https://github.com/dannyvankooten/vat">vat</a> : VAT 验证及欧洲增值税率工具</li></ul><hr><h2 id="表单">表单</h2><p><code>表单解析与绑定</code></p><ul><li><a href="https://github.com/robfig/bind">bind</a> : 可以表单数据绑定到任意的<code>Go</code> 变量上</li><li><a href="https://github.com/mholt/binding">binding</a> : 将来自<code>net/HTTP</code>请求的表单、<code>JSON</code> 数据绑定到结构体</li><li><a href="https://github.com/leebenson/conform">conform</a> : 检查用户输入并基于结构标签来清理数据</li><li><a href="https://github.com/go-playground/form">form</a> : 解码 <code>url</code>中的数据到 <code>Go</code> 语言变量中以及将 <code>Go</code>语言变量编码进 <code>url</code> 。</li><li><a href="https://github.com/monoculum/formam">formam</a> : 将表单数据解码到结构体</li><li><a href="https://github.com/albrow/forms">forms</a> : 框架无关的表单/JSON数据解析验证库,支持多部分表单及文件</li><li><a href="https://github.com/gorilla/csrf">gorilla/csrf</a> : 为 <code>Go</code> 语言 <code>web</code> 应用提供 <code>CSRF</code> 防御<br></li><li><a href="https://github.com/justinas/nosurf">nosurf</a> : <code>CSRF</code> 防御中间件</li><li><a href="https://github.com/sonh/qs">qs</a> : 用于将结构体编码为 <code>URL</code> 查询参数的<code>Go</code> 模块</li><li><a href="https://github.com/tomwright/queryparam">queryparam</a> : 将<code>url.Values</code>解码为标准或自定义类型的可用结构体值。</li></ul><hr><h2 id="函数式编程">函数式编程</h2><ul><li><a href="https://github.com/TeaEntityLab/fpGo">fpGo</a> : <code>Golang</code>中的单项式函数式编程功能</li><li><a href="https://github.com/seborama/fuego">fuego</a> : <code>Go</code>中实验室的函数式编程。</li><li><a href="https://github.com/tobyhede/go-underscore">go-underscore</a> : <code>Go</code>函数式集合工具。</li></ul><hr><h2 id="游戏开发">游戏开发</h2><ul><li><a href="https://github.com/azul3d/engine">Azul3D</a> : <code>Go</code>语言编写的 <code>3D</code> 游戏引擎</li><li><a href="https://github.com/hajimehoshi/ebiten">Ebiten</a> : <code>Go</code> 语言编写的简单的 <code>2D</code> 游戏库</li><li><a href="https://github.com/EngoEngine/engo">engo</a> : <code>EnGo</code>是一个开源的<code>2D</code>游戏引擎,遵循实体-组件-系统范式</li><li><a href="https://github.com/g3n/engine">g3n</a> : <code>Go 3D</code>游戏引擎。</li><li><a href="https://github.com/beefsack/go-astar">go-astar</a> : A*路径查找算法的Go实现。</li><li><a href="https://github.com/veandco/go-sdl2">go-sdl2</a> : <a href="https://www.libsdl.org/">Simple DirectMedia Layer</a> 的 <code>Go</code>封装。</li><li><a href="https://github.com/ungerik/go3d">go3d</a> : 专注性能的 <code>2D/3D</code> 数学库</li><li><a href="https://github.com/xtaci/gonet">gonet</a> : <code>Go</code>语言实现的游戏服务器框架</li><li><a href="https://github.com/xiaonanln/goworld">goworld</a> : 可扩展的游戏服务器引擎。</li><li><a href="https://github.com/name5566/leaf">Leaf</a> : 轻量级游戏服务器框架</li><li><a href="https://github.com/lonng/nano">nano</a> : 基于<code>golang</code>的轻量级、设施、高性能的游戏服务器框架。</li><li><a href="https://github.com/oakmound/oak">Oak</a> : <code>go</code>游戏引擎。</li><li><a href="https://github.com/topfreegames/pitaya">Pitaya</a> : 可扩展的游戏服务器框架,支持集群,并通过<code>C SDK</code>为<code>iOS、Android、Unity</code>等提供客户端库。</li><li><a href="https://github.com/faiface/pixel">Pixel</a> :<code>2D</code> 游戏引擎库</li><li><a href="https://github.com/gonutz/prototype">prototype</a> : 跨平台（<code>Windows/Linux/Mac</code>）库,可利用最小的API创建桌面游戏。</li><li><a href="https://github.com/gen2brain/raylib-go">raylib-go</a> : raylib的 Go 语言接口,简单、易用的用于学习游戏编程的库</li><li><a href="http://www.raylib.com/">raylib</a> : raylib的Go绑定,一个简单易用的电子游戏编程学习库。</li><li><a href="https://github.com/JoelOtter/termloop">termloop</a> : 终端游戏引擎,基于 <code>Termbox</code></li><li><a href="https://github.com/kelindar/tile">tile</a> : 面向数据和缓存友好的 <code>2D</code> 网格库 (<code>TileMap</code>)。</li></ul><hr><h2 id="代码生成与泛型">代码生成与泛型</h2><ul><li><a href="https://github.com/t0pep0/efaceconv">efaceconv</a> : 代码生成工具,用于高效的将 <code>interface&#123;&#125;</code>转换为不可变类型,并且不需要进行任何内存分配</li><li><a href="https://github.com/clipperhouse/gen">gen</a> : 代码生成工具,用于提供类似泛型的功能</li><li><a href="https://github.com/senselogic/GENERIS">generis</a> : 提供泛型、自由形式宏、条件编译和 <code>HTML</code> 模板化的代码生成工具。</li><li><a href="https://github.com/abice/go-enum">go-enum</a> : 从代码注释中生成<code>enums</code>代码。</li><li><a href="https://github.com/ahmetalpbalkan/go-linq">go-linq</a> : 类似<code>.NET LINQ</code>的<code>Go</code>查询方法。</li><li><a href="https://github.com/pieterclaerhout/go-xray">go-xray</a> : 使反射的使用更加简单的助手。</li><li><a href="https://github.com/awalterschulze/goderive">goderive</a> : 从输入类型导出函数。</li><li><a href="https://github.com/wzshiming/gotype">gotype</a> : <code>Golang</code>源代码解析,用法类似于 <code>reflect</code> 包。</li><li><a href="https://github.com/hexdigest/gowrap">GoWrap</a> : 使用简单的模板为 <code>Go</code>接口生成装饰器。</li><li><a href="https://github.com/rjeczalik/interfaces">interfaces</a> : 命令行工具,用于生成接口定义</li><li><a href="https://github.com/dave/jennifer">jennifer</a> : 不适用模板生成任意 <code>Go</code> 语言代码</li><li><a href="https://github.com/ungerik/pkgreflect">pkgreflect</a> : 用于包作用域反射的 <code>Go</code>语言预处理器</li><li><a href="https://github.com/xiaoxin01/typeregistry">typeregistry</a> : 用于动态创建类型的库。</li></ul><hr><h2 id="位置信息与地理geo处理库">位置信息与地理GEO处理库</h2><ul><li><a href="https://github.com/melihmucuk/geocache">geocache</a> : 内存缓存,适用于基于地理位置的应用。</li><li><a href="https://github.com/hishamkaram/geoserver">geoserver</a> : 用于通过<code>GeoServer REST API</code>操纵<code>GeoServer</code>实例的Go包。</li><li><a href="https://github.com/hishamkaram/gismanager">gismanager</a> : 将你的GIS数据（矢量数据）发布到<code>PostGIS</code>和<code>Geoserver</code>的库。</li><li><a href="https://github.com/consbio/mbtileserver">mbtileserver</a> : 简单的基于<code>Go</code>的服务器,用于存储<code>mbtiles</code>格式的地理信息。</li><li><a href="https://github.com/paulmach/osm">osm</a> : 用于读取、写入和处理<code>OpenStreetMap</code>数据和API的库。</li><li><a href="https://github.com/maguro/pbf">pbf</a> : <code>OpenStreetMap PBF golang</code>编码器/解码器。</li><li><a href="https://github.com/pantrif/s2-geojson">S2 geojson</a> : 将<code>geojson</code>转换为<code>S2</code>单元格,并在地图上演示一些<code>S2</code>几何特征。</li><li><a href="https://github.com/golang/geo">S2 geometry</a> : <code>Go</code>中的<code>S2</code>几何库。</li><li><a href="https://github.com/tidwall/tile38">Tile38</a> : 具有空间索引和实时地理围栏的地理位置数据库。</li><li><a href="https://github.com/wroge/wgs84">WGS84</a> : 坐标转换和变换的库（<code>ETRS89, OSGB36, NAD83, RGF93, Web Mercator, UTM</code>）。</li><li><a href="https://github.com/Konstantin8105/c4go">c4go</a> : 将<code>C</code>代码转换为<code>go</code>代码。</li><li><a href="https://github.com/Konstantin8105/f4go">f4go</a> : 将<code>FORTRAN 77</code>代码转为 <code>Go</code> 代码。</li><li><a href="https://github.com/gopherjs/gopherjs">gopherjs</a> : 把<code>Go</code> 编译为<code>JavaScript.</code></li><li><a href="https://github.com/go-llvm/llgo">llgo</a> : 基于 <code>LLVM</code> 的<code>Go</code> 语言编译器</li><li><a href="https://github.com/tardisgo/tardisgo">tardisgo</a> : G<code>olang</code>转换为 <code>Haxe</code> 进而转换为 <code>CPP/CSharp/Java/JavaScript</code>的编译器.</li></ul><hr><h2 id="goroutines">Goroutines</h2><p><code>goroutines的管理和使用</code></p><ul><li><a href="https://github.com/panjf2000/ants">ants</a> : 高性能和低消耗的<code>goroutine</code>池。</li><li><a href="https://github.com/borderstech/artifex">artifex</a> : <code>Golang</code>的简单内存作业队列,使用基于<code>worker</code>的调度策略。</li><li><a href="https://github.com/reugn/async">async</a> : <code>Go</code>的另一个同步库（<code>Future, Promise, Locks</code>）。</li><li><a href="https://github.com/studiosol/async">async</a> : 安全的异步函数执行的方式,支持在出现pannic的情况下恢复它们。</li><li><a href="https://github.com/kamilsk/breaker">breaker</a> : 采用了一种可以使执行流可中断的灵活的机制的包。</li><li><a href="https://github.com/ddelizia/channelify">channelify</a> : 将你的函数转化为返回管道,以实现简单而强大的并行处理。</li><li><a href="https://github.com/ITcathyh/conexec">conexec</a> : 一个并发工具包,帮助你以一种高效和安全的方式并发执行函数。它支持指定整体超时以避免阻塞,并使用goroutine池来提高效率。</li><li><a href="https://github.com/marusama/cyclicbarrier">cyclicbarrier</a> : - <code>golang</code>的<code>CyclicBarrier</code>。</li><li><a href="https://github.com/workanator/go-floc">go-floc</a> : 轻松编排 <code>Go</code>语言协程</li><li><a href="https://github.com/kamildrazkiewicz/go-flow">go-flow</a> : 控制<code>Go</code>语言协程的执行顺序</li><li><a href="https://github.com/nikhilsaraf/go-tools">go-tools/multithreading</a> : 使用这个轻量级的库和简单的<code>API</code>来管理<code>goroutine</code> 池。<br></li><li><a href="https://github.com/subchen/go-trylock">go-trylock</a> : 支持 <code>Golang</code> 的读写锁的 <code>TryLock</code>.</li><li><a href="https://github.com/pieterclaerhout/go-waitgroup">go-waitgroup</a> : - 类似 <code>sync.WaitGroup</code>的错误处理和并发控制。</li><li><a href="https://github.com/zenthangplus/goccm">goccm</a> : <code>Go</code>并发管理包,限制了允许并发运行的 <code>goroutine</code>的数量</li><li><a href="https://github.com/loveleshsharma/gohive">gohive</a> : 高性能且易于使用的<code>goroutine</code>池。</li><li><a href="https://github.com/vardius/gollback">gollback</a> : 异步简单函数工具,用于管理闭包和回调的执行</li><li><a href="https://github.com/benmanns/goworker">goworker</a> : <code>Goworker</code>是一个基于 Go 语言的后台worker</li><li><a href="https://github.com/xxjwxc/gowp">gowp</a> : - gowp 是限制并发量的<code>goroutine</code>池。</li><li><a href="https://github.com/Sherifabdlnaby/gpool">gpool</a> : 管理一个可调整大小的上下文感知的<code>goroutine</code>池,并以这种方式来约束并发量。</li><li><a href="https://github.com/ivpusic/grpool">grpool</a> : 轻量级<code>Goroutine</code>池。</li><li><a href="https://github.com/duanckham/hands">hands</a> : 用于控制多个<code>goroutine</code>的执行和返回策略的进程控制器。</li><li><a href="https://github.com/AaronJan/Hunch">Hunch</a> : Hunch提供的功能有。<code>All、First、Retry、Waterfall</code>等功能,让异步流控制更加直观。</li><li><a href="https://github.com/dirkaholic/kyoo">kyoo</a> : 提供了一个无限的作业队列和并发的工作池。</li><li><a href="https://github.com/neilotoole/errgroup">neilotoole/errgroup</a> : <code>sync/errgroup</code>的替代方案,限于N个<code>worker goroutine</code>池。</li><li><a href="https://github.com/arunsworld/nursery">nursery</a> : <code>Go</code>中的结构化并发</li><li><a href="https://cirello.io/oversight">oversight</a> : <code>versight</code>是 <code>Erlang</code>监督树的完整实现。</li><li><a href="https://github.com/rafaeljesus/parallel-fn">parallel-fn</a> : 并行执行函数。</li><li><a href="https://github.com/alitto/pond">pond</a> : 在 <code>Go</code> 中编写的最小化和高性能的 <code>goroutine</code>工作池。</li><li><a href="https://github.com/go-playground/pool">pool</a> : 便于goroutine处理和取消的有限的消费者<code>goroutine</code>池或无限的<code>goroutine</code>池,</li><li><a href="https://github.com/AnikHasibul/queue">queue</a> : 类似于<code>sync.WaitGroup</code>的队列包。帮助你控制和等待<code>goroutine</code>的执行,比如等待所有goroutine的结束等等。</li><li><a href="https://github.com/x-mod/routine">routine</a> : 利用<code>context</code>的<code>go routine</code>实现。</li><li><a href="https://github.com/kamilsk/semaphore">semaphore</a> : 基于管道和上下文的加锁/解锁操作。</li><li><a href="https://github.com/marusama/semaphore">semaphore</a> : 基于CAS的快速可调整大小的semaphore实现（比基于管道的semaphore实现更快）。</li><li><a href="https://github.com/ssgreg/stl">stl</a> : 基于软件事务性内存（<code>STM</code>）并发控制机制的软件事务性锁。</li><li><a href="https://github.com/shettyh/threadpool">threadpool</a><code>Golang</code>线程池的实现。<br></li><li><a href="https://github.com/Jeffail/tunny">tunny</a> : <code>Go</code>语言协程池</li><li><a href="https://github.com/vardius/worker-pool">worker-pool</a> : <code>Go</code>简单的异步<code>worker</code>池。</li><li><a href="https://github.com/gammazero/workerpool">workerpool</a> : 用于限制任务执行的并发性的<code>goroutine</code>缓冲池。</li></ul><hr><h2 id="gui">GUI</h2><ul><li><a href="https://github.com/murlokswarm/app">app</a> : 使用<code>Go, HTML</code> 和 <code>CSS</code> 进行应用程序开发的库， 支持<code>MacOS, Windows</code>。</li><li><a href="https://github.com/fyne-io/fyne">fyne</a> : 基于<code>Material Design</code>为<code>Go</code>设计的跨平台本地GUI。支持 Linux, macOS, Windows, BSD, iOS` 和 Android.</li><li><a href="https://github.com/asticode/go-astilectron">go-astilectron</a> : 使用<code>GO</code>和<code>HTML/JS/CSS</code>（由Electron提供支持）构建跨平台GUI应用程序</li><li><a href="http://mattn.github.io/go-gtk/">go-gtk</a> : <code>GTK</code>的<code>Go</code>绑定。</li><li><a href="https://github.com/sciter-sdk/go-sciter">go-sciter</a> : <code>Sciter</code> 的<code>Go</code> 语言接口，支持现代 GUI 程序开发的、嵌入式 HTML/CSS/脚本引擎。具有跨平台特性。</li><li><a href="https://github.com/gotk3/gotk3">gotk3</a> : <code>GTK3</code>的Go语言接口</li><li><a href="https://github.com/dtylman/gowd">gowd</a> : 使用<code>Go, HTML, CSS</code>和<code>NW.js</code> 语言进行快速、简单的桌面UI开发。具有跨平台特性</li><li><a href="https://github.com/therecipe/qt">qt</a> : <code>Qt</code>的<code>Go</code>语言接口 (支持 <code>Windows，macOS，Linux，Android，iOS，Sailfish OS， Raspberry Pi</code>)</li><li><a href="https://github.com/andlabs/ui">ui</a> : 跨平台的原生 GUI 库</li><li><a href="https://wails.app">Wails</a> : 使用内置的 <code>HTML</code> 渲染器。</li><li><a href="https://github.com/lxn/walk">walk</a> : <code>windows</code>应用程序开发工具包</li><li><a href="https://github.com/zserge/webview">webview</a> : 支持双向<code>JavaScript</code>绑定的跨平台 webview 窗口库（<code>Windows，macOS，Linux</code>）。</li><li><a href="https://github.com/dawidd6/go-appindicator">go-appindicator</a> : <code>libappindicator3 C</code>库的Go绑定。</li><li><a href="https://github.com/deckarep/gosx-notifier">gosx-notifier</a> : <code>OSX</code> 桌面提醒库</li><li><a href="https://github.com/prashantgupta24/activity-tracker">mac-activity-tracker</a> : <code>OSX</code> 库,用于通知机器上的任何（可插拔）活动。</li><li><a href="https://github.com/prashantgupta24/mac-sleep-notifier">mac-sleep-notifier</a> : - <code>golang</code>中的OSX睡眠/唤醒通知库。</li><li><a href="https://github.com/go-vgo/robotgo">robotgo</a> : 跨平台<code>GUI</code>自动化工具，可以控制鼠标、键盘及其他设备</li><li><a href="https://github.com/getlantern/systray">systray</a> : 跨平台的<code>Go</code> 语言库,用于在桌面提醒区域放置按钮及菜单</li><li><a href="https://github.com/shurcooL/trayhost">trayhost</a> : 跨平台的 <code>Go</code> 语言库,用于在主机系统任务条区域放置按钮及菜单</li></ul><hr><h2 id="硬件">硬件</h2><p><code>与硬件交互的库、工具</code></p><ul><li>请参考 <a href="https://github.com/rakyll/go-hardware">go-hardware</a></li></ul><hr><h2 id="images-图像处理">Images 图像处理</h2><ul><li><a href="https://github.com/anthonynsimon/bild">bild</a> : 汇集了使用 <code>Go</code>语言编写的图像处理算法</li><li><a href="https://github.com/h2non/bimg">bimg</a> : 利用<code>libvips</code>进行快速高效的图像处理</li><li><a href="https://github.com/aofei/cameron">cameron</a> : <code>Go</code>的头像生成器。</li><li><a href="https://github.com/tdewolff/canvas">canvas</a> : 将矢量图形转换成 <code>PDF、SVG</code>或光栅化图像。</li><li><a href="https://github.com/gojek/darkroom">darkroom</a> : 图像代理,具有可更改的存储后端和图像处理引擎,注重速度和弹性。</li><li><a href="https://github.com/lucasepe/draft">draft</a> : 使用简单的YAML语法为<code>GraphViz</code>生成高级微服务架构图。</li><li><a href="https://github.com/pravj/geopattern">geopattern</a> : 从字符串创建优美的图样</li><li><a href="https://github.com/fogleman/gg">gg</a> : 使用<code>Go</code>编写的 <code>2D</code>渲染程序</li><li><a href="https://github.com/disintegration/gift">gift</a> : 图像处理过滤器包</li><li><a href="https://github.com/qmuntal/gltf">gltf</a> : 高效且强大的<code>glTF 2.0</code>读取器、写入器和验证器。</li><li><a href="https://github.com/ungerik/go-cairo">go-cairo</a> : <code>cairo</code> 图形库的 <code>Go</code>语言接口</li><li><a href="https://github.com/bolknote/go-gd">go-gd</a> : <code>GD</code>库的<code>Go</code> 语言接口</li><li><a href="https://github.com/koyachi/go-nude">go-nude</a> : 使用 <code>Go</code> 语言进行裸替检测</li><li><a href="https://github.com/lazywei/go-opencv">go-opencv</a> : <code>OpenCV</code> 的 <code>Go</code>语言接口</li><li><a href="https://github.com/jyotiska/go-webcolors">go-webcolors</a> : <code>webcolors</code> 库的<code>Go</code>语言接口</li><li><a href="https://github.com/hybridgroup/gocv">gocv</a> : 使用<code>OpenCV 3.3+</code> 的计算机视觉的 <code>Go</code> 包。</li><li><a href="https://github.com/corona10/goimagehash">goimagehash</a> : <code>Go</code>感知图像哈希包。</li><li><a href="https://github.com/corona10/goimghdr">goimghdr</a> : <code>imghdr</code>模块为 Go 确定文件中包含的图像类型。</li><li><a href="https://github.com/o1egl/govatar">govatar</a> : 用于生成有趣头像的库和命令行工具。</li><li><a href="https://github.com/shomali11/gridder">gridder</a> : 基于网格的<code>2D</code>图形库。</li><li><a href="https://github.com/qeesung/image2ascii">image2ascii</a> : 将图像转换为<code>ASCII</code>码。</li><li><a href="https://github.com/gographics/imagick">imagick</a> : <code>ImageMagick</code>的 <code>MagickWand C</code>语言<code>API</code> 的 <code>Go</code>语言接口</li><li><a href="https://github.com/h2non/imaginary">imaginary</a> : 快速且简单的 <code>HTTP</code>微服务,用于图像缩放</li><li><a href="https://github.com/disintegration/imaging">imaging</a> : 简单的<code>Go</code>图像处理包。</li><li><a href="https://github.com/hawx/img">img</a> : 图像操作工具精选集</li><li><a href="https://github.com/fogleman/ln">ln</a> : <code>3D</code> 图线艺术渲染</li><li><a href="https://github.com/noelyahan/mergi">mergi</a> : 用于图像处理的工具和<code>Go</code> 库（合并、裁剪、调整大小、水印、动画）。</li><li><a href="https://github.com/aldor007/mort">mort</a> : 用<code>Go</code>编写的存储和图像处理服务器。</li><li><a href="https://github.com/donatj/mpo">mpo</a> : <code>MPO 3D</code> 照片解码与转换工具.</li><li><a href="https://github.com/thoas/picfit">picfit</a> : 一个使用 <code>Go</code>语言编写的图片缩放服务器</li><li><a href="https://github.com/fogleman/pt">pt</a> : 光线追踪引擎</li><li><a href="https://github.com/nfnt/resize">resize</a> : 使用 <code>Go</code>语言编写的具有常见差值功能的图片缩放工具</li><li><a href="https://github.com/bamiaux/rez">rez</a> : 纯 <code>Go</code> 及<code>SIMD</code>实现的图像缩放库</li><li><a href="https://github.com/muesli/smartcrop">smartcrop</a> : - 为任意图片进行剪裁的工具</li><li><a href="https://github.com/auyer/steganography">steganography</a> : 用于<code>LSB</code>隐写的纯<code>Go</code>库。</li><li><a href="https://github.com/DimitarPetrov/stegify">stegify</a> : 用于<code>LSB</code>隐写的<code>Go</code>工具,能够隐藏图像中的任何文</li><li><a href="https://github.com/ajstarks/svgo">svgo</a> : 用于生成 <code>SVG</code>的<code>Go</code>语言库</li><li><a href="https://github.com/ftrvxmtrx/tga">tga</a> : <code>tga</code>是一个<code>TARGA</code>图像格式解码/编码器</li></ul><h2 id="物联网iot">物联网(IOT)</h2><ul><li><a href="https://github.com/connectordb/connectordb">connectordb</a> : 针对<code>iot</code>的开源物联网平台</li><li><a href="https://github.com/goiot/devices">devices</a> : 管理物联网设备的套件库</li><li><a href="https://github.com/xcodersun/eywa">eywa</a> : <code>Eywa</code> 是一个持续追踪所有连接设备的连接管理器</li><li><a href="https://github.com/tibcosoftware/flogo">flogo</a> :<code>FloGo</code>是一个用于物联网 <code>Edge App</code>及集成的开源框架</li><li><a href="https://github.com/paypal/gatt">gatt</a> : <code>Gatt</code>是一个用于创建低功耗蓝牙外设的库</li><li><a href="https://github.com/hybridgroup/gobot/">gobot</a> : <code>Gobot</code> 是一个用于机器人,物理计算以及物联网的库</li><li><a href="https://github.com/amimof/huego">huego</a> : 适用于 <code>Go</code>的广泛的 <code>Philips Hue</code>客户端库。</li><li><a href="https://github.com/vaelen/iot/">iot</a> : <code>IoT</code>是实现<code>Google IoT Core</code>设备的简单框架。</li><li><a href="https://github.com/Mainflux/mainflux">mainflux</a> : 工业物联网消息传递和设备管理服务器。</li><li><a href="https://periph.io/">periph</a> : 外设<code>I/O,</code>用于连接低级板卡设施。</li><li><a href="https://github.com/sensorbee/sensorbee">sensorbee</a> : 轻量级物联网流处理引擎</li></ul><h2 id="作业调度">作业调度</h2><ul><li><a href="http://github.com/onatm/clockwerk">clockwerk</a> : 使用简单、流畅的语法来调度周期性作业的<code>Go</code>包。</li><li><a href="https://github.com/whiteShtef/clockwork">clockwork</a> : <code>Go</code>中简单直观的作业调度库。</li><li><a href="https://github.com/rk/go-cron">go-cron</a> : <code>Go</code>的简单<code>Cron</code>库,它可以在不同的时间间隔执行闭包或函数,主要用于web应用程序和长期运行的守护进程。</li><li><a href="https://github.com/reugn/go-quartz">go-quartz</a> : 简单、零依赖的<code>Go</code>调度库。</li><li><a href="https://github.com/go-co-op/gocron">gocron</a> : 简单流畅的<code>Go</code>作业调度。这是·<code>jasonlvhit/gocron</code>·`的一个积极维护的fork.</li><li><a href="https://github.com/roylee0704/gron">gron</a> : 使用简单的 <code>Go API</code> 定义基于时间的任务,<code>Gron</code>的调度器将相应地运行它们。</li><li><a href="https://github.com/bamzi/jobrunner">JobRunner</a> : 智能且功能丰富的<code>cron</code>任务调度器,内置任务队列和实时监控。</li><li><a href="https://github.com/albrow/jobs">jobs</a> : 持久而灵活的后台作业库。</li><li><a href="https://github.com/kilgaloon/leprechaun">leprechaun</a> : 工作调度器,支持<code>webhooks、crons</code>和经典调度系统。</li><li><a href="https://github.com/carlescere/scheduler">scheduler</a> : <code>Cronjobs</code>调度系统。</li></ul><hr><h2 id="json">JSON</h2><ul><li><a href="https://github.com/spyzhov/ajson">ajson</a> : <code>golang</code>实现的支持<code>JSONPath</code>的抽象<code>JSON</code>格式解析库。</li><li><a href="https://github.com/cocoonspace/dynjson">dynjson</a> : 向客户端提供自定义的<code>JSON</code>格式的动态<code>API</code>库</li><li><a href="https://github.com/lucassscaravelli/ej">ej</a> : 从不同的数据写入和读取<code>JSON</code>的库。</li><li><a href="https://github.com/vtopc/epoch">epoch</a> : 包含用于将<code>Unix</code>时间戳,<code>epoch</code>转换为JSON中的内置时间类型的处理库。</li><li><a href="https://github.com/skanehira/gjo">gjo</a> : 用于创建<code>JSON</code>对象的小工具。</li><li><a href="https://github.com/tidwall/gjson">GJSON</a> : 用一行代码获取<code>JSON</code>值。</li><li><a href="https://github.com/ddymko/go-jsonerror">go-jsonerror</a> : <code>Go-JsonError</code>的目的是让我们能够轻松创建遵循<code>JsonApi</code>规范的<code>json</code>响应错误。</li><li><a href="https://github.com/nicklaw5/go-respond">go-respond</a> : 用于处理常见<code>HTTP JSON</code>响应的<code>Go</code>包。</li><li><a href="https://github.com/elgs/gojq">gojq</a> : <code>Golang</code>中的<code>JSON</code>查询库。</li><li><a href="https://github.com/ChimeraCoder/gojson">gojson</a> : 从示例 <code>JSON</code>自动生成 <code>Go</code>结构体定义的库。</li><li><a href="https://github.com/yazgazan/jaydiff">JayDiff</a> : 用<code>Go</code>编写的<code>JSON</code>差异比较工具。</li><li><a href="https://github.com/wI2L/jettison">jettison</a> : 用于<code>Go</code>的高性能、无反射的<code>JSON</code>编码器。</li><li><a href="https://mholt.github.io/json-to-go/">JSON-to-Go</a> : 将<code>JSON</code>转换为<code>Go</code>结构</li><li><a href="https://github.com/m-zajac/json2go">json2go</a> : 高级<code>JSON</code>到<code>Go</code>结构的转换。提供能够解析多个<code>JSON</code>文档并创建适合所有JSON文档的结构的包。</li><li><a href="https://github.com/AmuzaTkts/jsonapi-errors">jsonapi-errors</a> : 基于<code>JSON API</code>错误引用的<code>Go</code>语言封装。</li><li><a href="https://github.com/miolini/jsonf">jsonf</a> : 用于高亮格式化和结构查询JSON的控制台工具。</li><li><a href="https://github.com/ricardolonga/jsongo">jsongo</a> : <code>Fluent API,</code>使其更容易创建<code>Json</code>对象。</li><li><a href="https://github.com/RichardKnop/jsonhal">jsonhal</a> : ,用于将自定义的结构体<code>marshal</code>为兼容<code>HAL</code>的<code>JSON response</code>的库。</li><li><a href="https://github.com/zerosnake0/jzon">jzon</a> : 兼容标准<code>json</code>库的<code>JSON</code>库。</li><li><a href="https://github.com/Qntfy/kazaam">kazaam</a> : 转换任意<code>json</code>文档的的<code>API</code>库。</li><li><a href="https://github.com/mickep76/mapslice-json">mapslice-json</a> : 用于有序地对<code>JSON</code>中的<code>map</code>结构进行<code>marshal/unmarshal</code>。</li><li><a href="https://github.com/sanbornm/mp">mp</a> : 简单的 <code>cli</code>电子邮件解析器，能够接受标准输入并输出<code>JSON</code>日志</li></ul><hr><h2 id="logging-日志库">Logging 日志库</h2><ul><li><a href="https://github.com/amoghe/distillog">distillog</a> : 分级日志记录库（可以把它想象成 <code>stdlib + log levels</code>）。</li><li><a href="https://github.com/kpango/glg">glg</a> : 简单、快速、分级的日志库</li><li><a href="https://github.com/lajosbencz/glo">glo</a> : 分级记录日志的库</li><li><a href="https://github.com/golang/glog">glog</a> : <code>Go</code>的分级日志</li><li><a href="https://github.com/utahta/go-cronowriter">go-cronowriter</a> : 对日志文件基于当前日期和时间进行自动循环写入的库,类似 <code>cronolog</code>.</li><li><a href="https://github.com/pieterclaerhout/go-log">go-log</a> : 一个包含<code>rack traces</code>、对象转储和可选时间戳的日志库。</li><li><a href="https://github.com/subchen/go-log">go-log</a> : 简单且可配置的<code>go</code>日志库,包括分级、格式化和多项输出的特性。</li><li><a href="https://github.com/siddontang/go-log">go-log</a> : 日志库支持级别和多处理程序。</li><li><a href="https://github.com/ian-kent/go-log">go-log</a> : <code>Go</code>中的<code>Log4j</code>实现。</li><li><a href="https://github.com/apsdehal/go-logger">go-logger</a> : 支持日志分级的简单的日志工具</li><li><a href="https://github.com/sadlil/gologger">gologger</a> : 简单易用的日志库,可以在彩色控制台、文件或 <code>Elasticsearch</code>中记录</li><li><a href="https://github.com/aphistic/gomol">gomol</a> : 支持多种输出,结构化的日志模块,可以扩展它的输出</li><li><a href="https://github.com/One-com/gone/tree/master/log">gone/log</a> : 快速、可扩展、全功能、兼容标准库的日志库</li><li><a href="https://github.com/henvic/httpretty">httpretty</a> : 将常规的 <code>HTTP</code> 请求漂亮地打印在终端上用于调试（类似于 <code>http.DumpRequest</code>）。</li><li><a href="https://github.com/ssgreg/journald">journald</a> : <code>systemd</code> 日志的本地日志<code>API</code>的 <code>Go</code>实现。</li><li><a href="https://github.com/clok/kemba">kemba</a> : 受<a href="https://github.com/visionmedia/debug">debug</a> 启发的小型调试日志工具,非常适合CLI工具和应用程序。<br></li><li><a href="https://github.com/aerogo/log">log</a> : <code>O(1)</code>复杂度的日志系统,允许你将一个日志连接到多个输出(例如 <code>stdout</code>、文件和一个 <code>TCP</code> 连接)。</li><li><a href="https://github.com/apex/log">log</a> : Go的结构化日志包。</li><li><a href="https://github.com/go-playground/log">log</a> : 简单、可配置、可扩展的<code>Go</code>结构化日志库。</li><li><a href="https://github.com/teris-io/log">log</a> : 结构化日志接口。</li><li><a href="https://github.com/firstrow/logvoyage">log-voyage</a> :用<code>golang</code>编写的全功能日志库。</li><li><a href="https://github.com/inconshreveable/log15">log15</a> : 简单、强大的<code>Go</code>日志记录。</li><li><a href="https://github.com/ewwwwwqm/logdump">logdump</a> : 用于多级日志记录的软件包。</li><li><a href="https://github.com/chzyer/logex">logex</a> : <code>Golang</code>日志库,支持跟踪和级别,由标准日志库封装。</li><li><a href="https://github.com/azer/logger">logger</a> : 日志库。</li><li><a href="https://github.com/borderstech/logmatic">logmatic</a> : <code>Golang</code>的彩色日志记录器,具有动态日志级别配置功能。</li><li><a href="https://github.com/mbndr/logo">logo</a> : <code>Golang</code>的日志记录库,可配置不同的写入器。</li><li><a href="https://github.com/cabify/logrusiowriter">logrusiowriter</a> : 使用 <code>logrus logger</code> 的 <code>io.Writer</code> 实现。</li><li><a href="https://github.com/sirupsen/logrus">logrus</a> : <code>Go</code>的结构化日志记录器。</li><li><a href="https://github.com/sebest/logrusly">logrusly</a> : <a href="https://github.com/sirupsen/logrus">logrus</a>插件,用于将错误发送到<a href="https://www.loggly.com/">Loggly</a></li><li><a href="https://github.com/logur/logur">logur</a> : 日志记录接口和日志记录最佳实践的整合,它对诸多知名库如<a href="https://github.com/sirupsen/logrus">logrus</a>、<a href="https://github.com/go-kit/kit/tree/master/log">go-kit log</a>、<a href="https://github.com/uber-go/zap">zap</a> ， <a href="https://github.com/rs/zerolog">zerolog</a>等的功能进行了集成</li><li><a href="https://github.com/hashicorp/logutils">logutils</a> : 对 <code>Go</code>语言标准日志工具进行了扩展,使其更好用</li><li><a href="https://github.com/mgutz/logxi">logxi</a> : 十二要素 app 日志工具,非常快速。</li><li><a href="https://github.com/natefinch/lumberjack">lumberjack</a> : 简单的循环日志工具。</li><li><a href="https://github.com/jbrodriguez/mlog">mlog</a> : 简单的日志模块,可以分5级并有一个可选的循环日志文件记录功能,支持 stdout/stderr 输出.</li><li><a href="https://github.com/francoispqt/onelog">onelog</a> : <code>Onelog</code>是一个简单但非常高效的JSON日志库。它是目前所有场景下最快的JSON日志器。同时,它也是所需最少内存分配的库。</li><li><a href="https://github.com/go-ozzo/ozzo-log">ozzo-log</a> : 高性能日志库,支持日志分级、分类及过滤。可以将过滤后的信息发送到不同的目的地(例如： 控制台、网络、邮箱).</li><li><a href="https://github.com/phuslu/log">phuslu/log</a> : - 结构化日志系统。</li><li><a href="https://github.com/arthurkiller/rollingWriter">rollingwriter</a> : <code>RollingWriter</code>是一个具有自动轮转功能的io.Writer实现,它有多种策略来提供日志文件旋转。</li><li><a href="https://github.com/cihub/seelog">seelog</a> : 灵活的、解耦的、格式化的日志库</li><li><a href="https://github.com/davecgh/go-spew">spew</a> : - 为 <code>Go</code>语言的数据结构实现了一个整洁的打印功能,有助于调试</li><li><a href="https://github.com/simukti/sqldb-logger">sqldb-logger</a> : -用于<code>Go SQL</code>数据库驱动的日志记录器,无需修改现有的<code>*sql.DB</code>标准用法。</li><li><a href="https://github.com/alexcesaro/log">stdlog</a> : <code>Stdlog</code>是一个面向对象的库,提供了分级日志功能,对于定时任务很有用.</li><li><a href="https://github.com/hpcloud/tail">tail</a> : 这个 <code>Go</code>语言软件包力争模拟 <code>BSD tail</code>的功能</li><li><a href="https://github.com/xfxdev/xlog">xlog</a> : 插件架构以及灵活的日志系统,具有日志等级控制,多日志目标以及自定义日志格式功能</li><li><a href="https://github.com/rs/xlog">xlog</a> : 结构化日志库</li><li><a href="https://github.com/uber-go/zap">zap</a> : 快速的、结构化的、分级的日志库</li><li><a href="https://github.com/rs/zerolog">zerolog</a> : 零内存分配 的<code>JSON</code>日志库.</li></ul><hr><h2 id="机器学习">机器学习</h2><ul><li><a href="https://github.com/jbrukh/bayesian">bayesian</a> : 贝叶斯分类器</li><li><a href="https://github.com/ryanbressler/CloudForest">CloudForest</a> : 纯 <code>Go</code>语言编写的快速、灵活、多线程决策树</li><li><a href="https://github.com/MaxHalford/eaopt">eaopt</a> : 进化优化库。</li><li><a href="https://github.com/khezen/evoli">evoli</a> : 遗传算法和粒子群优化库。</li><li><a href="https://github.com/Fontinalis/fonet">fonet</a> : 用<code>Go</code>编写的深度神经网络库。</li><li><a href="https://github.com/e-XpertSolutions/go-cluster">go-cluster</a> : <code>k-modes</code>和<code>k-prototypes</code>聚类算法的<code>Go</code>实现。</li><li><a href="https://github.com/patrikeh/go-deep">go-deep</a> : 用<code>Go</code>编写的功能丰富的神经网络库。</li><li><a href="https://github.com/white-pony/go-fann">go-fann</a> : 快速人工神经网络库<code>(FANN)</code>的 <code>Go</code> 语言借口.</li><li><a href="https://github.com/thoj/go-galib">go-galib</a> : <code>Go</code>语言编写的遗传算法库</li><li><a href="https://github.com/daviddengcn/go-pr">go-pr</a> : <code>Go</code>语言模式识别库</li><li><a href="https://github.com/goml/gobrain">gobrain</a> : 用<code>go</code>语言编写的神经网络。</li><li><a href="https://github.com/e-dard/godist">godist</a> : 各种概率分布以及相关方法库。</li><li><a href="https://github.com/tomcraven/goga">goga</a> : <code>Go</code> 语言遗传算法库</li><li><a href="https://github.com/sjwhitworth/golearn">GoLearn</a> : <code>Go</code>语言通用机器学习库</li><li><a href="https://github.com/danieldk/golinear">golinear</a> : <code>liblinear</code> 库的 <code>Go</code>语言接口</li><li><a href="https://github.com/surenderthakran/gomind">GoMind</a> : Go 中的一个简单的神经网络库。</li><li><a href="https://github.com/cdipaolo/goml">goml</a> : 即时<code>go</code>语言机器学习库</li><li><a href="https://github.com/dathoangnd/gonet">gonet</a> : <code>Go</code>的神经网络。</li><li><a href="https://github.com/c-bata/goptuna">Goptuna</a> : 用<code>Go</code>编写的黑盒函数的贝叶斯优化框架。一切都将被优化。</li><li><a href="https://github.com/timkaye11/goRecommend">goRecommend</a> : <code>Go</code> 语言推荐算法库</li><li><a href="https://github.com/gorgonia/gorgonia">gorgonia</a> : 基于图的计算库,类似于 <code>Theano</code>。提供了一些原型用于构建各种个样的机器学习和神经网络算法</li><li><a href="https://github.com/zhenghaoz/gorse">gorse</a> : 用<code>Go</code>编写的基于协作过滤的离线推荐系统后台。</li><li><a href="https://github.com/asafschers/goscore">goscore</a> : 用于 <code>PMML</code> 的 <code>Go</code> 评分<code>API</code>。</li><li><a href="https://github.com/otiai10/gosseract">gosseract</a> : 用于<code>OCR</code>（光学字符识别）的<code>Go</code>包,使用<code>Tesseract C++</code>库。</li><li><a href="https://github.com/datastream/libsvm">libsvm</a> : <code>libsvm</code>的<code>Go</code> 语言版本,基于 <code>LIBSVM 3.14.</code></li><li><a href="https://github.com/jinyeom/neat">neat</a> : 即插即用的并行<code>Go</code> 语言框架,用于增强拓扑神经网络 (NEAT).</li><li><a href="https://github.com/schuyler/neural-go">neural-go</a> : <code>Go</code>语言实现的多层感知神经网络,通过反向传播算法进行训练.</li><li><a href="https://github.com/otiai10/ocrserver">ocrserver</a> : 简单的<code>OCR API</code>服务器,很容易被<code>Docker</code>和<code>Heroku</code>部署。</li><li><a href="https://github.com/owulveryck/onnx-go">onnx-go</a> : <code>Open Neural Network Exchange (ONNX)</code>的<code>Go</code>接口。</li><li><a href="https://github.com/ThePaw/probab">probab</a> : 概率分布函数。贝叶斯推理。用纯<code>Go</code>编写。</li><li><a href="https://github.com/malaschitz/randomForest">randomforest</a> : 简单易用的 <code>Go</code>随机森林库。</li><li><a href="https://github.com/muesli/regommend">regommend</a> : 推荐系统及协同过滤引擎</li><li><a href="https://github.com/eaigner/shield">shield</a> : <code>go</code>语言实现的贝叶斯文本分类器,具有灵活的标记器和存储后端。</li><li><a href="https://github.com/galeone/tfgo">tfgo</a> : 易于使用的<code>Tensorflow `` g</code>o语言封装：简化了官方<code>Tensorflow Go</code>的使用。</li><li><a href="https://github.com/Xamber/Varis">Varis</a> : <code>Golang</code>神经网络。</li></ul><hr><p>## 消息系统</p><ul><li><a href="https://github.com/kak-tus/ami">ami</a> : 基于<code>Redis</code>集群可靠队列的<code>Go</code>客户端。</li><li><a href="https://github.com/sideshow/apns2">APNs2</a> : <code>go</code>语言实现的基于<code>HTTP/2</code>苹果推送通知提供服务，可以向<code>iOS</code>、<code>tvOS</code>、<code>Safari</code>和<code>OSX</code>应用程序发送推送通知</li><li><a href="https://github.com/hibiken/asynq">Asynq</a> : 建立在 <code>Redis</code> 之上，为 <code>Go</code> 提供的简单、可靠、高效的分布式任务队列,。</li><li><a href="https://github.com/Clivern/Beaver">Beaver</a> : 实时消息服务器,用于在网络和移动应用中构建可扩展的应用内通知、多人游戏、聊天应用。</li><li><a href="https://github.com/Jeffail/benthos">Benthos</a> : 在一系列协议之间建立消息流<code>go</code>代码库</li><li><a href="https://github.com/mustafaturan/bus">Bus</a> : 用于内部通信的简约型消息总线实现。</li><li><a href="https://github.com/centrifugal/centrifugo">Centrifugo</a> : 实时消息服务器</li><li><a href="https://github.com/jeroenrinzema/commander">Commander</a> : 一个高级事件驱动库，支持消费者/生产者模式,支持各种消息系统,如Apache Kafka。</li><li><a href="https://github.com/confluentinc/confluent-kafka-go">Confluent Kafka Golang Client</a> 是<code>Confluent</code>为<code>Apache Kafka</code>和<code>Confluent Platform</code>开发的<code>Golang</code>客户端。</li><li><a href="https://github.com/godbus/dbus">dbus</a> : <code>D-Bus</code>的 <code>Go</code> 语言接口</li><li><a href="https://github.com/appleboy/drone-line">drone-line</a> : 通过软件包,<code>docker</code>或是 <code>Drone CI</code>来发送 <a href="https://at.line.me/en">Line</a> 通知<br></li><li><a href="https://github.com/olebedev/emitter">emitter</a> : 通过<code>Go</code>语言的方式发送事件消息,可以使用通配符,断言,取消发送等优秀特性。</li><li><a href="https://github.com/agoalofalife/event">event</a> : 观察者模式的<code>go</code>语言实现</li><li><a href="https://github.com/asaskevich/EventBus">EventBus</a> : 轻量级事件库,支持异步</li><li><a href="https://github.com/osamingo/gaurun-client">gaurun-client</a> : <code>Go</code> 语言编写的 Gaurun 客户端</li><li><a href="https://github.com/desertbit/glue">Glue</a> : 健壮的 <code>Go</code>和 <code>Javascript Socket</code> 库 (可以用来替代<code>Socket.io</code>).</li><li><a href="https://github.com/cheshir/go-mq">go-mq</a> : 具有声明式配置的<code>RabbitMQ</code>客户端。</li><li><a href="https://github.com/TheCreeper/go-notify">go-notify</a> : <code>freedesktop</code>通知规范的本地实现</li><li><a href="https://github.com/nsqio/go-nsq">go-nsq</a> : <code>NSQ</code>官方 <code>Go</code> 语言库</li><li><a href="https://github.com/jirenius/go-res">go-res</a> : 用于构建 <code>REST</code>/实时服务的包,使用<code>NATS</code> 和 <code>Resgate</code>实现客户端无缝同步。</li><li><a href="https://github.com/googollee/go-socket.io">go-socket.io</a>Go 语言的 <code>socket.io</code>库 ,一个实时应用框架.<br></li><li><a href="https://github.com/maxatome/go-vitotrol">go-vitotrol</a> : V<code>iessmann Vitotrol</code>服务的<code>Go</code> 语言客户端</li><li><a href="https://github.com/trivago/gollum">Gollum</a> : 一个<code>n:m</code> 的多路复用器,从不同的源汇聚消息并向目标进行广播</li><li><a href="https://github.com/jcuga/golongpoll">golongpoll</a> : <code>HTTP</code> 长轮询服务器库,让 web 发布与订阅变的更简单.</li><li><a href="https://github.com/Terry-Mao/gopush-cluster">gopush-cluster</a> : Gopush-cluster 是一个<code>Go</code>语言实现的支持集群的<code>comet</code>服务（支持<code>websocket</code>和<code>tcp</code>协议）</li><li><a href="https://github.com/appleboy/gorush">gorush</a> 通知推送服务器,使用 <a href="https://github.com/sideshow/apns2">APNs2</a> 和 <a href="https://github.com/google/go-gcm">GCM</a> 。</li><li><a href="https://github.com/alexsniffin/gosd">gosd</a> : 用于调度何时向通道发送消息的库。</li><li><a href="https://github.com/smancke/guble">guble</a> : 使用通知推送(<code>Google Firebase Cloud Messaging, Apple Push Notification services, SMS)、websockets 、REST API</code>的消息服务器。提供了分布式操作和消息持久化特性</li><li><a href="https://github.com/leandro-lugaresi/hub">hub</a> : 用于 <code>Go</code> 应用程序的消息/事件汇聚,使用发布/订阅模式,支持像 <code>rabbitMQ</code> 的使用模式。</li><li><a href="https://github.com/socifi/jazz">jazz</a> : 一个简单的<code>RabbitMQ</code>抽象层,用于队列管理以及消息的发布和消费。</li><li><a href="https://github.com/RichardKnop/machinery">machinery</a> : 异步任务队列,基于分布式消息处理</li><li><a href="https://github.com/go-mangos/mangos">mangos</a> : 纯 <code>Go</code>语言实现的 <code>Nanomsg ("Scalable Protocols")</code></li><li><a href="https://github.com/olahol/melody">melody</a> : 用于处理<code>websocket</code>会话的简约框架,包括广播和自动<code>ping/pong</code>处理。</li><li><a href="https://github.com/dunglas/mercure">Mercure</a> : 使用<code>Mercure</code>协议（建立在<code>Server-Sent Events</code>之上）来调度服务器发送的更新的代码库。</li><li><a href="https://github.com/vardius/message-bus">messagebus</a> : <code>messagebus</code>是一个Go简单的异步消息系统,用于事件源、<code>CQRS、DDD</code>等场景</li><li><a href="https://github.com/nats-io/nats">NATS Go Client</a> : 原生的 <code>oplog/replication</code>系统,用于 <code>REST APIs</code>场景</li><li><a href="https://github.com/rafaeljesus/nsq-event-bus">nsq-event-bus</a> : 针对 <code>NSQ 的topic</code>和<code>channel</code>进行了简单的封装</li><li><a href="https://github.com/dailymotion/oplog">oplog</a> : 用于 <code>REST API</code>场景的通用oplog/copy系统。</li><li><a href="https://github.com/tuxychandru/pubsub">pubsub</a> : 简单的 <code>pubsub</code>软件包</li><li><a href="https://github.com/rafaeljesus/rabbus">rabbus</a> : <code>amqp</code>交换队列的简易封装。</li><li><a href="https://github.com/jandelgado/rabtap">rabtap</a> : -<code>RabbitMQ</code> 瑞士军刀 <code>cli</code>应用。</li><li><a href="https://github.com/sybrexsys/RapidMQ">RapidMQ</a> : <code>RapidMQ</code>是一个轻量级,可靠的本地消息队列管理库</li><li><a href="https://github.com/robinjoseph08/redisqueue">redisqueue</a> : <code>redisqueue</code> 提供了一个使用 <code>Redis</code>流的队列，可以用于生产者和消费者模式。</li><li><a href="https://github.com/sbabiv/rmqconn">rmqconn</a> : <code>RabbitMQ Reconnection。amqp.Connection</code> 和 <code>amqp.Dial</code>的<code>go</code>语言封装。允许在连接中断时进行重新连接,然后再强制调用关闭方法。</li><li><a href="https://github.com/Shopify/sarama">sarama</a> : 用于 <code>Apache Kafka</code>的库</li><li><a href="https://github.com/uniqush/uniqush-push">Uniqush-Push</a> : 基于 <code>Redis</code> 的统一推服务,用于服务器端向移动客户端推送消息</li><li><a href="https://github.com/pebbe/zmq4">zmq4</a> : <code>ZeroMQ version 4</code>的 <code>GO</code>语言接口。也有适用于<a href="https://github.com/pebbe/zmq3">version 3</a> 及 <a href="https://github.com/pebbe/zmq2">version 2</a> 的</li></ul><h2 id="microsoft-office">Microsoft Office</h2><ul><li><a href="https://github.com/unidoc/unioffice">unioffice</a> : 用于创建和处理<code>Office Word (.docx)、Excel (.xlsx)</code>和<code>Powerpoint (.pptx)</code>文档的纯<code>go</code>库。</li></ul><h3 id="excel">EXCEL</h3><ul><li><a href="https://github.com/360EntSecGroup-Skylar/excelize">excelize</a> : 用于读写 <code>Microsoft Excel™ (XLSX)</code> 文件的 <code>Golang</code>库</li><li><a href="https://github.com/szyhf/go-excel">go-excel</a> : 用于读取类似数据库形式的<code>excel</code>表格。</li><li><a href="https://github.com/fterrag/goxlsxwriter">goxlsxwriter</a> : <code>go</code>语言<code>libxlsxwriter</code>封装， 用于编写 <code>XLSX (Microsoft Excel)</code> 文件。</li><li><a href="https://github.com/tealeg/xlsx">xlsx</a> : 用于在 <code>Go</code> 程序中读取最新版 Microsoft Excel的库</li><li><a href="https://github.com/plandem/xlsx">xlsx</a> : 在<code>Go</code>程序中快速、安全地读取/更新现有 <code>Microsoft Excel</code>文件的库。</li></ul><h2 id="其他杂项">其他杂项</h2><h3 id="依赖性注入">依赖性注入</h3><ul><li><a href="https://github.com/magic003/alice">alice</a> : <code>Golang</code>的依赖注入容器</li><li><a href="https://github.com/golobby/container">container</a> : 功能强大的 <code>IoC</code>容器,具有流畅且易于使用的界面。</li><li><a href="https://github.com/goava/di">di</a> : <code>Go</code>编程语言的依赖注入容器。</li><li><a href="https://github.com/uber-go/dig">dig</a> : 基于反射的<code>Go</code>依赖注入工具包。</li><li><a href="https://github.com/i-love-flamingo/dingo">dingo</a> : 基于 <code>Guice</code> 的 <code>Go</code> 依赖注入工具包。</li><li><a href="https://github.com/uber-go/fx">fx</a> : 基于 <code>Go</code>的依赖注入应用框架（建立在 <code>dig</code> 的基础上）。</li><li><a href="https://github.com/vardius/gocontainer">gocontainer</a> : 简单的依赖注入容器。</li><li><a href="https://github.com/goioc/di">goioc/di</a> : <code>Spring</code>启发的依赖注入容器。</li><li><a href="https://github.com/logrange/linker">linker</a> : 基于反射的依赖注入和反转的控件库,支持组件生命周期。</li><li><a href="https://github.com/Fs02/wire">wire</a> : <code>Golang</code>运行时依赖注入。</li></ul><h3 id="项目结构">项目结构</h3><p><code>用于构建项目的非官方模式集。</code></p><ul><li><a href="https://github.com/lacion/cookiecutter-golang">cookiecutter-golang</a> :Go应用程序模板,用于按照生产最佳实践快速启动项目。</li><li><a href="https://github.com/zitryss/go-sample">go-sample</a> : 一个带有真实代码的 Go 应用项目布局示例。</li><li><a href="https://github.com/Fs02/go-todo-backend">go-todo-backend</a> <code>:   Go Todo Backend</code>示例,使用模块化的项目布局,针对微服务等场景。</li><li><a href="https://github.com/golang-standards/project-layout">golang-standards/project-layout</a> : -<code>Go</code> 生态系统中常见的历史和新兴项目布局模式集。</li><li><a href="https://github.com/sagikazarmark/modern-go-application">modern-go-application</a> : 应用现代实践的<code>Go</code> 应用程序模板和示例。</li><li><a href="https://github.com/catchplay/scaffold">scaffold</a> : <code>Scaffold</code> 生成一个入门的 Go 项目布局。让您专注于业务逻辑的实现。</li></ul><hr><h3 id="字符串处理">字符串处理</h3><ul><li><a href="https://gitlab.com/tymonx/go-formatter">go-formatter</a> : 实现大括号{}格式字符串的替换字段。<br></li><li><a href="https://github.com/gobeam/Stringy">gobeam/Stringy</a> : 字符串操作库,用于将字符串转换为驼峰、小驼峰等格式</li><li><a href="https://github.com/ozgio/strutil">strutil</a> : 字符串实用工具。</li><li><a href="https://github.com/huandu/xstrings">xstrings</a> : 从其他语言移植过来的字符串函数集合。</li></ul><h3 id="暂未分类">暂未分类</h3><p>这些库被放在这里是因为其他类别似乎都不适合。</p><ul><li><a href="https://github.com/mudler/anagent">anagent</a> : 简约、可插拔的<code>Golang evloop/timer</code>处理程序,具有依赖注入功能。</li><li><a href="https://github.com/antchfx/antch">antch</a> : 一个快速、强大、可扩展的网络爬行和抓取框架。</li><li><a href="https://github.com/mholt/archiver">archiver</a> : 用于制作和解压<code>.zip</code>和<code>.tar.gz</code>文件的库和命令。</li><li><a href="https://github.com/artyom/autoflags">autoflags</a> : Go包,用于从结构域中自动定义命令行标志。</li><li><a href="https://github.com/kirillDanshin/avgRating">avgRating</a> : - 基于<code>Wilson Score Equation</code>计算平均得分和评分。</li><li><a href="https://github.com/dimiro1/banner">banner</a> : 在你的<code>Go</code>应用程序中添加漂亮的横幅。</li><li><a href="https://github.com/mojocn/base64Captcha">base64Captcha</a> : <code>Base64captch</code>支持数字、数字、字母、算术、音频和数字来生成字母验证码。</li><li><a href="https://github.com/distatus/battery">battery</a> : 跨平台电源信息库</li><li><a href="https://github.com/icza/bitio">bitio</a> : 高度优化的比特级读写</li><li><a href="https://github.com/digitalcrab/browscap_go">browscap_go</a> : <a href="http://browscap.org/">Browser Capabilities Project</a>的<code>GO</code> 语言库</li><li><a href="https://github.com/steambap/captcha">captcha</a> : 包 <code>captcha</code> 为验证码的生成提供了一个简单易用的 API。</li><li><a href="https://github.com/cstockton/go-conv">conv</a> : 包<code>conv</code>提供了跨<code>Go</code>类型的快速和直观的转换。</li><li><a href="https://github.com/miolini/datacounter">datacounter</a> : <code>Greaders/writer/HTTP.ResponseWriter</code>计数器</li><li><a href="https://github.com/pioz/faker">faker</a> : Go的随机伪造数据和结构生成器。</li><li><a href="https://github.com/go-ffmt/ffmt">ffmt</a> : 美化数据显示。</li><li><a href="https://github.com/TwinProduction/gatus">gatus</a> : 自动化的服务健康仪表板。</li><li><a href="https://github.com/gabrie30/ghorg">ghorg</a> : 快速将整个<code>org/users</code> 仓库克隆到一个目录中 - 支持<code>GitHub、GitLab</code> 和 <code>Bitbucket</code>。</li><li><a href="https://github.com/jolestar/go-commons-pool">go-commons-pool</a> : <code>Golang</code> 的通用对象池。<br></li><li><a href="https://github.com/go-openapi">go-openapi</a> : 解析和使用 <code>open-api</code> 模式的软件包集合。</li><li><a href="https://github.com/eapache/go-resiliency">go-resiliency</a> : <code>golang</code>的弹性模式。</li><li><a href="https://github.com/gen2brain/go-unarr">go-unarr</a> : <code>RAR、TAR、ZIP</code> 和<code>7z</code>文件的解压库。</li><li><a href="https://github.com/brianvoe/gofakeit">gofakeit</a> : 用<code>go</code>编写的随机数据生成器。</li><li><a href="https://github.com/antham/gommit">gommit</a> : 分析<code>git</code>提交消息,确保它们遵循定义的模式。</li><li><a href="https://github.com/shirou/gopsutil">gopsutil</a> : 跨平台库,用于检索进程和系统利用率（<code>CPU</code>、内存、磁盘等）。</li><li><a href="https://github.com/osamingo/gosh">gosh</a> : 提供<code>Go</code> 统计处理程序、结构、测量方法。</li><li><a href="https://github.com/haxpax/gosms">gosms</a> : 你本地的<code>SMS</code>网关,可以用来发送 <code>SMS</code></li><li><a href="https://github.com/cabify/gotoprom">gotoprom</a> : 提供<code>Go</code>统计处理程序、结构、测量方法</li><li><a href="https://github.com/pariz/gountries">gountries</a> : 一个用来展示国家及其行政区划数据的库</li><li><a href="https://github.com/dimiro1/health">health</a> : 简单易用、可扩展的服务健康检查库</li><li><a href="https://github.com/etherlabsio/healthcheck">healthcheck</a> : 针对<code>RESTful</code>并发服务健康检查<code>HTTP</code>处理程序。</li><li><a href="https://github.com/Wing924/hostutils">hostutils</a> : 用于打包和解压<code>FQDNs</code>列表的<code>golang</code>库。</li><li><a href="https://github.com/osamingo/indigo">indigo</a> : 使用<code>Sonyflake</code>和<code>Base58</code>编码的分布式唯一ID生成器。</li><li><a href="https://github.com/hyperboloide/lk">lk</a> : 简单的 `golang 授权库。</li><li><a href="https://github.com/llir/llvm">llvm</a> : - 用于在纯<code>Go</code>中与<code>LLVM IR</code>交互的库。</li><li><a href="https://github.com/pascaldekloe/metrics">metrics</a> : 用于度量工具和<code>Prometheus</code> 指标的库。</li><li><a href="https://github.com/alwindoss/morse">morse</a> : 用于转换摩尔斯代码的库。</li><li><a href="https://github.com/lrita/numa">numa</a> : - <code>NUMA</code>是一个用 Go 编写的实用程序库。它帮助我们编写一些<code>NUMA-AWARED</code>代码。</li><li><a href="https://github.com/hyperboloide/pdfgen">pdfgen</a> : 从<code>Json</code>请求中生成<code>PDF</code>的<code>HTTP</code>服务。</li><li><a href="https://github.com/mavihq/persian">persian</a> : 用<code>go</code>编写的波斯语实用程序。</li><li><a href="https://github.com/aofei/sandid">sandid</a> : 地球上的每一粒沙子都有自己的<code>ID</code>。</li><li><a href="https://github.com/Wing924/shellwords">shellwords</a> : Golang 库,用于根据<code>UNIX Bourne shell</code>的单词解析规则来处理字符串。</li><li><a href="https://github.com/teris-io/shortid">shortid</a> : 分布式生成超短的、唯一的、非序列的、URL友好的ID。</li><li><a href="https://github.com/containrrr/shoutrrr">shoutrrr</a> : 提供轻松访问各种消息服务的通知库,如<code>slack, mattermost, gotify</code>和<code>smtp</code>等。</li><li><a href="https://github.com/qmuntal/stateless">stateless</a> : 用于创建状态机的库</li><li><a href="https://github.com/go-playground/stats">stats</a> : 监控 <code>Go</code> 内存状态及系统状态,通过<code>UDP</code>进行数据发送</li><li><a href="https://github.com/hackebrot/turtle">turtle</a> : <code>Go</code>的<code>Emojis</code>。</li><li><a href="https://github.com/pantrif/url-shortener">url-shortener</a> : 一个现代的、强大的、健壮的、支持<code>mysql</code>的<code>URL</code>短链的微服务。</li><li><a href="https://github.com/azr/generators/tree/master/varhandler">VarHandler</a> : 生成模板化的<code>http</code>输入和输出。</li><li><a href="https://github.com/rkoesters/xdg">xdg</a> : <code>Go</code>中实现的<code>FreeDesktop.org</code> (xdg)规范。</li><li><a href="https://github.com/go-xkg/xkg">xkg</a> : 键盘抓取器</li></ul><hr><h2 id="自然语言处理">自然语言处理</h2><ul><li><a href="https://github.com/detectlanguage/detectlanguage-go">detectlanguage</a> : 语言检测API Go客户端。支持批量请求、短语或单字语言检测。</li><li><a href="https://github.com/rylans/getlang">getlang</a> : 快速自然语言检测包。</li><li><a href="https://github.com/nicksnyder/go-i18n/">go-i18n</a> : ,用于处理本地化文本 的软件包及相关工具</li><li><a href="https://github.com/m1/go-localize">go-localize</a> : 简单易用的<code>i18n</code>（国际化和本地化）引擎 - 用于翻译本地化字符串。</li><li><a href="https://github.com/dveselov/mystem">go-mystem</a> : <code>Yandex.Mystem</code>的<code>CGo</code> 接口, <code>Yandex.Mystem</code> 是一个俄语词汇形态学分析器</li><li><a href="https://github.com/nuance/go-nlp">go-nlp</a> : 在进行自然语言工作时用于处理离散概率分布一些工具,以及其他的一些有用的工具</li><li><a href="https://github.com/mozillazg/go-pinyin">go-pinyin</a> : 汉字到汉语拼音转换器。</li><li><a href="https://github.com/agonopol/go-stem">go-stem</a> : 波特词干算法的一个实现</li><li><a href="https://github.com/mozillazg/go-unidecode">go-unidecode</a> : <code>Unicode</code> 文本音译为<code>ASCII</code> 文本</li><li><a href="https://github.com/danieldk/go2vec">go2vec</a> : 利用 <code>Go</code>语言读取和处理 word2vec</li><li><a href="https://github.com/yanyiwu/gojieba">gojieba</a> : 结巴分词的 <code>Go</code>语言实现的 <a href="https://github.com/fxsjy/jieba">jieba</a> ,结巴分词是一个用于中文的分词算法<br></li><li><a href="https://github.com/rjohnsondev/golibstemmer">golibstemmer</a> : <code>snowball libstemmer</code> 库的 <code>Go</code>语言接口,包括了对 <code>porter 2</code>的支持</li><li><a href="https://github.com/dinopuguh/gosentiwordnet">gosentiwordnet</a> : <code>libstemmer</code>库的Go绑定。</li><li><a href="https://github.com/xujiajun/gotokenizer">gotokenizer</a> : 基于<code>Golang</code>的字典和 <code>Bigram</code> 语言模型的分词器。(现在只支持中文分割)</li><li><a href="https://github.com/fiam/gounidecode">gounidecode</a> : <code>Go</code>语言的 <code>Unicode</code> 直译器 (通常称之为 <code>unidecode</code>)</li><li><a href="https://github.com/jonreiter/govader">govader</a> : <a href="https://github.com/cjhutto/vaderSentiment">VADER Sentiment Analysis</a> 情感分析的<code>Go</code>实现</li><li><a href="https://github.com/go-ego/gse">gse</a> : <code>Go</code>高效的文本分割；支持英语、中文、日语和其他语言。</li><li><a href="https://github.com/goodsign/icu">icu</a> : <code>icu4c C</code>库的 <code>CGo</code>接口,包括了检测和转换函数。保证了<code>version 50.1</code>版本的兼容性</li><li><a href="https://github.com/mehanizm/iuliia-go">iuliia-go</a> : 以各种可能的方式翻译西里尔语→拉丁语。</li><li><a href="https://github.com/ikawaha/kagome">kagome</a> : 用纯<code>Go</code>编写的<code>JP</code>形态分析器。</li><li><a href="https://github.com/goodsign/libtextcat">libtextcat</a> : <code>libtextcat C</code>库的<code>CGo</code>接口。保证了<code>version 2.2</code>版本的兼容性</li><li><a href="https://github.com/awsong/MMSEGO">MMSEGO</a> : <code>Go</code> 语言实现的 <code>MMSEG</code>（一个中文分词算法）</li><li><a href="http://technology.chtsai.org/mmseg/">MMSEG</a> : <code>MMSEG的GO</code>实现,是一种中文分词算法。</li><li><a href="https://github.com/Shixzie/nlp">nlp</a> : 从字符串中提取值,并用nlp填充结构。</li><li><a href="https://github.com/james-bowman/nlp">nlp</a> : 支持<code>LSA</code>（<code>Latent Semantic Analysis</code>）的Go自然语言处理库。</li><li><a href="https://github.com/rookii/paicehusk">paicehusk</a> :<code>Go</code>语言实现的 <code>Paice/Husk</code> 词干算法</li><li><a href="https://github.com/striker2000/petrovich">petrovich</a> : <code>Petrovich</code> 是一个将俄语名称转变成给定语言的库。</li><li><a href="https://github.com/a2800276/porter">porter</a> : <code>Martin Porter</code>实现的<code>C</code>语言版本的<code>Porter</code>词干算法的<code>Go</code> 语言接口。</li><li><a href="https://github.com/zhenjl/porter2">porter2</a> : 非常快速的 <code>Porter 2 stemmer</code>.</li><li><a href="https://github.com/jdkato/prose">prose</a> : 文本处理库,支持词语切分、词性标记、命名实体提取等功能</li><li><a href="https://github.com/Obaied/RAKE.go">RAKE.go</a> : 快速自动关键字提取算法(<code>Rapid Automatic Keyword Extraction：RAKE</code>)的 <code>Go</code> 语言接口</li><li><a href="https://github.com/blevesearch/segment">segment</a> : 用于进行 <code>Unicode</code> 文本分割的库,实现了<a href="http://www.unicode.org/reports/tr29/">Unicode Standard Annex #29</a> 中描述的功能</li><li><a href="https://github.com/neurosnap/sentences">sentences</a> : 语句标记器：将文字段落转换为语句列表</li><li><a href="https://github.com/osamingo/shamoji">shamoji</a> : <code>shamoji</code> 是一个<code>Go</code>语言编写的词过滤软件包</li><li><a href="https://github.com/goodsign/snowball">snowball</a> : <a href="http://snowball.tartarus.org/">Snowball native</a>分词器的Go语言接口,提供了分词提取的功能 .<br></li><li><a href="https://github.com/dchest/stemmer">stemmer</a> : Go 语言分词器软件包,包括了英语和德语分词器</li><li><a href="https://github.com/pebbe/textcat">textcat</a> : 基于 <code>n-gram</code>的 <code>Go</code> 语言文本分类软件包,支持<code>utf-8</code> 和原始文本</li><li><a href="https://github.com/alexsergivan/transliterator">transliterator</a> : 提供单向字符串翻译,支持特定语言的翻译规则</li><li><a href="https://github.com/abadojack/whatlanggo">whatlanggo</a> : <code>Go</code>语言的自然语言检测包。支持84种语言和24种书写 (如拉丁,西里尔等书写系统)。</li><li><a href="https://github.com/olebedev/when">when</a> : 英语、俄语的自然语言日期、时间表达解析器。</li></ul><hr><h2 id="网络相关库">网络相关库</h2><ul><li><a href="https://github.com/mdlayher/arp">arp</a> : 遵循 RFC 826标准实现了<code>ARP</code>协议。</li><li><a href="https://github.com/stabbycutyou/buffstreams">buffstreams</a> : 基于 TCP的 简单易用的<code>protocolbuffer</code> 数据流</li><li><a href="https://github.com/zubairhamed/canopus">canopus</a> : <code>CoAP</code>客户端/服务器实现 (<code>RFC 7252</code>)</li><li><a href="https://github.com/yl2chen/cidranger">cidranger</a> : <code>Go</code>的快速<code>IP、CIDR</code>查找库。</li><li><a href="https://github.com/mdlayher/dhcp6">dhcp6</a> : <code>dhcp6</code> 实现了一个<code>DHCPv6</code>服务器，遵循<code>RFC 3315</code>标准。</li><li><a href="https://github.com/miekg/dns">dns</a> : 用于处理<code>DNS</code> 的<code>Go</code> 语言库</li><li><a href="https://github.com/songgao/ether">ether</a> : 跨平台<code>Go</code> 语言库,用于发送和接收以太帧</li><li><a href="https://github.com/mdlayher/ethernet">ethernet</a> : <code>ethernet</code>实现<code>了IEEE 802.3 Ethernet II</code>帧以及<code>IEEE 802.1Q VLAN</code>标签的组装和剥离.</li><li><a href="https://github.com/valyala/fasthttp">fasthttp</a> : <code>asthttp</code> 是一个快速的<code>HTTP</code>实现,比<code>net/http1</code>的性能快10倍</li><li><a href="https://github.com/fortio/fortio">fortio</a> : 负载测试库和命令行工具,提供先进的<code>echo</code>服务器和web用户界面。允许指定设定每秒钟查询的负载,记录延迟直方图和其他有用的统计数据,并将其绘制成图表。</li><li><a href="https://github.com/jlaffaye/ftp">ftp</a> :<code>ftp</code> 实现了一个<code>FTP</code> 客户端,遵循 <a href="http://tools.ietf.org/html/rfc959">RFC 959</a> 标准</li><li><a href="https://github.com/xtaci/gaio">gaio</a> : 在<code>proactor</code>模式下为<code>Golang</code>提供高性能的异步io网络。</li><li><a href="https://github.com/Allenxuxu/gev">gev</a> : 一个轻量、比标准库更快的基于<code>Reactor</code> 模式的非阻塞<code>TCP</code>网络库,支持自定义协议,可以轻松快速搭建高性能服务器。</li><li><a href="https://github.com/DrmagicE/gmqtt">gmqtt</a> : <code>Gmqtt</code>是一个灵活、高性能的<code>MQTT</code>代理库,它完全实现了<code>MQTT 协议 V3.1.1</code>版本</li><li><a href="https://github.com/panjf2000/gnet">gnet</a> : <code>gnet</code>是用纯Go编写 的一个高性能、轻量级、非阻塞、事件驱动的网络框架,</li><li><a href="https://github.com/google/gnxi">gNxI</a> : 使用<code>gNMI</code>和<code>gNOI</code>协议的网络管理工具集合。</li><li><a href="https://github.com/hashicorp/go-getter">go-getter</a> : 一个用于通过 URL 从多种源下载文件或目录的 Go 语言库</li><li><a href="https://github.com/joeig/go-powerdns">go-powerdns</a> : Golang的<code>PowerDNS API</code>绑定。</li><li><a href="https://github.com/ccding/go-stun">go-stun</a> : <code>Go</code>语言实现的<code>STUN</code>客户端 (参考<code>RFC 3489</code>及<code>RFC 5389</code>标准).</li><li><a href="https://github.com/osrg/gobgp">gobgp</a> : <code>Go</code>语言实现的BGP</li><li><a href="https://github.com/averageflow/gohooks">gohooks</a> : <code>GoHooks</code> 使得从<code>Go</code>应用程序中发送和消费安全的<code>web-hooks</code>非常容易。该库的实现受Spatie的Laravel Webhook客户端和服务器的启发。</li><li><a href="https://github.com/sunwxg/golibwireshark">golibwireshark</a> :<code>Golibwireshark</code> 使用<code>libwireshark</code> 库来解析<code>pcap</code> 文件并且分析数据</li><li><a href="https://github.com/google/gopacket">gopacket</a> : 用于报文处理的库</li><li><a href="https://github.com/akrennmair/gopcap">gopcap</a> : <code>libpcap</code>的 Go 语言封装</li><li><a href="https://github.com/sunwxg/goshark">goshark</a> :<code>Goshark</code>使用<code>tshark</code> 来对<code>IP</code>报文进行解码并创建数据结构用于分析报文</li><li><a href="https://github.com/soniah/gosnmp">gosnmp</a> : 用于执行<code>SNMP</code>操作的库</li><li><a href="https://github.com/gansidui/gotcp">gotcp</a> : 用于快速编写<code>tcp</code>应用的库</li><li><a href="https://github.com/cavaliercoder/grab">grab</a> : 管理文件下载的<code>Go</code> 语言库</li><li><a href="https://github.com/koofr/graval">graval</a> : 试验性的<code>FTP</code> 服务器框架</li><li><a href="https://github.com/gchaincl/httplab">HTTPLab</a> : <code>HTTPLabs</code>让你检查<code>HTTP</code>请求和伪造响应。</li><li><a href="https://github.com/wzshiming/httpproxy">httpproxy</a> : <code>HTTP</code>代理处理程序和拨号器。</li><li><a href="https://github.com/c-robinson/iplib">iplib</a> : 用于处理<code>IP</code>地址的库 (<code>net.IP, net.IPNet</code>),灵感来自<code>python ipaddress</code>和<code>ruby ipaddr</code>。</li><li><a href="https://github.com/udhos/jazigo">jazigo</a> : <code>Jazigo</code>是一个用<code>Go</code>编写的工具,用于检索多个网络设备的配置。</li><li><a href="https://github.com/xtaci/kcp-go">kcp-go</a> :<code>KCP</code> - 快速可靠的<code>ARQ</code>协议。</li><li><a href="https://github.com/xtaci/kcptun">kcptun</a> : 基于<code>KCP</code>协议的极其简单和快速的<code>udp</code>隧道。</li><li><a href="https://github.com/fanux/lhttp">lhttp</a> : 强大的<code>websocket</code>框架,让您更轻松地建立<code>IM</code>服务器。</li><li><a href="https://github.com/ian-kent/linkio">linkio</a> : 接口读写速度模拟器</li><li><a href="https://github.com/kirillDanshin/llb">llb</a> : 非常简单但快速的后端代理服务器。对于快速重定向到预定义域名很有用,无内存分配,响应速度快</li><li><a href="https://github.com/hashicorp/mdns">mdns</a> : 简单的<code>mDNS</code> (组播 DNS)客户端/服务器库</li><li><a href="https://eclipse.org/paho/clients/golang/">mqttPaho</a> : <code>Paho</code>客户端提供了一个<code>MQTT</code>客户端库,用于通过<code>TCP, TLS</code> 或<code>WebSockets</code>和<code>MQTT broker</code> 建立连接</li><li><a href="https://github.com/intel-go/nff-go">NFF-Go</a> : 用于快速开发云和裸机（原<code>YANFF</code>）的高性能网络功能的框架。</li><li><a href="https://github.com/aerogo/packet">packet</a> : 通过<code>TCP</code>和<code>UDP</code>发送数据包。如果需要的话,它可以缓冲消息和热交换连接。</li><li><a href="https://github.com/yahoo/panoptes-stream">panoptes-stream</a> : 云端原生的分布式流媒体网络遥测（<code>gNMI、Juniper JTI</code>和<code>Cisco MDT</code>）库。</li><li><a href="https://github.com/schollz/peerdiscovery">peerdiscovery</a> : <code>Go</code>库,用于使用<code>UDP</code>组播进行跨平台本地对等发现。</li><li><a href="https://github.com/aybabtme/portproxy">portproxy</a> : 单的<code>TCP</code>代理,为不支持<code>CORS</code>的API增加了<code>CORS</code>支持。</li><li><a href="https://github.com/polera/publicip">publicip</a> : <code>publicip</code>返回你面向公众的<code>IPv4</code>地址（互联网出口）。</li><li><a href="https://github.com/lucas-clemente/quic-go">quic-go</a> : 纯<code>Go</code>中<code>QUIC</code>协议的实现。</li><li><a href="https://github.com/mdlayher/raw">raw</a> :<code>raw</code>允许你在设备驱动层读写网络接口的数据</li><li><a href="https://github.com/pkg/sftp">sftp</a> : <code>sftp</code> 实现了<a href="https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt">https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt</a> 中描述的 SSH 文件传输协议</li><li><a href="https://github.com/gliderlabs/ssh">ssh</a> : 用于创建 SSH 服务器的高级<code>API</code>(封装了<code>crypto/ssh</code>).</li><li><a href="https://github.com/eduardonunesp/sslb">sslb</a> : 超简单的负载均衡库。</li><li><a href="https://github.com/go-rtc/stun">stun</a> :<code>RFC 5389 STUN</code>协议的<code>Go</code>实现。</li><li><a href="https://github.com/firstrow/tcp_server">tcp_server</a> : 用于更快地构建<code>tcp</code>服务器的<code>Go</code>库。</li><li><a href="https://github.com/two/tspool">tspool</a> : 一个使用w<code>orker pool</code>来提高性能和保护服务器的TCP库。</li><li><a href="https://github.com/anacrolix/utp">utp</a> : <code>Go uTP</code>微传输协议的实现</li><li><a href="https://github.com/yahoo/vssh">vssh</a> : <code>Go</code>库,用于通过<code>SSH</code>协议构建网络和服务器自动化。</li><li><a href="https://github.com/songgao/water">water</a> : 一个简单的<code>TUN/TAP</code>库。</li><li><a href="https://github.com/pions/webrtc">webrtc</a> :<code>WebRTC API</code>的纯<code>Go</code>实现。</li><li><a href="https://github.com/masterzen/winrm">winrm</a> : 用于在<code>Windows</code> 机器上远程执行命令的<code>Go WinRM</code>客户端。</li><li><a href="https://github.com/xfxdev/xtcp">xtcp</a> : <code>TCP</code> 服务器框架,支持同时全双工通信。可以优雅的关闭,并且支持自定义协议</li></ul><hr><h3 id="http-client">Http Client</h3><ul><li><a href="https://github.com/h2non/gentleman">gentleman</a> : -插件驱动的<code>HTTP</code>客户端库。</li><li><a href="https://github.com/bozd4g/go-http-client">go-http-client</a> : 支持简单方便地进行<code>http</code>调用。</li><li><a href="https://github.com/levigross/grequests">grequests</a> : 著名的请求库的<code>Go</code>版本。</li><li><a href="https://github.com/gojektech/heimdall">heimdall</a> : 具有重试和<code>hystrix</code>功能的<code>http</code>客户端。</li><li><a href="https://github.com/ybbus/httpretry">httpretry</a> : 丰富了默认的<code>Go HTTP</code>客户端的重试功能。</li><li><a href="https://github.com/sethgrid/pester">pester</a> : 具有重试、回退和并发功能的<code>Go HTTP</code>客户端调用。</li><li><a href="https://github.com/monaco-io/request">request</a> : <code>golang</code>的<code>HTTP</code>客户端。如果你有关于<code>axios</code>或<code>requests</code> 的经验,你会喜欢它,该库没有第三方依赖。</li><li><a href="https://github.com/go-resty/resty">resty</a> : 受<code>Ruby rest-client</code> 的启发,为<code>Go</code> 设计的简单<code>HTTP</code>和<code>REST</code>客户端。</li><li><a href="https://github.com/ddo/rq">rq</a> : <code>golang</code>标准客户端的更好的接口封装</li><li><a href="https://github.com/dghubble/sling">sling</a> : 用于创建和发送<code>API</code>请求的<code>Go HTTP</code>客户端库。</li></ul><hr><h3 id="opengl">OpenGL</h3><ul><li><a href="https://github.com/go-gl/gl">gl</a> : <code>OpenGL</code>的<code>Go</code>语言接口</li><li><a href="https://github.com/go-gl/glfw">glfw</a> : <code>GLFW 3</code>的<code>Go</code>语言接口</li><li><a href="https://github.com/technohippy/go-glmatrix">go-glmatrix</a> : <a href="http://glmatrix.net/">glMatrix</a> 库的 Go 移植。 :<br></li><li><a href="https://github.com/goxjs/gl">goxjs/gl</a> : <code>Go</code>语言跨平台<code>OpenGL</code> 接口(<code>OS X, Linux, Windows, browsers, iOS, Android</code>).</li><li><a href="https://github.com/goxjs/glfw">goxjs/glfw</a> :<code>Go</code> 语言跨平台<code>glfw</code>库,用于创建<code>OpenGL</code>上下文并接收事件</li><li><a href="https://github.com/go-gl/mathgl">mathgl</a> : <code>Go</code>语言<code>3D</code>数学库,专注于<code>3D</code>,受到<code>GLM</code> 启发</li></ul><hr><h3 id="orm">ORM</h3><ul><li><a href="https://github.com/astaxie/beego/tree/master/orm">beego orm</a> : 强大的<code>Go</code> 语言<code>orm</code> 框架,支持<code>pq/mysql/sqlite3</code>.</li><li><a href="https://github.com/facebook/ent">ent</a> : 简单而强大的用于数据建模和查询的ORM。</li><li><a href="https://github.com/jschoedt/go-firestorm">go-firestorm</a> :<code>Google/Firebase Cloud Firestor</code>e的简单<code>ORM</code>。<br></li><li><a href="https://github.com/go-pg/pg">go-pg</a> : 专注于<code>PostgreSQL</code>功能和性能的<code>ORM</code>。</li><li><a href="https://github.com/jirfag/go-queryset">go-queryset</a> : 100%类型安全的<code>ORM</code>,能够基于<code>GORM</code>进行代码生成和支持<code>MySQL、PostgreSQL、Sqlite3、SQL Server</code>等数据库</li><li><a href="https://github.com/rushteam/gosql">go-sql</a> : 简单的<code>mysql ORM</code>。</li><li><a href="https://github.com/huandu/go-sqlbuilder">go-sqlbuilder</a> : 灵活而强大的<code>SQL</code>字符串构建库,加上一个零配置的<code>ORM</code>。</li><li><a href="https://github.com/gosuri/go-store">go-store</a> : -简单快速的基于<code>Redis</code> 的键值对存储库</li><li><a href="https://github.com/go-gorm/gorm">GORM</a> : 超棒的<code>Go</code> 语言<code>ORM</code> 库,对开发者非常友好</li><li><a href="https://github.com/xxjwxc/gormt">gormt</a> : <code>Mysql</code>数据库到Golang 结构体的<code>orm</code>库。</li><li><a href="https://github.com/go-gorp/gorp">gorp</a> :<code>Go</code>的<code>ORM</code>类库。</li><li><a href="https://github.com/Fs02/grimoire">grimoire</a> : <code>Grimoire</code>是<code>golang</code>的数据库访问层和验证层。(支持：<code>MySQL, PostgreSQL</code> 和<code>SQLite3</code>)。</li><li><a href="https://github.com/abrahambotros/lore">lore</a> : 适用于<code>Go</code>的简单轻量级的伪ORM/伪结构映射环境,。</li><li><a href="https://github.com/marlow/marlow">marlow</a> : 从项目结构生成<code>ORM</code>,以保证编译时的安全。</li><li><a href="https://github.com/gobuffalo/pop">pop/soda</a> : 支持<code>MySQL, PostgreSQL</code>, 以及<code>SQLite</code>.的数据库迁移、创建、<code>ORM</code> 的工具,</li><li><a href="https://github.com/coocood/qbs">QBS</a> : 利用结构体进行标准查询,是一个<code>Go</code>语言<code>ORM</code></li><li><a href="https://github.com/go-reform/reform">reform</a> : 基于非空接口和代码生成的优秀的<code>ORM</code>,</li><li><a href="https://github.com/go-rel/rel">rel</a> :<code>Golang</code>的现代数据库访问层 - 可测试、可扩展,并支持生成简洁优雅的<code>API</code>。</li><li><a href="https://github.com/volatiletech/sqlboiler">SQLBoiler</a> :<code>ORM</code> 生成器。为你的数据库表单生成一个功能全面、快速的<code>ORM</code></li><li><a href="https://github.com/upper/db">upper.io/db</a> : - 通过使用封装了成熟的数据库驱动的适配器,来使用单一接口与不同的数据源进行交互</li><li><a href="https://gitea.com/xorm/xorm">XORM</a> : 简单、强大的<code>Go</code> 语言<code>orm</code></li><li><a href="https://github.com/albrow/zoom">Zoom</a> : 基于<code>Redis</code> 构建的超快的数据存储于查询引擎。</li></ul><hr><h2 id="go语言包管理">Go语言包管理</h2><ul><li><a href="https://golang.org/cmd/go/#hdr-Modules__module_versions__and_more">go modules</a> : <code>go module</code>是最新的<code>go</code>语言版本管理工具。<code>go module</code>具有支持包引入记录和其他模块的依赖构建功能。</li><li><a href="https://github.com/golang/dep">dep</a> : Go 语言依赖工具.</li><li><a href="https://go.googlesource.com/vgo/">vgo</a> : 用于包和依赖管理的非官方库。</li><li><a href="https://github.com/LyricalSecurity/gigo">gigo</a> : 类似<code>PIP</code>的依赖管理工具。支持私有仓库和哈希</li><li><a href="https://github.com/Masterminds/glide">glide</a> : 轻松管理你的<code>GO</code> 语言包发布者以及发布包。 受到类似<code>Maven, Bundler</code> 和<code>Pip</code>这些工具的的启发</li><li><a href="https://github.com/tools/godep">godep</a> : <code>Go</code> 语言依赖工具,<code>Godep</code>可以帮助开发者修复库的依赖关系</li><li><a href="https://github.com/mattn/gom">gom</a> : <code>Go Manager</code></li><li><a href="https://github.com/nitrous-io/goop">goop</a> : 简单的依赖管理工具,受到<code>Bundler</code>的启发</li><li><a href="https://github.com/lunny/gop">gop</a> : 通过<code>GOPATH</code> 构建和管理你的<code>Go</code> 应用程序。</li><li><a href="https://github.com/gpmgo/gopm">gopm</a> : <code>Go</code> 包管理器</li><li><a href="https://github.com/kardianos/govendor">govendor</a> : Go 包管理器。<code>Go</code>语言<code>vendor</code> 工具，兼容标准<code>vendor</code>文件</li><li><a href="https://github.com/pote/gpm">gpm</a> : <code>Go</code>语言包管理工具</li><li><a href="https://github.com/VividCortex/johnny-deps">johnny-deps</a> : 使用<code>Git</code> 的最小依赖版本。</li><li><a href="https://github.com/lucasepe/modgv">modgv</a> : 将<code>go mod graph</code>输出转换为<code>Graphviz</code>的<code>DOT</code> 语言。</li><li><a href="https://github.com/raydac/mvn-golang">mvn-golang</a> : 提供自动加载<code>Golang SDK</code>、依赖管理和在<code>Maven</code>项目基础架构中启动构建环境的方法的插件。</li><li><a href="https://github.com/jingweno/nut">nut</a> : <code>Vendor Go</code>的依赖关系。</li><li><a href="https://github.com/DamnWidget/VenGO">VenGO</a> : 创建和管理可导出的隔离的Go虚拟环境。 绩效</li><li><a href="https://github.com/jaegertracing/jaeger">jaeger</a> : 分布式跟踪系统。</li><li><a href="https://github.com/pixie-labs/pixie">pixie</a> : 通过<code>eBPF</code> 对<code>Golang</code>应用程序进行无工具追踪。</li><li><a href="https://github.com/pkg/profile">profile</a> : <code>Go</code> 的简单剖析支持包。</li><li><a href="https://github.com/arl/statsviz">statsviz</a> : 实时可视化你的<code>Go</code>应用程序运行时的统计数据。</li><li><a href="https://github.com/kamilsk/tracer">tracer</a> : 简单、轻量级的代码追踪库。</li></ul><hr><h3 id="查询语">查询语</h3><ul><li><a href="https://github.com/ccbrown/api-fu">api-fu</a> :<code>GraphQL</code>的go语言实现。</li><li><a href="https://github.com/tomwright/dasel">dasel</a> : 基于命令行的选择器查询和更新数据结构。类似于<code>jq/yq</code>,但支持<code>JSON、YAML、TOML</code>和<code>XML</code>。</li><li><a href="https://github.com/thedevsaddam/gojsonq">gojsonq</a> : 用于查询<code>JSON</code>数据的<code>Go</code>包</li><li><a href="https://github.com/tmc/graphql">graphql</a> : <code>graphql</code>解析器和实用工具</li><li><a href="https://github.com/neelance/graphql-go">graphql</a> : 专注于易用性的<code>GraphQL</code> 服务器</li><li><a href="https://github.com/graphql-go/graphql">graphql-go</a> : 为<code>Go</code>语言实现的<code>GraphQL</code></li><li><a href="https://github.com/Zaba505/gws">gws</a> : <code>Apollos</code>的<code>GraphQL over Websocket</code>客户端和服务器实现。</li><li><a href="https://github.com/elgs/jsonql">jsonql</a> : <code>JSON</code>查询表达式库</li><li><a href="https://github.com/bhmj/jsonslice">jsonslice</a> : 具有高级过滤器的<code>Json</code>路径查询。</li><li><a href="https://github.com/a8m/rql">rql</a> : <code>REST API</code>的资源查询语言。</li><li><a href="https://github.com/timsolov/rest-query-parser">rqp</a> : <code>REST API</code>的查询分析器。在查询中直接支持过滤、验证、AND、OR操作。</li><li><a href="https://github.com/SonicRoshan/straf">straf</a> : - 轻松地将<code>Golang</code>结构转换为<code>GraphQL</code>对象。</li></ul><hr><h2 id="资源嵌入">资源嵌入</h2><ul><li><a href="https://github.com/mjibson/esc">esc</a> : - 在<code>Go</code>语言程序中嵌入文件并为其提供<code>HTTP.FileSystem</code> 接口</li><li><a href="https://github.com/UnnoTed/fileb0x">fileb0x</a> : 用于在<code>Go</code>语言程序中嵌入文件的工具,专注于可定制化和易用性</li><li><a href="https://github.com/pyros2097/go-embed">go-embed</a> : 生成用于嵌入资源文件到库或可执行文件的 Go 语言代码</li><li><a href="https://github.com/omeid/go-resources">go-resources</a> : 简洁的<code>Go</code> 语言资源嵌入工具</li><li><a href="https://github.com/GeertJohan/go.rice">go.rice</a> :<code>Go.rice</code>是一个让你轻松使用<code>html,js,css,</code>图片以及模板这类资源的库</li><li><a href="https://github.com/wlbr/mule">mule</a> : 将外部资源如图片、电影..嵌入到Go源代码中,使用<code>go generate</code>创建单文件二进制文件,专注于简单性。</li><li><a href="https://github.com/gobuffalo/packr">packr</a> : 将静态文件嵌入<code>Go</code>二进制文件的简单方法。</li><li><a href="https://github.com/go-playground/statics">statics</a> : 将静态资源嵌入到<code>Go</code> 文件中,用于单独二进制编译+使用<code>http.FileSystem + symlinks</code>.</li><li><a href="https://github.com/rakyll/statik">statik</a> : 将静态文件嵌入到<code>Go</code> 语言可执行文件中</li><li><a href="https://github.com/wlbr/templify">templify</a> : 将外部目标文件嵌入到<code>Go</code> 代码中来创建单独的二进制文件</li><li><a href="https://github.com/shurcooL/vfsgen">vfsgen</a> : 生成一个<code>vfsdata.Go</code>文件,静态实现了一个虚拟文件系统</li></ul><hr><h2 id="数据分析与数据科学">数据分析与数据科学</h2><ul><li><a href="https://github.com/ndabAP/assocentity">assocentity</a> :单词到给定实体的平均距离计算包。</li><li><a href="https://github.com/seanhagen/bradleyterry">bradleyterry</a> : 成对比较提供一个布拉德利-特里模型。</li><li><a href="https://github.com/nikolaydubina/calendarheatmap">calendarheatmap</a> : 受<code>Github contribution</code>的启发,为普通Go语言包提供的日历热图。</li><li><a href="https://github.com/vdobler/chart">chart</a> : Go的简单图表绘制库,支持多种图形类型。</li><li><a href="https://github.com/rocketlaunchr/dataframe-go">dataframe-go</a> : 用于机器学习和统计的数据框类似于<code>pandas</code></li><li><a href="https://github.com/db47h/decimal">decimal</a> : 包<code>decimal</code>实现了任意精度的十进制浮点运算。</li><li><a href="https://github.com/soniah/evaler">evaler</a> : 简单的浮点算术表达式评估器。</li><li><a href="https://github.com/VividCortex/ewma">ewma</a> : 指数加权移动平均数。</li><li><a href="https://github.com/skelterjohn/geom">geom</a> : <code>golang</code>的几何处理库。</li><li><a href="https://github.com/mjibson/go-dsp">go-dsp</a> : 数字信号处理</li><li><a href="https://github.com/ThePaw/go-gt">go-gt</a> : 图论算法</li><li><a href="https://github.com/kzahedi/goent">goent</a> : 熵测量的<code>GO</code>实现</li><li><a href="https://github.com/VividCortex/gohistogram">gohistogram</a> : 数据流的近似直方图</li><li><a href="https://github.com/gonum/gonum">gonum</a> : 用于<code>Go</code> 编程语言的数值库。它包含了矩阵、统计、优化等方面的库。</li><li><a href="https://github.com/gonum/plot">gonum/plot</a> : <code>Gonum/plot</code>提供了用于创建和绘制图表的<code>API</code></li><li><a href="https://github.com/gyuho/goraph">goraph</a> : 纯<code>Go</code>语言编写的图论库（数据结构,算法可视化）</li><li><a href="https://github.com/cpmech/gosl">gosl</a> : 用于线性代数、FFT、几何学、<code>NURBS</code>、数值方法、概率、优化、微分方程等的<code>Go</code> 科学库。</li><li><a href="https://github.com/OGFris/GoStats">GoStats</a> : <code>GoStats</code> 是一个开源的<code>GoLang</code> 库,主要用于机器学习领域的数学统计,它涵盖了大部分的统计测量函数。</li><li><a href="https://github.com/yourbasic/graph">graph</a> : 基本图形算法库。</li><li><a href="https://github.com/ChristopherRabotin/ode">ode</a> : 普通微分方程 (<code>ODE</code>) 求解器。支持扩展状态及基于通道的迭代算法终止条件</li><li><a href="https://github.com/paulmach/orb">orb</a> : 支持剪裁、<code>GeoJSON</code> 和<code>Mapbox Vector Tile</code>的<code>2D</code> 几何类型。</li><li><a href="https://github.com/alixaxel/pagerank">pagerank</a> :<code>Go</code>语言实现的加权网页排名<code>PageRank</code>算法</li><li><a href="https://github.com/sgreben/piecewiselinear">piecewiselinear</a> : 小型线性插值库。</li><li><a href="https://github.com/claygod/PiHex">PiHex</a> : 贝利-波尔温-普劳夫公式<code>"Bailey-Borwein-Plouffe"</code>）`算法的实现,用于计算十六进制π</li><li><a href="https://github.com/khezen/rootfinding">rootfinding</a> : 用于查找二次函数根的寻根算法库</li><li><a href="https://github.com/montanaflynn/stats">stats</a> : 统计库,包含一些<code>Go</code> 语言标准库中漏掉的常用函数</li><li><a href="https://github.com/nytlabs/streamtools">streamtools</a> : 通用图形化工具,用于处理流数据</li><li><a href="https://github.com/DavidBelicza/TextRank">TextRank</a> :<code>Golang</code>中的<code>TextRank</code> 实现,具有可扩展的特性（摘要、加权、短语提取）和多线程（goroutine）支持。</li><li><a href="https://github.com/tchayen/triangolatte">triangolatte</a> : <code>2D</code>三角测量库。允许将线条和多边形（基于点）翻译成<code>GPU</code>语言。</li></ul><hr><h2 id="安全领域相关库">安全领域相关库</h2><ul><li><a href="https://github.com/hlandau/acme">acmetool</a> :<code>ACME (Let's Encrypt)</code> 客户端工具,支持自动续期.</li><li><a href="https://github.com/cossacklabs/acra">acra</a> : 用于保护基于数据库的应用程序的网络加密代理,用于防止数据泄露、<code>SQL</code>注入等。</li><li><a href="https://github.com/andskur/argon2-hashing">argon2-hashing</a> :<code>Go</code> 的<code>argon2</code> 包的封装,与<code>Go</code> 的标准库<code>Bcrypt</code> 和<code>simple-scrypt</code> 包相对应</li><li><a href="https://github.com/raja/argon2pw">argon2pw</a> : 具有恒定时间密码比较功能的<code>argon2</code> 密码散列生成库</li><li><a href="https://godoc.org/golang.org/x/crypto/acme/autocert">autocert</a> : 自动提供<code>Let's Encrypt</code> 证书并启动<code>TLS</code>服务器。</li><li><a href="https://github.com/jaredfolkins/badactor">BadActor</a> : 受<code>fail2ban</code> 的启发驻留在内存中的应用驱动监控程序,</li><li><a href="https://github.com/Ullaakut/cameradar">Cameradar</a> : 用于远程入侵监控摄像头的<code>RTSP</code>流的工具库。</li><li><a href="https://github.com/mvmaasakkers/certificates">certificates</a> : 用于生成<code>tls</code>证书的工具库。</li><li><a href="https://github.com/prashantgupta24/firewalld-rest">firewalld-rest</a> : 用于动态更新<code>linux</code>服务器上的<code>firewalld</code>规则的定时程序。</li><li><a href="https://github.com/m1/go-generate-password">go-generate-password</a> : 密码生成器,可以作为客户端使用或者作为代码库使用。<br></li><li><a href="https://github.com/lane-c-wagner/go-password-validator">go-password-validator</a> : 用于原始加密熵值的密码验证器。</li><li><a href="https://github.com/hillu/go-yara">go-yara</a> : Go Bindings for<a href="https://github.com/plusvic/yara">YARA</a> 恶意软件研究人员（以及其他所有人）的模式匹配瑞士刀"。</li><li><a href="https://github.com/dwin/goArgonPass">goArgonPass</a> : <code>Argon2</code>密码散列和验证,旨在与现有的Python和PHP实现兼容。</li><li><a href="https://github.com/dwin/goSecretBoxPassword">goSecretBoxPassword</a> : 用于安全地散列和加密密码的<code>go</code>语言包。</li><li><a href="https://bitbucket.org/vahidi/interpol">Interpol</a> : 用于模糊和渗透测试的基于规则的数据生成器,。</li><li><a href="https://github.com/go-acme/lego">lego</a> : 纯<code>Go</code>语言开发的<code>ACME</code> 客户端库及命令行工具</li><li><a href="https://github.com/awnumar/memguard">memguard</a> : 用于处理内存中敏感数据的<code>Go</code> 语言库</li><li><a href="https://github.com/kevinburke/nacl">nacl</a> : <code>NaCL</code>系列<code>API</code> 的<code>Go</code> 实现</li><li><a href="https://github.com/pjebs/optimus-go">optimus-go</a> : 使用<code>Knuth</code>算法进行<code>ID</code>哈希和混淆。</li><li><a href="https://github.com/hlandau/passlib">passlib</a> : 密码哈希库</li><li><a href="https://github.com/unrolled/secure">secure</a> : 为 Go 提供了一些安全功能<code>HTTP</code> 中间件,</li><li><a href="https://github.com/xaionaro-go/secureio">secureio</a> : 基于<code>XChaCha20-poly1305、ECDH</code>和<code>ED25519</code>的<code>io.ReadWriteCloser</code>的密钥交换+认证+加密封装器和复用器<br></li><li><a href="https://github.com/elithrar/simple-scrypt">simple-scrypt</a> : <code>Scrypt</code>库,具有简单、易懂的<code>API</code>,同时具有内置的自动校准功能</li><li><a href="https://github.com/ssh-vault/ssh-vault">ssh-vault</a> : 利用<code>ssh</code> 秘钥加解密 。</li><li><a href="https://github.com/adrianosela/sslmgr">sslmgr</a> : 通过对<code>acme/autocert</code>的高级封装,使<code>SSL</code>证书的使用变得简单。</li><li><a href="https://github.com/cossacklabs/themis">themis</a> : 高级加密库,用于解决典型的数据安全任务（安全数据存储、安全消息传递、零知识证明认证）,提供14种语言,最适合多平台应用。</li></ul><hr><h2 id="序列化">序列化</h2><ul><li><a href="https://github.com/PromonLogicalis/asn1">asn1</a> :<code>Asn.1 BE</code>R 及<code>DER</code> 编码库</li><li><a href="https://github.com/glycerine/bambam">bambam</a> : 从<code>Go</code>中生成<code>Cap'n Proto</code>模式。</li><li><a href="https://github.com/32leaves/bel">bel</a> : 从Go结构/接口生成<code>TypeScript</code>接口。对<code>JSON RPC</code>有用。</li><li><a href="https://github.com/ghostiam/binstruct">binstruct</a> : 用于将数据映射到结构中的<code>Golang</code> 二进制解码器。</li><li><a href="https://github.com/fxamacker/cbor">cbor</a> : 小巧、安全、简单的<code>CBOR</code> 编码和解码库。</li><li><a href="https://github.com/pascaldekloe/colfer">colfer</a> : 用于生成<code>Colfer</code>二进制格式代码</li><li><a href="https://github.com/jszwec/csvutil">csvutil</a> : 高性能的<code>CSV</code>记录编码和解码器</li><li><a href="https://github.com/epiclabs-io/elastic">elastic</a> : 在动态转换不同类型的库</li><li><a href="https://github.com/huydang284/fixedwidth">fixedwidth</a> : 固定宽度的文本格式（支持UTF-8）。</li><li><a href="https://github.com/o1egl/fwencoder">fwencoder</a> : Go的固定宽度文件解析器（编码和解码库）</li><li><a href="https://github.com/glycerine/go-capnproto">go-capnproto</a> : Go的<code>Cap'n Proto</code>编码器和解析器。</li><li><a href="https://github.com/ugorji/go">go-codec</a> : 高性能、多功能、规范化编码解码以及<code>rpc</code>库, 用于<code>msgpack, cbor</code>和<code>json</code>,支持基于运行时的 OR 码生成</li><li><a href="https://github.com/sbourlon/go-lctree">go-lctree</a> : 提供一个<code>CLI</code>和基元来序列化和反序列化<code>LeetCode</code>二进制树。 <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation">LeetCode binary trees</a> :<br></li><li><a href="https://github.com/gogo/protobuf">gogoprotobuf</a> : 用于<code>Gadgets</code> 的go协议缓冲区。</li><li><a href="https://github.com/golang/protobuf">goprotobuf</a> : 以库和协议编译器插件的形式为<code>Google</code> 的协议缓冲区提供 Go 支持。</li><li><a href="https://github.com/json-iterator/go">jsoniter</a> : 100%兼容的<code>"encoding/json "</code>的 高性能程序库。</li><li><a href="https://github.com/mitchellh/mapstructure">mapstructure</a> : 用于将通用<code>map</code>值解码为本地Go结构的Go库。</li><li><a href="https://github.com/yvasiyarov/php_session_decoder">php_session_decoder</a> : 用于处理<code>PHP session</code> 格式和<code>PHP Serialize/Unserialize</code>函数的 GoLang 库。</li><li><a href="https://github.com/vimeda/pletter">pletter</a> : 为消息中介包装原消息的标准方法。</li><li><a href="https://github.com/tuvistavie/structomap">structomap</a> : 用于从静态结构中轻松动态地生成映射的库。</li></ul><hr><h2 id="服务端应用">服务端应用</h2><ul><li><a href="https://github.com/xyproto/algernon">algernon</a> :<code>HTTP/2 web</code>服务器,内置<code>Lua、Markdown、GCSS</code>和<code>Amber</code>支持。</li><li><a href="https://github.com/mholt/caddy">Caddy</a> :<code>Caddy</code>是一个备选的<code>HTTP/2 web</code> 服务器,配置简单,使用方便。</li><li><a href="https://www.consul.io/">consul</a> : <code>Consul</code>是一个用于服务发现、监控和配置的工具</li><li><a href="https://github.com/cortesi/devd">devd</a> : 开发者使用的本地<code>web</code> 服务器</li><li><a href="https://github.com/Bilibili/discovery">discovery</a> : 一个用于弹性中层负载均衡和故障转移的注册表。</li><li><a href="https://github.com/krotik/dudeldu">dudeldu</a> : 一个简单的<code>SHOUTcast</code>服务器。</li><li><a href="https://github.com/coreos/etcd">etcd</a> : 高可用性的键值存储,用于分享配置和服务发现</li><li><a href="https://github.com/getfider/fider">Fider</a> : <code>Fider</code>是一个收集和整理客户反馈的开放平台。</li><li><a href="https://github.com/checkr/flagr">Flagr</a> : <code>Flagr</code>是一个开源的功能标志和A/B测试服务。</li><li><a href="https://github.com/markphelps/flipt">flipt</a> : 用<code>Go</code>和<code>Vue.js</code>编写的自带功能标志的解决方案。</li><li><a href="https://github.com/fabiocicerchia/go-proxy-cache">go-proxy-cache</a> : 简单的反向代理与缓存,用<code>Go</code>编写,使用<code>Redis</code>。</li><li><a href="https://github.com/ortuman/jackal">jackal</a> : 用Go编写的<code>XMPP</code>服务器。</li><li><a href="https://github.com/rekby/lets-proxy2">lets-proxy2</a> : 反向代理,用于处理<code>https</code>,在fly中使用<code>lets-encrypt</code>发行证书。</li><li><a href="https://github.com/minio/minio">minio</a> : Minio 是一个分布式对象存储服务器</li><li><a href="https://github.com/blind-oracle/nginx-prometheus">nginx-prometheus</a> : -<code>NginxPrometheus exporter</code> 。</li><li><a href="http://nsq.io/">nsq</a> : 一个实时的分布式消息平台</li><li><a href="https://github.com/camgraff/protoxy">protoxy</a> : 一个将JSON请求体转换为协议缓冲区的代理服务器。</li><li><a href="https://github.com/blind-oracle/psql-streamer">psql-streamer</a> : 从<code>PostgreSQL</code>到<code>Kafka</code>的数据库事件流。<br></li><li><a href="https://github.com/blind-oracle/riemann-relay">riemann-relay</a> : - 负载平衡<code>Riemann</code>事件和/或将其转换为<code>Carbon</code>的中继。</li><li><a href="https://github.com/spiral/roadrunner">RoadRunner</a> : 高性能的PHP应用服务器,负载均衡器和进程管理器。</li><li><a href="https://github.com/drakkan/sftpgo">SFTPGo</a> : 功能齐全、高度可配置的<code>SFTP</code>服务器,可选择支持<code>FTP/S和WebDAV</code>。它可以为本地文件系统和云存储后端服务,如S3和谷歌云存储。</li><li><a href="https://github.com/leberKleber/simple-jwt-provider">simple-jwt-provider</a> : 简单轻量级的<code>provider</code>,它展示了<code>JWTs</code>,支持登录、密码重置（通过邮件）和用户管理。</li><li><a href="https://github.com/tricksterproxy/trickster">Trickster</a> : <code>HTTP</code>反向代理缓存和时间序列加速器。</li></ul><hr><h2 id="流处理">流处理</h2><p><code>流式数据处理和响应式编程库</code></p><ul><li><a href="https://github.com/reugn/go-streams">go-streams</a> :<code>Go</code>流处理库。</li><li><a href="https://github.com/whitaker-io/machine">machine</a> : 内置度量和具有可跟踪的用于编写和生成流式<code>worker</code>的<code>Go</code> 库</li><li><a href="https://github.com/youthlin/stream">stream</a> :<code>Go Stream</code>,像<code>Java 8 Stream</code>一样。支持<code>Filter/Map/FlatMap/Peek/Sorted/ForEach/Reduce...</code>等特性</li></ul><hr><h2 id="模板引擎">模板引擎</h2><p><code>模版渲染和模版生成处理库</code></p><ul><li><a href="https://github.com/yosssi/ace">ace</a> : Go 语言版本的 HTML 模板引擎,受到了<code>Slim</code>和<code>Jade</code> 的启发。<code>Ace</code> 是对<code>Gold</code>的一种改进。</li><li><a href="https://github.com/eknkc/amber">amber</a> : Amber 是一个优雅的模板引擎,受到<code>HAML</code>和<code>Jade</code>的启发</li><li><a href="https://github.com/dskinner/damsel">damsel</a> : 通过css选择器实现了<code>html</code> 框架 ,并可以通过<code>pkg html/template</code> 等进行扩展</li><li><a href="https://github.com/benbjohnson/ego">ego</a> : 轻量级模板语言,让你可以使用<code>Go</code>语言来创建模板。模板会被转化为 Go 语言并编译</li><li><a href="https://github.com/dannyvankooten/extemplate">extemplate</a> : 围绕<code>html/template</code> 的小型封装器,可以轻松实现基于文件的模板继承</li><li><a href="https://github.com/valyala/fasttemplate">fasttemplate</a> : 简单而快速的模板引擎。替换模板占位符的速度比<a href="http://golang.org/pkg/text/template/">text/template</a> : 快10倍</li><li><a href="https://github.com/jung-kurt/gofpdf">gofpdf</a> : <code>PDF</code>文档生成器,高度支持文本、绘图和图像。</li><li><a href="https://github.com/m1/gospin">gospin</a> : 语法引擎,对于<code>A/B</code>、测试文本/文章片段和创建更自然的对话非常有用。</li><li><a href="https://github.com/foolin/goview">goview</a> : <code>Goview</code>是一个轻量级的、简约的、习惯性的模板库,基于<code>golang html/template</code>来构建<code>Go web</code>应用。</li><li><a href="https://github.com/shiyanhui/hero">hero</a> :<code>Hero</code>是一个趁手的、快速的、强大的<code>Go</code> 语言模板引擎</li><li><a href="https://github.com/CloudyKit/jet">jet</a> :<code>Jet</code> 模板引擎</li><li><a href="https://github.com/ziutek/kasia.go">kasia.go</a> : 使用go语言实现的 用于<code>HTML</code> 和其他文本文件的模板系统,</li><li><a href="https://github.com/osteele/liquid">liquid</a> : Go 语言实现的<code>Shopify Liquid</code>模板.</li><li><a href="https://github.com/johnfercher/maroto">maroto</a> : 用Maroto的方式来创建PDF。Maroto的灵感来自于<code>Bootstrap</code>并使用<code>gofpdf</code></li><li><a href="https://github.com/hoisie/mustache">mustache</a> : <code>Go</code>语言实现的<code>Mustache</code>模板语言</li><li><a href="https://github.com/flosch/pongo2">pongo2</a> : 类似<code>Django</code>的模板引擎</li><li><a href="https://github.com/valyala/quicktemplate">quicktemplate</a> : 快速、强大且易用的模板引擎。将模板转化为<code>Go</code> 语言并进行编译</li><li><a href="https://github.com/aymerick/raymond">raymond</a> : 使用<code>Go</code>语言实现的完整的<code>handlebars</code></li><li><a href="https://github.com/sipin/gorazor">Razor</a> : <code>Go</code>语言的<code>Razor</code> 视图引擎</li><li><a href="https://github.com/robfig/soy">Soy</a> :<code>go</code>语言实现的谷歌闭包模板(也就是<code>Soy templates</code>), 参见<a href="https://developers.google.com/closure/templates/">官方说明文档</a> :<br></li><li><a href="https://github.com/gobuffalo/velvet">velvet</a> : 使用<code>Go</code>语言实现的完整的` handlebars</li></ul><hr><h2 id="测试相关">测试相关</h2><p><code>测试库和测试数据集生成库</code></p><ul><li>测试框架<ul><li><a href="https://apitest.dev">apitest</a> : 为基于<code>REST</code>的服务或<code>HTTP</code>处理程序提供简单且可扩展的行为测试库,支持模拟外部<code>http</code>调用和渲染序列图。</li><li><a href="https://github.com/go-playground/assert">assert</a> : 基础断言库,用于对<code>Go</code>语言程序进行测试,提供了一些用于自定义断言的代码块</li><li><a href="https://github.com/cavaliercoder/badio">badio</a> : Go 语言<code>testing/iotest</code>包的扩展<br></li><li><a href="https://github.com/h2non/baloo">baloo</a> : 表达性强、多功能的、端到端的<code>HTTP API</code> 测试工具</li><li><a href="https://github.com/fulldump/biff">biff</a> : <code>Bifurcation</code>测试框架,兼容<code>BDD</code>。</li><li><a href="https://github.com/percolate/charlatan">charlatan</a> : 为测试生成虚假接口实现的工具。</li><li><a href="https://github.com/SimonBaeumer/commander">commander</a> : 用于在<code>windows、linux</code>和<code>osx</code>上测试`cli应用程序的工具。</li><li><a href="https://github.com/covergates/covergates">covergates</a> : 自主的代码覆盖率报告审查和管理服务。</li><li><a href="https://github.com/bradleyjkemp/cupaloy">cupaloy</a> : 用于测试框架的简单快照测试插件。</li><li><a href="https://github.com/khaiql/dbcleaner">dbcleaner</a> : 清空数据库用于测试,受到<code>database_cleaner</code>的启发<br></li><li><a href="https://github.com/viant/dsunit">dsunit</a> : 数据库测试,针对<code>SQL、 NoSQL</code>、 结构化文件.</li><li><a href="https://github.com/fergusstrange/embedded-postgres">embedded-postgres</a> : 作为另一个<code>Go</code>应用程序或测试的一部分,在<code>Linux、OSX</code> 或<code>Windows</code>上本地运行一个真正的 Postgres 数据库</li><li><a href="https://github.com/viant/endly">endly</a> : 声明式端到端功能测试。</li><li><a href="https://github.com/suzuki-shunsuke/flute">flute</a> : <code>HTTP</code>客户端测试框架。</li><li><a href="https://github.com/verdverm/frisby">frisby</a> : <code>REST API</code> 测试框架</li><li><a href="http://onsi.github.io/ginkgo/">ginkgo</a> : <code>BDD</code> 测试框架</li><li><a href="https://github.com/msoap/go-carpet">go-carpet</a> : 用于在终端中查看测试覆盖率的工具</li><li><a href="https://github.com/google/go-cmp">go-cmp</a> : 用于比较测试中的<code>Go</code>值的软件包。</li><li><a href="https://github.com/Eun/go-hit">go-hit</a> : 用<code>golang</code>编写的<code>http</code> 集成测试框架。</li><li><a href="https://github.com/zimmski/go-mutesting">go-mutesting</a> :<code>Go</code>语言源代码突变测试<code>（Mutation testing ）</code></li><li><a href="https://github.com/maxatome/go-testdeep">go-testdeep</a> : 扩展了<code>go</code> 测试包的极为灵活的<code>golang</code> 深度比较库,。</li><li><a href="https://github.com/dnaeon/go-vcr">go-vcr</a> : 记录并重放<code>HTTP</code>交互,用于快速的、确定性的、准确的测试</li><li><a href="https://github.com/franela/goblin">goblin</a> : 类似<code>Mocha</code> 的测试框架</li><li><a href="https://github.com/qiniu/goc">goc</a> : <code>Goc</code>是一个针对<code>Go</code> 编程语言的综合覆盖测试系统。</li><li><a href="http://labix.org/gocheck">gocheck</a> : 更加高级的测试框架,用于替换<code>Gotest</code>.</li><li><a href="https://github.com/smartystreets/goconvey/">GoConvey</a> : <code>BDD</code> 风格的测试框架,具有<code>web</code> 界面和计时刷新功能</li><li><a href="https://github.com/corbym/gocrest">gocrest</a> : 用于<code>Go</code> 断言的可组合的类似<code>hamcrest</code>的匹配器。</li><li><a href="https://github.com/DATA-DOG/godog">godog</a> : 类似于<code>Cucumber</code>或<code>Behat</code>的<code>Go BDD</code>框架。</li><li><a href="https://github.com/appleboy/gofight">gofight</a> : 对<code>Go</code> 语言的路由框架进行<code>API</code> 测试</li><li><a href="https://github.com/corbym/gogiven">gogiven</a> : 类似<code>YATSPEC</code> 的<code>Go BDD</code>测试框架。</li><li><a href="https://github.com/jfilipczyk/gomatch">gomatch</a> : 类似<code>Rspec</code> 的匹配器/断言库。</li><li><a href="http://onsi.github.io/gomega/">gomega</a> : 类似<code>Rspec</code> 的<code>matcher/assertion</code>库</li><li><a href="https://github.com/orfjackal/gospec">GoSpec</a> :<code>BDD</code>风格的测试框架</li><li><a href="https://github.com/stesla/gospecify">gospecify</a> : 支持<code>BDD</code>语法 。对于任何使用过 rspec 等库的人来说应该非常熟悉</li><li><a href="https://github.com/pavlo/gosuite">gosuite</a> : 轻量级测试套,为<code>Go1.7's Subtests</code>带来了<code>setup/teardown</code>功能<br></li><li><a href="https://github.com/gotestyourself/gotest.tools">gotest.tools</a> : 用于增强 Go 测试包并支持常见模式的软件包集合。</li><li><a href="https://github.com/rdrdr/hamcrest">Hamcrest</a> : 用于声明式<code>Matcher</code> 对象的流畅框架,当应用于输入值时,会产生自描述的结果。</li><li><a href="https://github.com/gavv/httpexpect">httpexpect</a> : 简洁的、声明式的、易用的端到端HTTP 及 REST API 测试</li><li><a href="https://github.com/kinbiko/jsonassert">jsonassert</a> : 用于验证JSON有效载荷是否被正确序列化的软件包。</li><li><a href="https://github.com/yookoala/restit">restit</a> : 帮助编写<code>RESTful API</code>集成测试的<code>Go</code> 语言微型框架.</li><li><a href="https://github.com/jgroeneveld/schema">schema</a> : 对请求和响应中使用的JSON模式进行快速、简单的表达式匹配。</li><li><a href="https://github.com/elgohr/stop-and-go">stop-and-go</a> : 并发测试助手。</li><li><a href="https://github.com/adamluzsi/testcase">testcase</a> : 行为驱动开发的直观测试框架。</li><li><a href="https://github.com/go-testfixtures/testfixtures">testfixtures</a> : 类似<code>Rails</code>的测试工具,用于测试数据库应用</li><li><a href="https://github.com/stretchr/testify">Testify</a> : 对标准测试包的扩展</li><li><a href="https://godoc.org/github.com/tvastar/test/cmd/testmd">testmd</a> : 将<code>markdow</code>n片段转换为可测试的go代码。</li><li><a href="https://github.com/zhulongcheng/testsql">testsql</a> : 在测试前从<code>SQL</code>文件中生成测试数据,并在测试结束后将其清除。</li><li><a href="https://github.com/jgroeneveld/trial">trial</a> : 快速简单的可扩展断言,不需要引入太多模板。</li><li><a href="https://github.com/vcaesar/tt">Tt</a> : 简单而多彩的测试工具。</li><li><a href="https://github.com/posener/wstest">wstest</a> : <code>Websocket</code>客户端,用于对于<code>websocket HTTP.Handler</code>进行单元测试</li></ul></li></ul><hr><ul><li>Mock<ul><li><a href="https://github.com/maxbrunsfeld/counterfeiter">counterfeiter</a> : 用于生成自包含<code>mock</code>对象的工具</li><li><a href="https://github.com/elgohr/go-localstack">go-localstack</a> : 在<code>AWS</code>测试中使用<code>localstack</code>的工具。</li><li><a href="https://github.com/DATA-DOG/go-sqlmock">go-sqlmock</a> :<code>Mock SQL</code> ,用于测试数据库交互</li><li><a href="https://github.com/DATA-DOG/go-txdb">go-txdb</a> : 基于单事物的数据库驱动,主要用于测试目的</li><li><a href="https://github.com/h2non/gock">gock</a> : 多功能、易用<code>HTTP mock</code></li><li><a href="https://github.com/golang/mock">gomock</a> : 给 Go 语言用的<code>Mock</code>框架</li><li><a href="https://github.com/seborama/govcr">govcr</a> : <code>HTTP mock</code>: 离线测试时记录和重放浏览器的动作</li><li><a href="https://github.com/SpectoLabs/hoverfly">hoverfly</a> :<code>HTTP(S) : proxy,</code>用于记录和模拟<code>REST/SOAP API</code>,具有可扩展的中间件和易于使用的 CLI。</li><li><a href="https://github.com/jarcoal/httpmock">httpmock</a> : 轻松模拟来自外部资源的 HTTP 响应。</li><li><a href="https://github.com/gojuno/minimock">minimock</a> : <code>Mock</code>生成器</li><li><a href="https://github.com/tv42/mockhttp">mockhttp</a> : <code>Go HTTP.ResponseWriter</code>使用的 Mock 对象</li><li><a href="https://github.com/cabify/timex">timex</a> : 原生时间包的测试友好的替代品。</li></ul></li><li>Fuzzing and delta-debugging/reducing/shrinking.<ul><li><a href="https://github.com/dvyukov/go-fuzz">go-fuzz</a> : 随机化测试系统</li><li><a href="https://github.com/google/gofuzz">gofuzz</a> : 用于生成随机值来初始化<code>Go</code>语言对象的库</li><li><a href="https://github.com/zimmski/tavor">Tavor</a> : 通用模糊测试框架</li></ul></li><li>Selenium及浏览器控制工具<ul><li><a href="https://github.com/mafredri/cdp">cdp</a> : 类型安全的的<code>Go</code> 语言接口,可以用于浏览器或任何实现了 Chrome debug协议的其他待调试对象</li><li><a href="https://github.com/knq/chromedp">chromedp</a> : 用于驱动和测试<code>Chrome, Safari, Edge, Android Webviews</code>, 以及其他支持<code>Chrome</code>调试协议的产品</li><li><a href="https://github.com/aerokube/ggr">ggr</a> : 轻量级服务器,可以将 Selenium Wedriver 的请求路由或代理到多个<code>Selenium hubs</code>.</li><li><a href="https://github.com/go-rod/rod">rod</a> : <code>Devtools</code>驱动,使网络自动化测试变得简单。</li><li><a href="https://github.com/aerokube/selenoid">selenoid</a> : <code>Selenium hub</code>服务器的替代品,可以在容器中启动浏览器</li></ul></li><li>Fail injection<ul><li><a href="https://github.com/pingcap/failpoint">failpoint</a> : Golang中<a href="http://www.freebsd.org/cgi/man.cgi?query=fail">failpoints</a> 的实现。</li></ul></li></ul><hr><h2 id="文本处理">文本处理</h2><p><code>解析和操作文本的代码库</code></p><ul><li>特定文本格式处理<ul><li><a href="https://github.com/Guitarbum722/align">align</a> : 文本对齐</li><li><a href="https://github.com/sbstjn/allot">allot</a> : 占位符及通配符文本解析</li><li><a href="https://github.com/CalebQ42/bbConvert">bbConvert</a> : 将<code>bbCode</code> 转换为<code>HTML</code></li><li><a href="https://github.com/russross/blackfriday">blackfriday</a> : <code>Markdown</code> 解析器</li><li><a href="https://github.com/microcosm-cc/bluemonday">bluemonday</a> : <code>HTML</code> 清理工具</li><li><a href="https://github.com/aerogo/codetree">codetree</a> : 解析缩进代码（<code>python、pixy、scarlet</code>等）并返回一个树形结构。</li><li><a href="https://github.com/asciimoo/colly">colly</a> : <code>go</code>语言版爬虫框架</li><li><a href="https://github.com/mingrammer/commonregex">commonregex</a> :<code>Go</code>常用正则表达式的集合。</li><li><a href="https://github.com/slotix/dataflowkit">dataflowkit</a> : <code>Web</code>爬虫框架用于将网站转化为结构化数据。</li><li><a href="https://github.com/ockam-network/did">did</a> : Go中的<code>DID</code>（去中心化标识符）解析器和<code>Stringer</code>。</li><li><a href="https://github.com/hscells/doi">doi</a> : Go中的文档对象标识符（<code>doi</code>）解析器。</li><li><a href="https://github.com/editorconfig/editorconfig-core-go">editorconfig-core-go</a> : Go 语言用的<code>Editorconfig</code> 文件解析和操作库</li><li><a href="https://github.com/endeveit/enca">enca</a> : <a href="http://cihar.com/software/enca/">libenca</a> : 的极简的<code>cGo</code>接口</li><li><a href="https://github.com/mickep76/encdec">encdec</a> : 通用编码和解码器</li><li><a href="https://github.com/alixaxel/genex">genex</a> : 计算并展开正则表达式为所有匹配的字符串</li><li><a href="https://godoc.org/github.com/shurcooL/github_flavored_markdown">github_flavored_markdown</a> : <code>GitHub Flavored Markdown</code> 渲染器（使用 blackfriday）,带有栅栏式代码块高亮,可点击标题锚链接</li><li><a href="https://github.com/ianlopshire/go-fixedwidth">go-fixedwidth</a> : 固定宽度的文本格式（带反射的编码器/解码器）。</li><li><a href="https://github.com/dustin/go-humanize">go-humanize</a> : 将时间、数字和内存大小格式化为人类可读的格式。</li><li><a href="https://github.com/adrianmo/go-nmea">go-nmea</a> : Go语言的NMEA解析库。</li><li><a href="https://github.com/mattn/go-runewidth">go-runewidth</a> : 用于获取固定宽度的字符或字符串的函数。</li><li><a href="https://github.com/mozillazg/go-slugify">go-slugify</a> : 制作支持多语言的漂亮<code>slug</code>。</li><li><a href="https://github.com/pelletier/go-toml">go-toml</a> : <code>TOML</code>格式的<code>Go</code>库,</li><li><a href="https://github.com/emersion/go-vcard">go-vcard</a> : 解析和格式化<code>vCard</code>。</li><li><a href="https://github.com/trubitsyn/go-zero-width">go-zero-width</a> : Go的零宽度字符检测和移除。</li><li><a href="https://github.com/mmcdole/gofeed">gofeed</a> : 使用<code>Go</code>语言解析<code>RSS</code>和<code>Atom</code></li><li><a href="https://github.com/awalterschulze/gographviz">gographviz</a> : 用以解析<code>Graphviz DOT</code> 语言</li><li><a href="https://github.com/labstack/gommon/tree/master/bytes">gommon/bytes</a> : 格式化二进制为字符串</li><li><a href="https://github.com/polera/gonameparts">gonameparts</a> : 将人名解析为几个独立的部分</li><li><a href="https://github.com/andrewstuart/goq">goq</a> : 声明式<code>HTML</code> 编组,使用结构标签和<code>jQuery</code>语法 (使用<code>GoQuery</code>).</li><li><a href="https://github.com/PuerkitoBio/goquery">GoQuery</a> :<code>GoQuery</code> 为<code>Go</code>语言带来了一组类似<code>jQuery</code> 的语法和功能</li><li><a href="https://github.com/zach-klippenstein/goregen">goregen</a> : 根据正则表达式生成随机字符串</li><li><a href="https://github.com/zhshch2002/goribot">goribot</a> : 简单的golang爬虫框架,3行代码就可以创建爬虫。</li><li><a href="https://github.com/leonelquinteros/gotext">gotext</a> : Go语言版本的<code>GNU gettext</code>工具。</li><li><a href="https://github.com/endeveit/guesslanguage">guesslanguage</a> : 用于确定<code>unicode</code>文本的自然语言的函数。</li><li><a href="https://github.com/JohannesKaufmann/html-to-markdown">html-to-markdown</a> : 将<code>HTML</code>转换为<code>Markdown</code>。甚至适用于整个网站,并可通过规则进行扩展。</li><li><a href="https://github.com/antchfx/htmlquery">htmlquery</a> :<code>HTML</code>的<code>XPath</code> 查询包,让您可以通过<code>XPath</code> 表达式从<code>HTML</code>文档中提取数据。</li><li><a href="https://github.com/facebookgo/inject">inject</a> : 一个基于反射的注入器</li><li><a href="https://github.com/Wing924/ltsv">ltsv</a> : 适用于 Go 的高性能<code>LTSV（Labeled Tab Separated Value）</code>阅读器。<a href="http://ltsv.org/">LTSV (Labeled Tab Separated Value)</a> :<br></li><li><a href="https://github.com/clbanning/mxj">mxj</a> : 通过点分路径和通配符来提取值 将<code>XML</code>编解码为<code>JSON</code> 或<code>map[string]interface&#123;&#125;</code>;目的是用于替代<code>Replaces x2j</code> 和<code>j2x</code> 包.</li><li><a href="https://github.com/foolin/pagser">pagser</a> : <code>Pagser</code>是一个简单的、可扩展的、可配置的、基于<code>goquery</code>和<code>struct</code>标签的<code>golang</code> 爬虫解析和反序列化工具,能够将<code>html</code>页面映射到struct结构体中。</li><li><a href="https://github.com/eduncan911/podcast">podcast</a> : <code>Golang</code>中兼容<code>iTunes</code>和<code>RSS 2.0</code>的播客生成器。</li><li><a href="https://github.com/gortc/sdp">sdp</a> : <code>SDP Session Description Protocol</code>, <a href="https://tools.ietf.org/html/rfc4566">RFC 4566</a>实现<br></li><li><a href="https://github.com/mvdan/sh">sh</a> : <code>Shell</code>解析器及格式化工具</li><li><a href="https://github.com/gosimple/slug">slug</a> :<code>URL</code>友好的<code>slug</code> 化工具,支持多种语言</li><li><a href="https://github.com/avelino/slugify">Slugify</a> :<code>Go</code>语言静态地址生成器,可以处理字符串</li><li><a href="https://github.com/zhengchun/syndfeed">syndfeed</a> : 适用于<code>Atom 1.0和RSS 2.0</code>的聚合<code>feed</code>。</li><li><a href="https://github.com/BurntSushi/toml">toml</a> : <code>TOML</code> 配置格式的编码解码器</li></ul></li><li>文本工具<ul><li><a href="https://github.com/JoshuaDoes/gofuckyourself">gofuckyourself</a> : 敏感词过滤器</li><li><a href="https://github.com/bndr/gotabulate">gotabulate</a> : 使用<code>Go</code>轻松地打印你的表格数据。</li><li><a href="https://github.com/codemodus/kace">kace</a> : 涵盖常见初始化的普通大小写转换。</li><li><a href="https://github.com/nproc/parseargs-go">parseargs-go</a> : 能理解引号和反斜杠的字符串参数解析器。</li><li><a href="https://github.com/codemodus/parth">parth</a> : <code>URL</code>路径分割解析库。</li><li><a href="https://github.com/yourbasic/radix">radix</a> : 快速字符串排序算法。</li><li><a href="https://github.com/oriser/regroup">regroup</a> : 使用<code>struct</code>标记和自动解析将正则表达式命名的组匹配到<code>go</code> 结构中。</li><li><a href="https://github.com/zoomio/tagify">Tagify</a> : 从给定的源中产生一组标签。</li><li><a href="https://github.com/isbm/textwrap">textwrap</a> : <code>Python</code>中<code>textwrap</code>模块的实现。</li><li><a href="https://github.com/Dynom/TySug">TySug</a> : 关于键盘布局的替代建议。</li><li><a href="https://github.com/stackerzzq/xj2go">xj2go</a> : 将<code>xm</code>l或<code>json</code>转换为<code>go</code>结构。</li><li><a href="https://github.com/mvdan/xurls">xurls</a> : 从文本中提取<code>URLs</code>。</li></ul></li></ul><hr><h2 id="第三方api">第三方API</h2><p><code>第三方API 汇总</code></p><ul><li><a href="https://github.com/mehanizm/airtable">airtable</a> : 用于访问<code>Airtable API</code>的 Go 客户端库。<a href="https://airtable.com/api">Airtable API</a> :<br></li><li><a href="https://github.com/ngs/go-amazon-product-advertising-api">amazon-product-advertising-api</a> : <code>Amazon Product Advertising API</code> 的 Go 客户端库。 <a href="https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html">Amazon Product Advertising API</a> :<br></li><li><a href="https://github.com/ChimeraCoder/anaconda">anaconda</a> : <code>Twitter 1.1 API</code>的 go 语言客户端</li><li><a href="https://github.com/aws/aws-sdk-go">aws-sdk-go</a> : <code>AWS</code> 提供的官方go语言<code>SDK</code></li><li><a href="https://github.com/naegelejd/brewerydb">brewerydb</a> : 用于访问<code>BreweryDB API</code>的 Go 语言库</li><li><a href="https://github.com/andygrunwald/cachet">cachet</a> : <code>Cachet</code>（开源状态页系统）的Go客户端库。</li><li><a href="https://cachethq.io/">Cachet (open source status page system)</a> : <code>Cachet (open source status page system)</code>的 Go 语言客户端</li><li><a href="https://github.com/jszwedko/go-circleci">circleci</a> : 用于和<code>with CircleCI's API</code>进行交互的<code>Go</code> 语言客户端</li><li><a href="https://github.com/samuelcouch/clarifai">clarifai</a> : 用于和<code>Clarifai API</code> 交互的<code>Go</code>语言库</li><li><a href="https://github.com/codeship/codeship-go">codeship-go</a> : 用于与<code>Codeship</code>的<code>API v2</code> 进行交互的<code>Go</code>客户端库。</li><li><a href="https://github.com/coinpaprika/coinpaprika-api-go-client">coinpaprika-go</a> : <code>Go</code>客户端库,用于与<code>Coinpaprika的API</code>进行交互。</li><li><a href="https://github.com/bwmarrin/discordgo">discordgo</a> : 用于与<code>Discord</code> 聊天<code>API</code>进行交互的<code>Go</code>语言客户端。</li><li><a href="https://github.com/onrik/ethrpc">ethrpc</a> : <code>Ethereum JSON RPC API</code> 的 Go 绑定</li><li><a href="https://github.com/huandu/facebook">facebook</a> : 支持<code>Facebook Graph API</code> 的库</li><li><a href="https://github.com/maddevsio/fcm">fcm</a> : 用于<code>Firebase Cloud Messaging</code> 的 Go 库。</li><li><a href="https://github.com/emiddleton/gads">gads</a> : <code>Google Adwords</code> 非官方 API</li><li><a href="https://github.com/bit4bit/gami">gami</a> : <code>Asterisk Manager Interface</code> 的 Go 语言库</li><li><a href="https://github.com/Aorioli/gcm">gcm</a> : <code>Google Cloud Messaging</code> 库</li><li><a href="https://github.com/codingsince1985/geo-golang">geo-golang</a> : 用于与 <a href="https://developers.google.com/maps/documentation/geocoding/intro">Google Maps</a>, <a href="http://open.mapquestapi.com/geocoding/">MapQuest</a>, <a href="https://developer.mapquest.com/documentation/open/nominatim-search">Nominatim</a>, <a href="http://geocoder.opencagedata.com/api.html">OpenCage</a>, <a href="https://msdn.microsoft.com/en-us/library/ff701715.aspx">Bing</a> , <a href="https://www.mapbox.com/developers/api/geocoding/">Mapbox</a> , 及 <a href="https://wiki.openstreetmap.org/wiki/Nominatim">OpenStreetMap</a> 地理编码 / 反编码 APIs 交互的库</li><li><a href="https://github.com/google/go-github">github</a> : 用于访问<code>GitHub REST API v3</code> 的<code>Go</code>库。</li><li><a href="https://github.com/shurcooL/githubql">githubql</a> : 用于访问<code>GitHub GraphQL API v4</code> 的<code>Go</code> 库。</li><li><a href="https://github.com/circa10a/go-aws-news">go-aws-news</a> : 用于从<code>AWS</code>获取最新信息的 Go 应用程序和库。</li><li><a href="https://github.com/axelspringer/go-chronos">go-chronos</a> : 用于与<a href="https://mesos.github.io/chronos/">Chronos</a> : Job Scheduler交互的Go库。</li><li><a href="https://github.com/PaulRosset/go-hacknews">go-hacknews</a> : <code>HackerNews API</code>的Go客户端。</li><li><a href="https://github.com/abdullahselek/go-here">go-here</a> : 围绕<code>HERE</code>基于位置的<code>API</code>的Go客户端库。</li><li><a href="https://github.com/koffeinsource/go-imgur">go-imgur</a> : 用于<a href="https://imgur.com">imgur</a> 的Go客户端库。</li><li><a href="https://github.com/andygrunwald/go-jira">go-jira</a> : 用于 <a href="https://www.atlassian.com/software/jira">Atlassian JIRA</a> : 的Go客户端库。</li><li><a href="https://github.com/gambol99/go-marathon">go-marathon</a> : 用于与<code>Mesosphere</code>的<code>Marathon PAAS</code>交互的Go库。</li><li><a href="https://github.com/nstratos/go-myanimelist">go-myanimelist</a> : 用于访问 <a href="http://myanimelist.net/modules.php?go=api">MyAnimeList API</a> : 的 Go 客户端库。</li><li><a href="https://github.com/rbretecher/go-postman-collection">go-postman-collection</a> : Go 模块,用于与 <a href="https://learning.getpostman.com/docs/postman/collections/creating-collections/">Postman Collections</a> : 进行交互（与 Insomnia 兼容）。</li><li><a href="https://github.com/esurdam/go-sophos">go-sophos</a> : Go客户端库,用于零依赖的 <a href="https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en">Sophos UTM REST API</a> :<br></li><li><a href="https://github.com/sergioaugrod/go-sptrans">go-sptrans</a> : 用于SPTrans Olho Vivo API的Go客户端库。</li><li><a href="https://gitlab.com/toby3d/telegraph">go-telegraph</a> : <code>Telegraph</code>发布平台API客户端。</li><li><a href="https://github.com/andygrunwald/go-trending">go-trending</a> :用于访问Github的<a href="https://github.com/trending">trending repositories</a>库和<a href="https://github.com/trending/developers">developers</a> : 开发者信息。<br></li><li><a href="https://github.com/knspriggs/go-twitch">go-twitch</a> : 用于与Twitch v3 API交互的Go客户端。</li><li><a href="https://github.com/dghubble/go-twitter">go-twitter</a> : 用于<code>Twitter v1.1 APIs</code> 的<code>Go</code> 客户端库。</li><li><a href="https://github.com/hbagdi/go-unsplash">go-unsplash</a> : 用于<a href="https://unsplash.com">Unsplash.com</a><code>API</code> 的 Go 客户端库。</li><li><a href="https://github.com/nishanths/go-xkcd">go-xkcd</a> : -<code>xkcd API</code> 的<code>Go</code> 客户端。</li><li><a href="https://github.com/groovili/gogtrends">gogtrends</a> : <code>Google Trends</code> 非官方<code>API</code>。</li><li><a href="https://github.com/cyruzin/golang-tmdb">golang-tmdb</a> : 电影数据库<code>API v3</code>的<code>Golang</code> 版本<code>api</code></li><li><a href="https://github.com/mamal72/golyrics">golyrics</a> : 用于从<code>Wikia</code> 网站获取音乐歌词数据的 Go 库。</li><li><a href="https://github.com/MonaxGT/gomalshare">gomalshare</a> : <code>Go library MalShare API</code>。 <a href="http://www.malshare.com/">malshare.com</a> :<br></li><li><a href="https://github.com/michiwend/gomusicbrainz">GoMusicBrainz</a> : <code>Go MusicBrainz WS2</code>客户端库。</li><li><a href="https://github.com/google/google-api-go-client">google</a> : 为<code>Go</code> 自动生成的<code>Google API</code>。</li><li><a href="https://github.com/chonthu/go-google-analytics">google-analytics</a>谷歌分析报告go语言客户端。<br></li><li><a href="https://github.com/GoogleCloudPlatform/gcloud-golang">google-cloud</a> :<code>Google Cloud APIs Go</code>客户端库。</li><li><a href="https://github.com/ngs/go-google-email-audit-api">google-email-audit-api</a> : :<a href="https://developers.google.com/admin-sdk/email-audit/">Google G Suite Email Audit API</a> : 的Go客户端库。</li><li><a href="https://github.com/n0madic/google-play-scraper">google-play-scraper</a> : 从`Google Play商店获取数据。</li><li><a href="https://github.com/utekaravinash/gopaapi5">gopaapi5</a> : <a href="https://webservices.amazon.com/paapi5/documentation/">Amazon Product Advertising API 5.0</a> : API 5.0的Go客户端库。</li><li><a href="https://github.com/koltyakov/gosip">gosip</a> : Go客户端库<code>SharePoint API</code>。</li><li><a href="https://github.com/jsgilmore/gostorm">gostorm</a> :<code>GoStorm</code>在满足实现了<code>Bolts</code>与<code>Storm</code>外壳通信所需的通信协议的基础上实现了Storm接口</li><li><a href="https://github.com/andybons/hipchat">hipchat</a> : 这个项目为<code>Hipchat API</code>实现了一个<code>golang</code>客户端库</li><li><a href="https://github.com/daneharrigan/hipchat">hipchat (xmpp)</a> : 通过<code>XMPP</code>与<code>Hipchat</code>通信的<code>golang</code>包。</li><li><a href="https://github.com/Henry-Sarabia/igdb">igdb</a> : <a href="https://api.igdb.com/">Internet Game Database API</a> :的Go客户端。</li><li><a href="https://github.com/Henry-Sarabia/kanka">kanka</a> : <a href="https://kanka.io/en-US/docs/1.0">Kanka API</a> 的Go客户端</li><li><a href="https://github.com/ansd/lastpass-go">lastpass-go</a> : <a href="https://www.lastpass.com/">LastPass</a> : API的Go客户端库。</li><li><a href="https://github.com/clevabit/libgoffi">libgoffi</a> : 用于本地 <a href="http://sourceware.org/libffi/">libffi</a> 集成的库适配器工具箱。</li><li><a href="https://github.com/Medium/medium-sdk-go">Medium</a> : 用于<code>Medium</code>的<code>OAuth2 API</code>的<code>Golang SDK</code>。</li><li><a href="https://github.com/andygrunwald/megos">megos</a> : 用于访问A<code>pache Mesos</code>集群的客户端库。</li><li><a href="https://github.com/minio/minio-go">minio-go</a> : <code>go</code> 语言<code>Minio</code> 客户端,用于<code>Amazon S3</code> 兼容的云存储</li><li><a href="https://github.com/dukex/mixpanel">mixpanel</a> : <code>Mixpanel</code> 是用于追踪事件并发送<code>Mixpanel profile</code>的更新到<code>Mixpanel</code> 的库</li><li><a href="https://github.com/mxpv/patreon-go">patreon-go</a> : <code>Patreon API.</code></li><li><a href="https://github.com/logpacker/PayPal-Go-SDK">paypal</a> : <code>PayPal</code>支付<code>API</code></li><li><a href="https://github.com/playlyfe/playlyfe-go-sdk">playlyfe</a> :<code>Playlyfe Rest API</code>的<code>Go</code> 语言<code>SDK</code></li><li><a href="https://github.com/gregdel/pushover">pushover</a> : <code>Pushover API</code> 的<code>Go</code>语言封装</li><li><a href="https://github.com/dimuska139/rawg-sdk-go">rawg-sdk-go</a> : 用于<code>RAWG</code>视频游戏数据库<code>API</code>的G<code>o</code>库。<a href="https://rawg.io/">RAWG Video Games Database</a> :<br></li><li><a href="https://github.com/Omie/rrdaclient">rrdaclient</a> : 访问<code>statdns.com API</code>,这是通过HTTP进行DNS查询的<code>RRDA API</code>。</li><li><a href="https://github.com/rapito/go-shopify">shopify</a> : 用于接入<code>Spotify WEB API</code> 的<code>G</code>o 语言库</li><li><a href="https://github.com/rhnvrm/simples3">simples3</a> : 简单的不加修饰的<code>AWS S3</code>库,使用<code>Go</code>编写的<code>V4 Signing</code>的<code>REST api</code>。</li><li><a href="https://github.com/nlopes/slack">slack</a> : <code>Slack API</code></li><li><a href="https://github.com/sergiotapia/smitego">smite</a> : <code>Go</code>包,用于包装对<code>Smite</code>游戏<code>API</code>的访问。</li><li><a href="https://github.com/rapito/go-spotify">spotify</a> : 访问<code>Spotify WEB API</code> 的<code>Go</code> 库。</li><li><a href="https://github.com/sostronk/go-steam">steam</a>:用于与<code>Steam</code>游戏服务器交互的<code>Go</code> 库。<br></li><li><a href="https://github.com/stripe/stripe-go">stripe</a> : 用于访问<code>Stripe API</code>的<code>Go</code>客户端。</li><li><a href="https://github.com/dietsche/textbelt">textbelt</a> : <code>textbelt.com txt messaging API</code> 的<code>go</code>语言客户端</li><li><a href="https://github.com/poorny/translate">translate</a> : <code>Go</code> 在线翻译包</li><li><a href="https://github.com/adlio/trello">Trello</a> : <code>Trello API</code>的<code>Go</code> 语言封装</li><li><a href="https://github.com/mrbenosborne/tripadvisor-golang">TripAdvisor</a> :<code>TripAdvisor AP</code>I的Go语言封装。</li><li><a href="https://github.com/mattcunningham/gumblr">tumblr</a> : <code>Tumblr v2 API</code> 的<code>Go</code> 语言封装</li><li><a href="https://github.com/n0madic/twitter-scraper">twitter-scraper</a> : 无需认证和限制就能抓取<code>Twitter</code> 前端<code>API</code>。</li><li><a href="https://github.com/bitfield/uptimerobot">uptimerobot</a> : <code>Uptime Robot v2 API</code>的<code>Go</code>包装器和命令行客户端。</li><li><a href="https://github.com/verifid/vl-go">vl-go</a> : VerifID身份验证层<code>API</code>的<code>Go</code>客户端库。</li><li><a href="https://github.com/go-playground/webhooks">webhooks</a> : <code>GitHub</code> 和<code>Bitbucket</code>的<code>Webhook</code>接收器</li><li><a href="https://github.com/wit-ai/wit-go">wit-go</a> : 用于<code>wit.ai HTTP API</code> 的<code>Go</code> 客户端。</li><li><a href="https://github.com/brunomvsouza/ynab.go">ynab</a> : <code>YNAB API</code>的<code>Go</code>语言封装。</li><li><a href="https://github.com/gojuno/go-zooz">zooz</a> : <code>Zooz API</code> 的<code>Go</code>语言客户端</li></ul><hr><h2 id="工具库">工具库</h2><p><code>可以提升效率的通用代码库和工具</code></p><ul><li><a href="https://github.com/topfreegames/apm">apm</a> : 具有<code>HTTP API</code>的<code>Go</code>语言进程管理工具.</li><li><a href="https://github.com/icza/backscanner">backscanner</a> : 类似于<code>bufio.Scanner</code> 的扫描器,但它以反向顺序读取并返回结果。</li><li><a href="https://github.com/wesovilabs/beyond">beyond</a> : <code>Go</code>工具,它将推动你进入<code>AOP</code>世界!</li><li><a href="https://github.com/Henry-Sarabia/blank">blank</a> : 验证或删除字符串中的空白和空白字符。</li><li><a href="https://github.com/tmrts/boilr">boilr</a> : 用于从模板中快速创建项目的<code>CLI</code>工具。</li><li><a href="https://github.com/antham/chyle">chyle</a> : 使用<code>git</code>仓库的变更日志生成器,具有多种配置</li><li><a href="https://github.com/cep21/circuit">circuit</a> : 高效且功能完整的<code>Hystrix</code>断路器模式的<code>go</code>语言实现</li><li><a href="https://github.com/rubyist/circuitbreaker">circuitbreaker</a> : <code>Go</code>中的断路器。</li><li><a href="https://github.com/jonboulle/clockwork">clockwork</a> : 使用简单、流畅的语法来调度周期性任务</li><li><a href="https://github.com/SimonBaeumer/cmd">cmd</a> : 用于在<code>osx、windows</code>和<code>linux</code>上执行<code>shell</code>命令的库。</li><li><a href="https://github.com/txgruppi/command">command</a> : 命令模式,支持线程安全的串行、并行调度</li><li><a href="https://github.com/gotidy/copy">copy</a> : 用于快速复制不同类型结构的软件包。</li><li><a href="https://github.com/jutkko/copy-pasta">copy-pasta</a> : 通用多工作站剪切板,使用类似<code>S3</code> 的后端作为存储</li><li><a href="https://github.com/biter777/countries">countries</a> : 完全执行<code>ISO-3166-1、ISO-4217、ITU-T E.164、Unicode CLDR和IANA ccTLD</code>标准的库。</li><li><a href="https://github.com/create-go-app/cli">create-go-app</a> : 通过运行一个命令就可以创建一个新的生产就绪项目,包括后端（<code>Golang</code>）、前端（<code>JavaScript、TypeScript</code>）和部署自动化（<code>Ansible、Docker</code>）的强大的<code>CLI</code>。</li><li><a href="https://github.com/bcicen/ctop">ctop</a> : 用于容器指标,类似于<code>Top</code>的接口（例如<code>htop</code>）。</li><li><a href="https://github.com/posener/ctxutil">ctxutil</a> : 用于上下文<code>context</code>的实用函数集合。</li><li><a href="https://github.com/nikogura/dbt">dbt</a> : 从中央可信仓库运行自更新签名二进制文件的框架。</li><li><a href="https://github.com/vrecan/death">Death</a> : -利用信号管理应用程序的关闭</li><li><a href="https://github.com/ulule/deepcopier">Deepcopier</a> : <code>Go</code>的简单结构拷贝库。</li><li><a href="https://github.com/derekparker/delve">delve</a> : <code>Go</code>语言调试器</li><li><a href="https://github.com/kirillDanshin/dlog">dlog</a> : 编译时控制的日志,让你的<code>release</code> 包变得更小而不需移除<code>debug</code>调用</li><li><a href="https://github.com/reugn/equalizer">equalizer</a> : <code>Go</code>的配额管理器和速率限制器。</li><li><a href="https://github.com/cristianoliveira/ergo">ergo</a> : 简化了对运行在不同端口的多个本地服务的管理。</li><li><a href="https://github.com/nullne/evaluator">evaluator</a> : 基于<code>s-expression</code>动态地评估一个表达式。简单且易于扩展。</li><li><a href="https://github.com/h2non/filetype">filetype</a> : 用于推断文件类型的小程序包,它可以检查魔法数字签名。</li><li><a href="https://github.com/yaronsumel/filler">filler</a> : 使用<code>"fill "</code>标签来填充结构的小工具。</li><li><a href="https://github.com/gookit/filter">filter</a> : 提供<code>Go</code>数据的过滤、净化和转换。</li><li><a href="https://github.com/junegunn/fzf">fzf</a> : 命令行模糊查找工具</li><li><a href="https://github.com/maxcnunes/gaper">gaper</a> : 当<code>Go</code> 项目崩溃或某些监视文件发生变化时,构建并重新启动该项目。</li><li><a href="https://github.com/go-playground/generate">generate</a> : 针对一个路径或环境变量,递归的执行<code>Go generate</code>,可以通过正则表达式来进行过滤</li><li><a href="https://github.com/antham/ghokin">ghokin</a> : 并行化的格式化程序,不需要对<code>gherkin (cucumber, behat...)</code>,的外部依赖。</li><li><a href="https://github.com/git-time-metric/gtm">git-time-metric</a> : 简单、无缝、轻量级的<code>Git</code>时间跟踪。</li><li><a href="https://github.com/asticode/go-astitodo">go-astitodo</a> : 解析<code>GO</code>代码中的<code>todo</code>事项。</li><li><a href="https://github.com/wendigo/go-bind-plugin">go-bind-plugin</a> : 用于包装<code>golang</code> 插件导出的符号的<code>go:generation</code>工具 (仅限 1.8)。</li><li><a href="https://github.com/gabstv/go-bsdiff">go-bsdiff</a> : 纯粹的<code>Go bsdiff</code> 和<code>bspatch</code>库以及<code>CLI</code> 工具。</li><li><a href="https://github.com/Eun/go-convert">go-convert</a> : <code>go-convert</code> 使您能够将一个值转换为另一种类型。</li><li><a href="https://github.com/mikekonan/go-countries">go-countries</a> : 轻量级的ISO-3166代码查询。</li><li><a href="https://github.com/ungerik/go-dry">go-dry</a> : <code>go</code>语言中<code>DRY (don't repeat yourself)</code>包</li><li><a href="https://github.com/thoas/go-funk">go-funk</a> : <code>Go</code>语言工具库,提供了很多有用的工具<code>(map, find, contains, filter, chunk, reverse, ...)</code></li><li><a href="https://github.com/Talento90/go-health">go-health</a> : 简化了你在服务中添加健康检查的方式。</li><li><a href="https://github.com/mozillazg/go-httpheader">go-httpheader</a> : 用于将结构体编码进<code>http</code> 头的<code>Go</code> 语言库</li><li><a href="https://github.com/viney-shih/go-lock">go-lock</a> : <code>go-lock</code> 是一个实现读写互斥和读写试锁的无饥饿状态的锁库。</li><li><a href="https://github.com/mvmaasakkers/go-problemdetails">go-problemdetails</a> : 用于处理问题细节的<code>Go</code>包。</li><li><a href="https://github.com/beefsack/go-rate">go-rate</a> : <code>Go</code> 语言版本的限速器</li><li><a href="https://github.com/kenkyu392/go-safe">go-safe</a> :<code>panic</code>处理安全沙盒。</li><li><a href="https://github.com/ikeikeikeike/go-sitemap-generator">go-sitemap-generator</a> :<code>XML</code>网站地图生成器<br></li><li><a href="https://github.com/sadlil/go-trigger">go-trigger</a> :<code>Go</code>语言全局事件触发器,通过 id 和触发器,在程序的任何地方注册事件</li><li><a href="https://github.com/carlescere/goback">goback</a> :<code>Go</code>语言的简单的指数补偿包</li><li><a href="https://github.com/zerosnake0/goctx">goctx</a> : 获取高性能的上下文值。</li><li><a href="https://github.com/VividCortex/godaemon">godaemon</a> : 用于编写守护进程的工具</li><li><a href="https://github.com/dropbox/godropbox">godropbox</a> : <code>Dropbox</code>开发的用于编写<code>Go</code>语言服务／应用的库</li><li><a href="https://github.com/cosiner/gohper">gohper</a> : 能够帮助你进行软件开发的工具和模块</li><li><a href="https://github.com/msempere/golarm">golarm</a> : 告警（支持系统事件）库</li><li><a href="https://github.com/mlimaloureiro/golog">golog</a> : 简单、轻量级的命令后工具,用于对你的计划任务进行跟踪</li><li><a href="https://github.com/bndr/gopencils">gopencils</a> :<code>Go</code>语言库,能够很容易的使用各种<code>REST APIs</code>.</li><li><a href="https://github.com/michiwend/goplaceholder">goplaceholder</a> : 用于生成占位符图片的小<code>golang</code>库。</li><li><a href="https://github.com/philipjkim/goreadability">goreadability</a> : 使用<code>Facebook Open Graph</code>和<code>arc90</code>的可读性提取网页摘要。</li><li><a href="https://github.com/goreleaser/goreleaser">goreleaser</a> : 尽可能快速的发布<code>Go</code>语言二进制文件<br></li><li><a href="https://github.com/wgliang/goreporter">goreporter</a> : 进行代码静态分析,单元测试,代码检视并生成代码质量报告的工具</li><li><a href="https://github.com/linxGnu/goseaweedfs">goseaweedfs</a> : 具有几乎全部功能的<code>SeaweedFS</code>客户端库。</li><li><a href="https://github.com/ik5/gostrutils">gostrutils</a> : 字符串操作和转换函数的集合。</li><li><a href="https://github.com/subosito/gotenv">gotenv</a> : 从 .env 或者任何<code>io.Reader</code>中加载环境变量</li><li><a href="https://github.com/tenntenn/gpath">gpath</a> : 用于简化结构体域访问的库</li><li><a href="https://github.com/novalagung/gubrak">gubrak</a> : 带有语法糖的<code>Golang</code>工具库。它类似于<code>lodash</code>,但适用于<code>golang</code>。</li><li><a href="https://github.com/miguelpragier/handy">handy</a> : 许多实用工具和帮助程序,如字符串处理程序/格式化程序和验证器。</li><li><a href="https://github.com/guumaster/hostctl">hostctl</a> : 用简单的命令管理<code>/etc/hosts</code> 的<code>CLI</code>工具。</li><li><a href="https://github.com/htcat/htcat">htcat</a> : 并行及流水线的<code>HTTP GET</code> 工具</li><li><a href="https://github.com/github/hub">hub</a> : 封装了<code>git</code>命令,提供了额外的功能用于在终端中和<code>Github</code> 进行交互</li><li><a href="https://github.com/afex/hystrix-go">hystrix-go</a> : 实现 Hystrix 风格的、程序员预定义的<code>fallback</code> 机制（熔断）</li><li><a href="https://github.com/immortal/immortal">immortal</a> : *nix 跨平台 (与操作系统无关的)监控程序</li><li><a href="https://github.com/mengzhuo/intrinsic">intrinsic</a> : 不需要编写任何汇编代码就能使用<code>x86 SIMD</code></li><li><a href="https://github.com/clevergo/jsend">jsend</a> : <code>JSend</code>的实现是用<code>Go</code>编写的。</li><li><a href="https://github.com/gsamokovarov/jump">jump</a> : <code>Jump</code>通过学习你的习惯来帮助你更快地浏览文件。</li><li><a href="https://github.com/wesovilabs/koazee">koazee</a> : 受<code>Lazy</code>评估和函数式编程启发而开发的库,它消除了使用数组的麻烦。</li><li><a href="https://github.com/aplescia-chwy/lets-go">lets-go</a> : <code>Go</code>模块,为云原生REST API开发提供了常用的实用工具。还包含AWS特定的实用程序。</li><li><a href="https://github.com/mennanov/limiters">limiters</a> : <code>Golang</code>中分布式应用的速率限制器,具有可配置的后端和分布式锁。</li><li><a href="https://github.com/jaschaephraim/lrserver">lrserver</a> :<code>Go</code>的<code>LiveReload</code>服务器。</li><li><a href="https://github.com/minio/mc">mc</a> : <code>Minio Client</code>提供了与<code>Amazon S3</code>兼容的云存储和文件系统管理工具。</li><li><a href="https://github.com/imdario/mergo">mergo</a> : Golang中合并结构和地图的助手。对配置默认值很有用,避免了混乱的if语句。</li><li><a href="https://github.com/zRedShift/mimemagic">mimemagic</a> : 纯<code>go</code>语言实现的超强的MIME嗅探库/工具。</li><li><a href="https://github.com/aofei/mimesniffer">mimesniffer</a> :<code>Go</code>的<code>MIME</code> 类型嗅探器。</li><li><a href="https://github.com/gabriel-vasile/mimetype">mimetype</a> : 基于魔数的<code>MIME</code>类型检测包。</li><li><a href="https://github.com/tdewolff/minify">minify</a> : 快速压缩<code>HTML, CSS, JS, XML, JSON</code> 以及<code>SVG</code> 文件格式</li><li><a href="https://github.com/icza/minquery">minquery</a> : <code>MongoDB / mgo.v2</code>查询,支持高效的分页。</li><li><a href="https://github.com/tj/mmake">mmake</a> : 现代<code>Make</code>工具</li><li><a href="https://github.com/StabbyCutyou/moldova">moldova</a> : 基于输入目标生成随机数据的工具</li><li><a href="https://github.com/davrodpin/mole">mole</a> : 用于轻松创建ssh隧道的<code>cli</code>应用程序。</li><li><a href="https://github.com/gobeam/mongo-go-pagination">mongo-go-pagination</a>官方<code>mongodb/mongo-go-driver</code>包的<code>Mongodb Pagination</code>,支持普通查询和聚合管道。</li><li><a href="https://github.com/linxGnu/mssqlx">mssqlx</a> : 数据库客户端库,代理任何主从,主主结构。考虑到轻量级和自动平衡。</li><li><a href="https://github.com/VividCortex/multitick">multitick</a> : 多路复用器</li><li><a href="https://github.com/inancgumus/myhttp">myhttp</a> : 支持超时的<code>HTTP GET</code>请求的简单<code>API</code>。</li><li><a href="https://github.com/e-dard/netbug">netbug</a> : 轻松地对你的服务进行远程剖析。</li><li><a href="https://github.com/chrispassas/nfdump">nfdump</a> : 读取<code>nfdump netflow</code>文件。</li><li><a href="https://github.com/pokanop/nostromo">nostromo</a> : 用于构建强大别名的<code>CLI</code>。</li><li><a href="https://github.com/xta/okrun">okrun</a> : <code>golang error</code>流式处理库</li><li><a href="https://github.com/btnguyen2k/olaf">olaf</a> : 在Go中实现的<code>Twitter Snowflake</code>。</li><li><a href="https://github.com/adelowo/onecache">onecache</a> : 支持多个后端存储的缓存库（<code>Redis、Memcached</code>、文件系统等）。</li><li><a href="https://github.com/maruel/panicparse">panicparse</a> : 将类似的<code>goroutines</code>分组,并对堆栈转储进行着色。</li><li><a href="https://github.com/alexpantyukhin/go-pattern-match">pattern-match</a> : 模式匹配库</li><li><a href="https://github.com/peco/peco">peco</a> : 简单的交互式过滤工具。</li><li><a href="https://github.com/arthurkushman/pgo">pgo</a> : 为PHP社区提供方便的功能。</li><li><a href="https://github.com/VividCortex/pm">pm</a> : 带有<code>HTTP API</code> 的进程（即<code>goroutine</code>）管理器。</li><li><a href="https://github.com/gotidy/ptr">ptr</a> : 提供从基本类型的常量中简化创建指针的函数的包。</li><li><a href="https://github.com/is5/r">r</a> : 类似于<code>Python</code> 的<code>range()</code> 的<code>Go</code> 库</li><li><a href="https://github.com/zpatrick/rclient">rclient</a> : 可读性良好、灵活、易用的<code>REST APIs</code> 客户端</li><li><a href="https://github.com/tockins/realize">realize</a> : <code>Go</code> 语言构建系统,可以监控文件变化并重新加载。运行,构建,监控文件并支持自定义路径</li><li><a href="https://github.com/ssgreg/repeat">repeat</a> : <code>Go</code>实现不同的回退策略,对重试操作和心跳有用。</li><li><a href="https://github.com/mozillazg/request">request</a> :<code>Go</code>语言版的<code>HTTP Requests for Humans™</code>.</li><li><a href="https://github.com/abo/rerate">rerate</a> : <code>Go</code>的基于<code>Redis</code>的速率计数器和速率限制器。</li><li><a href="https://github.com/ivpusic/rerun">rerun</a> : 当源码发生变化时,重新编译和重新运行<code>go</code>应用程序。</li><li><a href="https://github.com/edermanoel94/rest-go">rest-go</a> : 提供许多有用的方法来使用<code>rest api</code>的包。</li><li><a href="https://github.com/kamilsk/retry">retry</a> : 最先进的功能机制,用于重复执行动作直到成功。</li><li><a href="https://github.com/percolate/retry">retry</a> : 简单但高度可配置的<code>Go</code>重试包。</li><li><a href="https://github.com/thedevsaddam/retry">retry</a> : <code>Go</code>中简单易行的重试机制包。</li><li><a href="https://github.com/shafreeck/retry">retry</a> : 确保工作能够完成的<code>go</code>语言库。</li><li><a href="https://github.com/rafaeljesus/retry-go">retry-go</a> : 为<code>golang</code>提供简单易行的重试。</li><li><a href="https://github.com/VividCortex/robustly">robustly</a> : 弹性地运行函数,捕捉和重启 并自动处理<code>panic</code>。</li><li><a href="https://github.com/blockloop/scan">scan</a> : 直接将<code>golang sql.Rows</code>扫描为<code>structs、slices</code>或<code>primitive</code>类型。</li><li><a href="https://github.com/georgysavva/scany">scany</a> : 用于将数据库中的数据扫描成<code>Go</code>结构等的库。</li><li><a href="https://github.com/syntaqx/serve">serve</a> : 静态<code>http</code>服务器。</li><li><a href="https://github.com/ztrue/shutdown">shutdown</a> : 用于<code>os.Signal</code> 处理的应用程序关机钩子。</li><li><a href="https://github.com/chrispassas/silk">silk</a> : 读取<code>silk netflow</code>文件。</li><li><a href="https://github.com/psampaz/slice">slice</a> : 用于常见<code>Go</code>分片操作的类型安全函数。</li><li><a href="https://github.com/Henry-Sarabia/sliceconv">sliceconv</a> : 原始类型之间的切片转换。</li><li><a href="https://github.com/leaanthony/slicer">slicer</a> : 让分片的工作更容易。</li><li><a href="https://github.com/jfcg/sorty">sorty</a> : 快速并发/并行排序。</li><li><a href="https://github.com/briandowns/spinner">spinner</a> : <code>Go</code> 语言软件包,提供多种选项,方便在终端中创建加载动画</li><li><a href="https://github.com/jmoiron/sqlx">sqlx</a> : 为内建的<code>database/sql</code> 软件包提供扩展</li><li><a href="https://github.com/janiltonmaciel/statiks">statiks</a> : 快速、零配置、静态的HTTP文件服务器。</li><li><a href="https://github.com/asdine/storm">Storm</a> : 用于<code>BoltDB</code> 的简单又强大的工具</li><li><a href="https://github.com/PumpkinSeed/structs">structs</a> : 实现简单的函数来操作结构。</li><li><a href="https://github.com/go-task/task">Task</a> : 简单来讲就是<code>"Make"</code>的替代品</li><li><a href="https://github.com/taskctl/taskctl">taskctl</a> : 并发任务运行库。</li><li><a href="https://github.com/andy2046/tik">tik</a> : 为<code>Go</code>提供简单方便的定时任务调度包。</li><li><a href="https://github.com/cyruzin/tome">tome</a> : <code>Tome</code>被设计用来对<code>RESTful API</code>进行简单分页。</li><li><a href="https://github.com/viant/toolbox">toolbox</a> : <code>slice, map, multimap</code>, 结构体, 函数,数据转换工具、服务路由,宏求值和标记器工具</li><li><a href="https://github.com/alxrm/ugo">ugo</a> : <code>uGo</code>是一个切片工具箱。</li><li><a href="https://github.com/esemplastic/unis">UNIS</a> : <code>Go</code>语言字符串处理函数的通用架构</li><li><a href="https://github.com/knq/usql">usql</a> : <code>usql</code>是一个通用的命令行接口,用于操作<code>sql</code>数据库</li><li><a href="https://github.com/shomali11/util">util</a> : 收集了很多有用的函数<br></li><li><a href="https://github.com/asciimoo/wuzz">wuzz</a> : 交互式命令行程序,用于进行<code>HTTP</code> 检查</li><li><a href="https://github.com/monmohan/xferspdy">xferspdy</a> : <code>Xferspdy</code> 提供了二进制比对以及<code>patch</code>补丁功能</li></ul><hr><h2 id="uuid">UUID</h2><p><code>UUID 生成和操作库</code></p><ul><li><a href="https://github.com/jakehl/goid">goid</a> : 生成并解析符合<code>RFC4122</code>标准的<code>V4 UUID</code>。</li><li><a href="https://github.com/twharmon/gouid">gouid</a> : 只需一次分配就能生成加密安全的随机字符串<code>ID</code>。</li><li><a href="https://github.com/aidarkhanov/nanoid">nanoid</a> : 微型而高效的<code>Go</code>唯一字符串ID生成器。</li><li><a href="https://github.com/muyo/sno">sno</a> : 内嵌元数据的紧凑、可排序和快速的唯一<code>ID</code>。</li><li><a href="https://github.com/oklog/ulid">ulid</a> : <code>ULID (Universally Unique Lexicographically Sortable Identifier)</code> 的<code>Go</code>实现。</li><li><a href="https://gitlab.com/skilstak/code/go/uniq">uniq</a> : 使用命令快速、安全的唯一标识符。</li><li><a href="https://github.com/agext/uuid">uuid</a> : 用快速或加密质量的随机节点标识符生成、编码和解码<code>UUIDs v1</code>。</li><li><a href="https://github.com/gofrs/uuid">uuid</a> : 通用唯一标识符<code>（UUID）</code>的实现。支持<code>UUID</code>的创建和解析。</li><li><a href="https://github.com/google/uuid">uuid</a> : 基于<code>RFC 4122</code>和<code>DCE 1.1</code>的<code>UUIDs Go</code>包。</li><li><a href="https://github.com/edwingeng/wuid">wuid</a> : 极快的唯一数字生成器,比<code>UUID</code>快10-135倍。</li></ul><hr><h2 id="校验库">校验库</h2><p><code>用于校验的库</code></p><ul><li><a href="https://github.com/osamingo/checkdigit">checkdigit</a> : 提供数字算法（<code>Luhn, Verhoeff, Damm</code>）和数字计算（<code>ISBN, EAN, JAN, UPC</code>等）功能的库。</li><li><a href="https://github.com/guiferpa/gody">gody</a> : 针对 'Go` 的轻量级结构体验证器。</li><li><a href="https://github.com/twharmon/govalid">govalid</a> : 基于标签的快速结构体验证。</li><li><a href="https://github.com/asaskevich/govalidator">govalidator</a> : 数据验证及清晰工具,用于字符串,数字, 数组切片及结构体</li><li><a href="https://github.com/thedevsaddam/govalidator">govalidator</a> : 用简单的规则验证<code>Golang</code>请求数据. 高度受<code>Laravel</code>的请求验证的启发.</li><li><a href="https://github.com/faceair/jio">jio</a> : <code>jio</code>是一个类似于<a href="https://github.com/hapijs/joi">joi</a> 的json模式验证器.</li><li><a href="https://github.com/go-ozzo/ozzo-validation">ozzo-validation</a> : 支持多种数据类型的验证 (结构体,字符串,键值对,数组切片等等),具有可配置、可扩展的验证规则,且使用常用代码结构定义,而非结构体标签</li><li><a href="https://github.com/thazelart/terraform-validator">terraform-validator</a> : <code>Terraform</code>的规范和约定验证器。</li><li><a href="https://github.com/gookit/validate">validate</a> : 用于数据验证和过滤的<code>Go</code>包,支持验证<code>Map、Struct、Request(Form、JSON、url.Values、Uploaded Files</code>)数据和更多的功能。</li><li><a href="https://github.com/gobuffalo/validate">validate</a> : 为<code>Go</code>语言程序编写验证工具的框架</li><li><a href="https://github.com/go-playground/validator">validator</a> : <code>Go</code>结构体及域验证,包括：跨域、跨结构体,<code>Map</code>, 切片和数组</li></ul><hr><h3 id="版本控制">版本控制</h3><p><code>版本控制相关库</code></p><ul><li><a href="https://github.com/rjeczalik/gh">gh</a> : 用于<code>GitHub Webhooks</code>的可编程服务器以及<code>net/HTTP</code> 中间件</li><li><a href="https://github.com/libgit2/git2go">git2go</a> : <code>libgit2</code>的<code>Go</code>语言接口</li><li><a href="https://github.com/src-d/go-git">go-git</a> : 纯<code>Go</code>中实现高度可扩展的<code>Git</code>。</li><li><a href="https://github.com/sourcegraph/go-vcs">go-vcs</a> : 通过<code>Go</code>语言来操作和检视<code>VCS</code>代码仓</li><li><a href="https://github.com/src-d/hercules">hercules</a> : 查看<code>git repo</code>历史的代码库</li><li><a href="https://github.com/beyang/hgo">hgo</a> : <code>HGo</code> 是一个<code>Go</code>语言软件包集合,提供了对本地<code>Mercurial</code>仓库的读取能力.</li></ul><hr><h2 id="视频">视频</h2><p><code>视频和流媒体相关库</code></p><ul><li><a href="https://github.com/3d0c/gmf">gmf</a> : <code>FFmpeg av*</code>库的 Go 语言接口.</li><li><a href="https://github.com/asticode/go-astisub">go-astisub</a> : 使用 Go 语言操作字幕<code>(.srt, .stl, .ttml, .webvtt, .ssa/.ass, teletext, .smi, etc.).</code></li><li><a href="https://github.com/asticode/go-astits">go-astits</a> : 在 GO 中解析和解调<code>MPEG</code> 传输流（.ts）。</li><li><a href="https://github.com/quangngotan95/go-m3u8">go-m3u8</a> : 苹果<code>m3u8</code>播放列表的解析器和生成库。</li><li><a href="https://github.com/unki2aut/go-mpd">go-mpd</a> : <code>MPEG-DASH</code>清单文件的解析器和生成器库。</li><li><a href="https://github.com/giorgisio/goav">goav</a> : 易用的<code>FFmpeg</code>Go 语言接口</li><li><a href="https://github.com/ziutek/gst">gst</a> : <code>GStreamer</code>的 Go 语言接口</li><li><a href="https://github.com/wargarblgarbl/libgosubs">libgosubs</a> : <code>Go</code>的字幕格式处理库。支持<code>.srt、.ttml</code>和.ass`。</li><li><a href="https://github.com/adrg/libvlc-go">libvlc-go</a> : <code>libvlc 2.X/3.X/4.X</code>的go语言封装)(<code>VLC</code> 媒体播放器使用）。</li><li><a href="https://github.com/grafov/m3u8">m3u8</a> : 用于苹果<code>HLS</code>的<code>M3U8</code>播放列表解析器和生成器库</li><li><a href="https://github.com/korandiz/v4l">v4l</a> :<code>Go</code>语言编写的<code>Linux</code>下使用的视频截图库</li></ul><hr><h2 id="web框架">web框架</h2><p><code>web 框架</code></p><ul><li><a href="https://aahframework.org">aah</a> : 可扩展、高性能、快速发布的<code>Go</code>语言<code>web</code>框架</li><li><a href="https://github.com/aerogo/aero">Aero</a> : <code>Go</code>的高性能Web框架,在<code>Lighthouse</code> 评比中拿到最高分</li><li><a href="https://github.com/aofei/air">Air</a> : 理想的<code>RESTful web</code> 框架</li><li><a href="https://github.com/appist/appy">appy</a> : 高效Web框架,帮助企业更容易扩展业务。</li><li><a href="https://github.com/nsheremet/banjo">Banjo</a> : 简单、快速的<code>Go web</code>框架。</li><li><a href="https://github.com/astaxie/beego">Beego</a> : beeGo 是一个开源的、高性能的 Go 语言<code>web</code>框架</li><li><a href="http://gobuffalo.io">Buffalo</a> : 为<code>Go</code> 语言带来堪比<code>Rails</code> 的高生产效率</li><li><a href="https://github.com/labstack/echo">Echo</a> : 高性能、极简的<code>Go</code>语言<code>web</code> 框架</li><li><a href="https://github.com/gofiber/fiber">Fiber</a> : 受<code>Express.js</code>启发的<code>Web</code> 框架,构建在<code>Fasthttp</code>上。</li><li><a href="https://github.com/zpatrick/fireball">Fireball</a> : 更加自然的<code>web</code>框架</li><li><a href="https://github.com/i-love-flamingo/flamingo">Flamingo</a> : 可插拔的<code>we</code>b项目框架。包括模块的概念,并提供<code>DI、Configareas、i18n</code>、模板引擎、graphql、可观察性、安全性、事件、路由和反向路由等功能。</li><li><a href="https://github.com/i-love-flamingo/flamingo-commerce">Flamingo Commerce</a> : 提供电子商务功能,使用简洁的架构,如<code>DDD</code>、端口和适配器,你可以用它来构建灵活的电子商务应用。</li><li><a href="https://github.com/abahmed/gearbox">Gearbox</a> : 用Go编写的网络框架,专注于高性能和内存优化。</li><li><a href="https://github.com/gin-gonic/gin">Gin</a> : <code>Gin</code> 是一个<code>Go</code> 语言编写的 web 框架,提供了一组类似<code>martini</code>的<code>API</code>,且具有更好的性能（40倍的性能提升）。如果你需要高性能和高生产率,这个框架很适合你</li><li><a href="https://github.com/xxjwxc/ginrpc">Ginrpc</a> :<code>Gin</code>参数自动绑定工具,<code>Gin rpc</code>工具。</li><li><a href="https://github.com/NYTimes/gizmo">Gizmo</a> : 纽约时报正在使用对微服务工具集</li><li><a href="https://github.com/ant0ine/go-json-rest">go-json-rest</a> : 快速、简单的创建<code>RESTful JSON API.</code></li><li><a href="https://github.com/ungerik/go-rest">go-rest</a> : <code>Go</code> 语言<code>REST</code> 框架</li><li><a href="https://github.com/goa-go/goa">goa</a> : 用于开发微服务的框架,基于<code>Ruby</code>的<code>Praxis</code> 的设计</li><li><a href="https://github.com/fulldump/golax">Golax</a> : 一个非<code>Sinatra</code>的快速HTTP框架,支持<code>Google</code>自定义方法、深度拦截器、递归等。</li><li><a href="https://github.com/dinever/golf">Golf</a> : 快速、简单、轻量级的<code>Go</code> 语言微型<code>web</code>框架。具有强大的功能且没有标准库以外的依赖</li><li><a href="https://github.com/rainycape/gondola">Gondola</a> : 用于快速编写高性能网站的框架</li><li><a href="https://github.com/mustafaakin/gongular">gongular</a> : 快速<code>Go web</code> 框架,支持输入映射／验证以及依赖注入</li><li><a href="https://github.com/twharmon/goweb">goweb</a> : 具有路由、<code>websockets</code>、日志、中间件、静态文件服务器（可选<code>gzip</code>）和自动TLS的Web框架</li><li><a href="https://github.com/System-Glitch/goyave">Goyave</a> : 功能完整的<code>Web</code>框架,旨在实现简洁的代码和快速开发,具有强大的内置功能。</li><li><a href="https://github.com/hidevopsio/hiboot">hiboot</a> : <code>hiboot</code>是一个高性能的web应用框架,支持自动配置和依赖注入。</li><li><a href="https://github.com/go-macaron/macaron">Macaron</a> : <code>Macaron</code>是一个高效的模块化设计的<code>web</code>框架</li><li><a href="https://github.com/paulbellamy/mango">mango</a> : ManGo 是一个模块化<code>web</code>应用框架,受到<code>Rack</code>和<code>PEP33</code>3 的启发</li><li><a href="https://github.com/claygod/microservice">Microservice</a> : 用于创建微服务的框架,使用<code>Go</code>语言编写</li><li><a href="https://github.com/ivpusic/neo">neo</a> : 极小且快速的 Go 语言<code>web</code> 框架,具有及其简单的<code>API</code></li><li><a href="https://github.com/beatlabs/patron">patron</a> : <code>Patron</code>是一个遵循最佳云实践的微服务框架,专注于生产力。</li><li><a href="https://github.com/resoursea/api">Resoursea</a> : 用于快速编写基于资源的服务的REST框架。</li><li><a href="http://rest-layer.io">REST Layer</a> : 在数据库之上构建<code>REST/GraphQL API</code>的框架,主要是通过配置而不是代码来进行开发</li><li><a href="https://github.com/revel/revel">Revel</a> :<code>go</code>语言高生产率框架</li><li><a href="https://github.com/goanywhere/rex">rex</a> :<code>Rex</code> 是一个用于进行模块化开发的库,基于<code>Gorilla/mux</code> 完全兼容大多数的<code>net/HTTP</code></li><li><a href="https://github.com/gookit/rux">rux</a> : 用于构建<code>golang HTTP</code>应用程序的简单、快速的<code>web</code>框架。</li><li><a href="https://github.com/lunny/tango">tango</a> : 微型的、支持插件的<code>web</code>框架</li><li><a href="https://github.com/rcrowley/go-tigertonic">tigertonic</a> : 受到 Dropwizard 启发,用于构建<code>JSON web</code>服务的<code>Go</code>语言框架,</li><li><a href="https://github.com/uadmin/uadmin">uAdmin</a> : 受<code>Django</code>启发的Golang<code>web</code>框架,。</li><li><a href="https://github.com/gernest/utron">utron</a> : 轻量级的<code>go</code>语言<code>MVC</code> 框架</li><li><a href="https://github.com/aisk/vox">vox</a> : <code>Golang</code>网络框架,灵感来自<code>Koa</code>。</li><li><a href="https://github.com/bnkamalesh/webgo">WebGo</a> : 构建<code>Web</code>应用的微服务框架；具有处理程序链、中间件和上下文注入功能。具有标准库兼容的<code>HTTP</code>处理程序（即<code>http.HandlerFunc</code>）。</li><li><a href="https://github.com/yarf-framework/yarf">YARF</a> : 微服务框架,用于快速、简单地构建<code>REST APIs</code>以及<code>web</code> 服务</li></ul><hr><h2 id="中间件">中间件</h2><h3 id="中间件-1">中间件</h3><ul><li><a href="https://github.com/posener/client-timing">client-timing</a> : 在消息头部添加服务器定时信息的HTTP客户端。</li><li><a href="https://github.com/rs/cors">CORS</a> : 非常方便地向你的<code>api</code>中添加<code>CORS</code>功能</li><li><a href="https://github.com/rs/formjson">formjson</a> : 以标准的表单<code>POST</code>方式处理<code>JSON</code>输入。</li><li><a href="https://github.com/github/go-fault">go-fault</a> : <code>Go</code>的错误注入中间件。</li><li><a href="https://github.com/mitchellh/go-server-timing">go-server-timing</a> : 向头信息中 添加/解析服务器计时信息。</li><li><a href="https://github.com/ulule/limiter">Limiter</a> : 超级简单的限速中间件</li><li><a href="https://github.com/philippgille/ln-paywall">ln-paywall</a> : Go 中间件,用于通过<code>Lightning Network (Bitcoin)</code> 请求将<code>API</code> 货币化。</li><li><a href="https://github.com/didip/tollbooth">Tollbooth</a> : <code>HTTP</code> 请求限速中间件</li><li><a href="https://github.com/sebest/xff">XFF</a> : 理<code>X-Forwarded-For</code>头的中间件</li></ul><hr><h3 id="创建http中间件的代码库">创建http中间件的代码库</h3><ul><li><a href="https://github.com/justinas/alice">alice</a> : 创建链式中间件的库</li><li><a href="https://github.com/codemodus/catena">catena</a> : <code>HTTP.Handler</code>封装器 (和<code>chain</code>具有相同的<code>API</code> ).</li><li><a href="https://github.com/codemodus/chain">chain</a> : 可以带数据的<code>Handler</code> 链式封装器(<code>net/context-based "middleware"</code>).</li><li><a href="https://github.com/go-on/wrap">go-wrap</a> : 小型中间件库,用于<code>net/HTTP.</code></li><li><a href="https://github.com/alioygur/gores">gores</a> : 用于处理<code>HTML, JSON, XML</code> 等。对于<code>RESTful APIs</code> 很有用。</li><li><a href="https://github.com/carbocation/interpose">interpose</a> : 极简的<code>net/HTTP</code> 中间件</li><li><a href="https://github.com/HereMobilityDevelopers/mediary">mediary</a> : 为<code>http.Client</code> 添加拦截器,允许转储/重构/跟踪/...请求/响应。</li><li><a href="https://github.com/stephens2424/muxchain">muxchain</a> : 用于<code>net/HTTP</code>的轻量级中间件</li><li><a href="https://github.com/urfave/negroni">negroni</a> : 符合语言习惯的<code>HTTP</code>中间件库</li><li><a href="https://github.com/unrolled/render">render</a> : 用于轻松渲染<code>JSON, XML</code>, 及<code>HTML</code> 模板响应的库</li><li><a href="https://github.com/thedevsaddam/renderer">renderer</a> : 简单、轻量级和更快的响应<code>JSON、JSONP、XML、YAML、HTML、File</code>的Go渲染包。</li><li><a href="https://github.com/InVisionApp/rye">rye</a> : 小型 Go 语言中间件库 ,支持<code>JWT, CORS, Statsd</code>, 及<code>Go 1.7 context</code></li><li><a href="https://github.com/thoas/stats">stats</a> : <code>Go</code>语言中间件,用于存储<code>web</code>应用的多种信息</li></ul><hr><h2 id="路由">路由</h2><ul><li><a href="https://github.com/gernest/alien">alien</a> : 轻量级、超快速的<code>HTTP</code> 路由,</li><li><a href="https://github.com/GuilhermeCaruso/bellt">bellt</a> : 一个简单的<code>Go HTTP</code>路由器。</li><li><a href="https://github.com/go-zoo/bone">Bone</a> : 轻量、快速的<code>HTTP</code> 多路复用器</li><li><a href="https://github.com/claygod/Bxog">Bxog</a> : 为<code>go</code>语言编写的简单、快速的<code>HTTP</code>路由。它能够根据接收到的参数创建<code>URL</code>,并且能够解析多种不同复杂度、长度和嵌套的路由。</li><li><a href="https://github.com/go-chi/chi">chi</a> : 基于<code>net/context</code>的小巧、快速、具有丰富表达力的<code>HTTP</code>路由.</li><li><a href="https://github.com/buaazp/fasthttprouter">fasthttprouter</a> : 从<code>httprouter</code>分叉出来的高性能路由器,也是第一个适合<code>fasthttp</code>的路由器。</li><li><a href="https://github.com/razonyang/fastrouter">FastRouter</a> : 从<code>httprouter</code>fork出来的高性能路由,是第一个适配<code>fasthttp</code>的路由</li><li><a href="https://github.com/gocraft/web">gocraft/web</a> : <code>Mux</code>及中间件包</li><li><a href="https://github.com/goji/goji">Goji</a> :<code>Goji</code>是一个极简的、灵活的<code>HTTP</code> 请求数据分选器,支持<code>net/context.</code></li><li><a href="https://github.com/goroute/route">goroute</a> : 简单而强大的<code>HTTP</code> 请求复用器。</li><li><a href="https://github.com/vardius/gorouter">GoRouter</a> : <code>server/API</code>微服务框架,具有<code>HTTP</code> 请求路由模块<code>router</code>模块, 多路复用模块并且提供了支持<code>net/context</code>的中间件 :<br></li><li><a href="https://github.com/gowww/router">gowww/router</a> : 超快的HTTP 路由,完全兼容<code>net/HTTP.Handler</code>接口.</li><li><a href="https://github.com/julienschmidt/httprouter">httprouter</a> : 高性能路由,使用这个库和标准http处理工具可以构建一个非常高性能大web框架</li><li><a href="https://github.com/dimfeld/httptreemux">httptreemux</a> : 快速,灵活,树状结构的<code>HTTP</code>路由。受到了<code>httprouter</code> 的启发</li><li><a href="https://github.com/go-playground/lars">lars</a> : 轻量级、快速、可扩展、零分配的<code>HTTP</code>路由,用于创建定制化的框架</li><li><a href="https://github.com/gorilla/mux">mux</a> : 强大的<code>URL</code>路由和分发库</li><li><a href="https://github.com/go-ozzo/ozzo-routing">ozzo-routing</a> : 极快的<code>Go (golang)  HTTP</code>路由器,支持正则表达式路由匹配。完全支持构建<code>RESTful API</code>。</li><li><a href="https://github.com/go-playground/pure">pure</a> : 是一个轻量级http路由,严格参照<code>net/HTTP</code>标准实现</li><li><a href="https://github.com/VividCortex/siesta">Siesta</a> : 具有可组合性的框架,用于编写中间件和<code>handlers</code></li><li><a href="https://github.com/husobee/vestigo">vestigo</a> : 用于构建<code>go</code>语言<code>web</code>应用 ,高性能、符合<code>HTTP</code> 标准的<code>URL</code> 路由,</li><li><a href="https://github.com/nbari/violetear">violetear</a> : <code>Go http</code>路由库</li><li><a href="https://github.com/rs/xmux">xmux</a> : 高性能 muxer,基于<code>httprouter</code> ,支持<code>net/context</code></li><li><a href="https://github.com/xujiajun/gorouter">xujiajun/gorouter</a> : 简单快速的<code>go HTTP</code>路由器。</li></ul><hr><h2 id="webassembly">WebAssembly</h2><ul><li><a href="https://github.com/dennwc/dom">dom</a> : <code>DOM库</code>。</li><li><a href="https://github.com/markfarnan/go-canvas">go-canvas</a> : 使用<code>HTML5 Canvas</code> 的库,所有的绘图逻辑都在<code>go</code>代码中执行。</li><li><a href="https://github.com/tinygo-org/tinygo">tinygo</a> : 基于<code>LLVM</code>,适用于微型场景的<code>Go</code>编译器。包括微控制器、<code>WebAssembly</code>和命令行工具。</li><li><a href="https://github.com/norunners/vert">vert</a> : <code>Go</code>和<code>JS</code>值之间的互操作。</li><li><a href="https://github.com/agnivade/wasmbrowsertest">wasmbrowsertest</a> : 在浏览器中运行<code>Go WASM</code>测试。</li><li><a href="https://github.com/gowebapi/webapi">webapi</a> : 从<code>WebIDL</code>生成<code>DOM</code>和<code>HTML</code>的封装。</li></ul><hr><h2 id="windows">Windows</h2><ul><li><a href="https://github.com/gonutz/d3d9">d3d9</a> : <code>Direct3D9</code> 的<code>Go</code> 语言封装</li><li><a href="https://github.com/go-ole/go-ole">go-ole</a> : 为<code>Go</code>语言实现的<code>Win32 OLE</code></li><li><a href="https://github.com/MonaxGT/gosddl">gosddl</a> : 从<code>SDDL-string</code>到用户友好的JSON的转换器。<code>SDDL</code>由四个部分组成。<code>Owner、Primary Group、DACL、SACL</code>。</li></ul><hr><h2 id="xml">XML</h2><ul><li><a href="https://github.com/xml-comp/xml-comp">XML-Comp</a> : 命令行<code>XML</code>比较工具,可以生成关于目录、文件和标签对差异信息</li><li><a href="https://github.com/sbabiv/xml2map">xml2map</a> : <code>Golang</code>编写的<code>XML</code>到<code>MAP</code>的转换器。</li><li><a href="https://github.com/shabbyrobe/xmlwriter">xmlwriter</a> : 基于<code>libxml2</code> 的<code>xmlwriter</code> 模块的<code>xml</code>生成器api.</li><li><a href="https://github.com/antchfx/xpath">xpath</a> : <code>XPath</code> 库</li><li><a href="https://github.com/antchfx/xquery">xquery</a> :<code>XQuery</code> 使你可以使用<code>XPath</code>表达式从<code>HTML/XML</code>文档中抽取数据和求值,</li><li><a href="https://github.com/miku/zek">zek</a> : 从<code>XML</code> 生成一个<code>Go</code>结构体。</li></ul><hr><h2 id="相关工具">相关工具</h2><p><code>go相关工具和插件</code></p><h3 id="代码分析">代码分析</h3><ul><li><a href="https://github.com/bradleyfalzon/apicompat">apicompat</a> : 检测<code>go</code>语言项目最近的变化,用于监测不能向后兼容的代码修改</li><li><a href="https://github.com/mibk/dupl">dupl</a> : 用于检测重复代码的工具</li><li><a href="https://github.com/kisielk/errcheck">errcheck</a> : <code>Errcheck</code>是一个用于检测go语言程序中存在未处理错误的程序</li><li><a href="https://github.com/davecheney/gcvis">gcvis</a> : 实时地将<code>Go</code> 语言垃圾回收进行可视化</li><li><a href="https://github.com/qiniu/checkstyle">go-checkstyle</a> : <code>checkstyle</code>是一个类似<code>java checkstyle</code>的 代码风格检查工具,这个工具受到<code>java checkstyle</code>和<code>Golint</code> 的启发</li><li><a href="https://github.com/roblaszczak/go-cleanarch">go-cleanarch</a> :<code>Go-cleanarch</code>用于检查代码是否符合简洁架构的相关法则,比如依赖法则以及你的Go语言项目中各个库的交互情况</li><li><a href="https://github.com/go-critic/go-critic">go-critic</a> : 源代码检查器,它带来了目前其他检查器没有实现的检查。</li><li><a href="https://github.com/psampaz/go-mod-outdated">go-mod-outdated</a> : 一种查找<code>Go</code>项目中过时的依赖关系的简单方法。</li><li><a href="https://github.com/firstrow/go-outdated">go-outdated</a> : 用于显示过时的库的命令行工具</li><li><a href="https://github.com/yuroyoro/goast-viewer">goast-viewer</a> : 基于<code>Web</code>的<code>Golang AST</code> 可视化工具.</li><li><a href="http://gocover.io/%60">GoCover.io</a> :<code>GoCover.io</code>可以查看任何go语言软件包的代码覆盖率</li><li><a href="https://godoc.org/golang.org/x/tools/cmd/goimports">goimports</a> : 用于自动修复,添加,删除你的 Go 语言项目的 import</li><li><a href="https://github.com/segmentio/golines">golines</a> : 自动缩短<code>Go</code> 代码中长行的格式化器。</li><li><a href="https://github.com/golang/lint">GoLint</a> : 针对 Go 语言源码的<code>lint</code> 工具</li><li><a href="http://go-lint.appspot.com/">Golint online</a> : 使用<code>golint</code>对<code>GitHub, Bitbucket</code> 以及<code>Google Project Hosting</code>上面的<code>Go</code>语言源文件进行静态分析</li><li><a href="https://github.com/jfeliu007/goplantuml">GoPlantUML</a> : 生成文本<code>plantUML</code>图的库和<code>CLI</code>,包含结构和接口的信息以及它们之间的关系。</li><li><a href="https://sourcegraph.com/github.com/sqs/goreturns">goreturns</a> : 添加零值<code>return</code> 语句以符合函数返回值类型</li><li><a href="https://github.com/dominikh/go-tools/tree/master/cmd/gosimple">gosimple</a> : 针对 Go 语言的<code>lint</code>工具,专注于简化代码</li><li><a href="https://github.com/shurcooL/gostatus">gostatus</a> : 命令行工具,查看当前<code>Go</code> 语言软件包仓库的状态</li><li><a href="https://github.com/surullabs/lint">lint</a> : 运行<code>linters</code>作为Go测试的一部分。</li><li><a href="https://github.com/z7zmey/php-parser">php-parser</a> : <code>Go</code>编写的<code>PHP</code>解析器。</li><li><a href="https://github.com/dominikh/go-tools/tree/master/cmd/staticcheck">staticcheck</a> : -<code>staticcheck</code>在<code>Go vet</code>阶段中执行大量的静态分析检查,类似<code>ReSharper for C#</code>这样的工具。</li><li><a href="https://github.com/verygoodsoftwarenotvirus/tarp">tarp</a> :<code>tarp</code>可以在<code>Go</code>源代码中找到无需直接单元测试的函数和方法</li><li><a href="https://github.com/augmentable-dev/tickgit">tickgit</a> : 用于显示代码注释<code>TODO</code>（任何语言）的CLI和go包,并应用<code>git blam</code>来识别作者<br></li><li><a href="https://github.com/mdempsky/unconvert">unconvert</a> : 从go语言代码中移除不必要的类型转换</li><li><a href="https://github.com/dominikh/go-tools/tree/master/cmd/unused">unused</a> : <code>unused</code>会检查 Go 语言代码中没有用到的常量,变量,函数和类型</li><li><a href="https://github.com/mccoyst/validate">validate</a> : 根据结构体<code>tag</code>自动验证结构体字段</li></ul><hr><h2 id="编辑器插件">编辑器插件</h2><ul><li><a href="https://plugins.jetbrains.com/plugin/9568-go">Go plugin for JetBrains IDEs</a> :<code>JetBrains IDEs</code> 使用的<code>Go</code>语言插件</li><li><a href="https://github.com/theia-ide/go-language-server">go-language-server</a> : 用于将<code>VSCode go</code> 扩展变为支持语言服务器协议的GO代码封装库</li><li><a href="https://github.com/dominikh/go-mode.el">go-mode</a> : <code>GNU/Emacs</code>的<code>Go</code>语言模式</li><li><a href="https://github.com/joefitzgerald/go-plus">go-plus</a> : 供<code>Atom</code> 使用的自动补全、格式化、语法检查、<code>lint</code>及<code>Vetting</code> 的软件包</li><li><a href="https://github.com/nsf/gocode">gocode</a> : <code>go</code>语言自动补全</li><li><a href="https://github.com/incu6us/goimports-reviser">goimports-reviser</a> : 用于导入的格式化工具。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=MaxMedia.go-prof">goprofiling</a> : 这个扩展为<code>VS Code</code>增加了对<code>Go</code>语言的基准分析支持。</li><li><a href="https://github.com/DisposaBoy/GoSublime">GoSublime</a> : SublimeText 2 使用的 Go 语言插件,支持代码补全以及一些类似<code>IDE</code> 的特性</li><li><a href="https://github.com/hexdigest/gounit-vim">gounit-vim</a> : <code>Vim</code>插件,用于根据函数或方法的签名生成<code>Go</code>测试。</li><li><a href="https://github.com/theia-ide/theia-go-extension">theia-go-extension</a> : 为<code>Theia IDE</code>提供<code>Go</code>语言支持。</li><li><a href="https://github.com/rjohnsondev/vim-compiler-go">vim-compiler-go</a> :<code>Vim</code>插件,在保存时高亮语法错误</li><li><a href="https://github.com/fatih/vim-go">vim-go</a> : <code>Vim</code>使用的<code>Go</code> 语言开发插件</li><li><a href="https://github.com/golang/vscode-go">vscode-go</a> : <code>Visual Studio Code (VS Code)</code> : 使用的一个扩展,为<code>Go</code> 语言提供了支持</li><li><a href="https://github.com/eaburns/Watch">Watch</a> : 当文件变动时,在<code>acme</code>窗口中执行命令</li></ul><hr><h2 id="go-代码生成工具">Go 代码生成工具</h2><ul><li><a href="https://github.com/usk81/generic">generic</a> : 针对<code>Go</code>的灵活数据类型。</li><li><a href="https://github.com/cheekybits/genny">genny</a> : 为<code>Go</code>提供优雅的泛型。</li><li><a href="https://github.com/Parquery/gocontracts">gocontracts</a> : 通过同步代码和文档,将按合约设计引入<code>Go</code>。</li><li><a href="http://github.com/bouk/gonerics">gonerics</a> : <code>Go</code>泛型。</li><li><a href="https://github.com/cweill/gotests">gotests</a> : 根据源代码生成<code>Go</code>测试代码。</li><li><a href="https://github.com/hexdigest/gounit">gounit</a> : 使用你自己的模板生成<code>Go</code> 测试代码。</li><li><a href="https://github.com/DylanMeeus/hasgo">hasgo</a> : 为<code>slices</code>生成<code>Haskell</code>的启发函数。</li><li><a href="https://github.com/opennota/re2dfa">re2dfa</a> : 将正则表达式转换为有限状态机并输出<code>Go</code>源代码。</li><li><a href="https://xuri.me/toml-to-go">TOML-to-Go</a> : 在浏览器中将<code>TOML</code>转成<code>Go</code> 类型。</li><li><a href="https://github.com/xuri/xgen">xgen</a> : <code>XSD (XML Schema Definition)</code> 解析器,能够生成<code>Go/C/Java/Rust/Typescript</code>代码</li></ul><hr><h2 id="go-工具">Go 工具</h2><ul><li><a href="https://github.com/songgao/colorgo">colorgo</a> : 对 Go 命令进行了封装,用于为Go build的输出结果添加颜色</li><li><a href="https://github.com/KyleBanks/depth">depth</a> : 通过分析导入的库,将某个包的依赖关系用树状结构进行显示</li><li><a href="https://getgb.io/">gb</a> : 针对Go语言的项目的构建工具,</li><li><a href="https://github.com/axelspringer/generator-go-lang">generator-go-lang</a> : 生成<a href="http://yeoman.io">Yeoman</a> : 新项目的生成器 。</li><li><a href="https://go-gilbert.github.io">gilbert</a> : Go项目的构建系统和任务运行器。</li><li><a href="https://github.com/TrueFurby/go-callvis">go-callvis</a> : 使用<code>dot</code>语言将你的 Go 语言程序函数调用关系可视化</li><li><a href="https://github.com/pieterclaerhout/go-james">go-james</a> : Go项目骨架创建服务,无需手动设置即可构建和测试你的项目。</li><li><a href="https://github.com/skelterjohn/go-pkg-complete">go-pkg-complete</a> :<code>Bash</code>代码补全,用于<code>Go</code>和<code>wGo</code>.</li><li><a href="https://github.com/go-swagger/go-swagger">go-swagger</a> : 为 Go 语言实现的<code>Swagger 2.0</code>.</li><li><a href="https://github.com/tylerwince/godbg">godbg</a> : <code>Rusts dbg！</code>宏的实现,用于在开发过程中进行快速和简单的调试。</li><li><a href="https://github.com/dustinblackman/gomodrun/">gomodrun</a> : 用于执行和缓存包含在<code>go.mod</code>文件中的二进制文件的<code>Go</code>工具。</li><li><a href="https://github.com/psampaz/gothanks">gothanks</a> :<code>GoThanks</code> 会自动为你的<code>go.mod github</code>依赖项加星。</li><li><a href="https://github.com/rocketlaunchr/igo">igo</a> : <code>igo</code>到<code>go</code>的转换器（Go语言的新语言特性！）。</li><li><a href="https://github.com/OctoLinker/browser-extension">OctoLinker</a> : - 使用<code>github</code> 的浏览器插件<code>OctoLinker</code>高效浏览<code>Go</code> 语言文件</li><li><a href="https://github.com/kyoh86/richgo">richgo</a> : 用文本装饰丰富<code>go</code>代码测试输出。</li><li><a href="https://github.com/galeone/rts">rts</a> : <code>RTS</code>（是<code>response to struct</code>的缩写）用于根据服务器的响应生成<code>Go</code>语言结构体</li><li><a href="https://github.com/dtgorski/typex">typex</a> : 检查Go类型和它们的转换依赖关系,或者将结果导出为<code>TypeScrip</code>t值对象（或类型）声明。</li></ul><hr><h2 id="软件包">软件包</h2><p><code>Go语言开发的软件工具</code></p><h3 id="devops-工具">devops 工具</h3><ul><li><a href="https://github.com/smira/aptly">aptly</a> : <code>aptly</code>是一个<code>Debian</code>库管理工具</li><li><a href="https://github.com/xuri/aurora">aurora</a> : 跨平台、基于web的<code>Beanstalkd</code>队列服务器控制台</li><li><a href="https://github.com/soniah/awsenv">awsenv</a> : 加载<code>Amazon (AWS)</code> 环境变量作为<code>profile</code>文件</li><li><a href="https://github.com/dave/blast">Blast</a> : 一个简单的API负载测试和批量作业管理的工具。</li><li><a href="https://github.com/codesenberg/bombardier">bombardier</a> : 快速的、跨平台的<code>HTTP</code>基准工具.</li><li><a href="https://github.com/bosun-monitor/bosun">bosun</a> : 基于时间序列的告警框架</li><li><a href="https://github.com/rogerwelin/cassowary">cassowary</a> : 用Go编写的现代跨平台<code>HTTP</code>负载测试工具。</li><li><a href="https://github.com/centerorbit/depcharge">DepCharge</a> : 帮助管理大型项目中众多依赖关系的命令。</li><li><a href="https://github.com/ozankasikci/dockerfile-generator">Dockerfile-Generator</a> : 包含<code>go</code>代码库和可执行文件,其可以利用各种输入管道信息生成有效的Dockerfiles。</li><li><a href="https://github.com/liudng/dogo">dogo</a> : 监控源文件中的变化并自动编译和执行</li><li><a href="https://github.com/appleboy/drone-jenkins">drone-jenkins</a> : 可以通过二进制文件、<code>docker</code>或者<code>Drone CI</code>来触发下游<code>Jenkins</code> 任务,</li><li><a href="https://github.com/appleboy/drone-scp">drone-scp</a> : 通过<code>SSH</code> 拷贝文件及可执行程序,可以通过二进制文件、<code>docker</code> 或者<code>Drone CI</code>来使用</li><li><a href="https://github.com/chrismckenzie/dropship">Dropship</a> : 通过<code>cdn</code>部署代码的工具</li><li><a href="https://github.com/appleboy/easyssh-proxy">easyssh-proxy</a> : 一个用于通过 ssh 远程执行命令以及可通过<code>ProxyCommand</code> 来进行 SCP 下载</li><li><a href="https://github.com/mkchoi212/fac">fac</a> : 用于修复git合并冲突的命令行用户界面。</li><li><a href="https://github.com/gaia-pipeline/gaia">gaia</a> : 利用任何编程语言都可以构建强大的管道的库。</li><li><a href="https://github.com/go-gitea/gitea">Gitea</a> : 社区驱动的<code>Gogs</code>的<code>fork</code>库</li><li><a href="https://git.jonasfranz.software/JonasFranzDEV/gitea-github-migrator">gitea-github-migrator</a> : 将所有的` GitHub 仓库、问题、里程碑和标签迁移到 Gitea 实例中。</li><li><a href="https://github.com/go-furnace/go-furnace">go-furnace</a> : 用Go编写的托管解决方案。在<code>AWS、GCP</code>或<code>DigitalOcean</code>上轻松部署你的应用程序。</li><li><a href="https://github.com/sanbornm/go-selfupdate">go-selfupdate</a> : 让你的<code>Go</code> 语言程序可以自我更新</li><li><a href="https://github.com/cryptojuice/gobrew">gobrew</a> : <code>Gobrew</code>让你可以在不同版本的<code>Go</code> 语言之间轻松切换</li><li><a href="https://github.com/sirnewton01/godbg">godbg</a> : 基于<code>Web</code> 的前端<code>gdb</code> 应用程序</li><li><a href="https://gogs.io/">Gogs</a> : 自我托管的<code>Git</code>服务</li><li><a href="https://github.com/inconshreveable/gonative">gonative</a> : 为<code>Go</code> 语言创建可以在多平台进行交叉编译的工具,使用<code>CGo-enabled</code>标准库</li><li><a href="https://github.com/ahmetalpbalkan/govvv">govvv</a> : 对<code>Go build</code>进行了封装,用于轻松的向 Go 语言二进制文件中添加版本信息</li><li><a href="https://github.com/mitchellh/gox">gox</a> : 非常简单的<code>Go</code>语言交叉编译工具</li><li><a href="https://github.com/laher/goxc">goxc</a> : <code>Go</code> 语言构建工具,专注于交叉编译和打包</li><li><a href="https://github.com/yaronsumel/grapes">grapes</a> : 一款轻量级工具,用于通过<code>ssh</code>发送命令</li><li><a href="https://github.com/moovweb/gvm">GVM</a> : <code>GVM</code>提供了用于管理<code>Go</code>语言版本的接口</li><li><a href="https://github.com/rakyll/hey">Hey</a> :<code>Hey</code>是一个微型程序,用于向<code>web</code> 应用发送负载</li><li><a href="https://github.com/jenkins-zh/jenkins-cli">jcli</a> : <code>Jenkins CLI</code>允许你以一种简单的方式管理你的<code>Jenkins</code>。</li><li><a href="https://github.com/ajvb/kala">kala</a> : 极简、现代的、高效的任务调度</li><li><a href="https://github.com/cswank/kcli">kcli</a> : 用于检查<code>kafka</code>主题/分区/消息的命令行工具。</li><li><a href="https://github.com/kubernetes/kubernetes">kubernetes</a> : 来自<code>Google</code>的容器集群管理器</li><li><a href="https://github.com/ivanilves/lstags">lstags</a> : 在不同的注册表中同步<code>Docker</code>镜像的工具和<code>API</code>。</li><li><a href="https://github.com/timdp/lwc">lwc</a> : <code>UNIX wc</code>命令的实时更新版本。</li><li><a href="https://github.com/xwjdsh/manssh">manssh</a> : <code>manssh</code>是一个命令行工具,用于轻松管理ssh别名配置。</li><li><a href="https://github.com/moby/moby">Moby</a> : 为容器生态系统创建的一个合作项目,用于构建基于容器的系统</li><li><a href="https://github.com/emicklei/mora">Mora</a> : REST 服务器,用于获取<code>MonGoDB</code>文件和元数据</li><li><a href="https://github.com/ostrost/ostent">ostent</a> : 收集并显示系统数据,可以作<code>Graphite</code>和／或<code>InfluxDB</code> 的中间件</li><li><a href="https://github.com/mitchellh/packer">Packer</a> :<code>Packer</code>通过单一的配置文件,为不同的平台创建独立镜像</li><li><a href="https://github.com/bengadbois/pewpew">Pewpew</a> : 灵活的<code>HTTP</code>命令行压力测试工具<br></li><li><a href="https://github.com/pomerium/pomerium">Pomerium</a> : <code>Pomerium</code>是一个身份感知的访问代理。</li><li><a href="https://github.com/alouche/rodent">Rodent</a> : <code>Rodent</code> 帮助你管理<code>Go</code>语言版本、项目、和追踪依赖</li><li><a href="https://github.com/oxyno-zeta/s3-proxy">s3-proxy</a> : <code>S3</code>代理,具有<code>GET、PUT</code>和<code>DELETE</code>方法和认证（<code>OpenID Connect</code>和<code>Basic Auth</code>）。</li><li><a href="https://github.com/rlmcpherson/s3gof3r">s3gof3r</a> : 为了从<code>Amazon S3</code>中高速存取大型对象而特别优化的库</li><li><a href="https://github.com/peak/s5cmd">s5cmd</a> : 快速的<code>S3</code> 和本地文件系统执行工具。</li><li><a href="https://github.com/scaleway/scaleway-cli">Scaleway-cli</a> : 通过命令行来管理 裸金属服务器 (和使用<code>Docker</code>一样容易)。</li><li><a href="https://github.com/bitfield/script">script</a> : 在Go中轻松编写类似<code>shell</code>的脚本,用于<code>DevOps</code>和系统管理任务。</li><li><a href="https://github.com/ChristopherRabotin/sg">sg</a> : 对一组<code>HTTP</code> 钩子（如<code>ab</code>）进行基准测试,可以使用每次调用之间的响应代码和数据,根据其之前的响应来确定特定的服务器压力。</li><li><a href="https://github.com/TimothyYe/skm">skm</a> : SKM是一个简单而强大的<code>SSH</code>密钥管理器,它可以帮助您轻松管理您的多个<code>SSH</code>密钥。</li><li><a href="https://github.com/sanathp/statusok">StatusOK</a> : 监控你的网站和<code>REST APIs</code>。如果你的服务器挂了或是响应时间超过预期,则会通过<code>Slack</code>,<code>E-mail</code>来通知你</li><li><a href="https://github.com/dikhan/terraform-provider-openapi">terraform-provider-openapi</a> :<code>Terraform provider</code>插件,可以在运行时根据包含<code>API</code>定义的<code>OpenAPI</code>文档（以前称为<code>swagger</code>文件）动态配置自己。</li><li><a href="https://github.com/containous/traefik">traefik</a> : 能对接多个后端的反向代理和负载均衡器。</li><li><a href="https://github.com/xitonix/trubka">trubka</a> : <code>CLI</code>工具,用于管理<code>Apache Kafka</code>集群并排除其故障,能够向<code>Kafka</code>发布/消费协议缓冲区和纯文本事件。</li><li><a href="https://github.com/ovh/utask">uTask</a> : 自动化引擎,可对<code>yaml</code>中声明的业务流程进行建模和执行。</li><li><a href="https://github.com/tsenart/vegeta">Vegeta</a> : <code>HTTP 加</code>载测试工具和代码库</li><li><a href="https://github.com/adnanh/webhook">webhook</a> : 允许用户创建<code>HTTP</code>钩子,并在服务器上执行命令</li><li><a href="https://wide.b3log.org/login">Wide</a> : 基于<code>Web</code> 的<code>IDE</code>,为使用<code>Go</code>语言的团队设计</li><li><a href="https://github.com/masterzen/winrm-cli">winrm-cli</a> : 命令行工具,可以远程在<code>windows</code>机器上执行命令</li></ul><hr><h3 id="其他软件库和软件包">其他软件库和软件包</h3><ul><li><a href="https://goplay.tools">Better Go Playground</a> : 具有语法高亮、代码补全等功能的<code>playground</code></li><li><a href="https://github.com/crufter/borg">borg</a> : 基于终端的搜索引擎,用于搜索<code>bash</code>代码片段</li><li><a href="https://github.com/tejo/boxed">boxed</a> : 基于<code>Dropbox</code>的博客引擎</li><li><a href="https://github.com/rafael-santiago/cherry">Cherry</a> : <code>Go</code>语言实现的一个微型网络聊天服务器</li><li><a href="https://github.com/gocircuit/circuit">Circuit</a> : <code>Circuit</code>是一个可编程的<code>PaaS</code>以及<code>IaaS</code>,用于管理、发现以及编排各种云端应用的服务及主机</li><li><a href="https://github.com/tylertreat/Comcast">Comcast</a> : 模拟网络波动情况下的网络数据连接</li><li><a href="https://github.com/kelseyhightower/confd">confd</a> : 使用<code>etcd</code>或<code>consul</code>来管理本地应用的配置文件</li><li><a href="https://github.com/schollz/croc">croc</a> : 轻松安全地将文件或文件夹从一台计算机发送到另一台计算机。</li><li><a href="http://www.docker.com/">Docker</a> : 一个为开发者和系统管理员提供的针对分布式应用的开源平台</li><li><a href="https://github.com/documize/community">Documize</a> : 维基软件,可以使用<code>SaaS</code>工具提供的数据</li><li><a href="https://github.com/scryinfo/dp">dp</a> : 与区块链进行数据交换的SDK,开发者可以轻松进行<code>DAPP</code>的开发。</li><li><a href="https://github.com/odeke-em/drive">drive</a> : 命令行版本的<code>Google Drive</code>客户端。</li><li><a href="https://github.com/gilbertchen/duplicacy">Duplicacy</a> : 跨平台网络和云备份工具</li><li><a href="https://github.com/moshebe/gebug">Gebug</a> : - 一个通过启用<code>Debugger</code>和热加载功能,让<code>Docker</code>容器化后的<code>Go</code>应用调试变得超级简单。</li><li><a href="https://github.com/Antonito/gfile">gfile</a> : 无需任何第三方工具通过<code>WebRTC</code>在两台电脑之间安全传输文件。</li><li><a href="https://github.com/shurcooL/Go-Package-Store">Go Package Store</a> : 一个可以显示你的<code>GoPATH</code> 路径下<code>Go</code>软件包的应用</li><li><a href="https://github.com/Sioro-Neoku/go-peerflix">go-peerflix</a> : 视频流下载客户端。<br></li><li><a href="https://github.com/Humpheh/goboy">GoBoy</a> : 用<code>Go</code>编写的任天堂游戏机颜色模拟器。</li><li><a href="https://github.com/goccmack/gocc">gocc</a> : <code>Go</code>语言编写的<code>Go</code>语言编译器工具集</li><li><a href="https://github.com/diankong/GoDocTooltip">GoDocTooltip</a> : 用来显示<code>go</code>语言文档的<code>chrome</code>浏览器插件</li><li><a href="https://jetbrains.com/go">GoLand</a> : 跨平台、全功能<code>Go</code> 语言集成开发环境</li><li><a href="https://github.com/buger/gor">Gor</a> : Http 流量复制工具,用于将生产环境的流量在开发环境进行重放</li><li><a href="https://github.com/meloalright/guora">Guora</a> : 一个用<code>Go</code>编写的类似于<code>Quora</code>的问答网络应用。</li><li><a href="http://gohugo.io/">hugo</a> : - 快速、现代的静态<code>web</code>引擎</li><li><a href="https://github.com/thestrukture/ide">ide</a> : 为<code>Go</code>语言设计可以在浏览器的<code>IDE</code>。</li><li><a href="https://github.com/dimiro1/ipe">ipe</a> : <code>Go</code>语言编写的开源<code>Pusher</code>服务器,兼容<code>Pusher</code>客户端。</li><li><a href="https://github.com/assafmo/joincap">joincap</a> : 用于合并多个<code>pcap</code>文件的命令行工具。</li><li><a href="https://jujucharms.com/">Juju</a> : 服务部署及编排工具,,支持<code>EC2</code>,<code>Azure</code>,<code>Openstack</code>,<code>MAAS</code> 等等</li><li><a href="https://github.com/jeffail/leaps">Leaps</a> : 结对编程服务,使用操作变换来避免冲突。</li><li><a href="https://github.com/yunabe/lgo">lgo</a> : 使用<code>Jupyter</code>进行交互式编程。它支持代码补全、代码检查,100%兼容<code>Go</code>。</li><li><a href="https://limetext.github.io">limetext</a> : <code>Lime Text</code> 是一个强大又优雅的编辑器,主要使用<code>Go</code> 语言开发,意在成为<code>Sublime Text</code>的继承者。</li><li><a href="https://github.com/visualfc/liteide">LiteIDE</a> : <code>LiteIDE</code> 是一个简单、开源、跨平台的<code>Go</code>语言<code>IDE</code></li><li><a href="https://github.com/quii/mockingjay-server">mockingjay</a> : 伪<code>HTTP</code>服务器,通过单一配置文件构造访问请求。同时你还可以让服务器提升负载,以进行更加符合现实情况的性能测试</li><li><a href="https://github.com/mehrdadrad/mylg">myLG</a> :<code>Go</code>语言编写的命令行网络诊断工具</li><li><a href="https://github.com/unix4fun/naclpipe">naclpipe</a> : 简单的基于<code>NaCL EC25519</code> 的加密管道工具</li><li><a href="https://github.com/fogleman/nes">nes</a> : <code>Go</code> 语言编写的任天堂<code>(NES)</code>模拟器</li><li><a href="https://github.com/noraesae/orange-cat">orange-cat</a> : <code>Go</code>语言编写的<code>Markdown</code>预览工具</li><li><a href="https://github.com/gulien/orbit">Orbit</a> : 运行命令和从模板生成文件的简单工具。</li><li><a href="https://github.com/pointlander/peg">peg</a> : <code>Peg（Parsing Expression Grammar）</code>是一个<code>Packrat parser generator</code>的实现</li><li><a href="https://github.com/restic/restic">restic</a> : 解耦备份程序</li><li><a href="https://github.com/boyter/scc">scc</a> : 一个非常快速准确的代码计数器,具有复杂度计算和<code>COCOMO</code>估计功能。</li><li><a href="https://github.com/chrislusf/seaweedfs">Seaweed File System</a> : 快速、简单、可扩展的分布式文件系统,具有<code>O(1)</code>的磁盘查找效率</li><li><a href="https://github.com/msoap/shell2http">shell2http</a> : 通过HTTP服务器执行<code>shell</code>命令行(用于原型验证或远程控制)。</li><li><a href="https://github.com/intelsdi-x/snap">snap</a> : 强大的遥测框架</li><li><a href="https://github.com/lucasgomide/snitch">Snitch</a> : 当通过<code>Tsuru</code>部署应用程序时,可以简单快速的通知团队的工具</li><li><a href="https://github.com/pressly/sup">Stack Up</a> :<code>Stack Up</code>是一个超级简单的开发工具,就好比是服务器网络的<code>make</code>工具</li><li><a href="https://syncthing.net/">syncthing</a> : 开源、去中心化的文件同步工具和协议</li><li><a href="https://github.com/mehrdadrad/tcpprobe">tcpprobe</a> : -<code>TCP</code>工具,用于网络性能和路径监控,包括套接字统计等。</li><li><a href="https://github.com/crazcalm/term-quiz">term-quiz</a> : 终端测试库。</li><li><a href="https://github.com/shopify/toxiproxy">toxiproxy</a> : 用于自动化测试中模拟网络和系统状态的代理服务。</li><li><a href="https://tsuru.io/">tsuru</a> : 可扩展的、开源的<code>SAAS</code> 软件</li><li><a href="https://github.com/lingrino/vaku">vaku</a> : 为<code>Vault</code>中基于文件夹的功能如复制、移动和搜索提供<code>CLI</code>和<code>API</code>。</li><li><a href="https://github.com/VerizonDigital/vflow">vFlow</a> : 高性能、可扩展、可靠的<code>IPFIX</code>,<code>sFlow</code>和<code>Netflow</code>集合.</li><li><a href="https://github.com/wellington/wellington">wellington</a> :<code>Sass</code>项目管理工具, 通过支持一些功能（例如Compass）扩展了这门语言</li><li><a href="https://github.com/get-woke/woke">woke</a> : 检测源代码中的排他性代码段。</li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CAP】锁</title>
    <link href="/2022/01/09/cap-lock/"/>
    <url>/2022/01/09/cap-lock/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>在学习或工作的过程中遇到各种各样的锁的，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。<span id="more"></span></p></blockquote><blockquote class="pullquote mindmap mindmap-md"><ul><li>锁类型<ul><li>同步资源是否锁住<ul><li>悲观锁</li><li>乐观锁</li></ul></li><li>是否重复获取（一个线程的多个流程能否获取同一把锁）<ul><li>可重入锁</li><li>不可重入锁</li></ul></li><li>获取同步资源失败，是否阻塞<ul><li>阻塞</li><li>不阻塞<ul><li>自旋锁</li><li>适应性自旋锁</li></ul></li></ul></li><li>多线程并发访问资源<ul><li>无锁<ul><li>无需上锁</li></ul></li><li>偏向锁<ul><li>同一线程多次获取同一资源时，无需上锁，自动获取</li></ul></li><li>轻量级锁<ul><li>多线程竞争同步资源时，没有获取资源的线程自旋等待锁释放</li></ul></li><li>重量级锁<ul><li>多线程竞争同步资源时，没有获取资源的线程阻塞等待唤醒</li></ul></li></ul></li><li>锁公平性（多线程竞争锁是否需要排队）<ul><li>公平锁</li><li>非公平锁</li></ul></li><li>多线程能否共享一把锁<ul><li>共享锁</li><li>排它锁/读写锁</li></ul></li></ul></li></ul></blockquote><h3 id="乐观锁-vs-悲观锁">乐观锁 VS 悲观锁</h3><h3 id="可重入锁-vs-非可重入锁">可重入锁 VS 非可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁，不会因为之前已经获取过还没释放而阻塞。</p><p>下图来自美团技术团队分享</p><p><img src="/images/cap/cap-lock/reentrantlock.png"></p><h4 id="golang实现可重入锁">Golang实现可重入锁</h4><p>根据<code>Java</code>中可重入锁的实现，可以总结实现一个可重入锁需要这两点：</p><ul><li>持有锁的线程</li><li>统计重入的次数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> RLock <span class="hljs-keyword">struct</span> &#123;<br>mutex *sync.Mutex<br>cond *sync.Cond<br>recursion <span class="hljs-keyword">int32</span><br>id <span class="hljs-keyword">int64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *RLock)</span> <span class="hljs-title">Lock</span><span class="hljs-params">()</span></span> &#123;<br>id := GetGoroutineID()<br>r.mutex.Lock()<br><span class="hljs-keyword">defer</span> r.mutex.Unlock()<br><br><span class="hljs-keyword">if</span> r.id == id &#123;<br>r.recursion ++<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> r.recursion != <span class="hljs-number">0</span> &#123;<br>r.cond.Wait()<br>&#125;<br><br>r.id = id<br>r.recursion = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *RLock)</span> <span class="hljs-title">Unlock</span><span class="hljs-params">()</span></span> &#123;<br>r.mutex.Lock()<br><span class="hljs-keyword">defer</span> r.mutex.Unlock()<br><br><span class="hljs-keyword">if</span> r.recursion == <span class="hljs-number">0</span> || r.id != GetGoroutineID() &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;the wrong call goid: (%d); current_goid: %d; recursion: %d&quot;</span>, r.id, GetGoroutineID(), r.recursion))<br>&#125;<br><br>r.recursion--<br><span class="hljs-keyword">if</span> r.recursion == <span class="hljs-number">0</span> &#123;<br>r.cond.Signal()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewRLock</span><span class="hljs-params">()</span> <span class="hljs-title">sync</span>.<span class="hljs-title">Locker</span></span> &#123;<br>l := &amp;RLock&#123;<br>mutex:     <span class="hljs-built_in">new</span>(sync.Mutex),<br>recursion: <span class="hljs-number">0</span>,<br>id:        <span class="hljs-number">0</span>,<br>&#125;<br>l.cond = sync.NewCond(l.mutex)<br><br><span class="hljs-keyword">return</span> l<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">extractGID</span><span class="hljs-params">(s []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">int64</span></span> &#123;<br>s = s[<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;goroutine &quot;</span>):]<br>s = s[:bytes.IndexByte(s, <span class="hljs-string">&#x27; &#x27;</span>)]<br>gid, _ := strconv.ParseInt(<span class="hljs-keyword">string</span>(s), <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">return</span> gid<br>&#125;<br><br><span class="hljs-comment">// GetGoroutineID Get returns the id of the current goroutine.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetGoroutineID</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;<br><span class="hljs-keyword">var</span> buf [<span class="hljs-number">64</span>]<span class="hljs-keyword">byte</span><br><br><span class="hljs-keyword">return</span> extractGID(buf[:runtime.Stack(buf[:], <span class="hljs-literal">false</span>)])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自旋锁-vs-适应性自旋锁">自旋锁 VS 适应性自旋锁</h3><h3 id="无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁">无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h3><h3 id="公平锁-vs-非公平锁">公平锁 VS 非公平锁</h3><h3 id="独享锁-vs-共享锁">独享锁 VS 共享锁</h3><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lock</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】七步为Go应用构建精简镜像</title>
    <link href="/2021/12/20/golang-images/"/>
    <url>/2021/12/20/golang-images/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>文章来自黄庆兵老师的网易蜂巢<a href="https://github.com/bingohuang/play-docker-images">《玩转 Docker 镜像》系列</a>，原本分为上下两篇，现已整合成一篇。<span id="more"></span></p></blockquote><h3 id="介绍">介绍</h3><p>前段时间网易蜂巢曾经推出蜂巢 <code>Logo</code> T恤，用的正是 Docker 镜像制作，最神奇的是，它最终的镜像大小只有 <code>585</code> 字节。</p><p>有些镜像都不是我们自己来打包的（比如下载公共镜像），那是否有一些通用的精简 Docker 镜像的手段呢？答案是肯定的，甚至有的镜像可以精简 98%。精简镜像大小的好处不言而喻，既节省了存储空间，又能节省带宽，加快传输等。那好，接下来就请跟随我来学习怎么制作精简 Docker 镜像。</p><h3 id="镜像层layers">镜像层(Layers)</h3><p>在开始制作镜像之前，首先了解下镜像的原理，而这其中最重要的概念就是<code>镜像层(Layers)</code>。镜像层依赖于一系列的底层技术，比如文件系统(filesystems)、写时复制(copy-on-write)、联合挂载(union mounts)等，幸运的是你可以在很多地方学习到<strong>这些技术</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[这些技术](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/) - by Michael Crosby, 2014-03-09.">[1]</span></a></sup>，这里就不再赘述技术细节。</p><p>总的来说，你最需要记住这点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">在 Dockerfile 中， 每一条指令都会创建一个镜像层，继而会增加整体镜像的大小。<br></code></pre></td></tr></table></figure><p>举例来说：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> busybox<br><span class="hljs-keyword">RUN</span><span class="bash"> mkdir /tmp/foo</span><br><span class="hljs-keyword">RUN</span><span class="bash"> dd <span class="hljs-keyword">if</span>=/dev/zero of=/tmp/foo/bar bs=1048576 count=100</span><br><span class="hljs-keyword">RUN</span><span class="bash"> rm /tmp/foo/bar</span><br></code></pre></td></tr></table></figure><p>以上 Dockerfile 干了几件事：</p><ol type="1"><li>基于一个官方的基础镜像 busybox(只有1M多)</li><li>创建一个文件夹(/tmp/foo)和一个文件(bar)，该文件分配了100M大小</li><li>再把这个大文件删除</li></ol><p>实际上它最终什么也没做，我们把它构建成镜像（构建可以参考<strong>一期</strong><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[一期](https://github.com/bingohuang/play-docker-images/tree/master/stage-01) - by Brian DeHamer, 2014-07-28.">[2]</span></a></sup>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t busybox:test .<br></code></pre></td></tr></table></figure><p>再让我们来对比下原生的 busybox 镜像大小和我们生成的镜像大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker images | grep busybox</span><br>busybox    test     896c63dbdb96    2 seconds ago    106 MB<br>busybox    latest   2b8fd9751c4c    9 weeks ago      1.093 MB<br></code></pre></td></tr></table></figure><p>出乎意料的是，却生成了 106 MB 的镜像。</p><p>多出了 100 M，这是为何？这点和 Git 类似（都用到了Copy-On-Write技术），我用 git 做了如下两次提交（添加了又删除），请问 <code>A_VERY_LARGE_FILE</code> 还在 git 仓库中吗？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add  A_VERY_LARGE_FILE</span><br><span class="hljs-meta">$</span><span class="bash"> git commit</span><br><span class="hljs-meta">$</span><span class="bash"> git rm  A_VERY_LARGE_FILE</span><br><span class="hljs-meta">$</span><span class="bash"> git commit</span><br></code></pre></td></tr></table></figure><p>答案是:在的，并且会占用仓库的大小。Git 会保存每一次提交的文件版本，而 Dockerfile 中每一条指令都可能增加整体镜像的大小，即使它最终什么事情都没做。</p><h3 id="制作步骤">制作步骤</h3><p>了解了镜像层知识，有助于我们接下来制作精简镜像。这里开始，以最常用的开源缓存软件 <code>Redis</code> 为例，从一步步试验，来介绍如何制作更精简的 Docker 镜像。</p><h4 id="lab-1初始化构建-redis-镜像">lab-1：初始化构建 Redis 镜像</h4><p><strong>直接上 <code>Dockerfile</code> ：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:trusty<br><span class="hljs-keyword">ENV</span> VER     <span class="hljs-number">3.0</span>.<span class="hljs-number">0</span><br><span class="hljs-keyword">ENV</span> TARBALL http://download.redis.io/releases/redis-$VER.tar.gz<br><span class="hljs-comment"># ==&gt; Install curl and helper tools...</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get update</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y  curl make gcc</span><br><span class="hljs-comment"># ==&gt; Download, compile, and install...</span><br><span class="hljs-keyword">RUN</span><span class="bash"> curl -L <span class="hljs-variable">$TARBALL</span> | tar zxv</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash">  redis-<span class="hljs-variable">$VER</span></span><br><span class="hljs-keyword">RUN</span><span class="bash"> make</span><br><span class="hljs-keyword">RUN</span><span class="bash"> make install</span><br><span class="hljs-comment">#...</span><br><span class="hljs-comment"># ==&gt; Clean up...</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get remove -y --auto-remove curl make gcc</span><br><span class="hljs-keyword">RUN</span><span class="bash"> apt-get clean</span><br><span class="hljs-keyword">RUN</span><span class="bash"> rm -rf /var/lib/apt/lists/*  /redis-<span class="hljs-variable">$VER</span></span><br><span class="hljs-comment">#...</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;redis-server&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>结合注释，读起来并不困难，用到的都是常规的几个命令，简要介绍如下：</p><ul><li>FROM：顶头写，指定一个基础镜像，此处基于 <code>ubuntu:trusty</code></li><li>ENV：设置环境变量，这里设置了 <code>VER</code> 和 <code>TARBALL</code> 两个环境变量</li><li>RUN：最常用的 Dockerfile 指令，用于运行各种命令，这里调用了 8 次 RUN 指令</li><li>WORKDIR：指定工作目录，相当于指令 <code>cd</code></li><li>CMD：指定镜像默认执行的命令，此处默认执行 redis-server 命令来启动 redis</li></ul><p><strong>执行构建：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker build  -t redis:lab-1  .</span><br></code></pre></td></tr></table></figure><p><em>注：国内网络，更新下载可能会较慢</em></p><p><strong>查看大小：</strong></p><table><thead><tr class="header"><th style="text-align: center;">Lab</th><th style="text-align: left;">iamge</th><th style="text-align: left;">Base</th><th style="text-align: center;">Lang</th><th style="text-align: center;">.red[*]</th><th style="text-align: right;">Size (MB)</th><th style="text-align: left;">Memo</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>ubuntu</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">347.3</td><td style="text-align: left;">base ubuntu</td></tr></tbody></table><p>动辄就有 300多 M 的大小，不能忍，下面我们开始一步步优化。</p><h4 id="lab-2优化基础镜像">lab-2：优化基础镜像</h4><h5 id="精简1选用更小的基础镜像">精简1：选用更小的基础镜像。</h5><p>常用的 Linux 系统镜像一般有 <code>ubuntu</code>、<code>centos</code>、<code>debian</code>，其中<code>debian</code> 更轻量，而且够用，对比如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">REPOSITORY          TAG        IMAGE ID         VIRTUAL SIZE<br>---------------     ------     ------------     ------------<br>centos              7          214a4932132a     215.7 MB<br>centos              6          f6808a3e4d9e     202.6 MB<br>ubuntu              trusty     d0955f21bf24     188.3 MB<br>ubuntu              precise    9c5e4be642b7     131.9 MB<br>debian              jessie     65688f7c61c4     122.8 MB<br>debian              wheezy     1265e16d0c28     84.96 MB<br></code></pre></td></tr></table></figure><p>替换 <code>debian:jessie</code> 作为我们的基础镜像。</p><p><strong>优化 Dockerfile：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> debian:jessie<br><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><p><strong>执行构建：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker build  -t redis:lab-2  .</span><br></code></pre></td></tr></table></figure><p><strong>查看大小：</strong></p><table><thead><tr class="header"><th style="text-align: center;">Lab</th><th style="text-align: left;">image</th><th style="text-align: left;">Base</th><th style="text-align: center;">Lang</th><th style="text-align: center;">.red[*]</th><th style="text-align: right;">Size (MB)</th><th style="text-align: left;">Memo</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">01</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>ubuntu</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">347.3</td><td style="text-align: left;">base ubuntu</td></tr><tr class="even"><td style="text-align: center;">02</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">305.7</td><td style="text-align: left;">base debian</td></tr></tbody></table><p>减少了42M，稍有成效，但并不明显。细心的同学应该发现，只有 122 MB 的 <code>debian</code> 基础镜像，构建后增加到了 305 MB，看来这里面肯定有优化的空间，如何优化就要用到我们开头说到的 <code>Image Layer</code> 知识了。</p><h4 id="lab-3串联-dockerfile-指令">lab-3：串联 Dockerfile 指令</h4><h5 id="精简2串联你的-dockerfile-指令一般是-run-指令">精简2：串联你的 Dockerfile 指令（一般是 <code>RUN</code> 指令）。</h5><p>Dockerfile 中的 RUN 指令通过 <code>&amp;&amp;</code> 和 <code>/</code> 支持将命令串联在一起，有时能达到意想不到的精简效果。</p><p><strong>优化 Dockerfile：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> debian:jessie<br><br><span class="hljs-keyword">ENV</span> VER     <span class="hljs-number">3.0</span>.<span class="hljs-number">0</span><br><span class="hljs-keyword">ENV</span> TARBALL http://download.redis.io/releases/redis-$VER.tar.gz<br><br><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; Install curl and helper tools...&quot;</span>  &amp;&amp; \</span><br><span class="bash">    apt-get update                      &amp;&amp; \</span><br><span class="bash">    apt-get install -y  curl make gcc   &amp;&amp; \</span><br><span class="bash">    \</span><br><span class="bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; Download, compile, and install...&quot;</span>  &amp;&amp; \</span><br><span class="bash">    curl -L <span class="hljs-variable">$TARBALL</span> | tar zxv  &amp;&amp; \</span><br><span class="bash">    <span class="hljs-built_in">cd</span> redis-<span class="hljs-variable">$VER</span>               &amp;&amp; \</span><br><span class="bash">    make                        &amp;&amp; \</span><br><span class="bash">    make install                &amp;&amp; \</span><br><span class="bash">    \</span><br><span class="bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==&gt; Clean up...&quot;</span>  &amp;&amp; \</span><br><span class="bash">    apt-get remove -y --auto-remove curl make gcc  &amp;&amp; \</span><br><span class="bash">    apt-get clean                                  &amp;&amp; \</span><br><span class="bash">    rm -rf /var/lib/apt/lists/*  /redis-<span class="hljs-variable">$VER</span></span><br><br><span class="hljs-comment">#...</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;redis-server&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker build  -t redis:lab-3  .</span><br></code></pre></td></tr></table></figure><p>查看大小：</p><table><thead><tr class="header"><th style="text-align: center;">Lab</th><th style="text-align: left;">Image</th><th style="text-align: left;">Base</th><th style="text-align: center;">Lang</th><th style="text-align: center;">.red[*]</th><th style="text-align: right;">Size (MB)</th><th style="text-align: left;">Memo</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">01</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>ubuntu</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">347.3</td><td style="text-align: left;">base ubuntu</td></tr><tr class="even"><td style="text-align: center;">02</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">305.7</td><td style="text-align: left;">base debian</td></tr><tr class="odd"><td style="text-align: center;">03</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">151.4</td><td style="text-align: left;">cmd chaining</td></tr></tbody></table><p>哇！一下子减少了 50%，效果明显啊！这是最常用的一个精简手段了。</p><h4 id="lab-4压缩你的镜像">lab-4：压缩你的镜像</h4><h5 id="优化3试着用命令或工具压缩你的镜像">优化3：试着用命令或工具压缩你的镜像。</h5><p>docker 自带的一些命令还能协助压缩镜像，比如 <code>export</code> 和 <code>import</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run -d redis:lab-3</span><br><span class="hljs-meta">$</span><span class="bash"> docker <span class="hljs-built_in">export</span> 71b1c0ad0a2b | docker import - redis:lab-4</span><br></code></pre></td></tr></table></figure><p>但麻烦的是需要先将容器运行起来，而且这个过程中你会丢失镜像原有的一些信息，比如：导出端口，环境变量，默认指令。</p><p>所以一般通过命令行来精简镜像都是实验性的，那么这里再推荐一个小工具：<strong>docker-squash</strong><sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[docker-squash](https://github.com/jwilder/docker-squash) - by Jason Wilder, 2014-08-19.">[3]</span></a></sup>。用起来更简单方便，并且不会丢失原有镜像的自带信息。</p><p><strong>下载安装：</strong></p><p>https://github.com/jwilder/docker-squash#installation</p><p><strong>压缩操作：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker save redis:lab-3 \</span><br><span class="bash">  | sudo docker-squash -verbose -t redis:lab-4  \</span><br><span class="bash">  | docker load</span><br></code></pre></td></tr></table></figure><p><em>注：该工具在 Mac 下并不好使，请在 Linux 下使用</em></p><p><strong>对比大小：</strong></p><table><thead><tr class="header"><th style="text-align: center;">Lab</th><th style="text-align: left;">Image</th><th style="text-align: left;">Base</th><th style="text-align: center;">PL</th><th style="text-align: center;">.red[*]</th><th style="text-align: right;">Size (MB)</th><th style="text-align: left;">Memo</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">01</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>ubuntu</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">347.3</td><td style="text-align: left;">base ubuntu</td></tr><tr class="even"><td style="text-align: center;">02</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">305.7</td><td style="text-align: left;">base debian</td></tr><tr class="odd"><td style="text-align: center;">03</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">151.4</td><td style="text-align: left;">cmd chaining</td></tr><tr class="even"><td style="text-align: center;">04</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">151.4</td><td style="text-align: left;">docker-squash</td></tr></tbody></table><p>好吧，从这里看起来并没有太大作用，所以我只能说<code>试着</code>，而不要报太大期望。</p><h4 id="lab-5使用最精简的-base-image">lab-5：使用最精简的 base image</h4><p>使用 <code>scratch</code> 或者 <code>busybox</code> 作为基础镜像。</p><p>关于 scratch<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[scratch in Docker Hub](https://registry.hub.docker.com/_/scratch/)">[4]</span></a></sup>：</p><ul><li>一个空镜像，只能用于构建镜像，通过 <code>FROM scratch</code></li><li>在构建一些基础镜像，比如 <code>debian</code> 、 <code>busybox</code>，非常有用</li><li>用于构建超少镜像，比如构建一个包含所有库的二进制文件</li></ul><p>关于 <code>busybox</code></p><ul><li>只有 1~5M 的大小</li><li>包含了常用的 UNIX 工具</li><li>非常方便构建小镜像</li></ul><p>这些超小的基础镜像，结合能生成静态原生 ELF 文件的编译语言，比如C/C++，比如 Go，特别方便构建超小的镜像。</p><p>cloudcomb-logo（C语言开发） 就是用到了该原理，才能构建出 585 字节的镜像。</p><p><code>redis</code> 同样使用 C语言 开发，看来也有很大的优化空间，下面这个实验，让我们介绍具体的操作方法。</p><h4 id="lab-6提取动态链接的-.so-文件">lab-6：提取动态链接的 .so 文件</h4><p>实验上下文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat /etc/os-release</span><br><br>NAME=&quot;Ubuntu&quot;<br>VERSION=&quot;14.04.2 LTS, Trusty Tahr&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> uname -a</span><br>Linux localhost 3.13.0-46-generic #77-Ubuntu SMP<br>Mon Mar 2 18:23:39 UTC 2015<br>x86_64 x86_64 x86_64 GNU/Linux<br></code></pre></td></tr></table></figure><p>隆重推出 ldd：打印共享的依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ldd  redis-3.0.0/src/redis-server</span><br>    linux-vdso.so.1 =&gt;  (0x00007fffde365000)<br>    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f307d5aa000)<br>    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f307d38c000)<br>    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f307cfc6000)<br>    /lib64/ld-linux-x86-64.so.2 (0x00007f307d8b9000)<br></code></pre></td></tr></table></figure><p>将所有需要的 .so 文件打包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> tar ztvf rootfs.tar.gz</span><br>4485167  2015-04-21 22:54  usr/local/bin/redis-server<br>1071552  2015-02-25 16:56  lib/x86_64-linux-gnu/libm.so.6<br> 141574  2015-02-25 16:56  lib/x86_64-linux-gnu/libpthread.so.0<br>1840928  2015-02-25 16:56  lib/x86_64-linux-gnu/libc.so.6<br> 149120  2015-02-25 16:56  lib64/ld-linux-x86-64.so.2<br></code></pre></td></tr></table></figure><p>再制作成 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> scratch<br><span class="hljs-keyword">ADD</span><span class="bash">  rootfs.tar.gz  /</span><br><span class="hljs-keyword">COPY</span><span class="bash"> redis.conf     /etc/redis/redis.conf</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">6379</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;redis-server&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>执行构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker build  -t redis-05  .</span><br></code></pre></td></tr></table></figure><p>查看大小：</p><table><thead><tr class="header"><th style="text-align: center;">Lab</th><th style="text-align: left;"></th><th style="text-align: left;">Base</th><th style="text-align: center;">PL</th><th style="text-align: center;">.red[*]</th><th style="text-align: right;">Size (MB)</th><th style="text-align: left;">Memo</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">01</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>ubuntu</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">347.3</td><td style="text-align: left;">base ubuntu</td></tr><tr class="even"><td style="text-align: center;">02</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">305.7</td><td style="text-align: left;">base debian</td></tr><tr class="odd"><td style="text-align: center;">03</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">151.4</td><td style="text-align: left;">cmd chaining</td></tr><tr class="even"><td style="text-align: center;">04</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>debian</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">151.4</td><td style="text-align: left;">docker-squash</td></tr><tr class="odd"><td style="text-align: center;">05</td><td style="text-align: left;">redis</td><td style="text-align: left;"><code>scratch</code></td><td style="text-align: center;">C</td><td style="text-align: center;">dyn</td><td style="text-align: right;">7.73</td><td style="text-align: left;">rootfs: .so</td></tr></tbody></table><p>哇！显著提高啦！</p><p>测试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker run -d --name redis-05 redis-05</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> redis-cli  -h  \</span><br><span class="bash">  $(docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> redis-05)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> redis-benchmark  -h  \</span><br><span class="bash">  $(docker inspect -f <span class="hljs-string">&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;</span> redis-05)</span><br></code></pre></td></tr></table></figure><p>总结一下：</p><ol type="1"><li>用 <code>ldd</code> 查出所需的 .so 文件</li><li>将所有依赖压缩成 <code>rootfs.tar</code> 或 <code>rootfs.tar.gz</code>，之后打进 <code>scratch</code> 基础镜像</li></ol><h4 id="lab-7为-go-应用构建精简镜像">lab-7：为 Go 应用构建精简镜像</h4><p>Go 语言天生就方便用来构建精简镜像，得益于它能方便的打包成包含静态链接的二进制文件。</p><p>打个比方，你有一个 4 MB 大小的包含静态链接的 Go 二进制，并且将其打进 scratch 这样的基础镜像，你得到的镜像大小也只有区区的 4 MB。这可是包含同样功能的 Ruby 程序的百分之一啊。</p><p>这里再给大家介绍一个非常好用开源的 Go 编译工具：<a href="https://github.com/CenturyLinkLabs/golang-builder">golang-builder</a>，并给大家实际演示一个例子</p><p>程序代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">// import &quot;github.com/CenturyLinkLabs/hello&quot;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> scratch<br><span class="hljs-keyword">COPY</span><span class="bash"> hello /</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/hello&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>通过 golang-builder 打包成镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --rm \<br>    -v $(pwd):/src \<br>    -v /var/run/docker.sock:/var/run/docker.sock \<br>    centurylink/golang-builder<br></code></pre></td></tr></table></figure><p>查看镜像大小(Mac下测试)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker images</span><br>REPOSITORY   TAG      IMAGE ID       CREATED          VIRTUAL SIZE<br>hello        latest   1a42948d3224   24 seconds ago   1.59 MB<br></code></pre></td></tr></table></figure><p>哇！这么省力，就能创建几 M 大小的镜像，Go 简介就是为 Docker 镜像量身定做的！</p><h3 id="总结">总结</h3><p>我们介绍了镜像层的知识，并且通过实验，介绍三种如何精简镜像的技巧。这里主要介绍了三种精简方法：选用更精小的镜像，串联 Dockerfile 运行指令，以及试着压缩你的镜像。通过这几个技巧，已经可以将 300M 大小的镜像压缩到 150M，压缩率50%到98%，效果还是不错。</p><ol type="1"><li>优化基础镜像</li><li>串接 Dockerfile 命令：</li><li>压缩 Docker images</li><li>优化程序依赖</li><li>选用更合适的开发语言</li></ol><h3 id="参考资料">参考资料</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/">这些技术</a> - by Michael Crosby, 2014-03-09.<a href="#fnref:1" rev="footnote"> ↩︎</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/bingohuang/play-docker-images/tree/master/stage-01">一期</a> - by Brian DeHamer, 2014-07-28.<a href="#fnref:2" rev="footnote"> ↩︎</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/jwilder/docker-squash">docker-squash</a> - by Jason Wilder, 2014-08-19.<a href="#fnref:3" rev="footnote"> ↩︎</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://registry.hub.docker.com/_/scratch/">scratch in Docker Hub</a><a href="#fnref:4" rev="footnote"> ↩︎</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/docker/docker/pull/8827">Make FROM scratch a special cased 'no-base' spec</a><a href="#fnref:5" rev="footnote"> ↩︎</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://en.wikipedia.org/wiki/VDSO">vDSO (virtual dynamic shared object)</a><a href="#fnref:6" rev="footnote"> ↩︎</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.centurylinklabs.com/small-docker-images-for-go-apps/">Small Docker Images For Go Apps</a><a href="#fnref:7" rev="footnote"> ↩︎</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07">Building Docker Images for Static Go Binaries</a><a href="#fnref:8" rev="footnote"> ↩︎</a></span></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">9.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://crosbymichael.com/dockerfile-best-practices-take-2.html">Dockerfile Best Practices - take 2</a><a href="#fnref:9" rev="footnote"> ↩︎</a></span></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">10.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.centurylinklabs.com/optimizing-docker-images/">Optimizing Docker Images</a><a href="#fnref:10" rev="footnote"> ↩︎</a></span></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">11.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://jasonwilder.com/blog/2014/08/19/squashing-docker-images/">Squashing Docker Images</a><a href="#fnref:11" rev="footnote"> ↩︎</a></span></li></ol></div></div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【区块链与元宇宙】学习笔记</title>
    <link href="/2021/11/29/chain/"/>
    <url>/2021/11/29/chain/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>区块链是一种分布式账本—通过去中心化、去信任方式集体维护一个可靠的分布式账本，是一种在网络成员之间共享、复制和同步的数据库，记录了网络参与者之间的交易。</p></blockquote><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>区块链与元宇宙</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【备忘录】工作与学习</title>
    <link href="/2021/10/28/memo/"/>
    <url>/2021/10/28/memo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>生活工作备忘录与待办事项。 <span id="more"></span></p></blockquote><h3 id="google浏览器插件">Google浏览器插件</h3><div class="note note-success">            <p><span class="label label-danger">Tampermonkey</span></p><p>Tampermonkey（油猴）是一款针对于浏览器运行脚本的插件，一款必装的浏览器插件神器。</p><p>可以去脚本市场 <a href="https://greasyfork.org/zh-CN/scripts">greasyfork</a> 去下载自己想要的插件，非常实用。</p><p>这里推荐两个常用的脚本：</p><ul><li><a href="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-重定向优化百度搜狗谷歌搜索-去广告-favicon-双列">AC-baidu 重定向优化百度搜狗谷歌搜索；</a></li><li>破解 VIP 会员视频集合。</li></ul><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=chrome-ntp-icon">下载地址</a></p>          </div><div class="note note-info">            <p><span class="label label-danger">Wappalyzer</span></p><p>可以发现网站上使用的技术。 它检测内容管理系统，电子商务平台，Web 框架，服务器软件，分析工具等。</p><p><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?utm_source=chrome-ntp-icon">下载地址</a></p>          </div><div class="note note-success">            <p><span class="label label-danger">OneTab</span></p><p>当有太多的标签页时，单击OneTab图标，将所有标签页转换成一个列表。再次访问这些标签页时，可以单独或全部恢复它们。</p><p><a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall?utm_source=chrome-ntp-icon">下载地址</a></p>          </div><div class="note note-info">            <p><span class="label label-danger">Adblock Plus</span></p><p>Adblock Plus 广告拦截器可有效的拦截所有网页上的所有类型的广告。</p><p><a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb?utm_source=chrome-ntp-icon">下载地址</a></p>          </div><div class="note note-success">            <p><span class="label label-danger">Octotree</span></p><p>这款神器可以GitHub平台代码在最左侧显示出树状目录，非常人性化的设计，你可以点击左侧目录切换到项目中的任意一个位置中去。</p><p><a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc">下载地址</a></p>          </div><h3 id="hexo插件">Hexo插件</h3><div class="note note-primary">            <p><span class="label label-danger">hexo-admonition</span></p><p>​ Hexo 内容辅助插件，支持将类似 <a href="https://docutils.sourceforge.io/docs/ref/rst/directives.html">reStructuredText</a> 的警告提示块添加到 Markdown 文档中。</p><p>​ <a href="https://github.com/lxl80/hexo-admonition">安装</a></p>          </div><div class="note note-warning">            <p><span class="label label-danger">hexo-butterfly-charts</span></p><p>​ 将 hexo poats、类别和标签的统计数据呈现到图表中。</p><p>​ <a href="https://github.com/kuole-o/hexo-butterfly-charts">安装</a></p>          </div><div class="note note-primary">            <p><span class="label label-danger">hexo-deployer-rss3</span></p><p>​ Hexo 的 RSS3 部署插件。</p><p><a href="https://github.com/NaturalSelectionLabs/hexo-deployer-rss3">安装</a></p>          </div><div class="note note-warning">            <p><span class="label label-danger">hexo-math</span></p><p>​ 通过标签插件在 Hexo 帖子/页面中嵌入 KaTeX 和 MathJax。</p><p>​ <a href="https://github.com/hexojs/hexo-math">安装</a></p><p>数学公式 <span class="math display">\[E=mc^2\]</span></p>          </div><div class="note note-primary">            <p><span class="label label-danger">hexo-referenc</span></p><p>​ 在 Hexo 博客文章中支持 Markdown 脚注和 Wiki 样式工具提示参考的插件<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label=" [测试](https://en.wikipedia.org/wiki/Markdown)">[1]</span></a></sup>。</p><p>​ <a href="https://github.com/kchen0x/hexo-reference">安装</a></p><p>流程图</p><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre>          </div><div class="note note-warning">            <p><span class="label label-danger">hexo-simple-mindmap</span></p><p>基于百度脑图的开源库 kityminder开发的hexo思维导图插件。</p><p><a href="https://github.com/HunterXuan/hexo-simple-mindmap">安装</a></p><p>思维导图</p><blockquote class="pullquote mindmap mindmap-md"><ul><li>知识图谱<ul><li>Golang</li><li>Python</li><li>Java<ul><li>JVM</li></ul></li></ul></li><li>消息队列<ul><li>Kafka</li><li>Pulsar</li></ul></li></ul></blockquote>          </div><div class="note note-primary">            <p><span class="label label-danger">hexo-spoiler</span></p><p>折叠博客内容,实现根据需要显示/隐藏博客内容<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Hexo Fluid 代码折叠](https://wty-yy.github.io/posts/44830/)">[2]</span></a></sup>。</p><p><a href="https://github.com/unnamed42/hexo-spoiler">安装</a></p>          </div><div class="spoiler collapsed">    <div class="spoiler-title">        内容    </div>    <div class="spoiler-content">        <p>内容</p>    </div></div><h3 id="npm与node环境更新">npm与node环境更新</h3><h4 id="更新记录">更新记录</h4><p><code>npm install -g npm</code>更新npm失败</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js<br>/usr/local/bin/npx -&gt; /usr/local/lib/node_modules/npm/bin/npx-cli.js<br>npm WARN notsup Unsupported engine for npm@8.2.0: wanted: &#123;&quot;node&quot;:&quot;^12.13.0 || ^14.15.0 || &gt;=16&quot;&#125; (current: &#123;&quot;node&quot;:&quot;13.9.0&quot;,&quot;npm&quot;:&quot;6.14.8&quot;&#125;)<br>npm WARN notsup Not compatible with your version of node/npm: npm@8.2.0<br><br>+ npm@8.2.0<br>added 67 packages from 17 contributors, removed 287 packages and updated 147 packages in 4.402s<br></code></pre></td></tr></table></figure><p>发现需要依赖的node版本不对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 输入命令 npm install -g n</span><br>npm does not support Node.js v13.9.0<br>You should probably upgrade to a newer version of node as we<br>can&#x27;t make any promises that npm will work with this version.<br>You can find the latest version at https://nodejs.org/<br></code></pre></td></tr></table></figure><p>因此单独更新node</p><h4 id="更新node">更新node</h4><h5 id="查看当前node版本">查看当前node版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">node –v<br>internal/modules/cjs/loader.js:983<br>  throw err;<br>  ^<br><br>Error: Cannot find module &#x27;/Users/wangpeng/Projects/MyProject/weitrue.github.io/–v&#x27;<br>    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:980:15)<br>    at Function.Module._load (internal/modules/cjs/loader.js:862:27)<br>    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)<br>    at internal/main/run_main_module.js:17:47 &#123;<br>  code: &#x27;MODULE_NOT_FOUND&#x27;,<br>  requireStack: []<br>&#125;<br></code></pre></td></tr></table></figure><p>直接报错</p><h4 id="安装n模块">安装n模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g n<br></code></pre></td></tr></table></figure><h4 id="升级到指定版本最新版本">升级到指定版本/最新版本</h4><p><code>n v@version</code></p><p>可以告诉管理器，安装最新的稳定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">n stable<br>  installing : node-v16.13.1<br>       mkdir : /usr/local/n/versions/node/16.13.1<br></code></pre></td></tr></table></figure><p>安装稳定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">n v16.13.1<br>  installing : node-v16.13.1<br>       mkdir : /usr/local/n/versions/node/16.13.1<br>mkdir: /usr/local/n/versions/node/16.13.1: Permission denied<br><br>  Error: sudo required (or change ownership, or define N_PREFIX)<br></code></pre></td></tr></table></figure><p>需要授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo n v16.13.1<br>Password:<br>  installing : node-v16.13.1<br>       mkdir : /usr/local/n/versions/node/16.13.1<br>       fetch : https://nodejs.org/dist/v16.13.1/node-v16.13.1-darwin-x64.tar.xz<br>   installed : v16.13.1 (with npm 8.1.2)<br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>v16.<span class="hljs-number">13.1</span><br></code></pre></td></tr></table></figure><h4 id="更新npm">更新npm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g npm<br>npm ERR! code EACCES<br>npm ERR! syscall rename<br>npm ERR! path /usr/local/lib/node_modules/npm<br>npm ERR! dest /usr/local/lib/node_modules/.npm-i9nnxROI<br>npm ERR! errno -13<br>npm ERR! Error: EACCES: permission denied, rename &#x27;/usr/local/lib/node_modules/npm&#x27; -&gt; &#x27;/usr/local/lib/node_modules/.npm-i9nnxROI&#x27;<br>npm ERR!  [Error: EACCES: permission denied, rename &#x27;/usr/local/lib/node_modules/npm&#x27; -&gt; &#x27;/usr/local/lib/node_modules/.npm-i9nnxROI&#x27;] &#123;<br>npm ERR!   errno: -13,<br>npm ERR!   code: &#x27;EACCES&#x27;,<br>npm ERR!   syscall: &#x27;rename&#x27;,<br>npm ERR!   path: &#x27;/usr/local/lib/node_modules/npm&#x27;,<br>npm ERR!   dest: &#x27;/usr/local/lib/node_modules/.npm-i9nnxROI&#x27;<br>npm ERR! &#125;<br>npm ERR!<br>npm ERR! The operation was rejected by your operating system.<br>npm ERR! It is likely you do not have the permissions to access this file as the current user<br>npm ERR!<br>npm ERR! If you believe this might be a permissions issue, please double-check the<br>npm ERR! permissions of the file and its containing directories, or try running<br>npm ERR! the command again as root/Administrator.<br><br>npm ERR! A complete log of this run can be found in:<br>npm ERR!     /Users/wangpeng/.npm/_logs/2021-12-07T02_12_59_256Z-debug.log<br></code></pre></td></tr></table></figure><p>需要授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install npm -g<br><br>changed 14 packages in 2s<br><br>10 packages are looking for funding<br>  run `npm fund` for details<br></code></pre></td></tr></table></figure><h4 id="更新后带来问题">更新后带来问题</h4><h5 id="fluid主题hero-g报错">fluid主题<code>hero g</code>报错</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">exo g<br>INFO  Validating config<br>INFO  Start processing<br>INFO<br>------------------------------------------------<br>|                                              |<br>|     ________  __            _        __      |<br>|    |_   __  |[  |          (_)      |  ]     |<br>|      | |_ \_| | | __   _   __   .--.| |      |<br>|      |  _|    | |[  | | | [  |/ /&#x27;`\&#x27; |      |<br>|     _| |_     | | | \_/ |, | || \__/  |      |<br>|    |_____|   [___]&#x27;.__.&#x27;_/[___]&#x27;.__.;__]     |<br>|                                              |<br>|       Thank you for using Fluid theme !      |<br>|    Docs: https://hexo.fluid-dev.com/docs/    |<br>|                                              |<br>------------------------------------------------<br><br>FATAL &#123;<br>  err: Error: Function yaml.safeLoad is removed in js-yaml 4. Use yaml.load instead, which is now safe by default.<br>      at Object.safeLoad (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/js-yaml/index.js:10:11)<br>      at module.exports (/Users/wangpeng/Projects/MyProject/weitrue.github.io/themes/fluid/scripts/events/lib/merge-configs.js:32:24)<br>      at Hexo.&lt;anonymous&gt; (/Users/wangpeng/Projects/MyProject/weitrue.github.io/themes/fluid/scripts/events/index.js:7:33)<br>      at Hexo.emit (node:events:402:35)<br>      at Hexo._generate (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/hexo/lib/hexo/index.js:452:10)<br>      at /Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/hexo/lib/hexo/index.js:324:24<br>      at tryCatcher (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/util.js:16:23)<br>      at Promise._settlePromiseFromHandler (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:547:31)<br>      at Promise._settlePromise (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:604:18)<br>      at Promise._settlePromise0 (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:649:10)<br>      at Promise._settlePromises (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:729:18)<br>      at Promise._fulfill (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:673:18)<br>      at Promise._resolveCallback (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:466:57)<br>      at Promise._settlePromiseFromHandler (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:559:17)<br>      at Promise._settlePromise (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:604:18)<br>      at Promise._settlePromise0 (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:649:10)<br>      at Promise._settlePromises (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:729:18)<br>      at Promise._fulfill (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:673:18)<br>      at PromiseArray._resolve (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise_array.js:127:19)<br>      at PromiseArray._promiseFulfilled (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise_array.js:145:14)<br>      at Promise._settlePromise (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:609:26)<br>      at Promise._settlePromise0 (/Users/wangpeng/Projects/MyProject/weitrue.github.io/node_modules/bluebird/js/release/promise.js:649:10)<br>&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html<br></code></pre></td></tr></table></figure><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/446">解决办法</a></p><h5 id="npm与node后引发问题-循环依赖">npm与node后引发问题-循环依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo s</span><br>INFO  Validating config<br>INFO  Start processing<br>INFO<br>------------------------------------------------<br>|                                              |<br>|     ________  __            _        __      |<br>|    |_   __  |[  |          (_)      |  ]     |<br>|      | |_ \_| | | __   _   __   .--.| |      |<br>|      |  _|    | |[  | | | [  |/ /&#x27;`\&#x27; |      |<br>|     _| |_     | | | \_/ |, | || \__/  |      |<br>|    |_____|   [___]&#x27;.__.&#x27;_/[___]&#x27;.__.;__]     |<br>|                                              |<br>|       Thank you for using Fluid theme !      |<br>|    Docs: https://hexo.fluid-dev.com/docs/    |<br>|                                              |<br>------------------------------------------------<br><br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br>(node:87224) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency<br>(Use `node --trace-warnings ...` to show where the warning was created)<br>(node:87224) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency<br>(node:87224) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency<br>(node:87224) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency<br>(node:87224) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency<br>(node:87224) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency<br></code></pre></td></tr></table></figure><p>google后，发现一位博主<a href="https://www.haoyizebo.com/posts/710984d0/">修改nib@1.1.2依赖</a>，尝试后不成功。</p><p>于是，采用主流办法<a href="https://github.com/hexojs/hexo/issues/4257">node.js降级</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"> node -v<br>v12.22.7<br></code></pre></td></tr></table></figure><p>后来发现<strong>具体原因</strong>是由于 <a href="https://github.com/stylus/stylus">stylus</a> 导致的，stylus 在 0.54.8 版本修复了这个问题（见 pr <a href="https://github.com/stylus/stylus/pull/2538">#2538</a> ）,所以重新装一下 <code>hexo-renderer-stylus</code> 就可以了<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[解决 Hexo 在使用 Node.js 14 时的 Accessing non-existent property &#39;xxx&#39; of module exports inside circular dependency 问题](https://www.haoyizebo.com/posts/710984d0/)">[3]</span></a></sup>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-renderer-stylus --save<br></code></pre></td></tr></table></figure><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://en.wikipedia.org/wiki/Markdown">测试</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://wty-yy.github.io/posts/44830/">Hexo Fluid 代码折叠</a><a href="#fnref:2" rev="footnote"> ↩︎</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.haoyizebo.com/posts/710984d0/">解决 Hexo 在使用 Node.js 14 时的 Accessing non-existent property 'xxx' of module exports inside circular dependency 问题</a><a href="#fnref:3" rev="footnote"> ↩︎</a></span></li></ol></div></div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Prometheus】Blackbox黑盒测试</title>
    <link href="/2021/10/27/prometheus-blackbox/"/>
    <url>/2021/10/27/prometheus-blackbox/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
      <tag>监控</tag>
      
      <tag>网络探测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Prometheus】Exporter</title>
    <link href="/2021/10/25/prometheus-exporter/"/>
    <url>/2021/10/25/prometheus-exporter/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
      <tag>监控</tag>
      
      <tag>Exporter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Prometheus】Alertmanage告警</title>
    <link href="/2021/10/25/prometheus-alert/"/>
    <url>/2021/10/25/prometheus-alert/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
      <tag>Alertmanage</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Prometheus】基础理论与安装</title>
    <link href="/2021/10/25/prometheus/"/>
    <url>/2021/10/25/prometheus/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Prometheus</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】设计模式</title>
    <link href="/2021/10/09/golang-design/"/>
    <url>/2021/10/09/golang-design/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><strong>Design patterns</strong> are typical solutions to common problemsin software design. Each pattern is like a blueprintthat you can customize to solve a particulardesign problem in your code.<span id="more"></span></p></blockquote><h3 id="创建型">创建型</h3><h4 id="method工厂方法">Method(工厂方法)</h4><p>执行单独的函数，通过传参提供需要的对象的信息。</p><h4 id="abstract-factory抽象工厂-解决复杂对象创建问题">Abstract Factory(抽象工厂: 解决复杂对象创建问题)</h4><p>工厂方法适合对象种类较少的情况，如果有多种不同类型对象需要创建，使用抽象工厂模式。</p><h4 id="the-builder-pattern构造模式-控制复杂对象的构造">The Builder Pattern(构造模式: 控制复杂对象的构造)</h4><p>当对象需要多个部分组合起来一步步创建，并且创建和表示分离的时候。可以这么理解，你要买电脑，工厂模式直接返回一个你需要型号的电脑，但是构造模式允许你自定义电脑各种配置类型，组装完成后给你。这个过程可以传入builder从而自定义创建的方式。</p><h4 id="单例模式-使得一个类最多生成一个实例">单例模式: 使得一个类最多生成一个实例</h4><p>装饰器实现</p><h4 id="the-prototype-pattern原型模式解决对象拷贝问题">The Prototype Pattern(原型模式:解决对象拷贝问题)</h4><h3 id="行为型">行为型</h3><h4 id="the-observer-pattern观察者模式用来处理多个对象之间的发布订阅问题">The Observer Pattern(观察者模式：用来处理多个对象之间的发布订阅问题)</h4><h4 id="the-state-pattern状态模式实现有限状态机">The State Pattern(状态模式：实现有限状态机)</h4><h4 id="the-strategy-pattern策略模式动态选择算法策略">The Strategy Pattern(策略模式：动态选择算法策略)</h4><h4 id="the-chain-of-responsibility-pattern-责任链模式创建链式对象用来接收广播消息">The Chain of Responsibility Pattern (责任链模式:创建链式对象用来接收广播消息)</h4><h4 id="the-command-pattern命令模式用来给应用添加undo操作">The Command Pattern(命令模式：用来给应用添加Undo操作)</h4><h4 id="the-interpreter-pattern解释器模式用来实现domain-specific-languagedsl">The Interpreter Pattern(解释器模式：用来实现Domain Specific Language(DSL))</h4><h4 id="the-template-pattern模板模式抽象出算法公共部分从而实现代码复用">The Template Pattern(模板模式：抽象出算法公共部分从而实现代码复用)</h4><h3 id="结构性">结构性</h3><h4 id="the-adapter-pattern适配器模式-解决接口不兼容问题">The Adapter Pattern(适配器模式: 解决接口不兼容问题)</h4><h4 id="the-decorator-pattern装饰器模式-无需子类化实现扩展对象功能问题">The Decorator Pattern(装饰器模式： 无需子类化实现扩展对象功能问题)</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><br></code></pre></td></tr></table></figure><h4 id="the-facade-pattern外观模式-简化复杂对象的访问问题">The Facade Pattern(外观模式: 简化复杂对象的访问问题)</h4><h4 id="the-flyweight-pattern享元模式-实现对象复用从而改善资源使用">The Flyweight Pattern(享元模式: 实现对象复用从而改善资源使用)</h4><h4 id="the-model-view-controller-patternmvc模式解耦展示逻辑和业务逻辑">The Model-View-Controller Pattern(mvc模式：解耦展示逻辑和业务逻辑)</h4><h4 id="the-proxy-pattern代理模式通过一层间接保护层实现更安全的接口访问">The Proxy Pattern(代理模式：通过一层间接保护层实现更安全的接口访问）</h4><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ETCD】分布式键值存储系统</title>
    <link href="/2021/07/01/etcd/"/>
    <url>/2021/07/01/etcd/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>A highly-available key value store for shared configuration and service discovery.<span id="more"></span></p></blockquote><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Datebase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Raft</tag>
      
      <tag>Etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】查找与搜索</title>
    <link href="/2021/06/21/lt-search/"/>
    <url>/2021/06/21/lt-search/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="查找与搜索"><span id="more"></span>查找与搜索</h3><h4 id="二分算法"><strong>二分算法</strong></h4><h4 id="哈希与布隆过滤器">哈希与布隆过滤器</h4><h4 id="dfs-bfs">DFS &amp;&amp; BFS</h4><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】RPC</title>
    <link href="/2021/06/02/golang-rpc/"/>
    <url>/2021/06/02/golang-rpc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><span id="more"></span></p></blockquote><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>GRPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】缓存与分布式锁</title>
    <link href="/2021/06/02/golang-cache/"/>
    <url>/2021/06/02/golang-cache/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><span id="more"></span></blockquote><h3 id="缓存">缓存</h3><h4 id="本地缓存">本地缓存</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> cache<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>errKeyNotFound      = errors.New(<span class="hljs-string">&quot;cache: key 不存在&quot;</span>)<br>errOverCapacity     = errors.New(<span class="hljs-string">&quot;cache: 超过缓存最大容量&quot;</span>)<br>errFailedToSetCache = errors.New(<span class="hljs-string">&quot;cache: 设置键值对失败&quot;</span>)<br>errCacheClosed      = errors.New(<span class="hljs-string">&quot;cache: 已经被关闭&quot;</span>)<br>errKeyExpired       = errors.New(<span class="hljs-string">&quot;cache: 缓存失效&quot;</span>)<br>)<br><br><span class="hljs-keyword">type</span> Cache <span class="hljs-keyword">interface</span> &#123;<br>Get(ctx context.Context, key <span class="hljs-keyword">string</span>) (any, error)<br>Set(ctx context.Context, key <span class="hljs-keyword">string</span>, val any, expiration time.Duration) error<br>Delete(ctx context.Context, key <span class="hljs-keyword">string</span>) error<br>LoadAndDelete(ctx context.Context, key <span class="hljs-keyword">string</span>) (any, error)<br>  Close() error<br>&#125;<br><br><span class="hljs-keyword">type</span> item <span class="hljs-keyword">struct</span> &#123;<br>val      any<br>deadline time.Time<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *item)</span> <span class="hljs-title">deadlineBefore</span><span class="hljs-params">(t time.Time)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> !i.deadline.IsZero() &amp;&amp; i.deadline.Before(t)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> cache<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> LocalCache <span class="hljs-keyword">struct</span> &#123;<br>lock          sync.RWMutex<br>data          <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*item<br><span class="hljs-built_in">close</span>         <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>closed        <span class="hljs-keyword">bool</span><br>onEvicted     OnEvict<br>cycleInterval time.Duration<br>&#125;<br><br><span class="hljs-keyword">type</span> ParamCacheOption <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*LocalCache)</span></span><br><span class="hljs-keyword">type</span> OnEvict <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, val any)</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCycleInterval</span><span class="hljs-params">(interval time.Duration)</span> <span class="hljs-title">ParamCacheOption</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cache *LocalCache)</span></span> &#123;<br>cache.cycleInterval = interval<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithOnEvict</span><span class="hljs-params">(onEvict OnEvict)</span> <span class="hljs-title">ParamCacheOption</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cache *LocalCache)</span></span> &#123;<br>cache.onEvicted = onEvict<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewLocalCache</span><span class="hljs-params">(opts ...ParamCacheOption)</span> <span class="hljs-title">Cache</span></span> &#123;<br>lc := &amp;LocalCache&#123;<br>lock:          sync.RWMutex&#123;&#125;,<br>data:          <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*item),<br>cycleInterval: <span class="hljs-number">10</span> * time.Second,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, opt := <span class="hljs-keyword">range</span> opts &#123;<br>opt(lc)<br>&#125;<br><br>lc.checkCycle()<br><br><span class="hljs-keyword">return</span> lc<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">checkCycle</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ticker := time.NewTicker(c.cycleInterval)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> now := &lt;-ticker.C:<br>c.lock.Lock()<br><span class="hljs-keyword">for</span> key, val := <span class="hljs-keyword">range</span> c.data &#123;<br><span class="hljs-keyword">if</span> !val.deadline.IsZero() &amp;&amp; val.deadline.Before(now) &#123;<br>c.<span class="hljs-built_in">delete</span>(key)<br>&#125;<br>&#125;<br>c.lock.Unlock()<br><span class="hljs-keyword">case</span> &lt;-c.<span class="hljs-built_in">close</span>:<br><span class="hljs-built_in">close</span>(c.<span class="hljs-built_in">close</span>)<br>c.closed = <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">delete</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span></span> &#123;<br>val, ok := c.data[key]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-built_in">delete</span>(c.data, key)<br><span class="hljs-keyword">if</span> c.onEvicted != <span class="hljs-literal">nil</span> &#123;<br>c.onEvicted(key, val.val)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">Get</span><span class="hljs-params">(ctx context.Context, key <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(any, error)</span></span> &#123;<br>c.lock.RLock()<br><span class="hljs-keyword">if</span> c.closed &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errCacheClosed<br>&#125;<br><br>val, ok := c.data[key]<br>c.lock.RUnlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errKeyNotFound<br>&#125;<br><br>now := time.Now()<br><span class="hljs-comment">// 别的 goroutine 设置值了</span><br><span class="hljs-keyword">if</span> val.deadlineBefore(now) &#123;<br>c.lock.Lock()<br><span class="hljs-keyword">defer</span> c.lock.Unlock()<br><br><span class="hljs-keyword">if</span> c.closed &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errCacheClosed<br>&#125;<br><br>val, ok = c.data[key]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errKeyNotFound<br>&#125;<br><br><span class="hljs-keyword">if</span> val.deadlineBefore(now) &#123;<br>c.<span class="hljs-built_in">delete</span>(key)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errKeyExpired<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> val.val, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">Set</span><span class="hljs-params">(ctx context.Context, key <span class="hljs-keyword">string</span>, val any, expiration time.Duration)</span> <span class="hljs-title">error</span></span> &#123;<br>c.lock.Lock()<br><span class="hljs-keyword">defer</span> c.lock.Unlock()<br><br><span class="hljs-keyword">if</span> c.closed &#123;<br><span class="hljs-keyword">return</span> errCacheClosed<br>&#125;<br><br><span class="hljs-keyword">var</span> deadline time.Time<br><span class="hljs-keyword">if</span> expiration &gt; <span class="hljs-number">0</span> &#123;<br>deadline.Add(expiration)<br>&#125;<br><br>c.data[key] = &amp;item&#123;<br>val:      val,<br>deadline: deadline,<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">Delete</span><span class="hljs-params">(ctx context.Context, key <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;<br>c.lock.Lock()<br><span class="hljs-keyword">defer</span> c.lock.Unlock()<br><span class="hljs-keyword">if</span> c.closed &#123;<br><span class="hljs-keyword">return</span> errCacheClosed<br>&#125;<br><br>c.<span class="hljs-built_in">delete</span>(key)<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;<br>c.lock.Lock()<br><span class="hljs-keyword">defer</span> c.lock.Unlock()<br><br>c.<span class="hljs-built_in">close</span> &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-keyword">if</span> c.onEvicted != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> key, val := <span class="hljs-keyword">range</span> c.data &#123;<br>c.onEvicted(key, val.val)<br>&#125;<br>&#125;<br><br>c.data = <span class="hljs-literal">nil</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *LocalCache)</span> <span class="hljs-title">LoadAndDelete</span><span class="hljs-params">(ctx context.Context, key <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(any, error)</span></span> &#123;<br>c.lock.Lock()<br><span class="hljs-keyword">defer</span> c.lock.Unlock()<br><br>val, ok := c.data[key]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errKeyNotFound<br>&#125;<br><br>c.<span class="hljs-built_in">delete</span>(key)<br><br><span class="hljs-keyword">return</span> val.val, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lock</tag>
      
      <tag>Go</tag>
      
      <tag>Cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】优雅关闭服务</title>
    <link href="/2021/06/02/golang-shutdown/"/>
    <url>/2021/06/02/golang-shutdown/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><span id="more"></span></blockquote><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】池化</title>
    <link href="/2021/06/02/golang-task-pool/"/>
    <url>/2021/06/02/golang-task-pool/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><span id="more"></span></blockquote><h3 id="任务池">任务池</h3><h3 id="连接池">连接池</h3><h4 id="get">Get</h4><ul><li>获取到空闲连接后，需要判断连接是否超时以及失效，超时或者失效，重新从连接池中获取</li><li>阻塞时，可以加入超时控制，超过一定时间，获取连接失败</li><li>阻塞时，当有连接归还时，唤醒阻塞的Goroutine</li></ul><div id="flowchart-0" class="flow-chart"></div><p>Put</p><div id="flowchart-1" class="flow-chart"></div><a href="https://github.com/silenceper/pool">silenceper</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=>start: 开始op1=>operation: 创建连接op2=>operation: 阻 塞op3=>operation: 唤 醒e=>end: 返回连接cond1=>condition: 有空闲的？cond2=>condition: 超过最大数量?s->cond1cond1(yes,right)->econd1(no)->cond2cond2(no,left)->op1->econd2(yes)->op2->op3->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">s=>start: 开始op1=>operation: 唤醒请求op2=>operation: 转交连接op3=>operation: 关闭连接op4=>operation: 放回队列e=>end: 结束cond1=>condition: 有阻塞请求？cond2=>condition: 超空闲队列满了?s->cond1cond1(yes,right)->op1->op2->econd1(no)->cond2cond2(yes,right)->op3->econd2(no)->op4->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Task</tag>
      
      <tag>Pool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】并发之道</title>
    <link href="/2021/03/30/golang-concurrency/"/>
    <url>/2021/03/30/golang-concurrency/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>“使用通信来共享内存，而不是通过共享内存来通信” — 通信顺序进程<span id="more"></span></p></blockquote><h3 id="goroutine"><code>goroutine</code></h3><p><img src="/images/golang/goroutine.png"></p><h4 id="协程-coroutine">协程 <code>Coroutine</code></h4><ul><li><p><em>轻量级</em>线程</p></li><li><p><strong>非抢占式</strong>多任务处理，由协程主动交出控制权</p></li><li><p>编译器/解释器/虚拟机层的多任务</p></li><li><p>多个协程可以在一个或者多个线程上运行</p></li></ul><h5 id="其他语言对协程的支持">其他语言对协程的支持</h5><p><code>Java</code>：标准库不支持</p><p><code>Python</code>：3.5版本前使用yield关键字</p><p>​ 3.5以后， <code>async def 方法名</code>实现协程的原生支持</p><h5 id="可能切换goroutine的事件">可能切换<code>goroutine</code>的事件</h5><ul><li><code>I/O, Select</code></li><li><code>channel</code></li><li>等待锁</li><li>函数调用</li><li><code>runtime.Gosched()</code></li><li><code>.e.g</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i ++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(j <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;go run from&quot;</span>, j)<br>&#125;<br>&#125;(i)<br>&#125;<br>time.Sleep(time.Minute)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="channel">Channel</h4><p><img src="/images/golang/channel.png"></p><h5 id="goroutine泄露与内存逃逸">Goroutine泄露与内存逃逸</h5><p>如果channel使用不当，goroutine被阻塞后没有唤醒会导致goroutine泄露：</p><ul><li>只发送不接收，发送者阻塞，会导致发送者goroutine泄露</li><li>只接收不发送，接受者阻塞，会导致接收者goroutine泄露</li><li>读写nil都会导致goroutine泄露</li><li>唯一例外的是业务层面上的goroutine长时间运行</li><li>如果用chan nel发送指针，那么必然发生内存逃逸</li></ul><h5 id="chansend源码">chansend源码</h5><div id="flowchart-0" class="flow-chart"></div><ul><li>是否nil channel，是的话直接阻塞</li><li>是否有被阻塞的接收者，有的话直接交付数据，返回</li><li>没有的话，看缓冲区是否满了，没满放入缓冲，返回</li><li>满了，阻塞，等待接收者唤醒</li><li>被唤醒，做些清操作</li></ul><p><img src="/images/golang/chan.send1.png"></p><p><img src="/images/golang/chan.send2.png"></p><p><img src="/images/golang/chan.send3.png"></p><h5 id="chanrecv源码">chanrecv源码</h5><p><img src="/images/golang/chan.recv1.png"></p><p><img src="/images/golang/chan.recv2.png"></p><p><img src="/images/golang/chan.recv3.png"></p><h5 id="demo">Demo</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">works</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 不断的从channel取</span><br><span class="hljs-keyword">for</span>  &#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, &lt;-c)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">workIfNotClose</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><br><span class="hljs-keyword">for</span>  &#123;<br>n, ok := &lt;-c<br><span class="hljs-keyword">if</span> !ok&#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">workIfNotCloseSimple</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> c&#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorks</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">chan</span>&lt;- <span class="hljs-title">int</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> works(id, c)<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">first</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 创建channel用例</span><br><span class="hljs-keyword">var</span> chans [<span class="hljs-number">10</span>]<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span>  i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>chans[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> works(i, chans[i])<br>&#125;<br><span class="hljs-comment">// 往channel放</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>chans[i] &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i<br>&#125;<br><span class="hljs-comment">// 往channel放</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>chans[i] &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">second</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><br><span class="hljs-keyword">var</span> chann [<span class="hljs-number">10</span>] <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>chann[i] = createWorks(i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>chann[i] &lt;- <span class="hljs-string">&#x27;k&#x27;</span> + i<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>chann[i] &lt;- <span class="hljs-string">&#x27;K&#x27;</span> + i<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">thirdBufferedChannel</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// channel缓冲区   可以放入不大于缓冲区的大小时，可以不用取</span><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">4</span>)<br><span class="hljs-keyword">go</span> works(<span class="hljs-number">0</span>, c)<br>c &lt;- <span class="hljs-string">&#x27;u&#x27;</span><br>c &lt;- <span class="hljs-string">&#x27;v&#x27;</span><br>c &lt;- <span class="hljs-string">&#x27;w&#x27;</span><br>c &lt;- <span class="hljs-string">&#x27;x&#x27;</span><br>c &lt;- <span class="hljs-string">&#x27;y&#x27;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">channelClose</span><span class="hljs-params">()</span></span>  &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">4</span>)<br><span class="hljs-keyword">go</span> workIfNotCloseSimple(<span class="hljs-number">0</span>, c)<br>c &lt;- <span class="hljs-string">&#x27;U&#x27;</span><br>c &lt;- <span class="hljs-string">&#x27;V&#x27;</span><br>c &lt;- <span class="hljs-string">&#x27;W&#x27;</span><br><span class="hljs-built_in">close</span>(c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ChanDemo</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">//  channel也是一等公民</span><br>first()<br>second()<br>fmt.Println(<span class="hljs-string">&quot;-----------------&quot;</span>)<br>thirdBufferedChannel()<br><br>channelClose()<br><br>time.Sleep(time.Second)<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>channel <span class="hljs-number">7</span> receive h<br>channel <span class="hljs-number">9</span> receive j<br>channel <span class="hljs-number">8</span> receive i<br>channel <span class="hljs-number">5</span> receive f<br>channel <span class="hljs-number">3</span> receive d<br>channel <span class="hljs-number">6</span> receive g<br>channel <span class="hljs-number">4</span> receive e<br>channel <span class="hljs-number">2</span> receive c<br>channel <span class="hljs-number">1</span> receive b<br>channel <span class="hljs-number">0</span> receive a<br>channel <span class="hljs-number">0</span> receive A<br>-----------------<br>channel <span class="hljs-number">4</span> receive E<br>channel <span class="hljs-number">3</span> receive D<br>channel <span class="hljs-number">1</span> receive B<br>channel <span class="hljs-number">7</span> receive H<br>channel <span class="hljs-number">2</span> receive C<br>channel <span class="hljs-number">5</span> receive F<br>channel <span class="hljs-number">6</span> receive G<br>channel <span class="hljs-number">9</span> receive J<br>channel <span class="hljs-number">8</span> receive I<br>channel <span class="hljs-number">0</span> receive k<br>channel <span class="hljs-number">1</span> receive l<br>channel <span class="hljs-number">2</span> receive m<br>channel <span class="hljs-number">3</span> receive n<br>channel <span class="hljs-number">4</span> receive o<br>channel <span class="hljs-number">5</span> receive p<br>channel <span class="hljs-number">6</span> receive q<br>channel <span class="hljs-number">7</span> receive r<br>channel <span class="hljs-number">7</span> receive R<br>channel <span class="hljs-number">8</span> receive s<br>channel <span class="hljs-number">8</span> receive S<br>channel <span class="hljs-number">3</span> receive N<br>channel <span class="hljs-number">5</span> receive P<br>channel <span class="hljs-number">0</span> receive K<br>channel <span class="hljs-number">6</span> receive Q<br>channel <span class="hljs-number">9</span> receive t<br>channel <span class="hljs-number">9</span> receive T<br>channel <span class="hljs-number">2</span> receive M<br>channel <span class="hljs-number">4</span> receive O<br>channel <span class="hljs-number">1</span> receive L<br>-----------------<br>channel <span class="hljs-number">0</span> receive u<br>channel <span class="hljs-number">0</span> receive v<br>channel <span class="hljs-number">0</span> receive w<br>channel <span class="hljs-number">0</span> receive x<br>channel <span class="hljs-number">0</span> receive y<br>channel <span class="hljs-number">0</span> receive U<br>channel <span class="hljs-number">0</span> receive V<br>channel <span class="hljs-number">0</span> receive W<br>Exiting.<br></code></pre></td></tr></table></figure><h5 id="通过通信来共享内存">通过通信来共享内存</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021/2/5 下午5:05</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">package</span> goroutines<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Worker <span class="hljs-keyword">struct</span> &#123;<br>in <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br>done <span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWork</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w Worker)</span></span>  &#123;<br><span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<br>w.done &lt;- <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorkers</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Worker</span></span> &#123;<br>w := Worker&#123;<br>in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),<br>done: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>),<br>&#125;<br><span class="hljs-keyword">go</span> doWork(id, w)<br><span class="hljs-keyword">return</span> w<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicate</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><br><span class="hljs-keyword">var</span> works [<span class="hljs-number">10</span>]Worker<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>works[i] = createWorkers(i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i<br>&#125;<br><br><span class="hljs-keyword">for</span> _, worker := <span class="hljs-keyword">range</span> works&#123;<br>&lt;- worker.done<br>&#125;<br><br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i<br>&#125;<br><br><span class="hljs-keyword">for</span> _, worker := <span class="hljs-keyword">range</span> works&#123;<br>&lt;- worker.done<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWork2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w Worker)</span></span>  &#123;<br><span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>w.done &lt;- <span class="hljs-literal">true</span><br>&#125;()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorkers2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Worker</span></span> &#123;<br>w := Worker&#123;<br>in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),<br>done: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>),<br>&#125;<br><span class="hljs-keyword">go</span> doWork2(id, w)<br><span class="hljs-keyword">return</span> w<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicateDoneAll</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><br><span class="hljs-keyword">var</span> worksAll [<span class="hljs-number">10</span>]Worker<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>worksAll[i] = createWorkers2(i)<br>&#125;<br><br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> worksAll &#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;j&#x27;</span> + i<br>&#125;<br><br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> worksAll &#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;J&#x27;</span> + i<br>&#125;<br><br><span class="hljs-comment">// 等所有任务都取完 再结束</span><br><span class="hljs-keyword">for</span> _, worker := <span class="hljs-keyword">range</span> worksAll &#123;<br>&lt;- worker.done<br>&lt;- worker.done<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicateDemo</span><span class="hljs-params">()</span></span>  &#123;<br>communicate()<br>fmt.Println(<span class="hljs-string">&quot;----------------&quot;</span>)<br>communicateDoneAll()<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>channel <span class="hljs-number">7</span> receive h<br>channel <span class="hljs-number">5</span> receive f<br>channel <span class="hljs-number">8</span> receive i<br>channel <span class="hljs-number">9</span> receive j<br>channel <span class="hljs-number">2</span> receive c<br>channel <span class="hljs-number">3</span> receive d<br>channel <span class="hljs-number">1</span> receive b<br>channel <span class="hljs-number">0</span> receive a<br>channel <span class="hljs-number">4</span> receive e<br>channel <span class="hljs-number">6</span> receive g<br>channel <span class="hljs-number">6</span> receive G<br>channel <span class="hljs-number">7</span> receive H<br>channel <span class="hljs-number">8</span> receive I<br>channel <span class="hljs-number">9</span> receive J<br>channel <span class="hljs-number">0</span> receive A<br>channel <span class="hljs-number">1</span> receive B<br>channel <span class="hljs-number">2</span> receive C<br>channel <span class="hljs-number">3</span> receive D<br>channel <span class="hljs-number">5</span> receive F<br>channel <span class="hljs-number">4</span> receive E<br>----------------<br>channel <span class="hljs-number">0</span> receive j<br>channel <span class="hljs-number">1</span> receive k<br>channel <span class="hljs-number">4</span> receive n<br>channel <span class="hljs-number">2</span> receive l<br>channel <span class="hljs-number">3</span> receive m<br>channel <span class="hljs-number">2</span> receive L<br>channel <span class="hljs-number">8</span> receive r<br>channel <span class="hljs-number">0</span> receive J<br>channel <span class="hljs-number">1</span> receive K<br>channel <span class="hljs-number">7</span> receive q<br>channel <span class="hljs-number">5</span> receive o<br>channel <span class="hljs-number">9</span> receive s<br>channel <span class="hljs-number">3</span> receive M<br>channel <span class="hljs-number">5</span> receive O<br>channel <span class="hljs-number">6</span> receive p<br>channel <span class="hljs-number">4</span> receive N<br>channel <span class="hljs-number">6</span> receive P<br>channel <span class="hljs-number">9</span> receive S<br>channel <span class="hljs-number">7</span> receive Q<br>channel <span class="hljs-number">8</span> receive R<br></code></pre></td></tr></table></figure><h5 id="利用channel遍历树">利用channel遍历树</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> goroutines<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>Value       <span class="hljs-keyword">int</span><br>Left, Right *Node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createNode</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">return</span> &amp;Node&#123;Value: value&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span> <span class="hljs-title">setValue</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-comment">// 接收者使用指针才可以改变结构内容</span><br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Setting Value to nil node. Ignored.&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>node.Value = value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Print(node.Value, <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span><span class="hljs-title">travelsWithFunc</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(*Node)</span>)</span> &#123;<br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>node.Left.travelsWithFunc(f)<br>f(node)<br>node.Right.travelsWithFunc(f)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span><span class="hljs-title">travelWithChannel</span><span class="hljs-params">()</span> <span class="hljs-title">chan</span> *<span class="hljs-title">Node</span></span>&#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *Node)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>node.travelsWithFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(node *Node)</span></span> &#123;<br>c &lt;- node<br>&#125;)<br><span class="hljs-built_in">close</span>(c)<br>&#125;()<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initTree</span><span class="hljs-params">()</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">var</span> root Node<br>root = Node&#123;Value: <span class="hljs-number">3</span>&#125;<br>root.Left = &amp;Node&#123;&#125;<br>root.Right = &amp;Node&#123;<span class="hljs-number">5</span>, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>&#125;<br>root.Right.Left = <span class="hljs-built_in">new</span>(Node)<br>root.Left.Right = createNode(<span class="hljs-number">2</span>)<br>root.Right.Left.setValue(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">return</span> &amp;root<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Demo</span><span class="hljs-params">()</span></span>  &#123;<br>t := initTree()<br><br><span class="hljs-comment">// 计数</span><br>  nodeCount := <span class="hljs-number">0</span><br>t.travelsWithFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(node *Node)</span></span> &#123;<br>nodeCount++<br>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;Node counts&quot;</span>, nodeCount)<br><br><span class="hljs-comment">// 树中最大值</span><br>  c := t.travelWithChannel()<br>maxNode := <span class="hljs-number">0</span><br><span class="hljs-comment">// 从channel中取</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> c &#123;<br><span class="hljs-keyword">if</span> maxNode &lt; n.Value &#123;<br>maxNode = n.Value<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;Max node:&quot;</span>, maxNode)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="select调度"><code>Select</code>调度</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021/2/5 上午10:37</span><br><span class="hljs-comment"> * Description: select</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">package</span> goroutines<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> SelectWorker <span class="hljs-keyword">struct</span> &#123;<br>id <span class="hljs-keyword">string</span><br>c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w *SelectWorker)</span> <span class="hljs-title">setValue</span><span class="hljs-params">(id <span class="hljs-keyword">string</span>)</span></span>  &#123;<br>w.id = id<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectNotBlock</span><span class="hljs-params">(c1, c2 <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> n := &lt;- c1:<br>fmt.Printf(<span class="hljs-string">&quot;receice %d from c1\n&quot;</span>, n)<br><span class="hljs-keyword">case</span> n := &lt;-c2:<br>fmt.Printf(<span class="hljs-string">&quot;receice %d from c2\n&quot;</span>, n)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;not receive anything&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectBlock</span><span class="hljs-params">(c1, c2 <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> n := &lt;- c1:<br>fmt.Printf(<span class="hljs-string">&quot;receice %d from c1\n&quot;</span>, n)<br><span class="hljs-keyword">case</span> n := &lt;-c2:<br>fmt.Printf(<span class="hljs-string">&quot;receice %d from c2\n&quot;</span>, n)<br><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectWorkConditionBlock</span><span class="hljs-params">(rw, sw1, sw2 SelectWorker)</span></span>  &#123;<br><span class="hljs-keyword">var</span> values []<span class="hljs-keyword">int</span><br>id := <span class="hljs-string">&quot;&quot;</span><br>endTime := time.After(time.Second * <span class="hljs-number">10</span>)<br>tick := time.Tick(time.Second)<br><span class="hljs-keyword">for</span> &#123;<br>activeWorker := SelectWorker&#123;<br>c:  <span class="hljs-literal">nil</span>,<br>&#125;<br><span class="hljs-keyword">var</span> activeValue <span class="hljs-keyword">int</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) &gt;<span class="hljs-number">0</span> &#123;<br>rw.setValue(id)<br>activeWorker = rw<br>activeValue = values[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> n := &lt;-sw1.c:<br>id = sw1.id<br>values = <span class="hljs-built_in">append</span>(values, n)<br><span class="hljs-keyword">case</span> n := &lt;-sw2.c:<br>id = sw2.id<br>values = <span class="hljs-built_in">append</span>(values, n)<br><span class="hljs-keyword">case</span> activeWorker.c &lt;- activeValue:<br>values = values[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">case</span> &lt;-time.After(time.Millisecond * <span class="hljs-number">600</span>):  <span class="hljs-comment">// 500毫秒未产生数据</span><br>fmt.Println(<span class="hljs-string">&quot;程序超时&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;- tick:<br>fmt.Println(<span class="hljs-string">&quot;queue len = &quot;</span>, <span class="hljs-built_in">len</span>(values))<br><span class="hljs-keyword">case</span> &lt;- endTime:  <span class="hljs-comment">// 程序执行到endTime时结束</span><br>fmt.Println(<span class="hljs-string">&quot;程序执行结束&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateChannel</span><span class="hljs-params">()</span> <span class="hljs-title">chan</span> <span class="hljs-title">int</span></span>&#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br>time.Sleep(time.Duration(rand.Intn(<span class="hljs-number">1000</span>)) * time.Millisecond)<br>c &lt;- i<br>i++<br>&#125;<br>&#125;()<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateWorkChannel</span><span class="hljs-params">(id <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">SelectWorker</span></span> &#123;<br>w := SelectWorker&#123;<br>id:id,<br>c: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),<br>&#125;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br>time.Sleep(time.Duration(rand.Intn(<span class="hljs-number">1000</span>)) * time.Millisecond)<br>w.c &lt;- i<br>i++<br>&#125;<br>&#125;()<br><span class="hljs-keyword">return</span> w<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectWorks</span><span class="hljs-params">(id <span class="hljs-keyword">string</span>, rw SelectWorker)</span></span>  &#123;<br><span class="hljs-comment">// 不断的从channel取</span><br><span class="hljs-keyword">for</span>  &#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %s from %s receive %d\n&quot;</span>, id, rw.id, &lt;-rw.c)<br>time.Sleep(time.Second)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createSelectWorks</span><span class="hljs-params">(id <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">SelectWorker</span></span> &#123;<br>rw := SelectWorker&#123;<br>c:  <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),<br>&#125;<br><span class="hljs-keyword">go</span> selectWorks(id, rw)<br><span class="hljs-keyword">return</span> rw<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">channelSelectBlock</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span> c1, c2 = generateChannel(), generateChannel()<br>selectBlock(c1, c2)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">channelSelectWork</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span> sw1, sw2 = generateWorkChannel(<span class="hljs-string">&quot;send worker1&quot;</span>), generateWorkChannel(<span class="hljs-string">&quot;send worker2&quot;</span>)<br>rw := createSelectWorks(<span class="hljs-string">&quot;receive work1&quot;</span>)<br>selectWorkConditionBlock(rw, sw1, sw2)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectDemo</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">//var c1, c2 chan int</span><br><span class="hljs-comment">//selectNotBlock(c1, c2)</span><br><br><span class="hljs-comment">//channelSelectBlock()</span><br><br>channelSelectWork()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同步机制">同步机制</h4><ul><li><code>WaitGroup</code></li></ul><p>基于<code>WaitGroup</code>实现通信来共享内存</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021/2/5 下午5:37</span><br><span class="hljs-comment"> * Description: 基于WaitGroup实现通信来共享内存</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">package</span> goroutines<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> WorkerWG <span class="hljs-keyword">struct</span> &#123;<br>in <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br>wg *sync.WaitGroup<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWorkWaitDone</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w WorkerWG)</span></span>  &#123;<br><span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<br>w.wg.Done()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWaitDoneWorkers</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, wg *sync.WaitGroup)</span> <span class="hljs-title">WorkerWG</span></span> &#123;<br>w := WorkerWG&#123;<br>in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),<br>wg: wg,<br>&#125;<br><span class="hljs-keyword">go</span> doWorkWaitDone(id, w)<br><span class="hljs-keyword">return</span> w<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicateWaitDone</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><br><span class="hljs-keyword">var</span> works [<span class="hljs-number">10</span>]WorkerWG<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>works[i] = createWaitDoneWorkers(i, &amp;wg)<br>&#125;<br><br><span class="hljs-comment">//wg.Add(20)</span><br><br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i<br>wg.Add(<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i<br>wg.Add(<span class="hljs-number">1</span>)<br>&#125;<br><br>wg.Wait()<br>&#125;<br><br><br><span class="hljs-keyword">type</span> WorkerWG2 <span class="hljs-keyword">struct</span> &#123;<br>in <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><br>done <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span>  // 函数式编程</span><br>&#125;<br><br><span class="hljs-comment">// WorkerWG封装</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWorkWaitDone2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w WorkerWG2)</span></span>  &#123;<br><span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><br><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;<br>fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<br>w.done()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWaitDoneWorkers2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, wg *sync.WaitGroup)</span> <span class="hljs-title">WorkerWG2</span></span> &#123;<br>w := WorkerWG2&#123;<br>in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),<br>done: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>wg.Done()<br>&#125;,<br>&#125;<br><span class="hljs-keyword">go</span> doWorkWaitDone2(id, w)<br><span class="hljs-keyword">return</span> w<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicateWaitDone2</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><br><span class="hljs-keyword">var</span> works [<span class="hljs-number">10</span>]WorkerWG2<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>works[i] = createWaitDoneWorkers2(i, &amp;wg)<br>&#125;<br><br>wg.Add(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i<br><span class="hljs-comment">//wg.Add(1)</span><br>&#125;<br><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;<br>worker.in &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i<br><span class="hljs-comment">//wg.Add(1)</span><br>&#125;<br>wg.Wait()<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>channel <span class="hljs-number">7</span> receive h<br>channel <span class="hljs-number">5</span> receive f<br>channel <span class="hljs-number">6</span> receive g<br>channel <span class="hljs-number">0</span> receive a<br>channel <span class="hljs-number">8</span> receive i<br>channel <span class="hljs-number">1</span> receive b<br>channel <span class="hljs-number">3</span> receive d<br>channel <span class="hljs-number">2</span> receive c<br>channel <span class="hljs-number">4</span> receive e<br>channel <span class="hljs-number">9</span> receive j<br>channel <span class="hljs-number">9</span> receive J<br>channel <span class="hljs-number">3</span> receive D<br>channel <span class="hljs-number">0</span> receive A<br>channel <span class="hljs-number">5</span> receive F<br>channel <span class="hljs-number">2</span> receive C<br>channel <span class="hljs-number">4</span> receive E<br>channel <span class="hljs-number">6</span> receive G<br>channel <span class="hljs-number">1</span> receive B<br>channel <span class="hljs-number">7</span> receive H<br>channel <span class="hljs-number">8</span> receive I<br>channel <span class="hljs-number">9</span> receive j<br>channel <span class="hljs-number">6</span> receive g<br>channel <span class="hljs-number">8</span> receive i<br>channel <span class="hljs-number">4</span> receive e<br>channel <span class="hljs-number">0</span> receive a<br>channel <span class="hljs-number">0</span> receive A<br>channel <span class="hljs-number">2</span> receive c<br>channel <span class="hljs-number">3</span> receive d<br>channel <span class="hljs-number">5</span> receive f<br>channel <span class="hljs-number">1</span> receive b<br>channel <span class="hljs-number">1</span> receive B<br>channel <span class="hljs-number">7</span> receive h<br>channel <span class="hljs-number">7</span> receive H<br>channel <span class="hljs-number">3</span> receive D<br>channel <span class="hljs-number">5</span> receive F<br>channel <span class="hljs-number">4</span> receive E<br>channel <span class="hljs-number">6</span> receive G<br>channel <span class="hljs-number">9</span> receive J<br>channel <span class="hljs-number">2</span> receive C<br>channel <span class="hljs-number">8</span> receive I<br></code></pre></td></tr></table></figure><ul><li><code>Mutux</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021/2/5 下午2:34</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">package</span> goroutines<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> AtomicInt <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">int</span><br>lock sync.Mutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *AtomicInt)</span> <span class="hljs-title">increase</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;safe Increase&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//a.lock.Lock()</span><br><span class="hljs-comment">//defer a.lock.Unlock()</span><br>a.value++<br>&#125;()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *AtomicInt)</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">//a.lock.Lock()</span><br><span class="hljs-comment">//defer a.lock.Unlock()</span><br><span class="hljs-keyword">return</span> a.value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AtomicDemo</span><span class="hljs-params">()</span></span>  &#123;<br> i := AtomicInt&#123;&#125;<br> i.increase()<br> <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br> i.increase()<br> &#125;()<br>time.Sleep(time.Millisecond)<br> fmt.Println(i.get())<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>xxx@xxxdeMacBook-Pro  ~/Projects/golang/src/offer/note   master ±✚  <span class="hljs-keyword">go</span> run -race main.<span class="hljs-keyword">go</span><br>safe Increase<br>safe Increase<br>==================<br>WARNING: DATA RACE<br>Read at <span class="hljs-number">0x00c000134010</span> by main goroutine:<br>  offer/note/goroutines.(*AtomicInt).get()<br>      /Users/wangpeng/Projects/golang/src/offer/note/goroutines/atomic.<span class="hljs-keyword">go</span>:<span class="hljs-number">33</span> +<span class="hljs-number">0xab</span><br>  offer/note/goroutines.AtomicDemo()<br>      /Users/wangpeng/Projects/golang/src/offer/note/goroutines/atomic.<span class="hljs-keyword">go</span>:<span class="hljs-number">43</span> +<span class="hljs-number">0xb4</span><br>  main.main()<br>      /Users/wangpeng/Projects/golang/src/offer/note/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">75</span> +<span class="hljs-number">0x2f</span><br><br>Previous write at <span class="hljs-number">0x00c000134010</span> by goroutine <span class="hljs-number">7</span>:<br>  offer/note/goroutines.(*AtomicInt).increase.func1()<br>      /Users/wangpeng/Projects/golang/src/offer/note/goroutines/atomic.<span class="hljs-keyword">go</span>:<span class="hljs-number">26</span> +<span class="hljs-number">0xbd</span><br>  offer/note/goroutines.(*AtomicInt).increase()<br>      /Users/wangpeng/Projects/golang/src/offer/note/goroutines/atomic.<span class="hljs-keyword">go</span>:<span class="hljs-number">27</span> +<span class="hljs-number">0x9e</span><br>  offer/note/goroutines.AtomicDemo.func1()<br>      /Users/wangpeng/Projects/golang/src/offer/note/goroutines/atomic.<span class="hljs-keyword">go</span>:<span class="hljs-number">40</span> +<span class="hljs-number">0x38</span><br><br>Goroutine <span class="hljs-number">7</span> (finished) created at:<br>  offer/note/goroutines.AtomicDemo()<br>      /Users/wangpeng/Projects/golang/src/offer/note/goroutines/atomic.<span class="hljs-keyword">go</span>:<span class="hljs-number">39</span> +<span class="hljs-number">0x90</span><br>  main.main()<br>      /Users/wangpeng/Projects/golang/src/offer/note/main.<span class="hljs-keyword">go</span>:<span class="hljs-number">75</span> +<span class="hljs-number">0x2f</span><br>==================<br><span class="hljs-number">2</span><br>Found <span class="hljs-number">1</span> data race(s)<br>exit status <span class="hljs-number">66</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021/2/5 下午2:34</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-keyword">package</span> goroutines<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> AtomicInt <span class="hljs-keyword">struct</span> &#123;<br>value <span class="hljs-keyword">int</span><br>lock sync.Mutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *AtomicInt)</span> <span class="hljs-title">increase</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;safe Increase&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>a.lock.Lock()<br><span class="hljs-keyword">defer</span> a.lock.Unlock()<br>a.value++<br>&#125;()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *AtomicInt)</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>a.lock.Lock()<br><span class="hljs-keyword">defer</span> a.lock.Unlock()<br><span class="hljs-keyword">return</span> a.value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AtomicDemo</span><span class="hljs-params">()</span></span>  &#123;<br> i := AtomicInt&#123;&#125;<br> i.increase()<br> <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br> i.increase()<br> &#125;()<br>time.Sleep(time.Millisecond)<br> fmt.Println(i.get())<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>xxx@xxxdeMacBook-Pro  ~/Projects/golang/src/offer/note   master ±✚  <span class="hljs-keyword">go</span> run -race main.<span class="hljs-keyword">go</span><br>safe Increase<br>safe Increase<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li><code>Cond</code></li></ul><h4 id="atomic"><code>atomic</code></h4><p>Go 是一种擅长并发的语言，正确保护对共享资源的访问以防止竞争条件变得极其重要。此类资源可能包括可即时更新的配置（例如功能标志）、内部状态（例如断路器状态）等。</p><h5 id="竞态条件">竞态条件</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAtomicCondition</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>;  i++ &#123;<br>traceCondition()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">traceCondition</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br><br>wg := sync.WaitGroup&#123;&#125;<br><br><span class="hljs-comment">// 10 goroutines 并行修改 slice</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>s = <span class="hljs-built_in">append</span>(s, i)<br>&#125;(i)<br>&#125;<br><br>wg.Wait()<br><br>sort.Ints(s)<br>fmt.Println(s)<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>=== RUN   TestAtomicCondition<br>[<span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">7</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>--- PASS: TestAtomicCondition (<span class="hljs-number">0.00</span>s)<br>PASS<br></code></pre></td></tr></table></figure><p>为什么响应切片中会出现不是<code>[0 1 2 3 4 5 6 7 8 9]</code>的情况？</p><p>这是因为切片的内容 <code>s</code> 在加载和修改之间发生了变化，导致程序覆盖了一些结果。这种特殊的竞态条件是由数据竞争引起的，在这种情况下，多个 goroutine 尝试同时访问特定的共享变量，并且这些 goroutine 中的至少一个尝试修改它。</p><p>如果你使用 <code>-race</code> 标志执行测试，go 甚至会告诉你存在数据竞争并帮助你准确定位：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs shell">go test atomic_test.go -race<br>==================<br>WARNING: DATA RACE<br>Read at 0x00c00008e008 by goroutine 10:<br>  runtime.growslice()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/runtime/slice.go:162 +0x0<br>  command-line-arguments.raceCondition.func1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:33 +0xec<br>  command-line-arguments.raceCondition·dwrap·1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:34 +0x47<br><br>Previous write at 0x00c00008e008 by goroutine 8:<br>  command-line-arguments.raceCondition.func1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:33 +0x110<br>  command-line-arguments.raceCondition·dwrap·1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:34 +0x47<br><br>Goroutine 10 (running) created at:<br>  command-line-arguments.raceCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:31 +0xc5<br>  command-line-arguments.TestAtomicCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:19 +0x2b<br>  testing.tRunner()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1259 +0x22f<br>  testing.(*T).Run·dwrap·21()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1306 +0x47<br><br>Goroutine 8 (finished) created at:<br>  command-line-arguments.raceCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:31 +0xc5<br>  command-line-arguments.TestAtomicCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:19 +0x2b<br>  testing.tRunner()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1259 +0x22f<br>  testing.(*T).Run·dwrap·21()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1306 +0x47<br>==================<br>==================<br>WARNING: DATA RACE<br>Read at 0x00c000132060 by goroutine 9:<br>  command-line-arguments.raceCondition.func1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:33 +0xb4<br>  command-line-arguments.raceCondition·dwrap·1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:34 +0x47<br><br>Previous write at 0x00c000132060 by goroutine 8:<br>  command-line-arguments.raceCondition.func1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:33 +0x136<br>  command-line-arguments.raceCondition·dwrap·1()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:34 +0x47<br><br>Goroutine 9 (running) created at:<br>  command-line-arguments.raceCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:31 +0xc5<br>  command-line-arguments.TestAtomicCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:19 +0x2b<br>  testing.tRunner()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1259 +0x22f<br>  testing.(*T).Run·dwrap·21()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1306 +0x47<br><br>Goroutine 8 (finished) created at:<br>  command-line-arguments.raceCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:31 +0xc5<br>  command-line-arguments.TestAtomicCondition()<br>      /Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.go:19 +0x2b<br>  testing.tRunner()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1259 +0x22f<br>  testing.(*T).Run·dwrap·21()<br>      /usr/local/Cellar/go/1.17.2/libexec/src/testing/testing.go:1306 +0x47<br>==================<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 5 7 8 9]<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 4 5 6 7 8]<br>[0 1 2 3 4 5 6 7 8 9]<br>[0 1 2 3 4 5 6 7 8 9]<br>--- FAIL: TestAtomicCondition (0.01s)<br>    testing.go:1152: race detected during execution of test<br>FAIL<br>FAILcommand-line-arguments0.165s<br>FAIL<br></code></pre></td></tr></table></figure><h5 id="并发控制">并发控制</h5><p>保护对这些共享资源的访问通常涉及常见的内存同步机制，例如通道或互斥锁。</p><p>这是将竞态条件调整为使用互斥锁的相同测试用例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAtomicCondition</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>;  i++ &#123;<br>raceConditionLock()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">raceConditionLock</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br><br>wg := sync.WaitGroup&#123;&#125;<br>m := sync.Mutex&#123;&#125;<br><br><span class="hljs-comment">// 10 goroutines 并行修改 slice</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>m.Lock()<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">defer</span> m.Unlock()<br>s = <span class="hljs-built_in">append</span>(s, i)<br>&#125;(i)<br>&#125;<br><br>wg.Wait()<br><br>sort.Ints(s)<br>fmt.Println(s)<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>=== RUN   TestAtomicCondition<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>--- PASS: TestAtomicCondition (<span class="hljs-number">0.00</span>s)<br>PASS<br></code></pre></td></tr></table></figure><p>每个 goroutine 仅在没有其他人执行时才读写切片。如果第二个 goroutine 同时尝试获取锁，它必须等到前一个 goroutine 完成（即直到它解锁）。</p><p>然而，对于高吞吐量系统，性能变得非常重要，因此减少锁争用（即一个进程或线程试图获取另一个进程或线程持有的锁的情况）变得更加重要。执行此操作的最基本方法之一是使用读写锁 ( <code>sync.RWMutex</code>) 而不是标准 <code>sync.Mutex</code>，但是 Go 还提供了一些原子内存原语即 <code>atomic</code> 包。</p><h5 id="原子">原子</h5><p>Go 的 atomic 包提供了用于实现同步算法的低级原子内存原语。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sort&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;sync/atomic&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAtomicCondition</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>;  i++ &#123;<br>raceConditionAtomic()<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">raceConditionAtomic</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s = atomic.Value&#123;&#125;<br>s.Store([]<span class="hljs-keyword">int</span>&#123;&#125;)<br><br>wg := sync.WaitGroup&#123;&#125;<br><br><span class="hljs-comment">// 10 goroutines 并行修改 slice</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>s1 := s.Load().([]<span class="hljs-keyword">int</span>)<br>s.Store(<span class="hljs-built_in">append</span>(s1, i))<br>&#125;(i)<br>&#125;<br><br>wg.Wait()<br><br>s1 := s.Load().([]<span class="hljs-keyword">int</span>)<br>sort.Ints(s1)<br>fmt.Println(s1)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>=== RUN   TestAtomicCondition<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span>]<br>--- PASS: TestAtomicCondition (<span class="hljs-number">0.00</span>s)<br>PASS<br></code></pre></td></tr></table></figure><p>虽然<code>s.Load</code>与<code>s.Store</code>分别为原子操作，但整个过程并非原子，因此还会存在竞态条件。但是当涉及到可以使用Read-copy-update<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Read-copy-update](https://en.wikipedia.org/wiki/Read-copy-update)">[1]</span></a></sup>模式管理的共享资源时，它非常出色。在这种技术中，我们通过引用获取当前值，当我们想要更新它时，我们不修改原始值，而是替换指针（因此没有人访问另一个线程可能访问的相同资源）。另外，atomic原子操作很快，因为它们依赖于原子 CPU 指令而不是依赖外部锁。使用互斥锁时，每次获得锁时，goroutine 都会短暂暂停或中断，这种阻塞占使用互斥锁所花费时间的很大一部分。</p><h5 id="常见例子">常见例子</h5><p>当共享资源时，某些操作只能使用互斥锁来解决，atomic 无法解决所有问题，常用于 map 作为内存缓存。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> cache<br><br><span class="hljs-keyword">type</span> Cache <span class="hljs-keyword">interface</span> &#123;<br>Del(key <span class="hljs-keyword">string</span>)<br>Keys() []<span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> IntCache <span class="hljs-keyword">interface</span> &#123;<br>Cache<br><span class="hljs-comment">// Get 缓存中value为int </span><br>Get(key <span class="hljs-keyword">string</span>) (<span class="hljs-keyword">int64</span>, <span class="hljs-keyword">bool</span>)<br>Set(key <span class="hljs-keyword">string</span>, val <span class="hljs-keyword">int64</span>)<br>Add(key <span class="hljs-keyword">string</span>, delta <span class="hljs-keyword">int64</span>) <span class="hljs-keyword">int64</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> integer<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;sync/atomic&quot;</span><br><br><span class="hljs-string">&quot;github.com/weitrue/Seckill/infrastructure/stores/cache&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> intCache <span class="hljs-keyword">struct</span> &#123;<br>sync.RWMutex<br>data <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*<span class="hljs-keyword">int64</span> <span class="hljs-comment">// 整数指针，方便原子操作</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewIntCache</span><span class="hljs-params">()</span> <span class="hljs-title">cache</span>.<span class="hljs-title">IntCache</span></span> &#123;<br><span class="hljs-keyword">return</span> &amp;intCache&#123;<br>data: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*<span class="hljs-keyword">int64</span>),<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *intCache)</span> <span class="hljs-title">getPtr</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">int64</span></span> &#123;<br>c.RLock()<br><span class="hljs-keyword">defer</span> c.RUnlock()<br>valPtr, _ := c.data[key]<br><span class="hljs-keyword">return</span> valPtr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *intCache)</span> <span class="hljs-title">Get</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int64</span>, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> valPtr := c.getPtr(key); valPtr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> atomic.LoadInt64(valPtr), <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">false</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *intCache)</span> <span class="hljs-title">Set</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, val <span class="hljs-keyword">int64</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> valPtr := c.getPtr(key); valPtr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 指针存在，使用原子操作</span><br>atomic.StoreInt64(valPtr, val)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>valPtr = <span class="hljs-built_in">new</span>(<span class="hljs-keyword">int64</span>)<br>*valPtr = val<br>c.Lock()<br><span class="hljs-keyword">defer</span> c.Unlock()<br>c.data[key] = valPtr<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> integer<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-string">&quot;github.com/stretchr/testify/assert&quot;</span><br><span class="hljs-string">&quot;github.com/weitrue/Seckill/infrastructure/stores/cache&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initKeys</span><span class="hljs-params">(b *testing.B)</span> []<span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">0</span>)<br>maxKeyStr := os.Getenv(<span class="hljs-string">&quot;maxKey&quot;</span>)<br>maxKey, _ := strconv.Atoi(maxKeyStr)<br><span class="hljs-keyword">if</span> maxKey &lt;= <span class="hljs-number">0</span> &#123;<br>maxKey = b.N<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; maxKey; i++ &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, strconv.Itoa(i))<br>&#125;<br><span class="hljs-keyword">return</span> keys<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initIntCache</span><span class="hljs-params">(b *testing.B, c cache.IntCache, keys []<span class="hljs-keyword">string</span>)</span></span> &#123;<br>l := <span class="hljs-built_in">len</span>(keys)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>c.Set(keys[i%l], <span class="hljs-keyword">int64</span>(i))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntCache_Set</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>keys := initKeys(b)<br>c := NewIntCache()<br><br>b.ReportAllocs()<br>b.StartTimer()<br>initIntCache(b, c, keys)<br>b.StopTimer()<br>&#125;<br><br><span class="hljs-comment">// Get</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntCache_Get</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>keys := initKeys(b)<br>c := NewIntCache()<br>initIntCache(b, c, keys)<br>l := <span class="hljs-built_in">len</span>(keys)<br><br>b.ReportAllocs()<br>b.StartTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>c.Get(keys[i%l])<br>&#125;<br>b.StopTimer()<br>&#125;<br><br><span class="hljs-comment">// </span><br>goos: darwin<br>goarch: amd64<br>cpu: Intel(R) Core(TM) i5<span class="hljs-number">-8279</span>U CPU @ <span class="hljs-number">2.40</span>GHz<br>BenchmarkIntCache_Get<br>BenchmarkIntCache_Get<span class="hljs-number">-8</span>    <span class="hljs-number">1963155</span>       <span class="hljs-number">663.3</span> ns/op     <span class="hljs-number">230</span> B/op       <span class="hljs-number">2</span> allocs/op<br>BenchmarkIntCache_Set<br>BenchmarkIntCache_Set<span class="hljs-number">-8</span>    <span class="hljs-number">2321728</span>       <span class="hljs-number">489.7</span> ns/op     <span class="hljs-number">215</span> B/op       <span class="hljs-number">2</span> allocs/op<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> <span class="hljs-keyword">int</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;sync/atomic&quot;</span><br><br><span class="hljs-string">&quot;github.com/weitrue/Seckill/infrastructure/stores/cache&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> integerCache <span class="hljs-keyword">struct</span> &#123;<br>data atomic.Value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewIntegerCache</span><span class="hljs-params">()</span> <span class="hljs-title">cache</span>.<span class="hljs-title">IntCache</span></span> &#123;<br>ic := &amp;integerCache&#123;&#125;<br>ic.data.Store(<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*<span class="hljs-keyword">int64</span>))<br><span class="hljs-keyword">return</span> ic<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *integerCache)</span> <span class="hljs-title">getPtr</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">int64</span></span> &#123;<br>valPtr, _ := i.data.Load().(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*<span class="hljs-keyword">int64</span>)[key]<br><span class="hljs-keyword">return</span> valPtr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *integerCache)</span> <span class="hljs-title">Get</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int64</span>, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> valPtr := i.getPtr(key); valPtr != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> *valPtr, <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *integerCache)</span> <span class="hljs-title">Set</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, val <span class="hljs-keyword">int64</span>)</span></span> &#123;<br>oldMap := i.data.Load().(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*<span class="hljs-keyword">int64</span>)<br>newMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*<span class="hljs-keyword">int64</span>, <span class="hljs-built_in">len</span>(oldMap)+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> oldMap &#123;<br>newMap[k] = v<br>&#125;<br>newMap[key] = &amp;val<br>i.data.Store(newMap)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> <span class="hljs-keyword">int</span><br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-string">&quot;github.com/weitrue/Seckill/infrastructure/stores/cache&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initKeys</span><span class="hljs-params">(b *testing.B)</span> []<span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">string</span>, <span class="hljs-number">0</span>)<br>maxKeyStr := os.Getenv(<span class="hljs-string">&quot;maxKey&quot;</span>)<br>maxKey, _ := strconv.Atoi(maxKeyStr)<br><span class="hljs-keyword">if</span> maxKey &lt;= <span class="hljs-number">0</span> &#123;<br>maxKey = b.N<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; maxKey; i++ &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, strconv.Itoa(i))<br>&#125;<br><span class="hljs-keyword">return</span> keys<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initIntCache</span><span class="hljs-params">(b *testing.B, c cache.IntCache, keys []<span class="hljs-keyword">string</span>)</span></span> &#123;<br>l := <span class="hljs-built_in">len</span>(keys)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>c.Set(keys[i%l], <span class="hljs-keyword">int64</span>(i))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Set</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntCache_Set</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>keys := initKeys(b)<br>c := NewIntegerCache()<br>b.ReportAllocs()<br>b.StartTimer()<br>initIntCache(b, c, keys)<br>b.StopTimer()<br>&#125;<br><br><span class="hljs-comment">// Get</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkIntCache_Get</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>keys := initKeys(b)<br>c := NewIntegerCache()<br>initIntCache(b, c, keys)<br>l := <span class="hljs-built_in">len</span>(keys)<br><br>b.ReportAllocs()<br>b.StartTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>c.Get(keys[i%l])<br>&#125;<br>b.StopTimer()<br>&#125;<br><br><span class="hljs-comment">// </span><br>goos: darwin<br>goarch: amd64<br>cpu: Intel(R) Core(TM) i5<span class="hljs-number">-8279</span>U CPU @ <span class="hljs-number">2.40</span>GHz<br>BenchmarkIntCache_Get<br>BenchmarkIntCache_Get<span class="hljs-number">-8</span>      <span class="hljs-number">10000</span>    <span class="hljs-number">322438</span> ns/op  <span class="hljs-number">257816</span> B/op      <span class="hljs-number">16</span> allocs/op<br>BenchmarkIntCache_Set<br>BenchmarkIntCache_Set<span class="hljs-number">-8</span>      <span class="hljs-number">10000</span>    <span class="hljs-number">312548</span> ns/op  <span class="hljs-number">257814</span> B/op      <span class="hljs-number">16</span> allocs/op<br></code></pre></td></tr></table></figure><h5 id="注意事项">注意事项</h5>Go 的文档<sup id="fnref:2"><a href="#fn:2" rel="footnote">&lt;span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="<a href="https://pkg.go.dev/sync/atomic">文档</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=>start: 开始op1=>operation: 阻塞 等待被唤醒op2=>operation: 被唤醒,清理op3=>operation: 阻 塞op4=>operation: 发给接收者op5=>operation: 放入缓冲区op6=>operation: 唤醒接收者op7=>operation: 返回e=>end">[2]</textarea></a></sup>警告了 atomic 包的潜在误用：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">这些函数需要非常小心才能正确使用。除了特殊的低级应用程序，同步最好使用通道或 sync 包的工具来完成。通过通信共享内存；不要通过共享内存进行通信。<br></code></pre></td></tr></table></figure>开始使用 atomic 包时，可能会遇到的第一个问题是：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">panic</span>: sync/atomic: store of inconsistently typed value into Value<br></code></pre></td></tr></table></figure>使用 `atomic.Store`，确保每次调用方法时都存储完全相同的类型很重要。这听起来很容易，但通常并不像听起来那么简单：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> CustomError <span class="hljs-keyword">struct</span> &#123;<br>Code    <span class="hljs-keyword">int</span><br>Message <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e CustomError)</span> <span class="hljs-title">Error</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d: %s&quot;</span>, e.Code, e.Message)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InternalServerError</span><span class="hljs-params">(msg <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;<br><span class="hljs-keyword">return</span> CustomError&#123;Code: <span class="hljs-number">500</span>, Message: msg&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAtomicType</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>err1 error = fmt.Errorf(<span class="hljs-string">&quot;error happened&quot;</span>)<br>err2 error = InternalServerError(<span class="hljs-string">&quot;another error happened&quot;</span>)<br>)<br><br>errVal := atomic.Value&#123;&#125;<br>errVal.Store(err1)<br>errVal.Store(err2)<br>&#125;<br><br><br><span class="hljs-comment">//</span><br><span class="hljs-built_in">panic</span>: sync/atomic: store of inconsistently typed value into Value [recovered]<br><span class="hljs-built_in">panic</span>: sync/atomic: store of inconsistently typed value into Value<br><br>goroutine <span class="hljs-number">18</span> [running]:<br>testing.tRunner.func1<span class="hljs-number">.2</span>(&#123;<span class="hljs-number">0x10f1b00</span>, <span class="hljs-number">0x1137cb0</span>&#125;)<br>/usr/local/Cellar/<span class="hljs-keyword">go</span>/<span class="hljs-number">1.17</span><span class="hljs-number">.2</span>/libexec/src/testing/testing.<span class="hljs-keyword">go</span>:<span class="hljs-number">1209</span> +<span class="hljs-number">0x24e</span><br>testing.tRunner.func1()<br>/usr/local/Cellar/<span class="hljs-keyword">go</span>/<span class="hljs-number">1.17</span><span class="hljs-number">.2</span>/libexec/src/testing/testing.<span class="hljs-keyword">go</span>:<span class="hljs-number">1212</span> +<span class="hljs-number">0x218</span><br><span class="hljs-built_in">panic</span>(&#123;<span class="hljs-number">0x10f1b00</span>, <span class="hljs-number">0x1137cb0</span>&#125;)<br>/usr/local/Cellar/<span class="hljs-keyword">go</span>/<span class="hljs-number">1.17</span><span class="hljs-number">.2</span>/libexec/src/runtime/<span class="hljs-built_in">panic</span>.<span class="hljs-keyword">go</span>:<span class="hljs-number">1038</span> +<span class="hljs-number">0x215</span><br>sync/atomic.(*Value).Store(<span class="hljs-number">0xc000096530</span>, &#123;<span class="hljs-number">0x10ff160</span>, <span class="hljs-number">0xc0000b2060</span>&#125;)<br>/usr/local/Cellar/<span class="hljs-keyword">go</span>/<span class="hljs-number">1.17</span><span class="hljs-number">.2</span>/libexec/src/sync/atomic/value.<span class="hljs-keyword">go</span>:<span class="hljs-number">77</span> +<span class="hljs-number">0xd8</span><br>offer/notes/awesomego.TestAtomicType(<span class="hljs-number">0x0</span>)<br>/Users/wangpeng/Projects/golang/src/offer/notes/awesomego/atomic_test.<span class="hljs-keyword">go</span>:<span class="hljs-number">111</span> +<span class="hljs-number">0xd8</span><br>testing.tRunner(<span class="hljs-number">0xc000083520</span>, <span class="hljs-number">0x11195e8</span>)<br>/usr/local/Cellar/<span class="hljs-keyword">go</span>/<span class="hljs-number">1.17</span><span class="hljs-number">.2</span>/libexec/src/testing/testing.<span class="hljs-keyword">go</span>:<span class="hljs-number">1259</span> +<span class="hljs-number">0x102</span><br>created by testing.(*T).Run<br>/usr/local/Cellar/<span class="hljs-keyword">go</span>/<span class="hljs-number">1.17</span><span class="hljs-number">.2</span>/libexec/src/testing/testing.<span class="hljs-keyword">go</span>:<span class="hljs-number">1306</span> +<span class="hljs-number">0x35a</span><br></code></pre></td></tr></table></figure>两个值都是 `error` 类型是不够的，因为它们只是实现了错误接口。它们的具体类型仍然不同，因此 atomic 不喜欢它。竞态条件很糟糕，应该保护对共享资源的访问。但由于锁争用而趋于缓慢，对于某些读取-复制-更新模式有意义的情况（这往往是动态配置之类的东西，例如特性标志、日志级别或 map 或结构体，一次填充例如通过 JSON 解析等），尤其是当读取次数比写入次数多时，atomic 通常不应用于其他用例（例如，随时间增长的变量，如缓存），并且该特性的使用需要非常小心。cond1=>condition: chan=nil?cond2=>condition: 有阻塞的接收者?cond3=>condition: 缓冲没满?s->cond1cond1(yes,right)->op3(right)->op7cond1(no)->cond2cond2(yes,right)->op4(right)->op6->op7cond2(no)->cond3cond3(yes,right)->op5->op7cond3(no)->op1->op2(right)->op7op7(right)->e<textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://en.wikipedia.org/wiki/Read-copy-update">Read-copy-update</a><a href="#fnref:1" rev="footnote"> ↩︎</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://pkg.go.dev/sync/atomic">文档</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=&gt;start: 开始 op1=&gt;operation: 阻塞 等待被唤醒 op2=&gt;operation: 被唤醒,清理 op3=&gt;operation: 阻 塞 op4=&gt;operation: 发给接收者 op5=&gt;operation: 放入缓冲区 op6=&gt;operation: 唤醒接收者 op7=&gt;operation: 返回 e=&gt;end<a href="#fnref:2" rev="footnote"> ↩︎</a></textarea></span></li></ol></div></div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【数据库】Redis学习笔记</title>
    <link href="/2021/03/22/redis/"/>
    <url>/2021/03/22/redis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>Remote DictIOnary Server（远程数据服务），是一个基于内存且支持持久化的高性能 key-value 数据库<span id="more"></span></p></blockquote><p><img src="/images/db/redis/top.png"></p><h3 id="redis安装">Redis安装</h3><h4 id="单机版redis环境安装">单机版redis环境安装</h4><p>环境准备:</p><p>系统：centos7</p><h5 id="下载redis安装包">下载redis安装包</h5><p>node01服务器执行以下命令下载redis安装包</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">cd</span> /weitrue/soft<br>wget http://download.redis.io/releases/redis-6.0.1.tar.gz<br></code></pre></td></tr></table></figure><h5 id="解压redis压缩包到指定目录">解压redis压缩包到指定目录</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment">#node01执行以下命令进行解压redis</span><br><span class="hljs-built_in">cd</span> /weitrue/soft<br>tar -zxvf redis-6.0.1.tar.gz -C ../install/<br></code></pre></td></tr></table></figure><h5 id="安装c程序运行环境">安装C程序运行环境</h5><p>node01执行以下命令安装C程序运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">su root<br>yum -y install gcc-c++<br><span class="hljs-meta">#</span><span class="bash"> 查看gcc版本是否在5.3以上，centos7.6默认安装4.8.5</span><br>gcc -v<br><span class="hljs-meta">#</span><span class="bash"> 升级gcc到5.3及以上,如下：</span><br><span class="hljs-meta">#</span><span class="bash">升级到gcc 9.3：</span><br>yum -y install centos-release-scl<br>yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<br><br>scl enable devtoolset-9 bash<br>需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。<br>如果要长期使用gcc 9.3的话：<br><br>echo &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt;/etc/profile<br><span class="hljs-meta">#</span><span class="bash">这样退出shell重新打开就是新版的gcc了</span><br></code></pre></td></tr></table></figure><h5 id="安装较新版本的tcl">安装较新版本的tcl</h5><p>下载安装较新版本的tcl</p><h6 id="使用压缩包进行安装不推荐">使用压缩包进行安装（不推荐）</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">node01执行以下命令下载tcl安装包</span><br>cd /weitrue/soft<br>wget http://downloads.sourceforge.net/tcl/tcl8.6.1-src.tar.gz<br><span class="hljs-meta">#</span><span class="bash">解压tcl</span><br>tar -zxvf tcl8.6.1-src.tar.gz -C ../install/<br><span class="hljs-meta">#</span><span class="bash">进入指定目录</span><br>cd ../install/tcl8.6.1/unix/<br>./configure<br>make  &amp;&amp; make  install<br></code></pre></td></tr></table></figure><h6 id="在线安装tcl墙裂推荐">在线安装tcl（墙裂推荐）</h6><p>node01执行以下命令在线安装tcl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum  -y  install  tcl<br></code></pre></td></tr></table></figure><h5 id="进行编译redis">进行编译redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> node01执行以下命令进行编译：</span><br>cd /weitrue/install/redis-6.0.1/<br><span class="hljs-meta">#</span><span class="bash"> make MALLOC=libc   或者使用命令  make  进行编译</span><br>make test &amp;&amp; make install<br></code></pre></td></tr></table></figure><h5 id="修改redis配置文件">修改redis配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> node01执行以下命令修改redis配置文件</span><br>cd /weitrue/install/redis-6.0.1/<br>mkdir -p /weitrue/install/redis-6.0.1/logs<br>mkdir -p /weitrue/install/redis-6.0.1/redisdata<br>vim redis.conf<br>bind node01<br>daemonize yes<br>pidfile /weitrue/install/redis-6.0.1/redis_6379.pid<br>logfile &quot;/weitrue/install/redis-6.0.1/logs/redis.log&quot;<br>dir /weitrue/install/redis-6.0.1/redisdata<br></code></pre></td></tr></table></figure><p><code>daemonize yes</code>: redis采用的是单进程多线程的模式。 当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。 <code>daemonize no</code>: 当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。</p><h5 id="启动redis">启动redis</h5><p>node01执行以下命令启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd  /weitrue/install/redis-6.0.1<br>src/redis-server  redis.conf<br><span class="hljs-meta">#</span><span class="bash"> 查看进程</span><br>ps aux|grep redis<br>或者<br>ps -ef | grep redis | grep -v &quot;grep&quot;  # 加上| grep -v &quot;grep&quot;，是指不看grep进程<br></code></pre></td></tr></table></figure><h5 id="连接redis客户端">连接redis客户端</h5><p>node01执行以下命令连接redis客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/redis-6.0.1<br>src/redis-cli -h node01<br></code></pre></td></tr></table></figure><h4 id="redis的操作命令">redis的操作命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">检测redis服务是否启动</span><br>PING<br><span class="hljs-meta">#</span><span class="bash">设置key、value</span><br>SET KEY_NAME VALUE<br><span class="hljs-meta">#</span><span class="bash">删除</span><br>del key<br><span class="hljs-meta">#</span><span class="bash">获取key是否存在</span><br>exists key<br><span class="hljs-meta">#</span><span class="bash">获取key的类型</span><br>type key<br><span class="hljs-meta">#</span><span class="bash">为key改名</span><br>rename key newkey<br>renamenx key newkey<br><span class="hljs-meta">#</span><span class="bash">切换数据库</span><br>select index<br><span class="hljs-meta">#</span><span class="bash">退出客户端</span><br>quit<br></code></pre></td></tr></table></figure><h3 id="redis的数据类型"><strong>redis的数据类型</strong></h3><p>Redis支持的常用5种数据类型指的是value类型，分别为：<strong>字符串String、列表List、哈希Hash、集合Set、有序集合Zset</strong>，但是Redis后续又丰富了几种数据类型分别是Bitmaps、HyperLogLogs、GEO。</p><p>由于Redis是基于标准C写的，只有最基础的数据类型，因此Redis为了满足对外使用的5种数据类型，开发了属于自己<strong>独有的一套基础数据结构</strong>，使用这些数据结构来实现5种数据类型。</p><p>Redis为了平衡空间和时间效率，针对value的具体类型在底层会采用不同的数据结构来实现，其中哈希表和压缩列表是复用比较多的数据结构，如下图展示了对外数据类型和底层数据结构之间的映射关系：</p><p><img src="/images/db/redis/wps4.jpg"></p><p>从图中可以看到ziplist压缩列表可以作为Zset、Set、List三种数据类型的底层实现，看来很强大，压缩列表是一种为了节约内存而开发的且经过特殊编码之后的连续内存块顺序型数据结构，底层结构还是比较复杂的。</p><h4 id="redis当中各种数据类型的操作">redis当中各种数据类型的操作</h4><p>redis自身是一个Map，其中所有的数据都是采用key : value 的形式存储</p><p><img src="/images/db/redis/image-20200529015634835.png"></p><h4 id="字符串">字符串</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型<br>存储数据的格式：一个存储空间保存一个数据<br>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200529020001463.png"></p><p>下表列出了常用的 redis 字符串命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">1.SET key value: 设置指定`key`的值,O(1)。示例：`SET hello world`<br><br>2.GET key:获取指定`key`的值,O(1)。示例：`GET hello`<br><br>3.GETRANGE key start end:返回`key`中字符串值的子字符,包含end。示例：`GETRANGE hello 0 3`<br><br>4.GETSET key value:将给定`key`的值设为`value`，并返回`key`的旧值(old value)。示例：`GETSET hello world2`<br><br>5.MGET key1 [key2...]:获取所有(一个或多个)给定`key`的值。示例：`MGET hello world`<br><br>6.SETEX key seconds value:将值`value`关联到`key`，并将`key`的过期时间设为 seconds (以秒为单位)。示例：`SETEX hello 10 world3`<br><br>7.SETNX key value: 只有在`key`不存在时设置`key`的值。示例：`SETNX weitrue 1`<br><br>8.SETRANGE key offset value: 用 value 参数覆写给定 key 所储存的字符串值，从偏移量`offset`开始。示例：`SETRANGE weitrue 0 helloredis`<br><br>9.STRLEN key: 返回`key所储存的字符串值的长度,O(1)。示例：`STRLEN weitrue`<br><br>10.MSET key value [key value ...]:同时设置一个或多个`key-value`对，原子操作。示例：`MSET weitrue2 weitruevalue2 weitrue3 weitruevalue3`<br><br>11.MSETNX key value [key value ...]:同时设置一个或多个`key-value`对，当且仅当所有给定 key 都不存在。示例：`MSETNX weitrue4 weitruevalue4 weitrue5 weitruevalue5`<br><br>12.PSETEX key milliseconds value:这个命令和 SETEX 命令相似，但它以毫秒为单位设置`key`的生存时间，而不是像`SETEX`命令那样，以秒为单位。示例：`PSETEX weitrue6 6000 weitrue6value`<br><br>13.INCR key:将 key 中储存的数字值增一, 可用于分布式id等。示例：`set weitrue 1`,`INCR weitrue`,`GET weitrue` <br><br>14.INCRBY key increment:将`key`所储存的值加上给定的增量值（increment）。示例：`INCRBY weitrue 2`, `get weitrue`<br><br>15.INCRBYFLOAT key increment: 将`key`所储存的值加上给定的浮点增量值（increment）。示例：`INCRBYFLOAT weitrue 0.8`<br><br>16.DECR key:将`key`中储存的数字值减一。示例：`set weitrue 1`, `DECR weitrue`, `GET weitrue`<br><br>17.DECRBY key: `key`所储存的值减去给定的减量值（decrement） 。示例：`DECRBY weitrue 3`<br><br>18.APPEND key value: 如果`key`已经存在并且是一个字符串， APPEND 命令将指定的`value`追加到该`key`原来值（value）的末尾。示例：`APPEND weitrue hello`<br></code></pre></td></tr></table></figure><h4 id="对key的操作">对key的操作</h4><p>下表给出了与 Redis 键相关的基本命令：</p><ul><li><code>dbsize</code>：计算key的总数，O(1)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEL key: 该命令用于在`key`存在时删除`key`。示例：`del weitrue`<br><br>DUMP key: 序列化给定`key`，并返回被序列化的值。示例：`DUMP key`<br>EXISTS key: 检查给定 key 是否存在。示例：`exists weitrue`<br><br>EXPIRE key seconds: 为给定`key`设置过期时间，以秒计。示例：`expire weitrue 5`<br><br>PEXPIRE key milliseconds: 设置`key`的过期时间以毫秒计。示例：`PEXPIRE set2 3000000`<br><br>KEYS pattern: 查找所有符合给定模式(pattern)的`key`。示例：`keys *`<br><br>PERSIST key: 移除`key`的过期时间，`key`将持久保持。示例：`persist set2`<br><br>PTTL key: 以毫秒为单位返回`key`的剩余的过期时间。示例：`pttl  set2`<br><br>TTL key: 以秒为单位，返回给定`key`的剩余生存时间(TTL, time to live)。示例：`ttl set2`<br><br>RANDOMKEY: 从当前数据库中随机返回一个`key`。示例： `randomkey`<br><br>RENAME key newkey: 修改`key`的名称示例：`rename set5 set8`<br><br>RENAMENX key newkey: 仅当`newkey`不存在时，将`key`改名为`newkey`。示例：`renamenx  set8 set10`<br><br>TYPE key: 返回`key`所储存的值的类型。示例：`type  set10`<br></code></pre></td></tr></table></figure><h4 id="hash列表的操作">hash列表的操作</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Redis</span> hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br><span class="hljs-attribute">Redis</span> 中每个 hash 可以存储 <span class="hljs-number">232</span> - <span class="hljs-number">1</span> 键值对（<span class="hljs-number">40</span>多亿）<br></code></pre></td></tr></table></figure><p>下表列出了 redis hash 基本的相关命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">HSET key field value: 将哈希表 `key` 中的字段 `field` 的值设为 `value` 。示例：`HSET key1 field1 value1`<br><br>HSETNX key field value: 只有在字段 `field` 不存在时，设置哈希表字段的值。示例：`HSETNX key1 field2 value2`<br><br>HMSET key field1 value1 [field2 value2 ...]: 同时将多个`field-value`(域-值)对设置到哈希表`key`中, O(n)。示例：`HMSET key1 field3 value3 field4 value4`<br><br>HEXISTS key field: 查看哈希表`key`中，指定的字段是否存在。示例：`HEXISTS key1 field4HEXISTS key1 field6`<br><br>HGET key field: 获取存储在哈希表中指定字段的值。示例：`HGET key1 field4`<br><br>HGETALL key: 获取在哈希表中指定 `key` 的所有字段和值。示例：`HGETALL key1`<br><br>HKEYS key: 获取所有哈希表中的字段。示例：`HKEYS key1`<br><br>HLEN key: 获取哈希表中字段的数量。示例：`HLEN key1`<br><br>HMGET key field1 [field2 ...]: 获取所有给定字段的值, O(n)。示例：`HMGET key1 field1 field2`<br><br>HINCRBY key field increment: 为哈希表`key`中的指定字段的整数值加上增量`increment`。示例：`HSET key2 field1 1HINCRBY key2 field1 1HGET key2 field1`<br><br>HINCRBYFLOAT key field increment: 为哈希表`key`中的指定字段的浮点数值加上增量`increment`。示例：`HINCRBYFLOAT key2 field1 0.8`<br><br>HVALS key: 获取哈希表中所有值。示例：`HVALS key1`<br><br>HDEL key field1 [field2 ...]: 删除一个或多个哈希表字段。示例：`HDEL key1 field1HVALS key1`<br></code></pre></td></tr></table></figure><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">node01:6379&gt; HSET app:mytest1 test1 &quot;123&quot;<br>OK<br>node01:6379&gt; HGET app:mytest test1<br>&quot;123&quot;<br></code></pre></td></tr></table></figure></p><h4 id="list列表的操作">list列表的操作</h4><p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br><br>一个列表最多可以包含<span class="hljs-number"> 232 </span>-<span class="hljs-number"> 1 </span>个元素 (4294967295, 每个列表超过40亿个元素)。<br></code></pre></td></tr></table></figure></p><p>下表列出了列表相关的基本命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">LPUSH key value1 [value2]: 将一个或多个值插入到列表头部。示例：`LPUSH list1 value1 value2`<br><br>LRANGE key start stop: 查看list当中指定范围（包含stop）的数据。示例：`LRANGE list1 0 -1`<br><br>LPUSHX key value: 将一个值插入到已存在的列表头部。示例：`LPUSHX list1 value3` `LINDEX list1 0`<br><br>RPUSH key value1 [value2]: 在列表中添加一个或多个值。示例：`RPUSH list1 value4 value5` `LRANGE list1 0 -1`<br><br>RPUSHX key value: 为已存在的列表添加值。示例：`RPUSHX list1 value6`<br><br>LINSERT key BEFORE|AFTER pivot value: 在列表的元素前或者后插入元素。示例：<br>`LINSERT list1 BEFORE value3 beforevalue3`<br><br>LINDEX key index: 通过索引获取列表中的元素, O(n)。示例：`LINDEX list1 0`<br><br>LSET key index value: 通过索引设置列表元素的值, O(n)。示例：`LSET list1 0 hello`<br><br>LLEN key: 获取列表长度。示例：`LLEN list1`<br><br>LPOP key: 移出并获取列表的第一个元素。示例：`LPOP list1`<br><br>RPOP key: 移除列表的最后一个元素，返回值为移除的元素。示例：`RPOP list1`<br><br>BLPOP key1 [key2 ...] timeout: 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。示例：`BLPOP list1 2000`<br><br>BRPOP key1 [key2 ...] timeout: 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。示例：`BRPOP list1 2000`<br><br>RPOPLPUSH source destination: 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。示例：`RPOPLPUSH list1 list2`<br><br>BRPOPLPUSH source destination timeout: 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。示例：`BRPOPLPUSH list1 list2 2000`<br><br>LTRIM key start stop: 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。示例：`LTRIM list1 0 2`<br><br>DEL key1 key2: 删除指定key的列表。示例：`DEL list2`<br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix">Tips:<br>LPUSH + <span class="hljs-attr">LPOP</span> = STACK<br>LPUSH + <span class="hljs-attr">RPOP</span> = QUEUE<br>LPUSH + <span class="hljs-attr">LTRIM</span> = 固定大小集合或者LRU<br>LPUSH + <span class="hljs-attr">BRPOP</span> = 消息队列<br></code></pre></td></tr></table></figure><h4 id="set集合">set集合</h4><p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">redis 的 <span class="hljs-keyword">Set</span> 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。<br><br>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 <span class="hljs-comment">O(1)</span>。<br><br>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。<br></code></pre></td></tr></table></figure></p><p>下表列出了 Redis 集合基本命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">SADD key member1 [member2 ...]: 向集合添加一个或多个成员。示例：`SADD set1 setvalue1 setvalue2`<br><br>SMEMBERS key: 返回集合中的所有成员。示例：`SMEMBERS set1`<br><br>SCARD key: 获取集合的成员数。示例：`SCARD set1`<br><br>SDIFF key1 [key2 ...]: 返回给定所有集合的差集。示例：`SADD set2 setvalue2 setvalue3SDIFF set1 set2`<br><br>SDIFFSTORE destkey key1 [key2 ...]: 返回给定所有集合的差集并存储在 destkey 中。示例：`SDIFFSTORE set3 set1 set2`<br><br>SINTER key1 [key2 ...]: 返回给定所有集合的交集。示例：`SINTER set1 set2`<br><br>SINTERSTORE destkey key1 [key2 ...]: 返回给定所有集合的交集并存储在`destkey`中。示例：`SINTERSTORE set4 set1 set2`<br><br>SISMEMBER key member: 判断 member 元素是否是集合`key`的成员。示例：`SISMEMBER set1 setvalue1`<br><br>SMOVE sourcekey destkey member: 将`member`元素从`sourcekey`集合移动到`destkey`集合。示例：`SMOVE set1 set2 setvalue1`<br><br>SPOP key: 移除并返回集合中的一个随机元素。示例：`SPOP set2`<br><br>SRANDMEMBER key [count ...]: 返回集合中一个或多个随机数。示例：`SRANDMEMBER set2 2`<br><br>SREM key member1 [member2 ...]: 移除集合中一个或多个成员。示例：`SREM set2 setvalue1`<br><br>SUNION key1 [key2 ...]: 返回所有给定集合的并集。示例：`SUNION set1 set2`<br><br>SUNIONSTORE destkey key1 [key2 ...]: 所有给定集合的并集存储在`destkey`集合中。示例：`SUNIONSTORE set5 set1 set2`<br></code></pre></td></tr></table></figure><h4 id="zset集合">zset集合</h4><p>下表列出了 redis 有序集合的基本命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs shell">ZADD key score1 member1 [score2 member2 ...]: 向有序集合添加一个或多个成员，或者更新已存在成员的分数。例如：`ADD zset1 90 ze1`<br><br>ZCARD key: 获取有序集合的成员数。例如：`zcard zset1`<br><br>ZCOUNT key min max: 计算在有序集合中指定区间分数的成员数。例如：`zcount zset1 90 91`<br><br>ZINCRBY key increment member: 有序集合中对指定成员的分数加上增量`increment`。例如：`zincrby zset1 1 ze1`<br><br>ZINTERSTORE destkey numkeys key [key ...]: 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destkey 中。例如：`ZINTERSTORE destkey 1 zset1`<br><br>ZLEXCOUNT key min max: 在有序集合中计算指定字典区间内成员数量。例如：``<br><br>ZRANGE key start stop [WITHSCORES]: 通过索引区间返回有序集合指定区间内的成员。例如：`ZRANGE destkey 0 -1`<br><br>ZRANGEBYLEX key min max [LIMIT offset count]: 通过字典区间返回有序集合的成员。例如：<br>node02:15&gt;ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g<br>&quot;7&quot;<br>node02:15&gt;ZRANGEBYLEX myzset - [c<br> 1)  &quot;a&quot;<br> 2)  &quot;b&quot;<br> 3)  &quot;c&quot;<br><br>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]: 通过分数返回有序集合指定区间内的成员。例如：`ZRANGEBYSCORE zset1 90 99`<br><br>ZRANK key member: 返回有序集合中指定成员的索引。例如：`ZRANK zset1 ze1`<br><br>ZREM key member [member ...]: 移除有序集合中的一个或多个成员。例如：`ZREM destkey ze2`<br><br>ZREMRANGEBYLEX key min max]: 移除有序集合中给定的字典区间的所有成员。例如：<br>node02:15&gt;ZRANGE myzset 0 -1<br> 1)  &quot;d&quot;<br> 2)  &quot;e&quot;<br> 3)  &quot;f&quot;<br> 4)  &quot;g&quot;<br><br>ZREMRANGEBYRANK key start stop: 移除有序集合中给定的排名区间的所有成员。例如：<br>node02:15&gt;ZADD salary 2000 jack 5000 tom 3500 peter<br>&quot;3&quot;<br>node02:15&gt;ZREMRANGEBYRANK salary 0 1<br>&quot;2&quot;<br><br>ZREMRANGEBYSCORE key min max: 移除有序集合中给定的分数区间的所有成员。例如：<br>node02:15&gt;ZREMRANGEBYSCORE salary 1500 3500<br>&quot;2&quot;<br>node02:15&gt;ZRANGE salary 0 -1 WITHSCORES<br> 1)  &quot;tom&quot;<br> 2)  &quot;5000&quot;<br><br>ZREVRANGE key start stop [WITHSCORES]: 返回有序集中指定区间内的成员，通过索引，分数从高到低。例如：<br>node02:15&gt;ZRANGE salary 0 -1 WITHSCORES<br> 1)  &quot;jack&quot;<br> 2)  &quot;2000&quot;<br> 3)  &quot;peter&quot;<br> 4)  &quot;3500&quot;<br> 5)  &quot;tom&quot;<br> 6)  &quot;5000&quot;<br>node02:15&gt;ZREVRANGE salary 0 -1 WITHSCORES<br> 1)  &quot;tom&quot;<br> 2)  &quot;5000&quot;<br> 3)  &quot;peter&quot;<br> 4)  &quot;3500&quot;<br> 5)  &quot;jack&quot;<br> 6)  &quot;2000&quot;<br><br>ZREVRANGEBYSCORE key max min [WITHSCORES]: 返回有序集中指定分数区间内的成员，分数从高到低排序。例如：<br>node02:15&gt;ZREVRANGEBYSCORE salary 10000 2000<br> 1)  &quot;tom&quot;<br> 2)  &quot;peter&quot;<br> 3)  &quot;jack&quot;<br><br>ZREVRANK key member: 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序。例如：<br>node02:15&gt;ZREVRANK salary peter<br>&quot;1&quot;<br><br>ZSCORE key member: 返回有序集中，成员的分数值。例如：<br>node02:15&gt;ZSCORE salary peter<br>&quot;3500&quot;<br><br>ZUNIONSTORE destkey numkeys key [key ...]: 计算给定的一个或多个有序集的并集，并存储在新的 key 中。例如：<br>node02:15&gt;ZADD zset1 1 &quot;one&quot;<br>&quot;1&quot;<br>node02:15&gt;ZADD zset1 2 &quot;two&quot;<br>&quot;1&quot;<br>node02:15&gt;ZADD zset2 1 &quot;one&quot;<br>&quot;1&quot;<br>node02:15&gt;ZADD zset2 2 &quot;two&quot;<br>&quot;1&quot;<br>node02:15&gt;ZADD zset2 3 &quot;three&quot;<br>&quot;1&quot;<br>node02:15&gt;ZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3<br>&quot;5&quot;<br>node02:15&gt;ZRANGE out 0 -1 WITHSCORES<br> 1)  &quot;one&quot;<br> 2)  &quot;5&quot;<br> 3)  &quot;three&quot;<br> 4)  &quot;9&quot;<br> 5)  &quot;two&quot;<br> 6)  &quot;10&quot;<br> 7)  &quot;ze1&quot;<br> 8)  &quot;182&quot;<br> 9)  &quot;ze2&quot;<br> 10)  &quot;198&quot;<br><br>ZSCAN key cursor [MATCH pattern] [COUNT count]: 迭代有序集合中的元素（包括元素成员和元素分值）。例如：<br>node02:15&gt;ZSCAN out 0 match z*<br> 1)  &quot;0&quot;<br> 2)    <br> 1)   &quot;ze1&quot;<br> 2)   &quot;182&quot;<br> 3)   &quot;ze2&quot;<br> 4)   &quot;198&quot;<br></code></pre></td></tr></table></figure><h5 id="redis有序集合zset底层怎么实现的">Redis有序集合zset底层怎么实现的</h5><p>Redis中的set数据结构底层用的是跳表实现的.</p><p>跳表是一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表。</p><p>跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。</p><p>跳表不仅能提高搜索性能，同时也可以提高插入和删除操作的性能。</p><p>(1)跳表是可以实现二分查找的有序链表； (2)每个元素插入时随机生成它的level； (3)最低层包含所有的元素； (4)如果一个元素出现在level(x)，那么它肯定出现在x以下的level中； (5)每个索引节点包含两个指针，一个向下，一个向右； (6)跳表查询、插入、删除的时间复杂度为O(log n)，与平衡二叉树接近；</p><p>为什么Redis选择使用跳表而不是红黑树来实现有序集合？(O(logN))</p><p>首先，我们来分析下Redis的有序集合支持的操作：</p><ul><li>插入元素</li><li>删除元素</li><li>查找元素</li><li>有序输出所有元素</li><li>查找区间内所有元素</li></ul><p>其中，前4项红黑树都可以完成，且时间复杂度与跳表一致。但是，最后一项，红黑树的效率就没有跳表高了。 在跳表中，要查找区间的元素，我们只要定位到两个区间端点在最低层级的位置，然后按顺序遍历元素就可以了，非常高效。</p><p>而红黑树只能定位到端点后，再从首位置开始每次都要查找后继节点，相对来说是比较耗时的。 此外，跳表实现起来很容易且易读，红黑树实现起来相对困难，所以Redis选择使用跳表来实现有序集合。</p><h3 id="瑞士军刀">瑞士军刀</h3><h4 id="hyperloglog">HyperLogLog</h4><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Redis 在 2.8.9 版本添加了 HyperLogLog 结构。<br>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。<br>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。<br>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。<br><br>什么是基数?<br>比如数据集 &#123;1, 3, 5, 7, 5, 7, 8&#125;， 那么这个数据集的基数集为 &#123;1, 3, 5 ,7, 8&#125;, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。<br></code></pre></td></tr></table></figure></p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">Redis HyperLogLog 命令<br>下表列出了 redis HyperLogLog 的基本命令：<br><br>1PFADD key element [element ...] <br>node01:6379&gt;PFADD test 123<br>添加指定元素到 HyperLogLog 中。<br>2PFCOUNT key [key ...] <br>node01:6379&gt;PFCOUNT test <br>返回给定 HyperLogLog 的基数估算值。<br>3PFMERGE destkey sourcekey [sourcekey ...] <br>node01:6379&gt;PFCOUNT kbv weitrue kkv   <br>将多个 HyperLogLog 合并为一个 HyperLogLog<br></code></pre></td></tr></table></figure></p><h6 id="应用">应用</h6><p><img src="/images/db/redis/hyperloglog.png"></p><p>但是，这个统计是不准确的，官方给出错误率为0.81%</p><h4 id="pipeline">pipeline</h4><ul><li><p>1次pipeline(n条命令) = 1次网络事件+n次命令时间.</p></li><li><p>pipeline命令 非<strong>原子</strong>原子命令,而原生批量命令<strong>m操作</strong>是原子命令。</p><p><img src="/images/db/redis/pipem.png"></p><p><img src="/images/db/redis/pipeline.png"></p></li><li><p>pipeline每次只能坐拥在一个redis节点。</p></li></ul><p>Java代码执行对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java">        Jedis jedis = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 连接池大小设置</span><br>        GenericObjectPoolConfig genericObjectPoolConfig = <span class="hljs-keyword">new</span> GenericObjectPoolConfig();<br>        JedisPool jedisPool = <span class="hljs-keyword">new</span> JedisPool(genericObjectPoolConfig, <span class="hljs-string">&quot;node02&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-keyword">long</span> startTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span>&#123;<br>            jedis = jedisPool.getResource();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10000</span> ; i++) &#123;<br>                jedis.hset(<span class="hljs-string">&quot;pip_test&quot;</span>, <span class="hljs-string">&quot;field&quot;</span>+i, <span class="hljs-string">&quot;value&quot;</span>+i);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (jedis != <span class="hljs-keyword">null</span>) &#123;<br>                jedis.close();<br>            &#125;<br>        &#125;<br>        System.out.println(System.currentTimeMillis() - startTime);<br>        startTime = System.currentTimeMillis();<br>        <span class="hljs-comment">// 使用pipeline</span><br><span class="hljs-keyword">try</span>&#123;<br>            jedis = jedisPool.getResource();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                Pipeline pipelined = jedis.pipelined();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i * <span class="hljs-number">100</span> ; j &lt;(i + <span class="hljs-number">1</span>) * <span class="hljs-number">100</span> ; j++) &#123;<br>                    pipelined.hset(<span class="hljs-string">&quot;pip_test&quot;</span>, <span class="hljs-string">&quot;field&quot;</span>+j, <span class="hljs-string">&quot;value&quot;</span>+j);<br>                &#125;<br>                pipelined.syncAndReturnAll();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (jedis != <span class="hljs-keyword">null</span>) &#123;<br>                jedis.close();<br>            &#125;<br>        &#125;<br>        System.out.println(System.currentTimeMillis() - startTime);<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">12126</span><br><span class="hljs-number">165</span><br></code></pre></td></tr></table></figure><h4 id="bitmap位图">bitmap(位图)</h4><p>redis可以直接操作位</p><p><img src="/images/db/redis/bitmap-big.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">node02:15&gt;set bitkey big<br>&quot;OK&quot;<br>node02:15&gt;get bitkey<br>&quot;big&quot;<br>node02:15&gt;getbit bitkey 0<br>&quot;0&quot;<br>node02:15&gt;getbit bitkey 1<br>&quot;1&quot;<br>node02:15&gt;getbit bitkey 2<br>&quot;1&quot;<br>node02:15&gt;<br></code></pre></td></tr></table></figure><p>操作命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">setbit key offset value            # 给位图指定索引位置设置值，value只能是0或1<br>getbit key offset                  # 位图指定索引位置二进制值<br>bitcount key [start end]           # 获取位图指定范围（start 到 end，单位为字节，不指定的话获取全部）位值为1的个数<br>bitop op destkey key [key ...]     # 做多个bitmap的and（交集） or（并集） not（非） xor（异或）操作并将结果结果保存在destkey中<br>bitpos key targetBit [start] [end] # 计算位图指定范围（start 到 end，单位为字节，不指定的话获取全部）第一个便宜量对应位置的值等于targetBit的位置<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/bitc.png"></p><p><img src="/images/db/redis/bit2.png"></p><h4 id="geo">GEO</h4><p>GEO: 地理信息定位。存储经纬度，计算距离、位置等。</p><p><code>type getKey = zset</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 增加地理位置信息</span><br>geoadd key longitude latitude member [longitude latitude member ...]<br>node02:15&gt;geoadd cities:locations 116.28 39.55 beijing<br>&quot;1&quot;<br>node02:15&gt;geoadd cities:locations 117.12 39.08 tianjin<br>&quot;1&quot;<br>node02:15&gt;geoadd cities:locations 114.29 38.02 shijiazhuang 118.01 39.38 tangshan<br>&quot;2&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 获取地理位置信息</span><br>geopos key member [member ...]<br>node02:15&gt;geopos cities:locations beijing<br> 1)    <br> 1)   &quot;116.28000229597091675&quot;<br> 2)   &quot;39.5500007245470826&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 计算距离 unit:m(米),km(千米),mi(英里),ft(尺)</span><br>geodist key member1 member2 [unit]<br>node02:15&gt;geodist cities:locations beijing tianjin<br>&quot;89206.0576&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/georadius.png"></p><h3 id="redis的持久化">redis的持久化</h3><p>由于redis是一个内存数据库，所有的数据都是保存在内存当中的，内存当中的数据极易丢失，所以redis的数据持久化就显得尤为重要。</p><p>什么是持久化呢? 利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化。</p><p>为什么要进行持久化? 防止数据的意外丢失，确保数据安全性。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">持久化过程:</span><br>1.将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据<br>2.将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200528230621178.png"></p><h4 id="rdb持久化">RDB持久化</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Redis会定期保存数据快照至一个rbd文件中，并在启动时自动加载rdb文件，恢复之前保存的数据。<br></code></pre></td></tr></table></figure><h5 id="rdb的启动方式">RDB的启动方式</h5><h6 id="save">save</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">save<br><span class="hljs-meta">#</span><span class="bash">手动执行一次保存操作</span><br>dbfilename dump-端口号.rdb<br>说明：设置本地数据库文件名，默认值为dump.rdb经验：通常设置为dump-端口号.rdb<br>dir<br>说明：设置存储.rdb文件的路径<br>经验：通常设置成存储空间较大的目录中,目录名称data.<br>rdbcompression yes<br>说明：设置存储至本地数据库时是否压缩数据，默认为yes，采用LZF 压缩<br>经验：通常默认为开启状态，如果设置为no，可以节省CPU 运行时间，但会使存储的文件变大（巨大）<br>rdbchecksum  yes<br>说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行<br>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存在一定的数据损坏风险<br><span class="hljs-meta">#</span><span class="bash">注意:</span><br>save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用<br></code></pre></td></tr></table></figure><p>save的工作原理</p><p><img src="/images/db/redis/image-20200529114206278.png"></p><h6 id="bgsave">bgsave</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">bgsave<br><span class="hljs-meta">#</span><span class="bash">手动启动后台保存操作，但不是立即执行</span><br>dbfilename dump-端口号.rdb<br>dir<br>rdbcompression yes<br>rdbchecksum yes<br>stop-writes-on-bgsave-error yes<br>说明：后台存储过程中如果出现错误现象，是否停止保存操作<br>经验：通常默认为开启状态<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200528232539204.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">可以在配置文件中配置Redis进行快照保存的时机：<br><span class="hljs-meta">#</span><span class="bash">save [seconds] [changes]</span><br><span class="hljs-meta">#</span><span class="bash">second：监控时间范围</span><br><span class="hljs-meta">#</span><span class="bash">changes：监控key的变化量</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">意为在[seconds]秒内如果发生了[changes]次数据修改，则进行一次RDB快照保存</span><br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/save&amp;bgsave.png"></p><h6 id="save自动保存配置">save自动保存配置</h6><p>修改redis的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/redis-6.0.1/<br>cat clusters/redis.conf<br>save 900 1<br>save 300 10<br>save 60 10000<br><span class="hljs-meta">#</span><span class="bash">save 5 1</span><br>dbfilename &quot;dump.rdb&quot; <br>dir &quot;/weitrue/install/redis-6.0.1/rdbstro&quot; <br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">前三个选项是redis的配置文件默认自带的存储机制。<br>表示每隔多少秒，有多少个<span class="hljs-built_in">key</span>发生变化就生成一份dump.rdb文件，作为redis的快照文件。<br>例如：<span class="hljs-keyword">save</span>  <span class="hljs-number">60</span>  <span class="hljs-number">10000</span> 表示在<span class="hljs-number">60</span>秒内，有<span class="hljs-number">10000</span>个<span class="hljs-built_in">key</span>发生变化，就会生成一份redis的快照<br>第四行表示：每隔五秒钟，有一条数据发生变化都需要重新生成redis的快照，需要自己根据实际情况指定。<br>第五行dbfilename指定了把内存里的数据库写入本地文件的名称，该文件是进行压缩后的二进制文件；<br>第六行dir指定了RDB二进制文件存放目录 ；<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/1589191932950.png"></p><p>修改RDB配置</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 在命令行里进行配置,服务器重启才会生效:</span><br>node01:6379&gt; CONFIG GET save <br>1) <span class="hljs-string">&quot;save&quot;</span><br>2) <span class="hljs-string">&quot;900 1 300 10 60 10000&quot;</span><br>node01:6379&gt; CONFIG SET save <span class="hljs-string">&quot;21600 1000&quot;</span><br>OK<br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">重新启动redis服务<br>每次生成新的<span class="hljs-keyword">dump</span>.rdb都会覆盖掉之前的老的快照<br></code></pre></td></tr></table></figure><p>save配置原理</p><p><img src="/images/db/redis/image-20200528234120923.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">save配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的save配置中对于second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系save配置启动后执行的是bgsave操作<br><span class="hljs-meta">#</span><span class="bash">save配置:</span><br>1.dbfilename dump-端口.rdb<br>2.dir<br>3.rdbcompression yes<br>4.rdbchecksum yes<br></code></pre></td></tr></table></figure><h5 id="rdb特殊启动形式">rdb特殊启动形式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">全量复制</span><br>  在主从复制中详细讲解<br><span class="hljs-meta">#</span><span class="bash">服务器运行过程中重启</span><br>  debug reload<br><span class="hljs-meta">#</span><span class="bash">关闭服务器时指定保存数据</span><br>  shutdown save<br>默认情况下执行shutdown命令时，自动执行bgsave(如果没有开启AOF持久化功能)<br></code></pre></td></tr></table></figure><h5 id="rdb优缺点">RDB优缺点</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">优:</span><br>1.RDB是一个紧凑压缩的二进制文件，存储效率较高<br>2.RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景<br>3.RDB恢复数据的速度要比AOF快很多<br>4.应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。<br><span class="hljs-section">缺:</span><br>1.RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据<br>2.bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能<br>3.Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象<br></code></pre></td></tr></table></figure><h4 id="aof持久化">AOF持久化</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang">   以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程.<br>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式<br></code></pre></td></tr></table></figure><h5 id="aof的读写原理">AOF的读写原理</h5><p><img src="/images/db/redis/image-20200530231955448.png"></p><h5 id="aof写数据三种策略">AOF写数据三种策略</h5><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># always(每次）</span><br>  每次写入操作均同步到AOF文件中，数据零误差，性能较低,不建议使用<br><span class="hljs-meta"># everysec（每秒）</span><br>  每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高,建议使用，也是默认配置<br>   在系统突然宕机的情况下丢失<span class="hljs-number">1</span>秒内的数据<br><span class="hljs-meta"># no（系统控制）</span><br>    由操作系统控制每次同步到AOF文件的周期，整体过程不可控<br></code></pre></td></tr></table></figure><h5 id="aof功能开启">AOF功能开启</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">配置</span><br>appendonly yes|no                # 是否开启AOF持久化功能，默认为不开启状态<br>appendfsync  always|everysec|no  # AOF写数据策略<br></code></pre></td></tr></table></figure><h5 id="aof相关配置">AOF相关配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/redis-6.0.1<br>vim redis.conf<br>appendonly yes<br>appendfsync everysec    # appendfsync always / appendfsync no<br><br>appendfilename filename # AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof<br>dir                     # AOF持久化文件保存路径，与RDB持久化文件保持一致即可<br></code></pre></td></tr></table></figure><h5 id="aof重写">AOF重写</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干条命令执行结果转化成最终结果数据对应的指令进行记录。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">AOF重写作用</span><br>降低磁盘占用量，提高磁盘利用率<br>提高持久化效率，降低持久化写时间，提高IO性能<br>降低数据恢复用时间，提高数据恢复效率。<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">AOF重写规则</span><br>  1.进程内已超时的数据不再写入文件<br>  2.忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令<br>     如del key1、hdelkey2、sremkey3、set key4 111、set key4 222等<br>  3.对同一数据的多条写命令合并为一条命令<br>    如lpushlist1 a、lpushlist1 b、lpushlist1 c 可以转化为：lpushlist1 a b c。<br>    为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素<br></code></pre></td></tr></table></figure><h6 id="aof重写方式">AOF重写方式</h6><ul><li>手动重写</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bgrewriteaof<br></code></pre></td></tr></table></figure><ul><li>自动重写</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">auto-aof-rewrite-min-size size<br>auto-aof-rewrite-percentage percentage<br></code></pre></td></tr></table></figure><h6 id="aof自动重写方式">AOF自动重写方式</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 自动重写触发条件设置</span><br>auto-aof-rewrite-min-size （达到某一内存开始重写）<br>sizeauto-aof-rewrite-percentage percent   （达到某一%）<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 自动重写触发比对参数（运行指令info Persistence获取具体信息)</span> <br>aof_current_size  （设置内存）<br>aof_base_size      （基础尺寸）<br></code></pre></td></tr></table></figure><h5 id="aof工作流程">AOF工作流程</h5><p><img src="/images/db/redis/image-20200531004807324.png"></p><h5 id="aof重写流程">AOF重写流程</h5><p><img src="/images/db/redis/image-20200531004404062.png"></p><h5 id="aof优点">AOF优点：</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span>、 最安全，在启用appendfsync <span class="hljs-keyword">always</span>时，任何已写入的数据都不会丢失，使用在启用appendfsync everysec也至多只会丢失<span class="hljs-number">1</span>秒的数据<br><br><span class="hljs-number">2</span>、 AOF文件在发生断电等问题时也不会损坏，即使出现了某条日志只写入了一半的情况，也可以使用redis-<span class="hljs-keyword">check</span>-aof工具轻松修复。<br><br><span class="hljs-number">3</span>、 AOF文件易读，可修改，在进行了某些错误的数据清除操作后，只要AOF文件没有rewrite，就可以把AOF文件备份出来，把错误的命令删除，然后恢复数据。<br></code></pre></td></tr></table></figure><h5 id="aof的缺点">AOF的缺点：</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-number">1</span>、 AOF文件通常比RDB文件更大<br><br><span class="hljs-number">2</span>、 性能消耗比RDB高<br><br><span class="hljs-number">3</span>、 数据恢复速度比RDB慢<br><br>Redis的数据持久化工作本身就会带来延迟，需要根据数据的安全级别和性能要求制定合理的持久化策略：<br><br>AOF + fsync <span class="hljs-keyword">always</span>的设置虽然能够绝对确保数据安全，但每个操作都会触发一次fsync，会对Redis的性能有比较明显的影响<br><br>AOF + fsync every second是比较好的折中方案，每秒fsync一次<br><br>AOF + fsync never会提供AOF持久化方案下的最优性能使用RDB持久化通常会提供比使用AOF更高的性能，但需要注意RDB的策略配置<br><br><br>每一次RDB快照和AOF Rewrite都需要Redis主进程进行<span class="hljs-keyword">fork</span>操作。<span class="hljs-keyword">fork</span>操作本身可能会产生较高的耗时，与CPU和Redis占用的内存大小有关。根据具体的情况合理配置RDB快照和AOF Rewrite时机，避免过于频繁的<span class="hljs-keyword">fork</span>带来的延迟<br><br>Redis在<span class="hljs-keyword">fork</span>子进程时需要将内存分页表拷贝至子进程，以占用了<span class="hljs-number">24</span>GB内存的Redis实例为例，共需要拷贝<span class="hljs-number">24</span>GB / <span class="hljs-number">4</span>kB * <span class="hljs-number">8</span> = <span class="hljs-number">48</span>MB的数据。在使用单Xeon <span class="hljs-number">2</span><span class="hljs-variable">.27Ghz</span>的物理机上，这一<span class="hljs-keyword">fork</span>操作耗时<span class="hljs-number">216</span>ms。<br></code></pre></td></tr></table></figure><h4 id="rdb与aof">RDB与AOF</h4><p><img src="/images/db/redis/rdb&amp;aof.png"></p><h4 id="fork">fork</h4><ul><li><p>同步操作</p></li><li><p>虽然fork同步操作是非常快的，但是如果需要同步的数据量过大(比如超过20G)，fork就会阻塞redis主进程。</p></li><li><p>与内存量息息相关</p></li><li><p>内存越大，fork同步数据耗时越长，当然也跟服务器有关，服务器有物理机，也有虚拟机。</p></li><li><p>info:latest_fork_usec</p><ul><li>使用此命令可以查看持久化花费的时间，如果持久化时间过长，就会造成卡顿。</li><li>例如：如果redis此时QPS上万，此时redis正在持久化，而且持久化时间比较长（1s或者10几秒），此时就会严重阻塞redis。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs shell">node02:0&gt;info Stats<br>&quot;# Stats<br>total_connections_received:5<br>total_commands_processed:13<br>instantaneous_ops_per_sec:0<br>total_net_input_bytes:346<br>total_net_output_bytes:7191<br>instantaneous_input_kbps:0.00<br>instantaneous_output_kbps:0.00<br>rejected_connections:0<br>sync_full:0<br>sync_partial_ok:0<br>sync_partial_err:0<br>expired_keys:0<br>evicted_keys:0<br>keyspace_hits:0<br>keyspace_misses:0<br>pubsub_channels:0<br>pubsub_patterns:0<br>latest_fork_usec:0   # &lt;-------<br>migrate_cached_sockets:0<br>&quot;<br><br>node02:0&gt;info<br>&quot;# Server<br>redis_version:3.2.8<br>redis_git_sha1:00000000<br>redis_git_dirty:0<br>redis_build_id:3a7af52404e97f38<br>redis_mode:standalone<br>os:Linux 3.10.0-957.el7.x86_64 x86_64<br>arch_bits:64<br>multiplexing_api:epoll<br>gcc_version:4.8.5<br>process_id:26189<br>run_id:2cf1aa7e1893ae1b5427ae9e1963e30e10716673<br>tcp_port:6379<br>uptime_in_seconds:122<br>uptime_in_days:0<br>hz:10<br>lru_clock:6488420<br>executable:/weitrue/install/redis-6.0.1/src/redis-server<br>config_file:/weitrue/install/redis-6.0.1/redis.conf<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Clients</span><br>connected_clients:2<br>client_longest_output_list:0<br>client_biggest_input_buf:0<br>blocked_clients:0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Memory</span><br>used_memory:2168928<br>used_memory_human:2.07M<br>used_memory_rss:4009984<br>used_memory_rss_human:3.82M<br>used_memory_peak:2201664<br>used_memory_peak_human:2.10M<br>total_system_memory:1907941376<br>total_system_memory_human:1.78G<br>used_memory_lua:37888<br>used_memory_lua_human:37.00K<br>maxmemory:0<br>maxmemory_human:0B<br>maxmemory_policy:noeviction<br>mem_fragmentation_ratio:1.85<br>mem_allocator:libc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Persistence</span><br>loading:0<br>rdb_changes_since_last_save:0<br>rdb_bgsave_in_progress:0<br>rdb_last_save_time:1617101034<br>rdb_last_bgsave_status:ok<br>rdb_last_bgsave_time_sec:-1<br>rdb_current_bgsave_time_sec:-1<br>aof_enabled:0<br>aof_rewrite_in_progress:0<br>aof_rewrite_scheduled:0<br>aof_last_rewrite_time_sec:-1<br>aof_current_rewrite_time_sec:-1<br>aof_last_bgrewrite_status:ok<br>aof_last_write_status:ok<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Stats</span><br>total_connections_received:5<br>total_commands_processed:11<br>instantaneous_ops_per_sec:0<br>total_net_input_bytes:298<br>total_net_output_bytes:4947<br>instantaneous_input_kbps:0.00<br>instantaneous_output_kbps:0.00<br>rejected_connections:0<br>sync_full:0<br>sync_partial_ok:0<br>sync_partial_err:0<br>expired_keys:0<br>evicted_keys:0<br>keyspace_hits:0<br>keyspace_misses:0<br>pubsub_channels:0<br>pubsub_patterns:0<br>latest_fork_usec:0<br>migrate_cached_sockets:0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Replication</span><br>role:master<br>connected_slaves:0<br>master_repl_offset:0<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> CPU</span><br>used_cpu_sys:0.18<br>used_cpu_user:0.11<br>used_cpu_sys_children:0.00<br>used_cpu_user_children:0.00<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Cluster</span><br>cluster_enabled:0<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> Keyspace</span><br>db0:keys=79,expires=0,avg_ttl=0<br>db15:keys=12,expires=0,avg_ttl=0<br>&quot;<br></code></pre></td></tr></table></figure></li></ul><h5 id="改善fork">改善fork</h5><p><img src="/images/db/redis/improve-fork.png"></p><h3 id="redis-发布订阅">Redis 发布订阅</h3><p><img src="/images/db/redis/pub-sub.png"></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs coq">Redis 的发布与订阅功能可以让用户将消息同时发送给多个客户端。 <br>这个功能由几个不同的角色 协作组成： <br><span class="hljs-number">1.</span>发布者（publisher）：发布消息的客户端。 <br><span class="hljs-number">2.</span>频道（channel）：构建在服务器内部，负责接收发布者发送的消息，并将消息转发给频道的订阅者。 <br><span class="hljs-number">3.</span>模式（<span class="hljs-built_in">pattern</span>）：构建在服务器内部，负责对频道进行匹配，当被匹配的频道接到消息时，模式也会 <br>将消息转发给模式的订阅者。 <br><span class="hljs-number">4.</span>订阅者（subscriber）：通过订阅频道或者模式来获取消息的客户端。每个频道或者模式都可以有任 意多个订阅者(仅能获得开始订阅以后的消息，订阅前的消息无法获得)。<br></code></pre></td></tr></table></figure><h5 id="订阅命令">订阅命令</h5><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">订阅频道</span><br>SUBSCRIBE channel [channel ...]<br>订阅给定的一个或多个频道。<br>node02:15&gt;SUBSCRIBE wo<br>Switch to Pub/Sub mode. Close console tab to stop listen for messages.<br> 1)  &quot;subscribe&quot;<br> 2)  &quot;wo&quot;<br> 3)  &quot;1&quot;<br> 1)  &quot;message&quot;<br> 2)  &quot;wo&quot;<br> 3)  &quot;hello&quot;<br> 1)  &quot;message&quot;<br> 2)  &quot;wo&quot;<br> 3)  &quot;test&quot;<br></code></pre></td></tr></table></figure></p><h6 id="消息发布">消息发布</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node02:15&gt;PUBLISH wo hello<br>&quot;1&quot;<br></code></pre></td></tr></table></figure><h6 id="订阅多个">订阅多个</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">通配符*<br><span class="hljs-meta">redis&gt;</span><span class="bash"> PSUBSCRIBE new*</span><br></code></pre></td></tr></table></figure><h6 id="消息发布-1">消息发布</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">redis&gt;</span><span class="bash">PUBLISH new1 hello</span><br></code></pre></td></tr></table></figure><h6 id="列出指定频道订阅着数量">列出指定频道订阅着数量</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">redis&gt;</span><span class="bash"> PUBSUB numsub [channel...]</span><br></code></pre></td></tr></table></figure><h3 id="redis-事务">Redis 事务</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Redis</span> 的事务功能允许用户将多个命令包裹起来，然后一次性地、按 顺序地执行被包裹的所有命令。<br>在事务执行的过程中，服务器不会中断事务而改去执行其他命令请求，只有在事务包裹的所有命令都<br>被执行完毕之后，服务器才会去处理其他命令请求。<br></code></pre></td></tr></table></figure><h4 id="事务命令">事务命令</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">为了避免遇上以上所说的情况， 我们需要用到 Redis 的事务功能， 通过事务， 我们可以让 Redis <br>一次性地执行多个命令， 并且确保事务中的命令要么就全部都 执行，要么就一个都不执行。<br></code></pre></td></tr></table></figure><p><strong>事务命令</strong>： 作用：</p><p>MULTI 开始一个新的事务。</p><p>DISCARD 放弃事务。</p><p>EXEC 执行事务中的所有命令。</p><p><strong>开始事务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">MULTI<br>开始一个事务。 <br>在这个命令执行之后，客户端发送的所有针对数据库或者数据库键的命令都不会被立即执行，而是被放<br>入到一个事务队列里面，并返回 QUEUED 表示命令已入队。<br><span class="hljs-meta">redis&gt;</span><span class="bash"> MULTI <span class="hljs-comment"># 开始一个事务</span></span><br>OK<br><span class="hljs-meta">redis&gt;</span><span class="bash"> SET msg <span class="hljs-string">&quot;hello world&quot;</span> <span class="hljs-comment"># 将这个 SET 命令放入事务队列</span></span><br>QUEUED<br></code></pre></td></tr></table></figure><p><strong>放弃事务：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">DISCARD<br>取消事务，放弃执行事务队列中的所有命令。<br><span class="hljs-meta"> redis&gt;</span><span class="bash"> MULTI</span><br> OK<br><span class="hljs-meta"> redis&gt;</span><span class="bash"> SET msg <span class="hljs-string">&quot;hello world&quot;</span></span><br> QUEUED<br><span class="hljs-meta"> redis&gt;</span><span class="bash"> DISCARD <span class="hljs-comment"># 事务已被取消</span></span><br> OK<br></code></pre></td></tr></table></figure><p><strong>执行事务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">EXEC<br>按照命令被入队到事务队列中的顺序，执行事务队列中的所有命令。<br><span class="hljs-meta">redis&gt;</span><span class="bash"> MULTI</span> <br>OK<br><span class="hljs-meta">redis&gt;</span><span class="bash"> SET msg <span class="hljs-string">&quot;hello world&quot;</span></span><br>QUEUED<br><span class="hljs-meta">redis&gt;</span><span class="bash"> SET msg <span class="hljs-string">&quot;hello world&quot;</span></span><br>QUEUED<br><span class="hljs-meta">redis&gt;</span><span class="bash"> EXEC</span><br></code></pre></td></tr></table></figure><h3 id="redis-安全">Redis 安全</h3><p>我们可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">实例<br>我们可以通过以下命令查看是否设置了密码验证：<br>127.0.0.1:6379&gt; CONFIG get requirepass<br>1) &quot;requirepass&quot;<br>2) &quot;&quot;<br>默认情况下 requirepass 参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。<br>你可以通过以下命令来修改该参数：<br>127.0.0.1:6379&gt; CONFIG set requirepass &quot;weitrue&quot;<br>OK<br>127.0.0.1:6379&gt; CONFIG get requirepass<br>1) &quot;requirepass&quot;<br>2) &quot;weitrue&quot;<br></code></pre></td></tr></table></figure><p>设置密码后，客户端连接 redis 服务就需要密码验证，否则无法执行命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>AUTH 命令基本语法格式如下：<br>127.0.0.1:6379&gt; AUTH password<br>实例<br>127.0.0.1:6379&gt; AUTH &quot;weitrue&quot;<br>OK<br></code></pre></td></tr></table></figure><p>取消密码 —重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">AUTH命令跟其他redis命令一样，是没有加密的；阻止不了攻击者在网络上窃取你的密码；<br></code></pre></td></tr></table></figure><h3 id="redis-性能测试">Redis 性能测试</h3><p>Redis 性能测试是通过同时执行多个命令实现的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">语法<br>redis 性能测试的基本命令如下：<br><br>redis-benchmark [option] [option value]<br>注意：该命令是在 redis 的目录下执行的，而不是 redis 客户端的内部指令。<br><br>实例<br>以下实例同时执行 10000 个请求来检测性能：<br><br>[hadoop@node02 redis-6.0.1]$ src/redis-benchmark  -h node02 -p 6379  -n 10000 -q<br>PING_INLINE: 72992.70 requests per second<br>PING_BULK: 70921.98 requests per second<br>SET: 66666.66 requests per second<br>GET: 73529.41 requests per second<br>INCR: 75187.97 requests per second<br>LPUSH: 68493.15 requests per second<br>RPUSH: 76923.08 requests per second<br>LPOP: 74626.87 requests per second<br>RPOP: 75757.58 requests per second<br>SADD: 76335.88 requests per second<br>SPOP: 76923.08 requests per second<br>LPUSH (needed to benchmark LRANGE): 75757.58 requests per second<br>LRANGE_100 (first 100 elements): 40983.61 requests per second<br>LRANGE_300 (first 300 elements): 19120.46 requests per second<br>LRANGE_500 (first 450 elements): 13605.44 requests per second<br>LRANGE_600 (first 600 elements): 10672.36 requests per second<br>MSET (10 keys): 59880.24 requests per second<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gams">redis 性能测试工具可选参数如下所示：<br>序号选项描述                                 默认值<br><span class="hljs-number">1</span>-h指定服务器主机名                     <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-number">2</span>-p指定服务器端口                            <span class="hljs-number">6379</span><br><span class="hljs-number">3</span>-s指定服务器 socket<br><span class="hljs-number">4</span>-c指定并发连接数                             <span class="hljs-number">50</span><br><span class="hljs-number">5</span>-n指定请求数                             <span class="hljs-number">10000</span><br><span class="hljs-number">6</span>-d以字节的形式指定 <span class="hljs-keyword">SET</span>/GET 值的数据大小         <span class="hljs-number">2</span><br><span class="hljs-number">7</span>-k<span class="hljs-number">1</span>=keep alive <span class="hljs-number">0</span>=reconnect              <span class="hljs-number">1</span><br><span class="hljs-number">8</span>-rSET/GET/INCR 使用随机 key, SADD 使用随机值<br><span class="hljs-number">9</span>-P通过管道传输 &lt;numreq&gt; 请求                 <span class="hljs-number">1</span><br><span class="hljs-number">10</span>-q强制退出 redis。仅显示 query/sec 值<br>11--csv以 <span class="hljs-comment">CSV</span> 格式输出<br>12-l生成循环，永久执行测试<br>13-t仅运行以逗号分隔的测试命令列表。<br>14-I<span class="hljs-comment">Idle</span> 模式。仅打开 <span class="hljs-comment">N</span> 个 <span class="hljs-comment">idle</span> 连接并等待。<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">以下实例使用了多个参数来测试 redis 性能：</span><br><br>[hadoop@node02 redis-6.0.1]$ src/redis-benchmark -h node02 -p 6379 -t set,lpush -n 10000 -q<br>SET: 68493.15 requests per second<br>LPUSH: 67114.09 requests per second<br>以上实例中主机为 node01，端口号为 6379，执行的命令为 set,lpush，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。<br></code></pre></td></tr></table></figure><h3 id="redis的三种集群方式">redis的三种集群方式：</h3><h4 id="主从复制架构">主从复制架构</h4><p>在Redis中， <code>SLAVEOF  命令或者设置</code>slaveof 选项，让一个服务器去复制（replicate）另一个服务器，被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）。 <code>SLAVEOF no one</code>命令取消成为从节点。</p><p><img src="/images/db/redis/image-20200526181040434.png"></p><p><img src="/images/db/redis/image-20200526181105914.png"></p><p><img src="/images/db/redis/image-20200527001642571.png"></p><h5 id="作用">作用</h5><ul><li>读写分离:master写,slave读。</li><li>负载均衡:由slave分担master负载,并根据需求,改变slave的数量,通过多个从节点读取负载。</li><li>故障恢复:当master出现问题的时候,由slave提供服务,实现快速恢复。</li><li>数据冗余:实时备份。</li></ul><h5 id="工作原理">工作原理</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">三阶段:</span><br> 1.建立连接<br> 2.数据同步<br> 3.命令传播阶段<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200526191458864.png"></p><p><img src="/images/db/redis/image-20200527001702103.png"></p><h5 id="配置">配置</h5><p>使用主从复制这种模式，实现node01作为主节点，node02与node03作为从节点，并且将node01所有的数据全部都同步到node02与node03服务器</p><p>第一步: 将node01上的redis拷贝到node02和node03上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r /weitrue/install/redis-6.0.1/ node02:/weitrue/install/<br>scp -r /weitrue/install/redis-6.0.1/ node03:/weitrue/instal/<br></code></pre></td></tr></table></figure><p>第二步：node02与node03服务器安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> node02与node03服务器修改redis配置文件</span><br><span class="hljs-meta">#</span><span class="bash"> node02服务器修改配置文件命令如下</span><br><span class="hljs-meta">#</span><span class="bash">执行以下命令修改redis配置文件</span><br>cd /weitrue/install/redis-6.0.1/<br>mkdir -p /weitrue/install/redis-6.0.1/logs<br>mkdir -p /weitrue/install/redis-6.0.1/redisdata<br>vim redis.conf<br>bind node02<br>daemonize yes<br>pidfile /weitrue/install/redis-6.0.1/redis_6379.pid<br>logfile &quot;/weitrue/install/redis-6.0.1/logs/redis.log&quot;<br>dir /weitrue/install/redis-6.0.1/redisdata<br>slaveof node01 6379<br><span class="hljs-meta">#</span><span class="bash"> node03服务器修改配置文件命令如下</span><br><span class="hljs-meta">#</span><span class="bash">执行以下命令修改redis配置文件</span><br>cd /weitrue/install/redis-6.0.1/<br>mkdir -p /weitrue/install/redis-6.0.1/logs<br>mkdir -p /weitrue/install/redis-6.0.1/redisdata<br>vim redis.conf<br>bind node03<br>daemonize yes<br>pidfile /var/run/redis_6379.pid<br>logfile &quot;/weitrue/install/redis-6.0.1/logs/redis.log&quot;<br>dir /weitrue/install/redis-6.0.1/redisdata<br>slaveof node01 6379<br></code></pre></td></tr></table></figure><p>第三步、启动node02与node03机器的redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">node02执行以下命令启动redis服务</span><br>cd  /weitrue/install/redis-6.0.1/<br>src/redis-server  redis.conf<br><span class="hljs-meta">#</span><span class="bash">ode03执行以下命令启动redis服</span><br>cd  /weitrue/install/redis-6.0.1/<br>src/redis-server  redis.conf<br></code></pre></td></tr></table></figure><p>启动成功便可以实现redis的主从复制，node01可以读写操作，node02与node03只支持读取操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">注意:务必关掉防火墙</span><br><span class="hljs-meta">#</span><span class="bash">连接node01</span><br>src/redis-cli -h node01<br>set weitrue 1234<br><span class="hljs-meta">#</span><span class="bash">连接node02</span><br>src/redis-cli -h node02<br>get weitrue<br><span class="hljs-meta">#</span><span class="bash">查看集群信息</span><br>info<br><span class="hljs-meta">#</span><span class="bash">主从断开连接</span><br>slaveof no one<br></code></pre></td></tr></table></figure><h4 id="redis当中的sentinel架构">redis当中的Sentinel架构</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">Sentinel（哨兵）是Redis 的高可用性解决方案：由一个或多个Sentinel 实例 组成的Sentinel 系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器。<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200527141509519.png"></p><p><img src="/images/db/redis/image-20200527141538252.png"></p><p>作用:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"> 监控:不断的检查<span class="hljs-literal">master</span>和<span class="hljs-literal">slave</span>是否正常运行.<span class="hljs-literal">master</span>存活检测,<span class="hljs-literal">master</span>与<span class="hljs-literal">slave</span>运行情况检测.<br><br> 通知:当被监控的服务器出现问题时,向其他的(哨兵间或者客户端)发送通知.<br><br>自动故障转移:断开<span class="hljs-literal">master</span>与<span class="hljs-literal">slave</span>连接,选取一个<span class="hljs-literal">slave</span>作为<span class="hljs-literal">master</span>,将其他的<span class="hljs-literal">slave</span>连接到新的<span class="hljs-literal">master</span>,并告知客户端新的服务器地址.<br>注意:哨兵通常也是一台服务器,但不提供服务,通常的哨兵配置为积数.<br></code></pre></td></tr></table></figure><p>配置:</p><p>第一步：三台机器修改哨兵配置文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#三台机器执行以下命令修改redis的哨兵配置文件</span><br><span class="hljs-attribute">cd</span> /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">vim</span> sentinel.conf<br><span class="hljs-comment"># 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，192.168.11.128代表监控的主服务器，6379代表端口，2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</span><br><span class="hljs-comment">#修改bind配置，每台机器修改为自己对应的主机名</span><br><span class="hljs-attribute">bind</span> node<span class="hljs-number">01</span>  <br><span class="hljs-comment">#配置sentinel服务后台运行</span><br><span class="hljs-attribute">daemonize</span> yes<br><span class="hljs-comment">#修改三台机器监控的主节点，现在主节点是node01服务器</span><br><span class="hljs-attribute">sentinel</span> monitor mymaster <span class="hljs-number">192.168.8.100</span> <span class="hljs-number">6379</span> <span class="hljs-number">2</span><br><span class="hljs-comment"># sentinel monitor代表监控，mymaster是服务名称,可以自定义;node01 代表监控的主服务器;6379代表端口,2代表只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作。</span><br></code></pre></td></tr></table></figure><p>第二步：三台机器启动哨兵服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">三台机器执行以下命令启动哨兵服务</span><br>cd /weitrue/install/redis-6.0.1/<br>src/redis-sentinel sentinel.conf <br></code></pre></td></tr></table></figure><p>第三步：node01服务器杀死redis服务进程</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">使用kill  <span class="hljs-number">-9</span>命令杀死redis服务进程，模拟redis故障宕机情况<br>过一段时间之后，就会在<span class="hljs-symbol">node02</span>与<span class="hljs-symbol">node03</span>服务器选择一台服务器来切换为主节点 <br></code></pre></td></tr></table></figure><p>原理:</p><p><img src="/images/db/redis/image-20200527175422937.png"></p><p><img src="/images/db/redis/image-20200527181408612.png"></p><p><img src="/images/db/redis/image-20200527182135500.png"></p><p><img src="/images/db/redis/image-20200527184045802.png"></p><h4 id="redis集群">redis集群</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">Redis 集群是一个提供在多个Redis节点之间共享数据的程序集。<br><br>Redis 集群并不支持同时处理多个键的 Redis 命令，因为这需要在多个节点间移动数据，这样会降低redis集群的性能，在高负载的情况下可能会导致不可预料的错误。<br><br>Redis 集群通过分区来提供一定程度的可用性，即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。<br><br> Redis 集群的优势:<br><br><span class="hljs-number">1</span>.缓存永不宕机：启动集群，永远让集群的一部分起作用。主节点失效了子节点能迅速改变角色成为主节点，整个集群的部分节点失败或者不可达的情况下能够继续处理命令；<br><br><span class="hljs-number">2</span>.迅速恢复数据：持久化数据，能在宕机后迅速解决数据丢失的问题；<br><br><span class="hljs-number">3</span>.Redis可以使用所有机器的内存，变相扩展性能；<br><br><span class="hljs-number">4</span>.使Redis的计算能力通过简单地增加服务器得到成倍提升,Redis的网络带宽也会随着计算机和网卡的增加而成倍增长；<br><br><span class="hljs-number">5</span>.Redis集群没有中心节点，不会因为某个节点成为整个集群的性能瓶颈;<br><span class="hljs-number">6</span>.异步处理数据，实现快速读写。 <br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200524161751571.png"></p><h5 id="集群数据存储设计及通信原理">集群数据存储设计及通信原理</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">redis集群数据存储设计<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/image-20200524162113663.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">redis集群通信原理  <br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/1590146339566.png"></p><h5 id="redis集群环境搭建">redis集群环境搭建</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">由于redis集群当中最少需要三个主节点，每个主节点，最少需要一个对应的从节点，所以搭建redis集群最少需要三主三从的配置，因此redis集群最少需要<span class="hljs-number">6</span>台redis的实例。我们这里用<span class="hljs-symbol">node01</span>通过配置<span class="hljs-number">6</span>个端口，实现redis集群的环境搭建<br></code></pre></td></tr></table></figure><h6 id="node01服务器解压redis压缩包">node01服务器解压redis压缩包</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#node01执行以下命令重新解压redis压缩包到/weitrue路径下</span><br>cd <span class="hljs-regexp">/weitrue/</span>soft/<br>tar -zxvf redis-<span class="hljs-number">6.0</span>.<span class="hljs-number">1</span>.tar.gz -C ..<span class="hljs-regexp">/instal/</span><br></code></pre></td></tr></table></figure><h6 id="安装redis必须依赖环境并进行编译">安装redis必须依赖环境并进行编译</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#node01执行以下命令安装redis的依赖环境</span><br>su root<br>yum <span class="hljs-literal">-y</span> install gcc<span class="hljs-literal">-c</span>++ tcl<br><span class="hljs-comment"># 查看gcc版本是否在5.3以上，centos7.6默认安装4.8.5</span><br>gcc <span class="hljs-literal">-v</span><br><span class="hljs-comment"># 升级gcc到5.3及以上,如下：</span><br>升级到gcc <span class="hljs-number">9.3</span>：<br>yum <span class="hljs-literal">-y</span> install centos<span class="hljs-literal">-release</span><span class="hljs-literal">-scl</span><br>yum <span class="hljs-literal">-y</span> install devtool<span class="hljs-built_in">set-9</span><span class="hljs-literal">-gcc</span> devtool<span class="hljs-built_in">set-9</span><span class="hljs-literal">-gcc</span><span class="hljs-literal">-c</span>++ devtool<span class="hljs-built_in">set-9</span><span class="hljs-literal">-binutils</span><br>scl enable devtool<span class="hljs-built_in">set-9</span> bash<br>需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。<br>如果要长期使用gcc <span class="hljs-number">9.3</span>的话：<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile<br><span class="hljs-comment">#这样退出shell重新打开就是新版的gcc了</span><br><span class="hljs-comment">#对redis进行编译</span><br><span class="hljs-built_in">cd</span> /weitrue/redis<span class="hljs-literal">-6</span>.<span class="hljs-number">0.1</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h6 id="创建redis不同实例的配置文件夹">创建redis不同实例的配置文件夹</h6><p>创建文件夹，并将redis的配置文件拷贝到以下这些目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#node01:</span><br><span class="hljs-attribute">cd</span> /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">mkdir</span> -p /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/clusters/<span class="hljs-number">7001</span><br><span class="hljs-attribute">mkdir</span> -p /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/clusters/<span class="hljs-number">7002</span><br><span class="hljs-attribute">mkdir</span> -p /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/clusters/<span class="hljs-number">7003</span><br><span class="hljs-attribute">mkdir</span> -p /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/clusters/<span class="hljs-number">7004</span><br><span class="hljs-attribute">mkdir</span> -p /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/clusters/<span class="hljs-number">7005</span><br><span class="hljs-attribute">mkdir</span> -p /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>/clusters/<span class="hljs-number">7006</span><br></code></pre></td></tr></table></figure><h6 id="修改redis的六个配置文件">修改redis的六个配置文件</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#node01执行以下命令修改redis的配置文件</span><br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>logs<br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7001</span><br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7002</span><br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7003</span><br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7004</span><br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7005</span><br>mkdir -p <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7006</span><br></code></pre></td></tr></table></figure><p>分别修改6个配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">vim  /weitrue/install/redis-<span class="hljs-number">6.0</span><span class="hljs-number">.1</span>/redis.conf<br>bind node01<br>port <span class="hljs-number">7001</span>                                 <span class="hljs-comment">//默认ip为127.0.0.1 需要改为其他节点机器可访问的ip </span><br>cluster-enabled yes                       <span class="hljs-comment">//开启集群把注释#去掉</span><br>cluster-config-file nodes-<span class="hljs-number">7001.</span>conf      <span class="hljs-comment">//集群的配置  配置文件首次启动自动生成 7001,7002,7003</span><br>cluster-node-timeout <span class="hljs-number">5000</span>                 <span class="hljs-comment">//请求超时  默认15秒，可自行设置</span><br>appendonly yes                           <span class="hljs-comment">//aof日志开启  有需要就开启，它会每次写操作都记录一条日志</span><br>daemonize yes<br>pidfile /<span class="hljs-keyword">var</span>/run/redis_7001.pid<br>logfile <span class="hljs-string">&quot;/weitrue/install/redis-6.0.1/logs/7001.log&quot;</span><br>dir /weitrue/install/redis-<span class="hljs-number">6.0</span><span class="hljs-number">.1</span>/redisdata/<span class="hljs-number">7001</span><br><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle">注意：port：对应的每台机器的端口号，<br>    第一台是：port <span class="hljs-number">7001</span><br>    第二台：port  <span class="hljs-number">7002</span><br>    ....<br>    第六台：port <span class="hljs-number">7006</span><br>    <br>    第一台： cluster-config-<span class="hljs-keyword">file</span> nodes-<span class="hljs-number">7001</span>.conf<br>    ....  <br>    第六台：cluster-config-<span class="hljs-keyword">file</span> nodes-<span class="hljs-number">7006</span>.conf<br>    <br>    第一台： dir <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7001</span><br>    .... <br>    第六台：dir <span class="hljs-regexp">/weitrue/i</span>nstall<span class="hljs-regexp">/redis-6.0.1/</span>redisdata/<span class="hljs-number">7006</span><br></code></pre></td></tr></table></figure><h6 id="启动redis进程">启动redis进程</h6><p>node01执行以下命令来启动redis集群</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/weitrue/</span>redis-<span class="hljs-number">6.0</span>.<span class="hljs-number">1</span><br>src<span class="hljs-regexp">/redis-server clusters/</span><span class="hljs-number">7001</span>/redis.conf<br>src<span class="hljs-regexp">/redis-server clusters/</span><span class="hljs-number">7002</span>/redis.conf<br>src<span class="hljs-regexp">/redis-server clusters/</span><span class="hljs-number">7003</span>/redis.conf<br>src<span class="hljs-regexp">/redis-server clusters/</span><span class="hljs-number">7004</span>/redis.conf<br>src<span class="hljs-regexp">/redis-server clusters/</span><span class="hljs-number">7005</span>/redis.conf<br>src<span class="hljs-regexp">/redis-server clusters/</span><span class="hljs-number">7006</span>/redis.conf<br></code></pre></td></tr></table></figure><h6 id="创建redis集群">创建redis集群</h6><p>node01执行以下命令创建redis集群</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /weitrue/install/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">src</span>/redis-cli --cluster create <span class="hljs-number">192.168.8.100:7001</span> <span class="hljs-number">192.168.8.100:7002</span> <span class="hljs-number">192.168.8.100:7003</span> <span class="hljs-number">192.168.8.100:7004</span> <span class="hljs-number">192.168.8.100:7005</span> <span class="hljs-number">192.168.8.100:7006</span> --cluster-replicas <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>注意：如果创建cluster集群出现以下这个错误</p><p><img src="/images/db/redis/2.png"></p><p>那么我们需要清空所有redis节点的所有数据</p><p>执行以下命令连接到各个redis节点，然后清空数据</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gcode">示例：<br>[root@<span class="hljs-symbol">node01</span> redis<span class="hljs-number">-6.0</span><span class="hljs-number">.1</span>]<span class="hljs-attr"># src/redis-cli  -h node01</span> -c -p <span class="hljs-number">7001</span><br><span class="hljs-symbol">node01</span>:<span class="hljs-number">7001</span>&gt; flushall <br>OK<br><span class="hljs-symbol">node01</span>:<span class="hljs-number">7001</span>&gt; cluster reset<br>OK<br><span class="hljs-symbol">node01</span>:<span class="hljs-number">7001</span>&gt; quit<br><span class="hljs-attr">#依次执行6</span>台机器<br></code></pre></td></tr></table></figure><p>重新创建redis集群</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">src/redis-cli --cluster create <span class="hljs-number">192.168.8.100</span>:<span class="hljs-number">7001 192.168</span>.<span class="hljs-number">8.100:7002</span> <span class="hljs-number">192.168.8.100</span>:<span class="hljs-number">7003 192.168</span>.<span class="hljs-number">8.100:7004</span> <span class="hljs-number">192.168.8.100</span>:<span class="hljs-number">7005 192.168</span>.<span class="hljs-number">8.100:7006</span> --cluster-replicas <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="连接redis客户端-1">连接redis客户端</h6><p>node01执行以下命令连接redis客户端</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /weitrue/redis-<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">src</span>/redis-cli  -h node<span class="hljs-number">01</span> -c -p <span class="hljs-number">7001</span><br></code></pre></td></tr></table></figure><h5 id="redis集群管理">redis集群管理</h5><p>添加一个新节点作为主节点</p><p>启动新节点的redis服务，然后添加到集群当中去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1.创建文件夹</span><br>mkdir -p /weitrue/install/redis-6.0.1/redisdata/7007<br>mkdir -p /weitrue/install/redis-6.0.1/redisdata/7008<br>mkdir -p /weitrue/install/redis-6.0.1/clusters/7007<br>mkdir -p /weitrue/install/redis-6.0.1/clusters/7008<br><span class="hljs-meta">#</span><span class="bash">2.修改redis.conf</span><br>vim /weitrue/install/redis-6.0.1/clusters/7007/redis.conf<br>vim /weitrue/install/redis-6.0.1/clusters/7008/redis.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">启动服务</span><br>src/redis-server clusters/7007/redis.conf<br><span class="hljs-meta">#</span><span class="bash">添加服务</span><br>src/redis-cli --cluster add-node 192.168.8.100:7007 192.168.8.100:7001<br><span class="hljs-meta">#</span><span class="bash">解释:</span><br>192.168.8.100:7007 #服务器ip:端口;<br>192.168.8.100:7001 #集群中任意一台ip:端口<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看信息</span><br>src/redis-cli --cluster info 192.168.8.100:7001<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">检测集群</span><br>src/redis-cli --cluster check 192.168.8.100:7007 <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">重新分片</span><br><span class="hljs-meta">#</span><span class="bash">命令格式</span><br>src/redis-cli --cluster reshard --from &lt;node-id&gt; --to &lt;node-id&gt; --slots &lt;number of slots&gt; --yes &lt;host&gt;:&lt;port&gt;<br><span class="hljs-meta">#</span><span class="bash">实例:</span><br>src/redis-cli --cluster reshard 192.168.8.100:7001<br><span class="hljs-meta">#</span><span class="bash">解释:</span><br>192.168.8.100:7001 #集群中任务一个节点<br><span class="hljs-meta">#</span><span class="bash">下面代表需要输入参数的提示</span><br>1.How many slots do you want to move (from 1 to 16384)?4096　　　　 <br><span class="hljs-meta">#</span><span class="bash">拿出4096个<span class="hljs-built_in">hash</span> 槽</span><br>2.What is the receiving node ID? c5e0da48f335c46a2ec199faa99b830f537dd8a0 <br><span class="hljs-meta">#</span><span class="bash">7007服务所在的节点的id值</span><br>3.Source node #1: all <br><span class="hljs-meta">#</span><span class="bash">从当前所有master服务器获取<span class="hljs-built_in">hash</span>槽</span><br>4.Do you want to proceed with the proposed reshard plan (yes/no)?yes　<br><span class="hljs-meta">#</span><span class="bash"> 同意以上配置</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">查看集群信息</span><br>src/redis-cli --cluster info 192.168.8.100:7001<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">添加slave角色到集群里</span><br><span class="hljs-meta">#</span><span class="bash">启动7008服务</span><br>src/redis-server clusters/7008/redis.conf<br><span class="hljs-meta">#</span><span class="bash">添加副本</span><br>src/redis-cli --cluster add-node  --cluster-slave 192.168.8.100:7008 192.168.8.100:7001<br><span class="hljs-meta">#</span><span class="bash">解释</span><br>192.168.8.100:7008 #从服务器ip:端口;<br>192.168.8.100:7001 #集群中任意一台ip:端口<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">删除某一节点redis服务</span><br>src/redis-cli --cluster del-node 192.168.8.100:7008 4bf2fc80931392c248a7ae359bd1bf540872c688<br></code></pre></td></tr></table></figure><h3 id="redis击穿穿透雪崩预热">Redis击穿、穿透、雪崩、预热</h3><h4 id="缓存穿透">缓存穿透</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">问题:</span><br>Redis服务器命中率随时间逐步降低<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gauss">缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。<br><br>这里需要注意和缓存击穿的区别，缓存击穿，是指一个<span class="hljs-built_in">key</span>非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个<span class="hljs-built_in">key</span>在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。<br><br>为了避免缓存穿透其实有很多种解决方案。下面介绍几种。<br><br><span class="hljs-number">1.1</span> 白名单策略:<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br>  将<span class="hljs-built_in">id</span>放在bitmaps中,<span class="hljs-built_in">id</span>作为bitmaps的<span class="hljs-built_in">offset</span><br><span class="hljs-number">1.1</span><span class="hljs-number">.2</span> 布隆过滤器:<br>那这个布隆过滤器是如何解决redis中的缓存穿透呢？很简单首先也是对所有可能查询的参数以hash形式存储，当用户想要查询的时候，使用布隆过滤器发现不在集合中，就直接丢弃，不再对持久层查询。<br></code></pre></td></tr></table></figure><p>1.2 缓存空对象</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；注意设置key的过期时间.<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/1589366209279.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">但是这种方法会存在一个问题：<br><br>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。<br></code></pre></td></tr></table></figure><p>1.3 实施监控</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">监控命中率(业务正常范围时,通常会有一个波动值),根据不同的情况,设置黑名单.<br></code></pre></td></tr></table></figure><h4 id="缓存雪崩">缓存雪崩</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">缓存雪崩是指，缓存层出现了错误，不能正常工作了。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。经常出现的情况是<span class="hljs-number">408,500</span>的错误页面.<br></code></pre></td></tr></table></figure><p><img src="/images/db/redis/1589366273686.png"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">2</span>、解决方案<br><br>（<span class="hljs-number">1</span>）redis高可用<br><br>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。<br><br>（<span class="hljs-number">2</span>）限流降级<br><br>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个<span class="hljs-built_in">key</span>只允许一个线程查询数据和写缓存，其他线程等待。<br><br>（<span class="hljs-number">3</span>）数据预热<br><br> 在即将发生大并发访问前手动触发加载缓存不同的<span class="hljs-built_in">key</span>，设置不同的过期时间，让缓存失效的时间点尽量均匀。<br></code></pre></td></tr></table></figure><h4 id="缓存击穿">缓存击穿</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">  缓存击穿是在高并发的条件下读取缓存数据，多用户同时请求同一个缓存数据，如果缓存中没有这条数据，那么这些用户又会同时去数据库中查询这条数据，浪费了系统资源，有悖于缓存数据的初衷，严重的话可能会造成服务器宕机的风险。<br>  解决方案：<br>   <span class="hljs-number">1</span>）.使用同步锁 <span class="hljs-keyword">synchronized</span> 关键字，修饰在获取缓存的方法里面，保证在多用户同时请求条件下，只有第一个进入的线程去判断是否要查询数据库并存入缓存，其他线程只需在第一个线程结束后，从缓存中读取数据即可，无需再查询数据库。<br>上面是对缓存穿透的再次优化，加入线程同步锁 以及 双重检查锁.<br>双重检查锁：<span class="hljs-number">1</span>.避免当缓存数据没有失效时，其他线程排队等待。<br>          <span class="hljs-number">2</span>.当第一个线程从数据库中获取到数据并存入缓存中时，其他线程直接从缓存获取数据即可。<br><span class="hljs-number">2</span>)不设置缓存时间，由后台创建定时任务去维护这部分缓存数据。这种方法请求时直接从缓存中获取数据，无需再判断是否从数据库中获取，定时任务也可在请求较少的时间段分批更新缓存数据。<br>    当然代码量、代码复杂度增大，分批更新代表需要多个定时任务去维护缓存数据，同时更新有可能会造成缓存雪崩的情况。<br></code></pre></td></tr></table></figure><h4 id="数据预热">数据预热</h4><pre><code class="hljs">缓存预热:  提前将相关的缓存数据直接加载到缓存系统,避免用户在请求的时候,先查询数据库,然后再将数据缓存的问题.问题: 1.主从之间数据吞吐量大 2.数据同步操作频度高方案: 1.统计访问频度较高的热点数据,比如直接写个缓存刷新页面，上线时手工操作下 2.数据量不大，可以在项目启动的时候自动进行加载 3.定时刷新缓存</code></pre><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Datebase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datebase</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【数据库】MySQL与TiDB学习笔记</title>
    <link href="/2021/03/21/mysql/"/>
    <url>/2021/03/21/mysql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>最流行的<a href="https://baike.baidu.com/item/关系型数据库管理系统/696511">关系型数据库管理系统</a>之一。在 WEB 应用方面，是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a>。<span id="more"></span></p></blockquote><h3 id="文件存储"><strong>文件存储</strong></h3><p><img src="/images/db/mysql/logfile.png"></p><p>MySQL的文件主要分为两大类，MySQl服务的文件和存储引擎的文件，主要分为三类：</p><ul><li>日志文件：MySQL实例写入的各种日志文件。</li><li>表结构文件：存放表结构定义的文件，.frm后缀文件，与存储引擎无关。</li><li>存储引擎数据文件：存储引擎负责对表中的数据进行读取和写入，每个存储引擎以自己的方式来保存表中的数据，在不同的存储引擎中数据存放的方式一般不同。</li></ul><h4 id="日志文件">日志文件</h4><p>记录数据库操作信息和错误信息，主要包括<em>错误日志</em>，<em>二进制日志</em>， <em>查询日志</em>， <em>慢查询日志</em>， <em>中继日志</em>等。</p><p>InnoBD相关的日志有：事务重做日志（redo log）和回滚日志（undo log）</p><p>查看命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;log_%&#x27;;<br></code></pre></td></tr></table></figure><h4 id="错误日志errorlog">错误日志（errorlog）</h4><p>​ 用来记录 MySQL 服务器运行过程中遇到的所有严重错误信息以及MySQL每次启动和关闭的详细信息。比如，无法加载 MySQL 数据库的数据文件，或权限不正确等都会被记录在此，还有复制环境下，从服务器进程的信息也会被记录进错误日志。默认情况下，错误日志是开启的，从5.5.7开始无法关闭错误日志。</p><p>​ 错误日志是存储在数据库的数据文件目录中，名称为 hostname.err，其中 hostname 为服务器主机名。在 MySQL 5.5.7 之前，数据库管理员可以删除很长时间之前的错误日志，以节省服务器上的硬盘空间， MySQL 5.5.7 之后，服务器将关闭此项功能，只能使用重命名原来的错误日志文件，手动冲洗日志创建一个新的，命令为：</p><p><code>mv hostname.err  hostname.err.old mysqladmin flush-logs</code></p><p>默认的错误日志名称为 hostname.err，其中 hostname 为服务器主机名。</p><p>错误日志所记录的信息是可以通过log-error和log-warnings来定义的，其中log-error是定义是否启用错误日志功能和错误日志的存储位置，log-warnings是定义是否将警告信息也定义至错误日志中。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 可以直接定义为文件路径也可以为ON|OFF</span><br>log_error=/var/<span class="hljs-built_in">log</span>/mysqld.log<br><span class="hljs-comment"># 定义警告信息，默认为开启状态，默认2， 关闭设置为0</span><br>log_warnings=2<br></code></pre></td></tr></table></figure><p><code>log_warnings=0</code>,不记录警告信息，只记录错误信息</p><p><code>log_warnings=1</code>,记录警告信息，错误日志包含错误信息和警告信息</p><p><code>log_warnings&gt;1</code>,记录警告信息，访问时报错和访问拒接的连接错误信息也会被记录到错误日志中</p><p>MySQL 5.7.2之前默认为1， 5.7.2起默认值为2。</p><h4 id="查询日志">查询日志</h4><p>查询日志在 MySQL 中被称为 general log(通用日志)，查询日志里面记录了<strong>数据库执行的所有命令</strong>。不管语句是否正确，都会被记录，具体原因如下:</p><ul><li><p>insert 查询为了避免数据冲突，如果此前插入过数据，当前插入的数据如果跟主键或唯一键的数据重复肯定会报错；</p></li><li><p>update 时也会查询因为更新的时候很可能会更新某一块数据；</p></li><li><p>delete 查询，只删除符合条件的数据；</p></li></ul><p>因此都会产生日志，在并发操作非常多的场景下，查询信息会非常多，那么如果都记录下来会导致 IO 非常大，影响 MySQL 性能。因此如果不是在调试环境下，是不建议开启查询日志功能的。</p><p>查询日志的开启有助于帮助我们分析哪些语句执行密集，执行密集的 select 语句对应的数据是否能够被缓存，同时也可以帮助我们分析问题。所以，可以根据实际情况来决定是否开启查询日志。</p><p>查询日志模式是关闭的，可以通过以下命令开启查询日志：</p><p><code>set global generallog=1 set global logoutput='table';</code></p><p><code>general_log=1</code> 为开启查询日志，0 为关闭查询日志，这个设置命令即时生效，不用重启 MySQL 服务器。</p><h4 id="慢查询日志">慢查询日志</h4><p>慢查询会导致 CPU、IOPS、内存消耗过高，当数据库遇到性能瓶颈时，大部分时间都是由于慢查询导致的。开启慢查询日志，可以让 MySQL 记录下查询超过指定时间的语句，之后运维人员通过定位分析，能够很好的优化数据库性能。默认情况下，慢查询日志是不开启的，只有手动开启了，慢查询才会被记录到慢查询日志中。使用如下命令记录当前数据库的慢查询语句：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 开启慢查询日志</span><br>slowquerylog=ON<br><span class="hljs-comment"># 慢查询阈值，单位秒</span><br>long_query_time=10<br><span class="hljs-comment"># 慢查询日志文件名</span><br><span class="hljs-comment"># 没有指定，默认名为 hostname-slow.log hostname为主机名</span><br><span class="hljs-comment"># 需要指定，不是绝对路径</span><br>slow_query_files=file_name<br></code></pre></td></tr></table></figure><p>使用命令 <code>set global slowquerylog='ON'</code> 开启慢查询日志，只是对当前数据库有效，如果 MySQL 数据库重启后就会失效。所以如果要永久生效，就要修改配置文件<code>my.cnf</code>，设置<code>slowquerylog=ON</code> 并重启 MySQL 服务器。</p><h4 id="二进制日志bin-log">二进制日志（bin log）</h4><p>通过以下命令来查询 binlog 是否开启：</p><p><code>show variables like 'log_%';</code></p><p><img src="/images/db/mysql/binlog.png"></p><p>默认是关闭的。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">log-bin=OFF<br></code></pre></td></tr></table></figure><p>需要通过配置进行开启</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">log-bin=mysql-bin<br></code></pre></td></tr></table></figure><p>其中<code>mysql-bin</code>是<code>bin log</code>日志文件的文件名前缀，<code>bin log</code>日志文件的完整名称：<code>mysql-bin-000001.log</code></p><p><code>bin log</code>是一个二进制文件，主要记录数据库所有的<code>DDL</code>语句和<code>DML</code>语句，但不包含<code>SELECT、SHOW</code>语句内容。<code>DDL</code>语句直接记录到<code>bin log</code>日志中，<code>DML</code>语句必须通过事务提交才能记录到<code>bin log</code>日志中。<code>bin log</code> 中记录了对 MySQL 数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其它额外信息。</p><p><code>bin log</code>主要用于实现mysql<strong>主从复制、数据备份、数据恢复</strong>。</p><ul><li><p>恢复（<code>recovery</code>）：某些数据的恢复需要二进制日志。比如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行 <code>point-in-time</code> 的恢复；</p></li><li><p>复制（<code>replication</code>）：其原理与恢复类似，通过复制和执行二进制日志使一台远程的MySQL数据库（一般称为 <code>slave</code> 或者 <code>standby</code>）与一台 MySQL 数据库（一般称为 <code>master</code> 或者 <code>primary</code>）进行实时同步；</p></li><li><p>审计（<code>audit</code>）：用户可以通过二进制日志中的信息来进行审计，判断是否有对数据库进行注入攻击。</p></li></ul><p>除了上面介绍的几个作用外，<code>binlog</code> 对于事务存储引擎的崩溃恢复也有非常重要的作用，在开启 <code>binlog</code> 的情况下，为了保证 <code>binlog</code> 与 <code>redo</code> 的一致性，MySQL 将采用事务的两阶段提交协议。当 MySQL 系统发生崩溃时，事务在存储引擎内部的状态可能为 <code>prepared</code>（准备状态）和 <code>commit</code>（提交状态）两种，对于 <code>prepared</code> 状态的事务，是进行提交操作还是进行回滚操作，这时需要参考<code>binlog</code>，如果事务在 <code>binlog</code> 中存在，那么将其提交；如果不在 <code>binlog</code> 中存在，那么将其回滚，这样就保证了数据在主库和从库之间的一致性。</p><p>binlog 格式分为: STATEMENT、ROW 和 MIXED 三种：</p><ul><li><p>STATEMENT 格式的 binlog 记录的是数据库上执行的原生 SQL 语句。这种格式的优点是简单，简单地记录和执行这些语句，能够让主备保持同步，在主服务器上执行的 SQL 语句，在从服务器上执行同样的语句。另一个好处是二进制日志里的时间更加紧凑，所以相对而言，基于语句的复制模式不会使用太多带宽，同时也节约磁盘空间。并且通过 mysqlbinlog 工具容易读懂其中的内容。缺点就是同一条 SQL 在主库和从库上执行的时间可能稍微或很大不相同，因此在传输的二进制日志中，除了查询语句，还包括了一些元数据信息，如当前的时间戳。即便如此，还存在着一些无法被正确复制的 SQL。比如，使用 <code>INSERT INTO TB1 VALUE(CUURENT_DATE())</code>这一条使用函数的语句插入的数据复制到当前从服务器上来就会发生变化，存储过程和触发器在使用基于语句的复制模式时也可能存在问题；另外一个问题就是基于语句的复制必须是串行化的，比如：InnoDB 的 next-key 锁等，并不是所有的存储引擎都支持基于语句的复制；</p></li><li><p>ROW 格式是从 MySQL 5.1 开始支持基于行的复制，也就是基于数据的复制，基于行的更改。这种方式会将实际数据记录在二进制日志中，它有其自身的一些优点和缺点，最大的好处是可以正确地复制每一行数据，一些语句可以被更加有效地复制，另外就是几乎没有基于行的复制模式无法处理的场景，对于所有的 SQL 构造、触发器、存储过程等都能正确执行；它的缺点就是二进制日志可能会很大，而且不直观，所以，你不能使用 mysqlbinlog 来查看二进制日志，也无法通过看二进制日志判断当前执行到那一条 SQL 语句。现在对于 ROW 格式的二进制日志基本是标配了，主要是因为它的优势远远大于缺点，并且由于 ROW 格式记录行数据，所以可以基于这种模式做一些 DBA 工具，比如数据恢复，不同数据库之间数据同步等；</p></li><li><p>MIXED 也是 MySQL 默认使用的二进制日志记录方式，但 MIXED 格式默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。比如用到 UUID()、USER()、CURRENTUSER()、ROWCOUNT() 等无法确定的函数。</p></li></ul><h4 id="回滚日志undo-log"><strong>回滚日志(<code>undo log</code>)</strong></h4><p>用于存储日志被修改前的值，从而保证如果修改出现异常，可以使用 <code>undo log</code>日志来实现回滚操作。<code>undo log</code>和<code>redo log</code> 记录物理日志不一样，它是逻辑日志，可以认为当 <code>delete</code> 一条记录时，<code>undo log</code> 中会记录一条对应的<code>insert</code> 记录，反之亦然，当 <code>update</code> 一条记录时，它记录一条对应相反的 <code>update</code> 记录，当执行 rollback 时，就可以从 <code>undo log</code> 中的逻辑记录读取到相应的内容并进行回滚。<code>undo log</code>默认存放在共享表空间中，在 <code>mySQL 5.6</code> 中，<code>undo log</code> 的存放位置还可以通过变量<code>innodbundodirectory</code>来自定义存放目录，默认值为“.”表示 <code>datadir</code>目录。</p><p>作用：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">保存事务发生前数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），即非锁定读<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">逻辑格式的体制。在执行<span class="hljs-keyword">undo</span>的时候，仅仅是将数据从逻辑上恢复之事务之前的状态，而不是从物理页面上操作实现的，这一点是不同于<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p>什么时候产生</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">事务开始前，将当前的版本生成<span class="hljs-keyword">undo</span> <span class="hljs-keyword">log</span>. <span class="hljs-keyword">undo</span>也会产生<span class="hljs-keyword">redo</span>来保证<span class="hljs-keyword">undo</span> <span class="hljs-keyword">log</span>的可靠性<br></code></pre></td></tr></table></figure><p>什么时候释放</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">当事务提交之后，<span class="hljs-keyword">undo</span> <span class="hljs-keyword">log</span>不能立马被删掉，而是放入待清理的链表，由purge线程判断是否有其他事务在使用<span class="hljs-keyword">undo</span>段中表的上一个事务之前的版本信息，决定是否可以清理<span class="hljs-keyword">undo</span> <span class="hljs-keyword">log</span>的日志空间<br></code></pre></td></tr></table></figure><p>对应物理文件：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">mysql5<span class="hljs-number">.6</span>之前，<span class="hljs-keyword">undo</span>表空间位于共享表空间的回滚段中，共享表空间默认的名称为ibdata,位于数据文件目录中。<br>mysql5<span class="hljs-number">.6</span>之后，可以配置独立文件，完成数据库初始化后生效且不能改变<span class="hljs-keyword">undo</span> <span class="hljs-keyword">log</span>文件的个数，如果初始化数据库之前没有进行相关的配置，就无法配置独立的表空间。<br></code></pre></td></tr></table></figure><h4 id="重做日志redo-log"><strong>重做日志(<code>redo log</code>)</strong></h4><p>为了最大程度的避免数据写入时，因为 IO 瓶颈造成的性能问题，MySQL 采用了这样一种缓存机制，先将数据写入内存中，再批量把内存中的数据统一刷回磁盘。为了避免将数据刷回磁盘过程中，因为掉电或系统故障带来的数据丢失问题，InnoDB 采用 <code>redo log</code> 来解决此问题。</p><p>作用：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">确保事务的持久性。<br>防止发生故障的时间，尚有脏页为写入磁盘。在重启mysql服务是，根据<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span>进行重做，从而达到事务的持久性。<br></code></pre></td></tr></table></figure><p>内容：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">物理格式的日志，激励物理数据页面的修改信息，其<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span>是顺序写入<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span> <span class="hljs-keyword">file</span>的物理文件中去的。<br></code></pre></td></tr></table></figure><p>什么时候产生</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">事务开始之后就产生<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span>. <span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span>的落盘并不是随着事务的提交才写入的，而是在事务的执行过程中便开始写入<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span>文件中的。<br></code></pre></td></tr></table></figure><p>什么时候释放</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">当对应事务的脏页写入到磁盘之后，<span class="hljs-keyword">redo</span> <span class="hljs-keyword">log</span> 的使命也就完成了，重做日志占用的空间就可以冲用（被覆盖）。<br></code></pre></td></tr></table></figure><h4 id="sql语句的交互流程">SQL语句的交互流程</h4><blockquote><p>说一下SQL语句的交互流程，包括客户端与服务端之间的交互以及服务内部的整体流程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- id是主键<br>BEGIN<br>UPDATE user SET name=&#x27;aa&#x27; WHERE id = 1 FOR UPDATE;<br>COMMIT;<br></code></pre></td></tr></table></figure><p><img src="/images/db/mysql/sqlquery.png"></p><p><img src="/images/db/mysql/querylogic.png"></p><h5 id="连接器">连接器</h5><p>当客户端登陆MySQL的时候，对身份认证和权限判断。</p><h5 id="查询缓存">查询缓存</h5><p>执行查询语句的时候，会先查询缓存(MySQL 8.0 版本后移除)。</p><h5 id="分析器">分析器</h5><p>假设在没有命中查询缓存的情况下，SQL请求就会来到分析器。分析器负责明确SQL要完成的功能，以及检查SQL的语法是否正确。</p><h5 id="查询优化器">查询优化器</h5><p>优化器会计算「IO 成本 + CPU」成本最小的那个索引来执行。优化器执行选出最优索引生成执行计划后，调用存储引擎接口被优化过的SQL语句。</p><h5 id="存储引擎">存储引擎</h5><p>执行 SQL 的动作是在存储引擎中完成的，数据是被存放在内存或者是磁盘中的。</p><h5 id="执行器">执行器</h5><p>执行器从准备更新一条数据到事务的提交的流程</p><ol type="1"><li>首先执行器根据 MySQL 的执行计划来查询数据，先是从缓存池中查询数据，如果没有就会去数据库中查询，如果查询到了就将其放到缓存池中。</li><li>在数据被缓存到缓存池的同时，会写入 undo log 日志文件。</li><li>更新的动作是在 BufferPool 中完成的，同时会将更新后的数据添加到 redo log buffer 中。</li><li>完成以后就可以提交事务，在提交的同时会做以下三件事。</li><li>（第一件事）将redo log buffer中的数据刷入到 redo log 文件中。</li><li>（第二件事）将本次操作记录写入到 bin log文件中。</li><li>（第三件事）将 bin log 文件名字和更新内容在 bin log 中的位置记录到redo log中，同时在 redo log 最后添加 commit 标记。</li></ol><p><img src="/images/db/mysql/sqllog.png"></p><h3 id="索引原理及优化"><strong>索引原理及优化</strong></h3><h4 id="索引介绍">索引介绍</h4><h5 id="什么是索引">什么是索引</h5><p>索引是一种能帮助 MySQL 提高查询效率的数据结构。</p><h5 id="索引优点和缺点">索引优点和缺点</h5><p>索引的优点如下：</p><ul><li><p>快速访问数据表中的特定信息，提高检索速度。</p></li><li><p>创建唯一性索引，保证数据表中每一行数据的唯一性。</p></li><li><p>加速表与表之间的连接。</p></li><li><p>使用分组和排序进行数据检索时，可以显著减少查询中分组和排序的时间。</p></li></ul><p>索引的缺点：</p><ul><li><p>虽然提高了的查询速度，但却降低了更新表的速度，比如 update、insert，因为更新数据时，MySQL 不仅要更新数据，还要更新索引文件；</p></li><li><p>建立索引会占用磁盘文件的索引文件。</p></li></ul><p>使用索引注意事项：</p><ul><li><p>使用短索引，短索引不仅可以提高查询速度，更能节省磁盘空间和 I/O 操作；</p></li><li><p>索引列排序，MySQL 查询只使用一个索引，因此如果 where 子句中已经使用了索引的话，那么 order by 中的列是不会使用索引的，因此数据库默认排序可以符合要求的情况下，不要进行排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引；</p></li><li><p>like 语句操作，一般情况下不鼓励使用 like 操作，如果非使用不可， 注意 like "%aaa%" 不会使用索引，而like "aaa%"可以使用索引；</p></li><li><p>不要在列上进行运算；</p></li><li><p>不适用 NOT IN 和 &lt;&gt; 操作。</p></li></ul><h4 id="索引分类">索引分类</h4><p>MySQL 的索引有两种分类方式：逻辑分类和物理分类。 按照逻辑分类，索引可分为：</p><h6 id="单列索引">单列索引</h6><ul><li><p>主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL；</p></li><li><p>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，但是一个唯一索引只能包含一列，比如身份证号码、卡号等都可以作为唯一索引；</p></li><li><p>普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；</p></li></ul><h6 id="组合索引">组合索引</h6><ul><li>在表中多个字段组合上创建的索引</li><li>组合索引的使用需要遵循<strong>最左前缀原则</strong></li><li>一般情况建议组合索引代替单列索引</li></ul><h6 id="全文索引">全文索引</h6><ul><li>让搜索关键词更高效的一种索引，只有在MyISAM引擎、InnoDB（5.6以后）才能使用，而且只能在CHAR, VARCHAR, TEXT类型才能使用。</li><li>优先级最高 先执行 不会执行其他索引</li><li>存储引擎决定只执行一个索引</li></ul><h6 id="空间索引">空间索引</h6><p>按照物理分类，索引可分为：</p><ul><li><p>聚集索引</p></li><li><p>非聚集索引</p></li></ul><h4 id="索引使用">索引使用</h4><h5 id="创建索引">创建索引</h5><p>各种索引的创建脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建主键索引 <br>alter table t add primary key add (`id`); <br>-- 创建唯一索引 <br>alter table t add unique (`username`); <br>-- 创建普通索引 <br>alter table t add index index_name (`username`); <br><br>-- 创建组合索引 <br>alter table t add index index_name (`username`, `age`); <br><br>-- 创建全文索引 <br>alter table t add fulltext (`username`);<br></code></pre></td></tr></table></figure><h5 id="删除索引">删除索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP INDEX index_name ON table;<br></code></pre></td></tr></table></figure><h5 id="查看索引">查看索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW INDEX FROM tablename <br></code></pre></td></tr></table></figure><h4 id="索引存储结构">索引存储结构</h4><h5 id="innodb存储引擎逻辑结构">InnoDB存储引擎逻辑结构</h5><p><img src="/images/db/mysql/tablespace.png"></p><p>InnoDB存储引擎逻辑存储结构可分为五级：表空间、段、区、页、行。</p><h5 id="索引存储结构-1">索引存储结构</h5><p>索引在存储引擎中实现，不同的存储引擎使用不同的索引</p><p><strong>MyISAM和InnoDB</strong>存储引擎只支持<strong>B+TREE</strong>索引，即默认使用B+TREE,不能更换</p><p>MEMORY和HEAP存储引擎：执行HASH和BTREE</p><h5 id="b树与b树">B树与B+树</h5><h6 id="b树与b树的区别">B树与B+树的区别</h6><p>非叶子结点是否存储数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">B</span>树叶子结点和非叶子结点都会存储数据<br><span class="hljs-selector-tag">B</span>+树只有叶子结点才会存储数据，而且存储的数据都在一行上，这些数据是由指针指向的，顺序的<br></code></pre></td></tr></table></figure><h5 id="非聚集索引myisam">非聚集索引（MyISAM）</h5><ul><li><p>B+树叶子结点只存储数据行的指针。简单的说，<strong>数据跟索引不在一起</strong>。</p></li><li><p><strong>非聚集索引包含的主键索引和辅助索引都会存储指针的值</strong></p></li></ul><h6 id="主键索引">主键索引</h6><p><img src="/images/db/mysql/prindex.png"></p><h6 id="辅助索引次要索引">辅助索引（次要索引）</h6><p>在MyISAM中主键索引与辅助索引在结构上没有区别，只是主键索引要求key是唯一的，辅助索引的key是可以重复的。</p><p><img src="/images/db/mysql/secondkey.png"></p><h5 id="聚集索引innodb">聚集索引（InnoDB）</h5><ul><li>主键索引的叶子结点都会存储数据，即<strong>数据和索引在一起</strong></li><li>辅助索引只存储主键值</li><li>如果没有主键索引，则使用唯一索引建立聚集索引；如果没有唯一索引，MySQL会按照一定规则创建聚集索引。</li></ul><h6 id="主键索引-1">主键索引</h6><p>InnoDB要求<strong>必须有主键</strong>（MyISAM可以没有）。如果没有，MySQL会自动选择一个可以唯一标识数据记录的列作为主键；如果没有，MySQL会自动为InnoDB生成一个隐含字段作为主键，类型为长整型。</p><p><img src="/images/db/mysql/pkey.png"></p><h6 id="辅助索引">辅助索引</h6><p>聚集索引这种实现方式按照主键搜索非常高效，但是辅助索引需要查询两遍：辅助索引获得主键，然后主键到索引中检索获取记录。这也就是<strong>回表查询</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where name=&#x27;Alice&#x27;;  回表查询，检索两次 辅助索引——&gt;主键索引——&gt;数据<br>select id, name from user where name=&#x27;Alice&#x27;; 不需要回表，辅助索引树上便可查到  覆盖索引（多用组合索引）<br></code></pre></td></tr></table></figure><p><img src="/images/db/mysql/spk.png"></p><h4 id="组合索引-1">组合索引</h4><h5 id="哪些情况要创建索引">哪些情况要创建索引</h5><ol type="1"><li>主键自动创建索引</li><li>频繁作为查询条件需要创建索引</li><li>多表关联查询中，关联字段应该创建索引 on 两边都需要创建索引</li><li>查询中排序字段，需要创建索引</li><li>频繁查找字短 覆盖索引</li><li>查询中统计或者分组字段 需要创建索引</li></ol><h5 id="哪些情况不需要创建索引">哪些情况不需要创建索引</h5><ol type="1"><li>表记录太少</li><li>经常进行增删改查的表</li><li>频繁更新的字段</li><li>where条件里使用频率不高的字段</li></ol><h5 id="为什么使用组合索引">为什么使用组合索引</h5><p>组合索引根据<strong>最左原则</strong>进行排序，为了节省索引空间和提升搜索性能，可以使用组合索引。</p><p>查询遵循最左前缀原则</p><ol type="1"><li><p>前缀索引 where like a% 可以使用索引</p><p>​ where like %a 不能使用索引</p></li><li><p>从左向右匹配 直到遇到范围查询 &gt; &lt; between like</p></li></ol><p>建立索引（a, b, c, d）</p><p>​ where a=1 and b=3 and c&gt;4 and d=2 到了c&gt;4时听了，d=2用不到索引</p><p>​ 可以通过键索引构建为（a, b, d, c）进行优化</p><h4 id="索引失效与分析">索引失效与分析</h4><h5 id="执行计划">执行计划</h5><p><code>EXPALIN</code>命令, 可以对select语句的执行计划进行分析</p><h5 id="参数说明">参数说明</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id, select_type, <span class="hljs-keyword">table</span>, <span class="hljs-keyword">type</span>, possible_keys, key, key_len, <span class="hljs-keyword">ref</span>, <span class="hljs-keyword">rows</span>, Extra<br></code></pre></td></tr></table></figure><h6 id="id">id</h6><ul><li>每个select语句都会自动分配一个唯一标识</li><li>表示查询中操作表的顺序<ul><li>id相同：执行顺序由上而下</li><li>id不同：如果是子查询，id会自增；id越大，优先级越高</li><li>id相同的不同的同时存在</li></ul></li><li>id列尾NULL表示这是个结果集，不需要用来进行查询</li></ul><h6 id="select_type重要">select_type（重要）</h6><p>查询类型，主要用于区分普通查询、联合查询（union,union all）、子查询。</p><ul><li><p>simple:不需要使用union操作或者包含子查询的简单select查询。有连接查询时，外层的查询也是simple，有且只有一个。</p></li><li><p>primary:需要union插座或者含有子查询，位于最外层的单位查询的select_type是primary</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select (select name from user where name=&#x27;xxxx&#x27;) from user;<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+-------+------+----------+-------------+<br>| id | select_type | table | partitions | type  | possible_keys | key       | key_len | ref   | rows | filtered | Extra       |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+-------+------+----------+-------------+<br>|  1 | PRIMARY     | user  | NULL       | index | NULL          | index_com | 198     | NULL  |    9 |   100.00 | Using index |<br>|  2 | SUBQUERY    | user  | NULL       | ref   | index_com     | index_com | 99      | const |    1 |   100.00 | Using index |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+-------+------+----------+-------------+<br>2 rows in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><ul><li>subquery：除了from子句中包含的子查询外，其他地方出现的子查询都可能是subquery</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where id=(select max(id) from user);<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+------------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra                        |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+------------------------------+<br>|  1 | PRIMARY     | user  | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL                         |<br>|  2 | SUBQUERY    | NULL  | NULL       | NULL  | NULL          | NULL    | NULL    | NULL  | NULL |     NULL | Select tables optimized away |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+------------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>dependent subquery:与dependent union类似，表示这个subquery的查询受外部查询的影响</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select id, name,(select name from dep d where d.dep=u.id) from user u;<br>+----+--------------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+<br>| id | select_type        | table | partitions | type  | possible_keys | key       | key_len | ref  | rows | filtered | Extra       |<br>+----+--------------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+<br>|  1 | PRIMARY            | u     | NULL       | index | NULL          | index_com | 198     | NULL |    9 |   100.00 | Using index |<br>|  2 | DEPENDENT SUBQUERY | d     | NULL       | ALL   | NULL          | NULL      | NULL    | NULL |    2 |    50.00 | Using where |<br>+----+--------------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>union:union连接的两个查询，第一个是primary，除第一个外的，都是union</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where name=&#x27;xxxx&#x27; union select * from user where name=&#x27;zhangsan&#x27;;<br>+----+--------------+------------+------------+------+---------------+-----------+---------+-------+------+----------+-----------------+<br>| id | select_type  | table      | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra           |<br>+----+--------------+------------+------------+------+---------------+-----------+---------+-------+------+----------+-----------------+<br>|  1 | PRIMARY      | user       | NULL       | ref  | index_com     | index_com | 99      | const |    1 |   100.00 | Using index     |<br>|  2 | UNION        | user       | NULL       | ref  | index_com     | index_com | 99      | const |    1 |   100.00 | Using index     |<br>| NULL | UNION RESULT | &lt;union1,2&gt; | NULL       | ALL  | NULL          | NULL      | NULL    | NULL  | NULL |     NULL | Using temporary |<br>+----+--------------+------------+------------+------+---------------+-----------+---------+-------+------+----------+-----------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li><p>dependent union:与union一样，出现union或者union all语句中，表示查询受外部表查询的影响</p></li><li><p>union result:包含union的结果集，id为NULL</p></li><li><p>Derived:from子句中出现的子查询，也叫做派生表</p></li></ul><h6 id="table">table</h6><p>表名 ，查询中使用了别名，这里就显示别名</p><h6 id="type重要">type（重要）</h6><p>依次由好到差</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">system</span>, const, eq_ref, <span class="hljs-keyword">ref</span>, fulltext, ref_or_null, unique_subquery, index_subquery, range, index_merge, <span class="hljs-keyword">index</span>, <span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><p>除了ALL，其他类型都可以用到索引；</p><p>除了index_merge，其他type值可以用到一个索引</p><ul><li>system：表中只有一行或者是空表</li><li>const（重要）：使用唯一索引或者主键索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where id=1;<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+<br>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+<br>|  1 | SIMPLE      | user  | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+<br></code></pre></td></tr></table></figure><ul><li>eq_ref（重要）： 连接字段主键或者唯一索引</li></ul><p>通常出现在多表的join查询，表示对于前表的每一个结果，都<strong>只能匹配到后表的一行结果</strong>，并且查询到额比较操作通常是“=”，效率更高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select a.id from user a left join dep b on a.dep=b.id;<br>+----+-------------+-------+------------+--------+---------------+---------+---------+------------+------+----------+-------------+<br>| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref        | rows | filtered | Extra       |<br>+----+-------------+-------+------------+--------+---------------+---------+---------+------------+------+----------+-------------+<br>|  1 | SIMPLE      | a     | NULL       | ALL    | NULL          | NULL    | NULL    | NULL       |    9 |   100.00 | NULL        |<br>|  1 | SIMPLE      | b     | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | test.a.dep |    1 |   100.00 | Using index |<br>+----+-------------+-------+------------+--------+---------------+---------+---------+------------+------+----------+-------------+<br></code></pre></td></tr></table></figure><ul><li>ref（重要）：针对非唯一索引，使用等值（=）查询非主键，或者使用了最左前缀原则索引的查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where name=&#x27;xxx&#x27;;<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------+<br>| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------+<br>|  1 | SIMPLE      | user  | NULL       | ref  | index_com     | index_com | 99      | const |    2 |   100.00 | NULL  |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; explain select * from user where name=&#x27;xxx&#x27; and age=2;<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-----------------------+<br>| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra                 |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-----------------------+<br>|  1 | SIMPLE      | user  | NULL       | ref  | index_com     | index_com | 99      | const |    2 |    11.11 | Using index condition |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-----------------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><ul><li>fulltext：全文索引检索</li><li>ref_or_null：与ref类似，只是增加了null值的比较，实际上用的不多</li><li>unique_subquery：用于where中的in形式子查询，子查询返回不重复唯一值</li><li>index_subquery：用于in形式子查询使用到辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重</li><li>range（重要）：<strong>索引范围扫描</strong>，常见于&gt;, &lt;, is null, between, in, like等运算符的查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where name=&#x27;xxx&#x27; and age&gt;3;<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key       | key_len | ref  | rows | filtered | Extra                 |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>|  1 | SIMPLE      | user  | NULL       | range | index_com     | index_com | 104     | NULL |    1 |   100.00 | Using index condition |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>index_merge：表示使用两个以上的索引，最后去交集或者并集。常见and, or的条件使用不同的索引。官方排序这个在ref_or_null之后，但实际上由于要读取所有索引，性能大部分时间不如range</li><li>index（重要）：<strong>关键字：条件是出现在索引树中的节点。可能没有完全匹配索引</strong></li></ul><p><strong>索引全表扫描</strong>，把索引从头到尾扫一遍，常见于使用索引列就可以处理，不需要读取文件查询，可以使用索引排序或者分组的查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user order by id;<br>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+<br>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+<br>|  1 | SIMPLE      | user  | NULL       | index | NULL          | PRIMARY | 4       | NULL |    9 |   100.00 | NULL  |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>ALL：全表扫描</li></ul><h6 id="possible_keys">possible_keys</h6><p>此次查询中可能选用的索引，一个或多个</p><h6 id="key">key</h6><p>查询真正使用到的索引。select_type为index_merge时，这里可能会出现两个以上索引；其他情况，select_type只会出现一个</p><h6 id="key_len">key_len</h6><ul><li>用于处理查询的索引长度。如果是单列索引，那就整个索引算进去；如果是多列索引，那么查询不一定是所有的列。</li><li>另外，<em>key_len</em>指极端<em>where</em>条件中用到的索引长度，而排序和分组苦短用到了索引，也不会计算到<em>key_len</em>中。</li><li>不是准确值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where id=1;<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+<br>| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+<br>|  1 | SIMPLE      | user  | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |<br>+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+<br>1 row in set (0.01 sec)<br><br>int为4<br></code></pre></td></tr></table></figure><h6 id="ref">ref</h6><ul><li>如果使用的是常数等值，这里回现实const</li><li>如果是链接查询，被驱动表的执行计划这里会显示驱动表的关联字段</li><li>如果是条件使用表达式或者函数，或者条件列发生内部隐式转换，这里可能会显示func</li></ul><h6 id="rows">rows</h6><p>这里是执行计划中估算的扫描行数，不是精确值（InnoDB不是精确值，MyISAM是精确值，主要原因是InnoDB里面使用了MVCC并发机制）</p><h6 id="extra重要">Extra（重要）</h6><p>这一列包含不适合其他列显示但非常重要的额外信息。</p><p><strong>using temporary</strong></p><ul><li>表示使用了临时表</li><li>MySQL在对比查询结果<em>order by</em> 和<em>group by</em></li><li>临时表可以是内存临时表和磁盘临时表，执行计划中看不出来，需要查看status变量（used_tmp_table, used_tmp_disk_table）才能看出来</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select distinct a.id from user a,dep b where a.dep=b.id;<br>+----+-------------+-------+------------+-------+-------------------+---------+---------+------+------+----------+----------------------------------------------------+<br>| id | select_type | table | partitions | type  | possible_keys     | key     | key_len | ref  | rows | filtered | Extra                                              |<br>+----+-------------+-------+------------+-------+-------------------+---------+---------+------+------+----------+----------------------------------------------------+<br>|  1 | SIMPLE      | b     | NULL       | index | PRIMARY           | PRIMARY | 4       | NULL |    2 |   100.00 | Using index; Using temporary                       |<br>|  1 | SIMPLE      | a     | NULL       | ALL   | PRIMARY,index_com | NULL    | NULL    | NULL |    9 |    11.11 | Using where; Using join buffer (Block Nested Loop) |<br>+----+-------------+-------+------------+-------+-------------------+---------+---------+------+------+----------+----------------------------------------------------+<br>2 rows in set (0.03 sec)<br></code></pre></td></tr></table></figure><p><strong>no tables used</strong></p><p>不带from子句的查询或者From dual查询（oracle操作）</p><p><em>使用not in()形式子查询或者not exists运算符的连接查询（反连接）</em></p><p>即，一般链接查询是先查询哪表，再查询外表；反连接是先查询外表，再查询内表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select now();<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+<br>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+<br>|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No tables used |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>using filesort(重要)</strong></p><ul><li>排序时无法使用到索引会出现这个，常见于order by 和group by语句中</li><li>说明MySQL会使用一个外部的索引排序，而不是按照索引顺序进行读取</li><li>MySQL中无法利用索引完成的排序操作称为“文件排序”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user order by dep;<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+<br>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+<br>|  1 | SIMPLE      | user  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using filesort |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>using index(重要)</strong></p><p>查询时<em>不需要回表查询</em>,直接通过索引就可以获取查询的数据</p><ul><li>表示想醒的select查询中使用到了覆盖索引，避免访问表的数据行，效率不错</li><li>如果同时使用Using where，说明索引被用来查找索引键值</li><li>如果没有同时出现Using where，表明索引用来读取数据而非执行查找动作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select name, age from user where name=&#x27;xxx&#x27;;<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+<br>| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra       |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+<br>|  1 | SIMPLE      | user  | NULL       | ref  | index_com     | index_com | 99      | const |    2 |   100.00 | Using index |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------------+<br>1 row in set, (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>using where(重要)</strong></p><p>表示存储引擎返回的记录并不是所有都满足查询条件，需要server层进行过滤。效率比较低</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where age=23;<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<br>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<br>|  1 | SIMPLE      | user  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |    11.11 | Using where |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; explain select name, age from user where name=&#x27;xxx&#x27; order by id;<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+------------------------------------------+<br>| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra                                    |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+------------------------------------------+<br>|  1 | SIMPLE      | user  | NULL       | ref  | index_com     | index_com | 99      | const |    2 |   100.00 | Using where; Using index; Using filesort |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>查询条件中氛围限制条件和检查条件。5.6之前，存储引擎只能使用限定条件扫描数据并返回，然后server层根据检查条件进行过滤返回真正符合查询的数据。5.6.x之后支持<em>ICP</em>特性，可以把检查条件页下推倒存储引擎层，不符合检查条件和限制条件的数据，直接不读取，这样就大大减少了存储引擎层扫描的记录数量。Extra列显示using index condition。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; explain select * from user where name=&#x27;xxx&#x27; and age&gt;3;<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key       | key_len | ref  | rows | filtered | Extra                 |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>|  1 | SIMPLE      | user  | NULL       | range | index_com     | index_com | 104     | NULL |    1 |   100.00 | Using index condition |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; explain select * from user where name like &#x27;xx%&#x27;;<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key       | key_len | ref  | rows | filtered | Extra                 |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>|  1 | SIMPLE      | user  | NULL       | range | index_com     | index_com | 99      | NULL |    3 |   100.00 | Using index condition |<br>+----+-------------+-------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>firstmatch(tb_name)</strong></p><p>5.6.x开始引入的优化子查询的新特性之一，常见于where子句含有in()类型的子查询。如果内表的数据量比较大，就可能出现这个。</p><p><strong>loosescan(m..n)</strong></p><p>5.6.x之后引入的优化子查询的新特性之一，在in()类型的子查询中，子查询返回的可能有重复记录时，就可能出现这个.</p><p>除此之外，还有很多查询数据字典库，执行计划过程中发现不可能存在结果的一些提示信息</p><h6 id="filtered">filtered</h6><p>使用explain extended时会出现这个。5.7之后的版本默认会有这个字段（不需要使用explain extended）。这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录比例（100%不是具体记录数）。</p><h4 id="相关面试题">相关面试题</h4><h5 id="什么是索引-1">什么是索引？</h5><p>索引是一种能帮助 MySQL 提高查询效率的数据结构。</p><h5 id="索引分别有哪些优点和缺点">索引分别有哪些优点和缺点？</h5><p>索引的优点如下：</p><ul><li><p>快速访问数据表中的特定信息，提高检索速度。</p></li><li><p>创建唯一性索引，保证数据表中每一行数据的唯一性。</p></li><li><p>加速表与表之间的连接。</p></li><li><p>使用分组和排序进行数据检索时，可以显著减少查询中分组和排序的时间。</p></li></ul><p>索引的缺点：</p><ul><li><p>虽然提高了的查询速度，但却降低了更新表的速度，比如 update、insert，因为更新数据时，MySQL 不仅要更新数据，还要更新索引文件；</p></li><li><p>建立索引会占用磁盘文件的索引文件。</p></li></ul><p>使用索引注意事项：</p><ul><li><p>使用短索引，短索引不仅可以提高查询速度，更能节省磁盘空间和 I/O 操作；</p></li><li><p>索引列排序，MySQL 查询只使用一个索引，因此如果 where 子句中已经使用了索引的话，那么 order by 中的列是不会使用索引的，因此数据库默认排序可以符合要求的情况下，不要进行排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引；</p></li><li><p>like 语句操作，一般情况下不鼓励使用 like 操作，如果非使用不可， 注意 like "%aaa%" 不会使用索引，而like "aaa%"可以使用索引；</p></li><li><p>不要在列上进行运算；</p></li><li><p>不适用 NOT IN 和 &lt;&gt; 操作。</p></li></ul><h5 id="索引有几种类型分别如何创建">索引有几种类型？分别如何创建？</h5><p>MySQL 的索引有两种分类方式：逻辑分类和物理分类。 按照逻辑分类，索引可分为：</p><ul><li><p>主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL；</p></li><li><p>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，但是一个唯一索引只能包含一列，比如身份证号码、卡号等都可以作为唯一索引；</p></li><li><p>普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；</p></li><li><p>全文索引：让搜索关键词更高效的一种索引。</p></li></ul><p>按照物理分类，索引可分为：</p><ul><li><p>聚集索引：一般是表中的主键索引，如果表中没有显示指定主键，则会选择表中的第一个不允许为 NULL 的唯一索引，如果还是没有的话，就采用 Innodb 存储引擎为每行数据内置的 6 字节 ROWID 作为聚集索引。每张表只有一个聚集索引，因为聚集索引的键值的逻辑顺序决定了表中相应行的物理顺序。聚集索引在精确查找和范围查找方面有良好的性能表现（相比于普通索引和全表扫描），聚集索引就显得弥足珍贵，聚集索引选择还是要慎重的（一般不会让没有语义的自增 id 充当聚集索引）；</p></li><li><p>非聚集索引：该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同（非主键的那一列），一个表中可以拥有多个非聚集索引。</p></li></ul><p>各种索引的创建脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建主键索引 <br>alter table t add primary key add (`id`); <br>-- 创建唯一索引 <br>alter table t add unique (`username`); <br>-- 创建普通索引 <br>alter table t add index index_name (`username`); <br>-- 创建全文索引 <br>alter table t add fulltext (`username`);<br></code></pre></td></tr></table></figure><h5 id="能否给手机号的前-6-位创建索引如何创建">能否给手机号的前 6 位创建索引？如何创建？</h5><p>可以，创建方式有两种：</p><ul><li><p><code>alter table t add index index_phone(phone(6));</code></p></li><li><p><code>create index index_phone on t(phone(6));</code></p></li></ul><h5 id="如何查询一张表的所有索引">如何查询一张表的所有索引？</h5><p><code>SHOW INDEX FROM T</code> 查询表 T 所有索引。</p><h5 id="主索引和唯一索引有什么区别">主索引和唯一索引有什么区别？</h5><ul><li><p>主索引不能重复且不能为空，唯一索引不能重复，但可以为空；</p></li><li><p>一张表只能有一个主索引，但可以有多个唯一索引；</p></li><li><p>主索引的查询性能要高于唯一索引。</p></li></ul><h5 id="主索引和非主索引有什么区别">主索引和非主索引有什么区别？</h5><p>存储结构上</p><p>​ 主键索引：叶子节点存储整行数据</p><p>​ 非主键索引：叶子节点存储主键值</p><p>检索上</p><p>​ 主键索引：直接通过索引获取数据</p><p>​ 非主键索引：可能会有回表查询</p><p>创建方式上</p><p>​ 主键索引：表中主键自动创建；若无主键，唯一索引+NotNull主键；若没有，自动创建隐式列rowid做主键</p><p>​ 非主键索引：主动创建</p><h5 id="辅助索引为什么只存主键">辅助索引为什么只存主键？</h5><p>空间上：成本高</p><p>时间上：查询成本少了，插入成本不变，更新成本高</p><h5 id="在-inndb-中主键索引为什么比普通索引的查询性能高">在 InnDB 中主键索引为什么比普通索引的查询性能高？</h5><p>因为普通索引的查询会多执行一次检索操作。</p><p>比如主键查询 select * from t where id=10 只需要搜索 id 的这棵 B+ 树。</p><p>普通索引查询 select * from t where f=3 会先查询 f 索引树，得到 id 的值之后再去搜索 id 的 B+ 树，因为多执行了一次检索，所以执行效率就比主键索引要低。</p><h5 id="唯一索引和普通索引哪个性能更好">唯一索引和普通索引哪个性能更好？</h5><ul><li><p>对于查询操作来说：普通索引和唯一索引的性能相近，都是从索引树中进行查询；</p></li><li><p>对于更新操作来说：唯一索引要比普通索引执行的慢，因为唯一索引需要先将数据读取到内存中，再在内存中进行数据的唯一效验，所以执行起来要比普通索引更慢。</p></li></ul><h5 id="什么叫回表查询">什么叫回表查询？</h5><p>普通索引查询到主键索引后，回到主键索引树搜索的过程，我们称为回表查询。</p><p>参考SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table T( id int primary key, k int not null, name varchar(16), index (k))engine=InnoDB;<br></code></pre></td></tr></table></figure><p>如果语句是 select * from T where ID=500，即主键查询方式，则只需要检索主键 ID 字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from T where ID=500; <br>+-----+---+-------+ <br>| id | k | name | <br>+-----+---+-------+ <br>| 500 | 5 | name5 | <br>+-----+---+-------+<br></code></pre></td></tr></table></figure><p>如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次，这个过程称为回表查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from T where k=5; <br>+-----+---+-------+ <br>| id | k | name | <br>+-----+---+-------+ <br>| 500 | 5 | name5 | <br>+-----+---+-------+<br></code></pre></td></tr></table></figure><p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><h5 id="以下-sql-有什么问题该如何优化">以下 SQL 有什么问题？该如何优化？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t where f/2=100;<br></code></pre></td></tr></table></figure><p>该 SQL 会导致引擎放弃索引而全表扫描，尽量避免在索引列上计算。可改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t where f=100*2;<br></code></pre></td></tr></table></figure><h5 id="为什么-mysql-官方建议使用自增主键作为表的主键">为什么 MySQL 官方建议使用自增主键作为表的主键？</h5><p>因为自增主键是连续的，在插入过程中尽量减少页分裂，即使要进行页分裂，也只会分裂很少一部分；并且自增主键也能减少数据的移动，每次插入都是插入到最后，所以自增主键作为表的主键，对于表的操作来说性能是最高的。</p><p>InnoDB存储引擎逻辑存储结构可分为五级：表空间、段（索引段+数据段）、区（1M=64个页）、页(默认16K)、行。</p><p><img src="/images/db/mysql/tablespace.png"></p><p>假设一页有4条数据</p><p>非自增情况</p><p><img src="/images/db/mysql/page1.png"></p><p><img src="/images/db/mysql/page2.png"></p><p><img src="/images/db/mysql/page3.png"></p><p>自增情况</p><p><img src="/images/db/mysql/page4.png"></p><h5 id="自增主键有哪些优缺点">自增主键有哪些优缺点?</h5><p>优点：</p><ul><li><p>数据存储空间很小；</p></li><li><p>性能最好；</p></li><li><p>减少页分裂。</p></li></ul><p>缺点：</p><ul><li><p>数据量过大，可能会超出自增长取值范围；</p></li><li><p>无法满足分布式存储，分库分表的情况下无法合并表；</p></li><li><p>主键有自增规律，容易被破解；</p></li></ul><p>综上所述：是否需要使用自增主键，需要根据自己的业务场景来设计。如果是单表单库，则优先考虑自增主键，如果是分布式存储，分库分表，则需要考虑数据合并的业务场景来做数据库设计方案。</p><h5 id="mysql-最多可以创建多少个索引列">MySQL 最多可以创建多少个索引列？</h5><p>MySQL 中最多可以创建 16 个索引列。</p><h5 id="以下-like-查询会使用索引的是哪一个选项为什么">以下 like 查询会使用索引的是哪一个选项？为什么？</h5><p>A.like '%A%' B.like '%A' C.like 'A%' D.以上都不是</p><p>答：C 题目解析：like 查询要走索引，查询字符不能以通配符（%）开始。</p><h5 id="如何让-like-abc-走索引查询">如何让 like %abc 走索引查询？</h5><p>我们知道如果要让 like 查询要走索引，查询字符不能以通配符（%）开始，如果要让 like %abc 也走索引，可以使用 REVERSE() 函数来创建一个函数索引，查询脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t where reverse(f) like reverse(&#x27;%abc&#x27;);<br></code></pre></td></tr></table></figure><h5 id="列值为-null-时查询会使用到索引吗">列值为 NULL 时，查询会使用到索引吗？</h5><p>在 MySQL 5.6 以上的 InnoDB 存储引擎会正常触发索引。但为了兼容低版本的 MySQL 和兼容其他数据库存储引擎，不建议使用 NULL 值来存储和查询数据，建议设置列为 NOT NULL，并设置一个默认值，比如 0 和空字符串等，如果是 datetime 类型，可以设置成 1970-01-01 00:00:00 这样的特殊值。</p><h5 id="以下语句会走索引么">以下语句会走索引么？</h5><p><code>select * from t where year(date)&gt;2018;</code></p><p>不会，因为在索引列上涉及到了运算。</p><h5 id="mysql-联合索引应该注意什么">MySQL 联合索引应该注意什么？</h5><p>联合索引又叫复合索引，MySQL 中的联合索引，遵循最左匹配原则，比如，联合索引为 key(a,b,c)，则能触发索引的搜索组合是 a|ab|abc 这三种查询。</p><h5 id="联合索引的作用是什么">联合索引的作用是什么？</h5><p>联合索引的作用如下：</p><ul><li><p>用于多字段查询，比如，建了一个 key(a,b,c) 的联合索引，那么实际等于建了 key(a)、key(a,b)、key(a,b,c) 等三个索引，我们知道，每多一个索引，就会多一些写操作和占用磁盘空间的开销，尤其是对大数据量的表来说，这可以减少一部分不必要的开销；</p></li><li><p>覆盖索引，比如，对于联合索引 key(a,b,c) 来说，如果使用 SQL：select a,b,c from table where a=1 and b = 1 ，就可以直接通过遍历索引取得数据，而无需回表查询，这就减少了随机的 IO 操作，减少随机的 IO 操作，可以有效的提升数据库查询的性能，是非常重要的数据库优化手段之一；</p></li><li><p>索引列越多，通过索引筛选出的数据越少。</p></li></ul><h5 id="什么是最左匹配原则它的生效原则有哪些">什么是最左匹配原则？它的生效原则有哪些？</h5><p>最左匹配原则也叫最左前缀原则，是 MySQL 中的一个重要原则，说的是索引以最左边的为起点任何连续的索引都能匹配上，当遇到范围查询（&gt;、&lt;、between、like）就会停止匹配。 生效原则来看以下示例，比如表中有一个联合索引字段 index(a,b,c)：</p><ul><li>where a=1 只使用了索引 a；</li><li>where a=1 and b=2 只使用了索引 a,b；</li><li>where a=1 and b=2 and c=3 使用a,b,c；</li><li>where b=1 or where c=1 不使用索引；</li><li>where a=1 and c=3 只使用了索引 a；</li><li>where a=3 and b like 'xx%' and c=3 只使用了索引 a,b。</li></ul><h5 id="什么是前缀索引">什么是前缀索引？</h5><p>前缀索引也叫局部索引，比如给身份证的前 10 位添加索引，类似这种给某列部分信息添加索引的方式叫做前缀索引。</p><h5 id="为什么要用前缀索引">为什么要用前缀索引？</h5><p>前缀索引能有效减小索引文件的大小，让每个索引页可以保存更多的索引值，从而提高了索引查询的速度。但前缀索引也有它的缺点，不能在 order by 或者 group by 中触发前缀索引，也不能把它们用于覆盖索引。</p><h5 id="什么情况下适合使用前缀索引">什么情况下适合使用前缀索引？</h5><p>当字符串本身可能比较长，而且前几个字符就开始不相同，适合使用前缀索引；相反情况下不适合使用前缀索引，比如，整个字段的长度为 20，索引选择性为 0.9，而我们对前 10 个字符建立前缀索引其选择性也只有 0.5，那么我们需要继续加大前缀字符的长度，但是这个时候前缀索引的优势已经不明显，就没有创建前缀索引的必要了。</p><h5 id="什么是覆盖索引">什么是覆盖索引？</h5><p>覆盖索引是指，索引上的信息足够满足查询请求，不需要再回到主键上去取数据。</p><h5 id="什么是页">什么是页？</h5><p>页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页。主存和磁盘以页为单位交换数据。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次磁盘 IO 就可以完全载入。</p><h5 id="索引的常见存储算法有哪些">索引的常见存储算法有哪些？</h5><ul><li><p>哈希存储法：以 key、value 方式存储，把值存入数组中使用哈希值确认数据的位置，如果发生哈希冲突，使用链表存储数据；</p></li><li><p>有序数组存储法：按顺序存储，优点是可以使用二分法快速找到数据，缺点是更新效率，适合静态数据存储；</p></li><li><p>搜索树：以树的方式进行存储，查询性能好，更新速度快。</p></li></ul><h5 id="innodb-为什么要使用-b-树而不是-b-树hash红黑树或二叉树">InnoDB 为什么要使用 B+ 树，而不是 B 树、Hash、红黑树或二叉树？</h5><p>因为 B 树、Hash、红黑树或二叉树存在以下问题：</p><ul><li><p>B 树：不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出），指针少的情况下要保存大量数据，只能增加树的高度，导致IO操作变多，查询性能变低；</p></li><li><p>Hash：虽然可以快速定位，但是没有顺序，IO 复杂度高；</p></li><li><p>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且 IO 代价高；</p></li><li><p>红黑树：树的高度随着数据量增加而增加，IO 代价高。</p></li></ul><h5 id="为什么-innodb-要使用-b-树来存储索引">为什么 InnoDB 要使用 B+ 树来存储索引？</h5><p>B+Tree 中的 B 是 Balance，是平衡的意思，它在经典 B Tree 的基础上进行了优化，增加了顺序访问指针，在B+Tree 的每个叶子节点增加一个指向相邻叶子节点的指针，就形成了带有顺序访问指针的 B+Tree，这样就提高了区间访问性能：如果要查询 key 为从 18 到 49 的所有数据记录，当找到 18 后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率（无需返回上层父节点重复遍历查找减少 IO 操作）。</p><p>索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上，这样的话，索引查找过程中就要产生磁盘 IO 消耗，相对于内存存取，IO 存取的消耗要高几个数量级，所以索引的结构组织要尽量减少查找过程中磁盘 IO 的存取次数，从而提升索引效率。 综合所述，InnDB 只有采取 B+ 树的数据结构存储索引，才能提供数据库整体的操作性能。</p><h5 id="优化器选择查询索引的影响因素有哪些">优化器选择查询索引的影响因素有哪些？</h5><p>优化器的目的是使用最小的代价选择最优的执行方案，影响优化器选择索引的因素如下：</p><ul><li><p>扫描行数，扫描的行数越少，执行代价就越少，执行效率就会越高；</p></li><li><p>是否使用了临时表；</p></li><li><p>是否排序。</p></li></ul><h5 id="mysql-是如何判断索引扫描行数的多少">MySQL 是如何判断索引扫描行数的多少？</h5><p>MySQL 的扫描行数是通过索引统计列（cardinality）大致得到并且判断的，而索引统计列（cardinality）可以通过查询命令 show index 得到，索引扫描行数的多少就是通过这个值进行判断的。</p><h5 id="mysql-是如何得到索引基数的它准确吗">MySQL 是如何得到索引基数的？它准确吗？</h5><p>MySQL 的索引基数并不准确，因为 MySQL 的索引基数是通过采样统计得到的，比如 InnoDb 默认会有 N 个数据页，采样统计会统计这些页面上的不同值得到一个平均值，然后除以这个索引的页面数就得到了这个索引基数。</p><h5 id="mysql-如何指定查询的索引">MySQL 如何指定查询的索引？</h5><p>在 MySQL 中可以使用 force index 强行选择一个索引，具体查询语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t force index(index_t);<br></code></pre></td></tr></table></figure><h5 id="在-mysql-中指定了查询索引为什么没有生效">在 MySQL 中指定了查询索引，为什么没有生效？</h5><p>我们知道在 MySQL 中使用 force index 可以指定查询的索引，但并不是一定会生效，原因是 MySQL 会根据优化器自己选择索引，如果 force index 指定的索引出现在候选索引上，这个时候 MySQL 不会在判断扫描的行数的多少直接使用指定的索引，如果没在候选索引中，即使 force index 指定了索引也是不会生效的。</p><h5 id="以下-or-查询有什么问题吗该如何优化">以下 or 查询有什么问题吗？该如何优化？</h5><p><code>select * from t where num=10 or num=20;</code></p><p>答：如果使用 or 查询会使 MySQL 放弃索引而全表扫描，可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from t where num=10 union select * from t where num=20;<br></code></pre></td></tr></table></figure><h5 id="以下查询要如何优化">以下查询要如何优化？</h5><p>表中包含索引：</p><ul><li><p>KEY mid (mid)</p></li><li><p>KEY begintime (begintime)</p></li><li><p>KEY dg (day,group)</p></li></ul><p>使用以下 SQL 进行查询：</p><p><code>select f from t where day='2010-12-31' and group=18 and begintime&lt;'2019-12-31 12:14:28' order by begintime limit 1;</code></p><p>答：此查询理论上是使用 dg 索引效率更高，通过 explain 可以对比查询扫描次数。由于使用了 order by begintime 则使查询放弃了 dg 索引，而使用 begintime 索引，从侧面印证 order by 关键字会影响查询使用索引，这时可以使查询强制使用索引，改为以下SQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select f from t use index(dg) where day=&#x27;2010-12-31&#x27; and group=18 and begintime&lt; &#x27;2019-12-31 12:14:28&#x27; order by begintime limit 1;<br></code></pre></td></tr></table></figure><h5 id="mysql-会错选索引吗">MySQL 会错选索引吗？</h5><p>MySQL 会错选索引，比如 k 索引的速度更快，但是 MySQL 并没有使用而是采用了 v 索引，这种就叫错选索引，因为索引选择是 MySQL 的服务层的优化器来自动选择的，但它在复杂情况下也和人写程序一样出现缺陷。</p><h5 id="如何解决-mysql-错选索引的问题">如何解决 MySQL 错选索引的问题？</h5><ul><li><p>删除错选的索引，只留下对的索引；</p></li><li><p>使用 force index 指定索引；</p></li><li><p>修改 SQL 查询语句引导 MySQL 使用我们期望的索引，比如把 order by b limit 1 改为 order by b,a limit 1 语义是相同的，但 MySQL 查询的时候会考虑使用 a 键上的索引。</p></li></ul><h5 id="如何优化身份证的索引">如何优化身份证的索引？</h5><p>在中国因为前 6 位代表的是地区，所以很多人的前六位都是相同的，如果我们使用前缀索引为 6 位的话，性能提升也并不是很明显，但如果设置的位数过长，那么占用的磁盘空间也越大，数据页能放下的索引值就越少，搜索效率也越低。针对这种情况优化方案有以下两种：</p><ul><li><p>使用身份证倒序存储，这样设置前六位的意义就很大了；</p></li><li><p>使用 hash 值，新创建一个字段用于存储身份证的 hash 值。</p></li></ul><h3 id="锁原理及案例"><strong>锁原理及案例</strong></h3><h4 id="锁基础">锁基础</h4><p>按照所里的粒度分类，MySQL主要包含三种类型（级别）的锁定机制：</p><ul><li>全局锁：锁的是整个datebase，由MySQL的SQL layer层实现</li><li>表级锁：锁的是某个table，由MySQL的SQL layer层实现</li><li>行级锁：锁的是某行数据，也可能是行之间的间隙，由某些存储引擎实现，比如InnoDB</li></ul><p>按照锁的功能可以分为：共享读锁和排它写锁</p><p>按照锁的实现方式分为：悲观锁和乐观锁</p><p>表级锁与行级锁区别</p><ul><li>表级锁：开销小，加锁块；不会出现死锁；锁粒度大，发生冲突的概率高，并发度低</li><li>行级锁：开销大，加锁慢；会出现死锁；锁粒度小，发生锁冲突的概率低，并发度高</li></ul><p><img src="/images/db/mysql/lock.png"></p><h4 id="表级锁">表级锁</h4><p>表级锁有两种：</p><ul><li>表锁</li><li>与数据锁（meta data lock, MDL）</li></ul><p>查看锁状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt;  <br>+----------------------------+-------+<br>| Variable_name              | Value |<br>+----------------------------+-------+<br>| Table_locks_immediate      | 172   |<br>| Table_locks_waited         | 0     |<br>| Table_open_cache_hits      | 61    |<br>| Table_open_cache_misses    | 10    |<br>| Table_open_cache_overflows | 0     |<br>+----------------------------+-------+<br>5 rows in set (0.05 sec)<br></code></pre></td></tr></table></figure><p>表现形式：</p><ul><li>表共享读锁（Table Read Lock）</li><li>表独占写锁（Table Write Lock）</li></ul><p>手动加锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">lock table 表名称 read(write), 表名称2 read(write), 其他；<br></code></pre></td></tr></table></figure><p>查看表锁情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show open tables;<br></code></pre></td></tr></table></figure><p>删除表锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">unlock tables;<br></code></pre></td></tr></table></figure><h5 id="操作演示">操作演示</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 新建表<br> <br>CREATE TABLE mylock (<br>id INT(11) NOT NULL AUTO_INCREMENT,<br>name VARCHAR(20) DEFAULT NULL,<br>PRIMARY KEY (id)<br>);<br>INSERT INTO mylock VALUES(1, &#x27;a&#x27;);<br>INSERT INTO mylock VALUES(2, &#x27;b&#x27;);<br>INSERT INTO mylock VALUES(3, &#x27;c&#x27;);<br>INSERT INTO mylock VALUES(4, &#x27;d&#x27;);<br>INSERT INTO mylock VALUES(5, &#x27;e&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/db/mysql/tlock.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; lock table mylock read;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from mylock;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | a    |<br>|  2 | b    |<br>|  3 | c    |<br>|  4 | d    |<br>|  5 | e    |<br>+----+------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt; select * from dept;<br>ERROR 1100 (HY000): Table &#x27;dept&#x27; was not locked with LOCK TABLES<br>-- session2<br>mysql&gt; select * from mylock;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | a    |<br>|  2 | b    |<br>|  3 | c    |<br>|  4 | d    |<br>|  5 | e    |<br>+----+------+<br>5 rows in set (0.00 sec)<br>mysql&gt; update mylock set name=&#x27;bb&#x27; where id=2;  -- 修改阻塞，自动加上行写锁<br>-- session1<br>mysql&gt; unlock tables;<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>Query OK, 1 row affected (1 min 35.08 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0        -- session1解锁后立刻执行<br>mysql&gt; update mylock set name=&#x27;b&#x27; where id=2;    <br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>-- session1<br>mysql&gt; select * from dept;                      -- session1可以访问其他表<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | a    |<br>|  2 | b    |<br>|  3 | c    |<br>|  4 | d    |<br>|  5 | e    |<br>+----+------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><img src="/images/db/mysql/twlock.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; lock table mylock read;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from mylock;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | a    |<br>|  2 | b    |<br>|  3 | c    |<br>|  4 | d    |<br>|  5 | e    |<br>+----+------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt; select * from dept;<br>ERROR 1100 (HY000): Table &#x27;dept&#x27; was not locked with LOCK TABLES<br>mysql&gt; update mylock set name=&#x27;b&#x27; where id=2;   -- session可以修改<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>-- session2<br>mysql&gt; select * from mylock;                    -- 查询阻塞<br>-- session1<br>mysql&gt; unlock tables;<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | a    |<br>|  2 | b    |<br>|  3 | c    |<br>|  4 | d    |<br>|  5 | e    |<br>+----+------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="元数据锁mdl">元数据锁(MDL)</h4><p><strong>MDL不需要显示使用，在访问一个表的时候会自动加上</strong>。**MDL的锁作用是保证写的正确性，可以想像一下：如果一个查询正在遍历表中的数据，而执行期间另一个线程对这个表结构做变更删除一行，那么查询县城拿到的结果便可能跟当前的表结构对应不上。</p><p>因此，在MySQ L5.5版本中引入MDL，<strong>当对一个表中做增删改查操作时，加MDL读锁；当要对表结构变更操作时，加MDL写锁</strong>。</p><ul><li>读锁之间不互斥，因此可以有多个线程对一行表增删改查</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程同时要给一个表加字段，其中一个要等另一个执行完才能执行。</li></ul><p><img src="/images/db/mysql/tmlock.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; select * from mylock;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | a    |<br>|  2 | b    |<br>|  3 | c    |<br>|  4 | d    |<br>|  5 | e    |<br>+----+------+<br>5 rows in set (0.00 sec)<br>-- session2<br>mysql&gt; alter table mylock add dep int;        -- 阻塞<br>-- session1<br>mysql&gt; commit;                                -- 释放锁<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>Query OK, 0 rows affected (12.80 sec)         -- 完成修改<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc mylock;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| id    | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| name  | varchar(20) | YES  |     | NULL    |                |<br>| dep   | int(11)     | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="mysql行级锁">MySQL行级锁</h4><h5 id="基础概念">基础概念</h5><p>由存储引擎实现，利用存储引擎锁住索引项来实现。</p><p>InnoDB的行级锁，按照锁定范围来说，分为三种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">- 记录锁（Record locks）:锁定索引中一条记录<br>- 间隙锁（Gap Locks）:要么锁索引中间的值，要么锁住第一个索引记录前面的值或者最后一个索引后面的值。<br>- Next-key Locks:是索引记录上的记录锁在索引记录之前的间隙锁的组合<br></code></pre></td></tr></table></figure><p>InnoDB的行级锁，按照功能分为两种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">- 共享锁（S）:允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁<br>- 排它锁（S）:允许获得排它锁的事务更新数据，阻止其他事务获得相同数据集的共享读锁(不是读)和排它锁<br></code></pre></td></tr></table></figure><p>对于UPDATE、DELETE、INSERT语句，InnoDB会自动给设计数据集加排它锁（X）;</p><p>对于普通SELECT语句，InnoDB不回家任何锁，事务可以通过以下语句显示给记录集加共享锁和排它锁。</p><p><strong>手动添加共享锁(S)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from table_name where ... lock in share mode;<br></code></pre></td></tr></table></figure><p><strong>手动添加排它锁(X)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from table_name where ... for update;<br></code></pre></td></tr></table></figure><p>InnoDB也实现了表级锁，也就是意向锁。意向锁是mysql内部使用的，不需要用户干预。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">- 意向共享锁（IS）:事务打算给数据行加行共享锁，事务给一个数据行加行共享锁必须先去的该表的IS锁。<br>- 意向排它锁（IX）:事务打算给数据行加行排它锁，事务给一个数据行加行排它锁必须先去的该表的IX锁。<br></code></pre></td></tr></table></figure><p>意向锁和行锁可以共存，意向锁的主要作用是为了【全表更新数据】是的性能提升。否则在全表更新数据时，需要先检索该表是否有某系记录上面有行锁。</p><table><thead><tr class="header"><th></th><th>共享锁(S)</th><th>排它锁(X)</th><th>意向共享锁（IS）</th><th>意向排它锁（IX）</th></tr></thead><tbody><tr class="odd"><td>共享锁(S)</td><td>兼容</td><td>冲突</td><td>兼容</td><td>冲突</td></tr><tr class="even"><td>排它锁(X)</td><td>冲突</td><td>冲突</td><td>冲突</td><td>冲突</td></tr><tr class="odd"><td>意向共享锁（IS）</td><td>兼容</td><td>冲突</td><td>兼容</td><td>兼容</td></tr><tr class="even"><td>意向排它锁（IX）</td><td>冲突</td><td>冲突</td><td>兼容</td><td>兼容</td></tr></tbody></table><p><strong>InnoDB行锁</strong>是通过给索引上的<strong>索引项加锁来实现</strong>的，因此InnoDB这种行锁的实现特点意味着：只有通过<strong>索引条件检索的数据</strong>，InnoDB才使用<strong>行级锁</strong>；否则，InnoDB将使用<strong>表级锁</strong></p><p>InnoDB锁使用<strong>行级锁</strong>争用状态查看命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show status like &#x27;innodb_row_lock%&#x27;;<br>+-------------------------------+-------+<br>| Variable_name                 | Value |<br>+-------------------------------+-------+<br>| Innodb_row_lock_current_waits | 0     |  -- 当前正在等待锁定的数量<br>| Innodb_row_lock_time          | 0     |  -- +从系统启动到现在锁定总时间长度<br>| Innodb_row_lock_time_avg      | 0     |  -- +每次等待锁话平均时间<br>| Innodb_row_lock_time_max      | 0     |  -- 从系统启动到现在等待最长那次时间<br>| Innodb_row_lock_waits         | 0     |  -- +从系统启动到现在总共等待的次数<br>+-------------------------------+-------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="两阶段锁">两阶段锁</h5><p>传统的RDMS加锁原则就是2PL（Two-Phase Locking,两阶段锁）。相对而言，2PL比较容易理解：加锁阶段与解锁阶段，并且保证加锁阶段与解锁阶段不相交。</p><p><img src="/images/db/mysql/2pll.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">加锁阶段：只加锁，不放锁<br>解锁阶段：只放锁，不加锁<br></code></pre></td></tr></table></figure><h5 id="行读锁">行读锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from mylock where id=1 lock in share mode; -- 手动id=1加行读锁<br>+----+------+------+<br>| id | name | dep  |<br>+----+------+------+<br>|  1 | a    | NULL |<br>+----+------+------+<br>1 row in set (0.00 sec)<br>-- session2<br><br>mysql&gt; update mylock set name=&#x27;bb&#x27; where id=2;  -- 未锁定可以修改<br>mysql&gt; update mylock set name=&#x27;aa&#x27; where id=1;  -- 锁定不可修改<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction   -- 锁定超时<br>Query OK, 1 row affected (0.01 sec) <br>Rows matched: 1  Changed: 1  Warnings: 0<br>-- session1<br>mysql&gt; commit;  -- 提交事务/rollback释放锁<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>Query OK, 1 row affected (12.06 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><h5 id="行读锁升级为表锁">行读锁升级为表锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; select * from mylock where name=&#x27;a&#x27; lock in share mode; -- 手动name=&#x27;a&#x27;非索引 行读锁升级表锁<br>+----+------+------+<br>| id | name | dep  |<br>+----+------+------+<br>|  1 | a    | NULL |<br>+----+------+------+<br>1 row in set (0.00 sec)<br>-- session2<br>mysql&gt; update mylock set name=&#x27;b&#x27; where id=2;  -- 阻塞 不可修改<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; update mylock set name=&#x27;a&#x27; where id=1;   -- 阻塞 不可修改<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>-- session1<br>mysql&gt; commit;  -- 提交事务/rollback释放锁<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>mysql&gt; update mylock set name=&#x27;b&#x27; where id=2;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>mysql&gt; update mylock set name=&#x27;a&#x27; where id=1;<br>Query OK, 0 rows affected (0.00 sec)<br>Rows matched: 1  Changed: 0  Warnings: 0<br></code></pre></td></tr></table></figure><h5 id="行写锁">行写锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from mylock where id=1 for update;<br>-- session2<br>mysql&gt; update mylock set name=&#x27;bb&#x27; where id=2;  -- 未锁定可以修改<br>Query OK, 1 row affected (0.01 sec) <br>Rows matched: 1  Changed: 1  Warnings: 0<br>mysql&gt; select * from mylock where id=1;  -- select本身不加锁 可以访问<br>+----+------+------+<br>| id | name | dep  |<br>+----+------+------+<br>|  1 | a    | NULL |<br>+----+------+------+<br>1 row in set (0.00 sec)<br>mysql&gt; select * from mylock where id=1 lock in share mode; -- 共享读锁不可获得<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction <br>mysql&gt; update mylock set name=&#x27;aa&#x27; where id=1;  -- 锁定不可修改<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction <br>-- session1<br>mysql&gt; commit;  -- 提交事务/rollback释放锁<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>Query OK, 1 row affected (12.06 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><h5 id="行写锁升级为表锁">行写锁升级为表锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt; begin;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; select * from mylock where name=&#x27;a&#x27; for update; -- 手动name=&#x27;a&#x27;非索引 行读锁升级表锁<br>+----+------+------+<br>| id | name | dep  |<br>+----+------+------+<br>|  1 | a    | NULL |<br>+----+------+------+<br>1 row in set (0.00 sec)<br>-- session2<br>mysql&gt; select * from mylock;<br>+----+------+------+<br>| id | name | dep  |<br>+----+------+------+<br>|  1 | a    | NULL |<br>|  2 | b    | NULL |<br>|  3 | c    | NULL |<br>|  4 | d    | NULL |<br>|  5 | e    | NULL |<br>+----+------+------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt; select * from mylock where id=1;<br>+----+------+------+<br>| id | name | dep  |<br>+----+------+------+<br>|  1 | a    | NULL |<br>+----+------+------+<br>1 row in set (0.00 sec)<br>mysql&gt; select * from mylock where id=1 lock in share mode; -- 阻塞 不可获得锁<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; update mylock set name=&#x27;b&#x27; where id=2;  -- 阻塞 不可修改<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; update mylock set name=&#x27;a&#x27; where id=1;   -- 阻塞 不可修改<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>-- session1<br>mysql&gt; commit;  -- 提交事务/rollback释放锁<br>Query OK, 0 rows affected (0.00 sec)<br>-- session2<br>mysql&gt; update mylock set name=&#x27;b&#x27; where id=2;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>mysql&gt; update mylock set name=&#x27;a&#x27; where id=1;<br>Query OK, 0 rows affected (0.00 sec)<br>Rows matched: 1  Changed: 0  Warnings: 0<br></code></pre></td></tr></table></figure><h5 id="间隙锁">间隙锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table news(id int, number int, primary key(id), index idx_num(number));<br>insert into news values(1,2);<br>insert into news values(3,4);<br>insert into news values(6,5);<br>insert into news values(8,5);<br>insert into news values(10,5);<br>insert into news values(13,11);<br>mysql&gt; select * from news;<br>+----+--------+<br>| id | number |  # id主键 索引 number<br>+----+--------+<br>|  1 |      2 |<br>|  3 |      4 |<br>|  6 |      5 |<br>|  8 |      5 |<br>| 10 |      5 |<br>| 13 |     11 |<br>+----+--------+<br>6 rows in set (0.01 sec)<br><br>-- session1<br>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; select * from news where number=4 for update;<br>-- id在2、5之间和3-5之间且number2-6在均被锁住<br>+----+--------+<br>| id | number |<br>+----+--------+<br>|  3 |      4 |<br>+----+--------+<br>1 row in set (0.01 sec)<br>-- session2<br>mysql&gt; start transaction;<br>mysql&gt; insert into news values(2,4);  -- 阻塞<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; insert into news values(2,2);  -- 阻塞<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; insert into news values(4,4);  -- 阻塞<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; insert into news values(4,5);  -- 阻塞<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; insert into news values(5,7);<br>Query OK, 1 row affected (0.00 sec)<br>mysql&gt; insert into news values(7,5);<br>Query OK, 1 row affected (0.01 sec)<br>mysql&gt; insert into news values(9,5);<br>Query OK, 1 row affected (0.01 sec)<br>mysql&gt; insert into news values(11,5);<br>Query OK, 1 row affected (0.01 sec)<br><br>insert into news values(13,11);<br>mysql&gt; select * from news;<br>mysql&gt; select * from news;<br>+----+--------+<br>| id | number |<br>+----+--------+<br>|  1 |      2 |<br>|  3 |      4 |<br>|  6 |      5 |<br>|  8 |      5 |<br>| 10 |      5 |<br>| 13 |     11 |<br>+----+--------+<br>6 rows in set (0.01 sec)<br>-- session1<br>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; select * from news where number=13 for update;<br>      （select * from news where id&gt;1 and id&lt;4 for update;）<br>mysql&gt; start transaction;<br>mysql&gt; insert into news values(11,5);<br>Query OK, 1 row affected (0.00 sec)<br>mysql&gt; insert into news values(12,11);<br>Query OK, 1 row affected (0.00 sec)<br>mysql&gt; insert into news values(14,11);<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>mysql&gt; insert into news values(15,12);<br>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction<br>检索条件number=13，想做取得最靠近的值11作为作区间，向右由于没有记录因此取得无穷大作为右区间，即session1间隙锁区间（11，无穷大）<br><br></code></pre></td></tr></table></figure><h5 id="死锁">死锁</h5><p>两个session互相等待对方的释放资源之后，才能释放自己的资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session1<br>mysql&gt;begin;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt;update mylock set name=&#x27;m&#x27; where id=1;  -- 手动加行写锁 id=1,使用索引<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>-- session2<br>mysql&gt;begin;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt;update mylock set name=&#x27;m&#x27; where id=2;  -- 手动加行写锁 id=2,使用索引<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br>-- session1<br>mysql&gt;update mylock set name=&#x27;nn&#x27; where id=2; -- 加写锁被阻塞<br>-- session2<br>mysql&gt;update mylock set name=&#x27;nn&#x27; where id=1; -- 加写锁会死锁 不允许操作<br>ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction<br></code></pre></td></tr></table></figure><h4 id="相关面试题-1">相关面试题</h4><h5 id="什么是锁mysql-中提供了几类锁">什么是锁？MySQL 中提供了几类锁？</h5><p>锁是实现数据库并发控制的重要手段，可以保证数据库在多人同时操作时能够正常运行。MySQL 提供了全局锁、行级锁、表级锁。其中 InnoDB 支持表级锁和行级锁，MyISAM 只支持表级锁。</p><h5 id="什么是全局锁它的应用场景有哪些">什么是全局锁？它的应用场景有哪些？</h5><p>全局锁就是对整个数据库实例加锁，它的典型使用场景就是做全库逻辑备份。 这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句、数据定义语句、更新类事务的提交语句等操作都会被阻塞。</p><h5 id="什么是共享锁">什么是共享锁？</h5><p>共享锁又称读锁 (read lock)，是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。当如果事务对读锁进行修改操作，很可能会造成死锁。</p><h5 id="什么是排它锁">什么是排它锁？</h5><p>排他锁 exclusive lock（也叫 writer lock）又称写锁。</p><p>若某个事物对某一行加上了排他锁，只能这个事务对其进行读写，在此事务结束之前，其他事务不能对其进行加任何锁，其他进程可以读取,不能进行写操作，需等待其释放。</p><p>排它锁是悲观锁的一种实现，在上面悲观锁也介绍过。</p><p>若事务 1 对数据对象 A 加上 X 锁，事务 1 可以读 A 也可以修改 A，其他事务不能再对 A 加任何锁，直到事物 1 释放 A 上的锁。这保证了其他事务在事物 1 释放 A 上的锁之前不能再读取和修改 A。排它锁会阻塞所有的排它锁和共享锁。</p><h5 id="innodb-存储引擎有几种锁算法">InnoDB 存储引擎有几种锁算法？</h5><ul><li><p>Record Lock — 单个行记录上的锁；</p></li><li><p>Gap Lock — 间隙锁，锁定一个范围，不包括记录本身；</p></li><li><p>Next-Key Lock — 锁定一个范围，包括记录本身。</p></li></ul><h5 id="使用全局锁会导致什么问题">使用全局锁会导致什么问题？</h5><p>如果在主库备份，在备份期间不能更新，业务停摆，所以更新业务会处于等待状态。</p><p>如果在从库备份，在备份期间不能执行主库同步的 binlog，导致主从延迟。</p><h5 id="如何处理逻辑备份时整个数据库不能插入的情况">如何处理逻辑备份时，整个数据库不能插入的情况？</h5><p>如果使用全局锁进行逻辑备份就会让整个库成为只读状态，幸好官方推出了一个逻辑备份工具 MySQLdump 来解决了这个问题，只需要在使用 MySQLdump 时，使用参数 -single-transaction 就会在导入数据之前启动一个事务来保证数据的一致性，并且这个过程是支持数据更新操作的。</p><h5 id="如何设置数据库为全局只读锁">如何设置数据库为全局只读锁？</h5><p>使用命令 <code>flush tables with read lock</code>（简称 FTWRL）就可以实现设置数据库为全局只读锁。</p><h5 id="除了-ftwrl-可以设置数据库只读外还有什么别的方法">除了 FTWRL 可以设置数据库只读外，还有什么别的方法？</h5><p>除了使用 FTWRL 外，还可以使用命令 <code>set global readonly=true</code> 设置数据库为只读。</p><h5 id="ftwrl-和-set-global-readonlytrue-有什么区别">FTWRL 和 set global readonly=true 有什么区别？</h5><p>FTWRL 和 set global readonly=true 都是设置整个数据库为只读状态，但他们最大的区别就是，当执行 FTWRL 的客户端断开之后，整个数据库会取消只读，而 set global readonly=true 会一直让数据处于只读状态。</p><h5 id="如何实现表锁">如何实现表锁？</h5><p>MySQL 里标记锁有两种：表级锁、元数据锁（meta data lock）简称 MDL。表锁的语法是 lock tables t read/write。</p><p>可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p><p>对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><p>MDL：不需要显式使用，在访问一个表的时候会被自动加上。</p><p>MDL 的作用：保证读写的正确性。</p><p>在对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</p><p>读锁之间不互斥，读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。</p><p>MDL 会直到事务提交才会释放，在做表结构变更的时候，一定要小心不要导致锁住线上查询和更新。</p><h5 id="innodb-如何实现行锁">InnoDB 如何实现行锁？</h5><p>行级锁是 MySQL 中粒度最小的一种锁，他能大大减少数据库操作的冲突。</p><p>INNODB 的行级锁有共享锁（S LOCK）和排他锁（X LOCK）两种。共享锁允许事物读一行记录，不允许任何线程对该行记录进行修改。排他锁允许当前事物删除或更新一行记录，其他线程不能操作该记录。</p><p>共享锁：SELECT … LOCK IN SHARE MODE，MySQL 会对查询结果集中每行都添加共享锁，前提是当前线程没有对该结果集中的任何行使用排他锁，否则申请会阻塞。</p><p>排他锁：select * from t where id=1 for update，其中 id 字段必须有索引，MySQL 会对查询结果集中每行都添加排他锁，在事物操作中，任何对记录的更新与删除操作会自动加上排他锁。前提是当前没有线程对该结果集中的任何行使用排他锁或共享锁，否则申请会阻塞。</p><h5 id="悲观锁和乐观锁有什么区别">悲观锁和乐观锁有什么区别？</h5><p>顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。正因为如此，悲观锁需要耗费较多的时间，另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</p><p>说到这里，由悲观锁涉及到的另外两个锁概念就出来了，它们就是共享锁与排它锁。共享锁和排它锁是悲观锁的不同的实现，它俩都属于悲观锁的范畴。</p><p>乐观锁是用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 version 字段来实现。当读取数据时，将 version 字段的值一同读出，数据每更新一次，对此 version 值加 1。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的 version 值相等，则予以更新，否则认为是过期数据。</p><p>比如：</p><p>1、数据库表三个字段，分别是<code>id、value、version</code> <code>select id,value,version from t where id=#&#123;id&#125;</code></p><p>2、每次更新表中的value字段时，为了防止发生冲突，需要这样操作</p><p><code>update t set value=2,version=version+1 where id=#&#123;id&#125; and version=#&#123;version&#125;</code></p><h5 id="乐观锁有什么优点和缺点">乐观锁有什么优点和缺点？</h5><p>因为没有加锁所以乐观锁的优点就是执行性能高。它的缺点就是有可能产生 ABA 的问题，ABA 问题指的是有一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，会误以为没有被修改会正常的执行修改操作，实际上这段时间它的值可能被改了其他值，之后又改回为 A 值，这个问题被称为 ABA 问题。</p><h5 id="优化锁方面你有什么建议">优化锁方面你有什么建议？</h5><ul><li><p>尽量使用较低的隔离级别。</p></li><li><p>精心设计索引， 并尽量使用索引访问数据， 使加锁更精确， 从而减少锁冲突的机会。</p></li><li><p>选择合理的事务大小，小事务发生锁冲突的几率也更小。</p></li><li><p>给记录集显示加锁时，最好一次性请求足够级别的锁。比如要修改数据的话，最好直接申请排他锁，而不是先申请共享锁，修改时再请求排他锁，这样容易产生死锁。</p></li><li><p>不同的程序访问一组表时，应尽量约定以相同的顺序访问各表，对一个表而言，尽可能以固定的顺序存取表中的行。这样可以大大减少死锁的机会。</p></li><li><p>尽量用相等条件访问数据，这样可以避免间隙锁对并发插入的影响。</p></li><li><p>不要申请超过实际需要的锁级别。</p></li><li><p>除非必须，查询时不要显示加锁。 MySQL 的 MVCC 可以实现事务中的查询不用加锁，优化事务性能；MVCC 只在 COMMITTED READ（读提交）和 REPEATABLE READ（可重复读）两种隔离级别下工作。</p></li><li><p>对于一些特定的事务，可以使用表锁来提高处理速度或减少死锁的可能。</p></li></ul><h5 id="什么是死锁">什么是死锁？</h5><p>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的过程称为死锁。</p><p>死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的过程称为死锁。</p><h5 id="常见的死锁案例有哪些">常见的死锁案例有哪些？</h5><ul><li><p>将投资的钱拆封几份借给借款人，这时处理业务逻辑就要把若干个借款人一起锁住<code>select * from xxx where id in (xx,xx,xx) for update</code>。</p></li><li><p>批量入库，存在则更新，不存在则插入。解决方法<code>insert into tab(xx,xx) on duplicate key update xx='xx'</code>。</p></li></ul><h5 id="如何处理死锁">如何处理死锁？</h5><p>对待死锁常见的两种策略：</p><ul><li><p>通过<code>innodblockwait_timeout</code> 来设置超时时间，一直等待直到超时；</p></li><li><p>发起死锁检测，发现死锁之后，主动回滚死锁中的某一个事务，让其它事务继续执行。</p></li></ul><h5 id="如何查看死锁">如何查看死锁？</h5><ul><li><p>使用命令 show engine innodb status 查看最近的一次死锁。</p></li><li><p>InnoDB Lock Monitor 打开锁监控，每 15s 输出一次日志。使用完毕后建议关闭，否则会影响数据库性能。</p></li></ul><h5 id="如何避免死锁">如何避免死锁？</h5><ul><li><p>为了在单个 InnoDB 表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用 SELECT … FOR UPDATE 语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</p></li><li><p>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁、更新时再申请排他锁，因为这时候当用户再申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁</p></li><li><p>如果事务需要修改或锁定多个表，则应在每个事务中以相同的顺序使用加锁语句。在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会</p></li><li><p>通过 <code>SELECT … LOCK IN SHARE MODE</code>获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。</p></li><li><p>改变事务隔离级别。</p></li></ul><h5 id="innodb-默认是如何对待死锁的">InnoDB 默认是如何对待死锁的？</h5><p>InnoDB 默认是使用设置死锁时间来让死锁超时的策略，默认 innodblockwait_timeout 设置的时长是 50s。</p><h5 id="如何开启死锁检测">如何开启死锁检测？</h5><p>设置 <code>innodbdeadlockdetect</code>设置为 on 可以主动检测死锁，在 Innodb 中这个值默认就是 on 开启的状态。</p><h3 id="分库分表原理及实践">分库分表原理及实践</h3><h4 id="mycat">MyCat</h4><p><img src="/images/db/mysql/mycat.png"></p><h5 id="核心概念">核心概念</h5><ul><li>Schema：由它指定逻辑数据库（相当于MySQL的datebase数据库）</li><li>Table：逻辑表（相当于MySQL的table表）</li><li>DataNode：真正存储数据的物理节点</li><li>DateHost：存储节点所在的数据库主机（指定MySQL数据库的连接信息）</li><li>User：MyCat用户（类似于MySQL的用户，支持多用户）</li></ul><h5 id="主要解决问题">主要解决问题</h5><ul><li>海量数据存储</li><li>查询优化</li></ul><h5 id="支持数据库">支持数据库</h5><p><img src="/images/db/mysql/catdb.png"></p><h5 id="分片策略">分片策略</h5><p>MyCAT支持水平分片语垂直分片：</p><ul><li>水平分片：一个表格的数据分割到多个节点上，按照行分割。</li><li>垂直分片：一个数据库中多个表A,B,C，A存储到节点1，B存储到节点2，C存储到节点3。</li></ul><p><img src="/images/db/mysql/catdate.png"></p><p><img src="/images/db/mysql/catdate2.png"></p><p>MyCAT通过定义表的分片规则来实现分片，没个表格可以捆绑一个分片规则，每个分片规则制定一个分片字段并绑定一个函数，来实现动态分片算法。</p><ul><li>Schema：逻辑库，与MySQL的datebase数据对应，一个逻辑库中定义了所有包括的Table。</li><li>Table：表，即物理数据库中存储的某张表，与传统数据库不同，这里的表格需要声明其所存储的逻辑数据节点DataNode。<strong>可以指定表的分片规则</strong></li><li>DataNode：MyCAT的逻辑数据节点，是存放Table的具体物理节点，也称之为分片节点，通过DateHost来关联到后段某个具体数据库上。</li><li>DateHost：定义某个物理库的访问地址，用于捆绑到DataNode上。</li></ul><h5 id="安装">安装</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 下载</span><br>wget http://dl.mycat.org.cn/1.6.7.4/Mycat-server-1.6.7.4-release/Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz<br><br><span class="hljs-comment"># 解压</span><br>tar -zxvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz /weitrue/install<br><br><span class="hljs-comment"># 进入mycat目录</span><br><span class="hljs-built_in">cd</span> /weitrue/install/mycat<br><br><span class="hljs-comment"># 启动/关闭  进入mycat/bin下</span><br>./mycat start     <span class="hljs-comment"># 启动</span><br>./mycat stop      <span class="hljs-comment"># 关闭</span><br>./mycat restart   <span class="hljs-comment"># 重启</span><br>./mycat status    <span class="hljs-comment"># 状态</span><br><br><span class="hljs-comment"># 使用mysql客户端直接连接mycat服务,默认端口【8066】</span><br>mysql -uroot -p123456 -h127.0.0.1 -P8066<br></code></pre></td></tr></table></figure><h5 id="分片设置">分片设置</h5><h6 id="配置schema.xml文件">配置schema.xml文件</h6><p><code>schema.xml</code>是Mycat中重要的配置文件之一，主要管理着MyCAT的逻辑库、表、分片规则、DataNode以及DateHost之间的映射关系。</p><ul><li><code>&lt;schema&gt;</code>定义Mycat实例中的逻辑库。<ul><li><code>&lt;table&gt;</code>定义Mycat中的逻辑表。</li></ul></li><li><code>&lt;dataNode&gt;</code>定义了Mycat的数据节点，即数据分片。</li><li><code>&lt;dataHost&gt;</code>定义了具体的数据库实例、读写分离配置和心跳语句。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mycat</span>:schema <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">schema:逻辑库 name：逻辑库名 sqlMaxLimit 一次去多少条数据，如果超过limit</span><br><span class="hljs-comment">              table 逻辑表</span><br><span class="hljs-comment">                dataNode 数据节点 对应 dataNode标签名</span><br><span class="hljs-comment">                rule 分片规则 对应rule.xml</span><br><span class="hljs-comment">                subTables字表</span><br><span class="hljs-comment">                primaryKey 分片主键 可缓存</span><br><span class="hljs-comment"> --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">randomDataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- auto sharding by id (long) --&gt;</span><br>                <span class="hljs-comment">&lt;!--splitTableNames 启用&lt;table name 属性使用逗号分割配置多个表,即多个表使用这个配置--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1,dn2,dn3&quot;</span> <span class="hljs-attr">rule</span>=<span class="hljs-string">&quot;mod-long&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;ID&quot;</span>/&gt;</span>               <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br>  <br>        <span class="hljs-comment">&lt;!-- &lt;dataNode name=&quot;dn1$0-743&quot; dataHost=&quot;localhost1&quot; database=&quot;db$0-743&quot;/&gt; --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db1&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn2&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn3&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db3&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">dataHost:数据主机</span><br><span class="hljs-comment">            balance 1:读写分离 0:读写不分离</span><br><span class="hljs-comment">            writeType 0:第一个writrHost写 1:随机writrHost写</span><br><span class="hljs-comment">            dbDriver 数据驱动 native: MySQL JDBC:Oracle SQLServer</span><br><span class="hljs-comment">            switchType是否主动读 1:主从自动切换 -1:不切换 2:当从机延时超过slaveThreshold(毫秒级)值时切换为主读</span><br><span class="hljs-comment"> --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">                          <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- can have multi write hosts --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;localhost:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="rule.xml"><code>rule.xml</code></h6><p><code>rule.xml</code>定义我们对表拆分涉及到的规则定义。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mycat</span>:rule <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;rule.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:rule</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tableRule</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mod-long&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">rule</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">columns</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">columns</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">algorithm</span>&gt;</span>mod-long<span class="hljs-tag">&lt;/<span class="hljs-name">algorithm</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">rule</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tableRule</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">function</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mod-long&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- how many data nodes --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">function</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:rule</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="server.xml"><code>server.xml</code></h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br></code></pre></td></tr></table></figure><h6 id="十大分片规则">十大分片规则</h6><p><strong>连续分片</strong></p><ul><li>日期分片<ul><li>按月</li><li>按日</li><li>按小时</li></ul></li><li>范围约定：配置简单，即预先制定可能的id范围对应某个分片<ul><li>优势：扩容无需迁移数据</li><li>缺点：热点数据，并发受限</li></ul></li></ul><p><strong>离散分片</strong></p><ul><li>枚举法</li><li>求模法</li><li>字符串拆分hash法</li><li>固定分片hash法</li><li>一致性哈希（解决扩容问题）</li><li>编程指定</li></ul><p><strong>综合分片</strong></p><ul><li>通配取模</li><li>ASCii码求模通配</li></ul><h5 id="读写分离">读写分离</h5><p>建立在MySQL主从复制的基础上实现，必须搭建MySQL的主从复制。</p><p><img src="/images/db/mysql/mycatrw.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;dataNode name=&quot;dn1$0-743&quot; dataHost=&quot;localhost1&quot; database=&quot;db$0-743&quot;/&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn2&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db2&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn3&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db3&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">dataHost:数据主机</span><br><span class="hljs-comment">        balance 1:读写分离 0:读写不分离</span><br><span class="hljs-comment">        writeType 0:第一个writrHost写 1:随机writrHost写</span><br><span class="hljs-comment">        dbDriver 数据驱动 native: MySQL JDBC:Oracle SQLServer</span><br><span class="hljs-comment">        switchType是否主动读 1:主从自动切换 -1:不切换 2:当从机延时超过slaveThreshold(毫秒级)值时切换为主读</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">                      <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;2&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>show slave status<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- can have multi write hosts --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;localhost:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>switchType="2"</code>和<code>slaveThreshold="100"</code>意味着开启MySQL主从复制状态绑定的读写分离语切换机制。Mycat心跳机制通过检测<code>show slave status</code>中<code>"Seconds_Behind_Master" "Slave_IO_Running" "Slave_SQL_Running"</code>三个字段来确定当前主从的状态以及<code>Seconds_Behind_Master</code>主从复制延时。</p><h4 id="mysql分库分表">MySQL分库分表</h4><h5 id="数据切分方案">数据切分方案</h5><ul><li>垂直切分：根据业务模块进行切分，不同模块的表分到不同的库中。</li><li>水平切分：将一张大表按照一定切分规则，按照<strong>行</strong>切分到不同表或者不同库中。</li></ul><h6 id="水平切分原则">水平切分原则</h6><p>常用的主要分为：</p><ul><li>按照ID取模：对ID取模，余数决定改行数据放到哪张表或者哪个库中。</li><li>按照日期：按照年月日，将数据切分到不同的表或者库中。</li><li>按照范围：可以对某一列按照范围进行切分不同的范围切分到不同的表或者库中。</li></ul><h6 id="切分原则">切分原则</h6><ul><li>第一原则：能不切分尽量不要切分</li><li>第二原则：如果要切分一定要选择合适的规则，提前规划好</li><li>第三原则：数据切分尽量通过数据冗余或者表分组来<strong>降低跨库join</strong>的可能</li><li>第四原则：由于数据库中间件对数据join实现的优劣难以把握，而且实现高性能难度极大，业务读取尽量少使用多表join</li></ul><h5 id="分库分表需要解决问题">分库分表需要解决问题</h5><h6 id="分布式事务问题">分布式事务问题</h6><h6 id="分布式主键id问题">分布式主键ID问题</h6><h6 id="跨库join问题">跨库join问题</h6><h6 id="跨库countgrouporderby问题">跨库count、group、orderby问题</h6><h3 id="面试题">面试题</h3><h4 id="基础模块">基础模块</h4><h5 id="说一下-mysql-执行一条查询语句的内部执行过程">说一下 MySQL 执行一条查询语句的内部执行过程？</h5><ul><li><p>客户端先通过连接器连接到 MySQL 服务器。</p></li><li><p>连接器权限验证通过之后，先查询是否有查询缓存，如果有缓存（之前执行过此语句）则直接返回缓存数据，如果没有缓存则进入分析器。</p></li><li><p>分析器会对查询语句进行语法分析和词法分析，判断 SQL 语法是否正确，如果查询语法错误会直接返回给客户端错误信息，如果语法正确则进入优化器。</p></li><li><p>优化器是对查询语句进行优化处理，例如一个表里面有多个索引，优化器会判别哪个索引性能更好。</p></li><li><p>优化器执行完就进入执行器，执行器就开始执行语句进行查询比对了，直到查询到满足条件的所有数据，然后进行返回。</p></li></ul><h5 id="mysql-提示不存在此列是执行到哪个节点报出的">MySQL 提示“不存在此列”是执行到哪个节点报出的？</h5><p>此错误是执行到分析器阶段报出的，因为 MySQL 会在分析器阶段检查 SQL 语句的正确性。</p><h5 id="mysql-查询缓存的功能有何优缺点">MySQL 查询缓存的功能有何优缺点？</h5><p>MySQL 查询缓存功能是在连接器之后发生的，它的优点是效率高，如果已经有缓存则会直接返回结果。 查询缓存的缺点是失效太频繁导致缓存命中率比较低，任何更新表操作都会清空查询缓存，因此导致查询缓存非常容易失效。</p><h5 id="如何关闭-mysql-的查询缓存功能">如何关闭 MySQL 的查询缓存功能？</h5><p>MySQL 查询缓存默认是开启的，配置 querycachetype 参数为 DEMAND（按需使用）关闭查询缓存，MySQL 8.0 之后直接删除了查询缓存的功能。</p><h5 id="mysql-的常用引擎都有哪些">MySQL 的常用引擎都有哪些？</h5><p>MySQL 的常用引擎有 InnoDB、MyISAM、Memory 等，从 MySQL 5.5.5 版本开始 InnoDB 就成为了默认的存储引擎。</p><h5 id="mysql-可以针对表级别设置数据库引擎吗怎么设置">MySQL 可以针对表级别设置数据库引擎吗？怎么设置？</h5><p>可以针对不同的表设置不同的引擎。在 create table 语句中使用 engine=引擎名（比如Memory）来设置此表的存储引擎。完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(  <br>  id int primary key auto_increment,  <br>  username varchar(120),  <br>  age int <br>) ENGINE=Memory<br></code></pre></td></tr></table></figure><h5 id="常用的存储引擎-innodb-和-myisam-有什么区别">常用的存储引擎 InnoDB 和 MyISAM 有什么区别？</h5><p>InnoDB 和 MyISAM 最大的区别是 InnoDB 支持事务，而 MyISAM 不支持事务，它们主要区别如下：</p><ul><li><p>InnoDB 支持崩溃后安全恢复，MyISAM 不支持崩溃后安全恢复；</p></li><li><p>InnoDB 支持行级锁，MyISAM 不支持行级锁，只支持到表锁；</p></li><li><p>InnoDB 支持外键，MyISAM 不支持外键；</p></li><li><p>MyISAM 性能比 InnoDB 高；</p></li><li><p>MyISAM 支持 FULLTEXT 类型的全文索引，InnoDB 不支持 FULLTEXT 类型的全文索引，但是 InnoDB 可以使用 sphinx 插件支持全文索引，并且效果更好；</p></li><li><p>InnoDB 主键查询性能高于 MyISAM。</p></li></ul><h5 id="innodb-有哪些特性">InnoDB 有哪些特性？</h5><p>1）插入缓冲(insert buffer)：对于非聚集索引的插入和更新，不是每一次直接插入索引页中，而是首先判断插入的非聚集索引页是否在缓冲池中，如果在，则直接插入，否则，先放入一个插入缓冲区中。好似欺骗数据库这个非聚集的索引已经插入到叶子节点了，然后再以一定的频率执行插入缓冲和非聚集索引页子节点的合并操作，这时通常能将多个插入合并到一个操作中，这就大大提高了对非聚集索引执行插入和修改操作的性能。</p><p>2）两次写(double write)：两次写给 InnoDB 带来的是可靠性，主要用来解决部分写失败(partial page write)。doublewrite 有两部分组成，一部分是内存中的 doublewrite buffer ，大小为 2M，另外一部分就是物理磁盘上的共享表空间中连续的 128 个页，即两个区，大小同样为 2M。当缓冲池的作业刷新时，并不直接写硬盘，而是通过 memcpy 函数将脏页先拷贝到内存中的 doublewrite buffer，之后通过 doublewrite buffer 再分两次写，每次写入 1M 到共享表空间的物理磁盘上，然后马上调用 fsync 函数，同步磁盘。如下图所示</p><p><img src="/images/db/mysql/innodb.png"></p><p>3）自适应哈希索引(adaptive hash index)：由于 InnoDB 不支持 hash 索引，但在某些情况下 hash 索引的效率很高，于是出现了 adaptive hash index 功能， InnoDB 存储引擎会监控对表上索引的查找，如果观察到建立 hash 索引可以提高性能的时候，则自动建立 hash 索引。</p><h5 id="一张自增表中有三条数据删除了两条数据之后重启数据库再新增一条数据此时这条数据的-id-是几">一张自增表中有三条数据，删除了两条数据之后重启数据库，再新增一条数据，此时这条数据的 ID 是几？</h5><p>如果这张表的引擎是 MyISAM，那么 ID=4，如果是 InnoDB 那么 ID=2（MySQL 8 之前的版本）。</p><h5 id="mysql-中什么情况会导致自增主键不能连续">MySQL 中什么情况会导致自增主键不能连续？</h5><p>以下情况会导致 MySQL 自增主键不能连续：</p><ul><li><p>唯一主键冲突会导致自增主键不连续；</p></li><li><p>事务回滚也会导致自增主键不连续。</p></li></ul><h5 id="innodb-中自增主键能不能被持久化">InnoDB 中自增主键能不能被持久化？</h5><p>自增主键能不能被持久化，说的是 MySQL 重启之后 InnoDB 能不能恢复重启之前的自增列，InnoDB 在 8.0 之前是没有持久化能力的，但 MySQL 8.0 之后就把自增主键保存到 redo log（一种日志类型，下文会详细讲）中，当 MySQL 重启之后就会从 redo log 日志中恢复。</p><h5 id="什么是独立表空间和共享表空间它们的区别是什么">什么是独立表空间和共享表空间？它们的区别是什么？</h5><p>共享表空间：指的是数据库的所有的表数据，索引文件全部放在一个文件中，默认这个共享表空间的文件路径在 data 目录下。 独立表空间：每一个表都将会生成以独立的文件方式来进行存储。 共享表空间和独立表空间最大的区别是如果把表放再共享表空间，即使表删除了空间也不会删除，所以表依然很大，而独立表空间如果删除表就会清除空间。</p><h5 id="如何设置独立表空间">如何设置独立表空间？</h5><p>独立表空间是由参数 innodbfileper_table 控制的，把它设置成 ON 就是独立表空间了，从 MySQL 5.6.6 版本之后，这个值就默认是 ON 了。</p><p>如何进行表空间收缩？</p><p>使用重建表的方式可以收缩表空间，重建表有以下三种方式：</p><ul><li><p><code>alter table t engine=InnoDB</code></p></li><li><p><code>optmize table t</code></p></li><li><p><code>truncate table t</code></p></li></ul><h5 id="说一下重建表的执行流程">说一下重建表的执行流程？</h5><ul><li><p>建立一个临时文件，扫描表 t 主键的所有数据页；</p></li><li><p>用数据页中表 t 的记录生成 B+ 树，存储到临时文件中；</p></li><li><p>生成临时文件的过程中，将所有对 t 的操作记录在一个日志文件（row log）中；</p></li><li><p>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 t相同的数据文件；</p></li><li><p>用临时文件替换表 t 的数据文件。</p></li></ul><h5 id="表的结构信息存在哪里">表的结构信息存在哪里？</h5><p>表结构定义占有的存储空间比较小，在 MySQL 8 之前，表结构的定义信息存在以 .frm 为后缀的文件里，在 MySQL 8 之后，则允许把表结构的定义信息存在系统数据表之中。</p><h5 id="如果把一个-innodb-表的主键删掉是不是就没有主键就没办法进行回表查询了">如果把一个 InnoDB 表的主键删掉，是不是就没有主键，就没办法进行回表查询了？</h5><p>可以回表查询，如果把主键删掉了，那么 InnoDB 会自己生成一个长度为 6 字节的 rowid 作为主键。</p><h5 id="执行一个-update-语句以后我再去执行-hexdump-命令直接查看-ibd-文件内容为什么没有看到数据有改变呢">执行一个 update 语句以后，我再去执行 hexdump 命令直接查看 ibd 文件内容，为什么没有看到数据有改变呢？</h5><p>可能是因为 update 语句执行完成后，InnoDB 只保证写完了 redo log、内存，可能还没来得及将数据写到磁盘。</p><h5 id="内存表和临时表有什么区别">内存表和临时表有什么区别？</h5><ul><li><p>内存表，指的是使用 Memory 引擎的表，建表语法是 create table … engine=memory。这种表的数据都保存在内存里，系统重启的时候会被清空，但是表结构还在。除了这两个特性看上去比较“奇怪”外，从其他的特征上看，它就是一个正常的表。</p></li><li><p>而临时表，可以使用各种引擎类型 。如果是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，写数据的时候是写到磁盘上的。</p></li></ul><h5 id="并发事务会带来哪些问题">并发事务会带来哪些问题？</h5><ul><li><p>脏读</p></li><li><p>修改丢失</p></li><li><p>不可重复读</p></li><li><p>幻读</p></li></ul><h5 id="什么是脏读和幻读">什么是脏读和幻读？</h5><p>脏读是一个事务在处理过程中读取了另外一个事务未提交的数据；幻读是指同一个事务内多次查询返回的结果集不一样（比如增加了或者减少了行记录）。</p><h5 id="为什么会出现幻读幻读会带来什么问题">为什么会出现幻读？幻读会带来什么问题？</h5><p>因为行锁只能锁定存在的行，针对新插入的操作没有限定，所以就有可能产生幻读。 幻读带来的问题如下：</p><ul><li><p>对行锁语义的破坏；</p></li><li><p>破坏了数据一致性。</p></li></ul><h5 id="如何避免幻读">如何避免幻读？</h5><p>使用间隙锁的方式来避免出现幻读。间隙锁，是专门用于解决幻读这种问题的锁，它锁的了行与行之间的间隙，能够阻塞新插入的操作 间隙锁的引入也带来了一些新的问题，比如：降低并发度，可能导致死锁。</p><h5 id="如何查看-mysql-的空闲连接">如何查看 MySQL 的空闲连接？</h5><p>在 MySQL 的命令行中使用 show processlist; 查看所有连接，其中 Command 列显示为 Sleep 的表示空闲连接，如下图所示：</p><p><img src="/images/db/mysql/processlist.png"></p><h5 id="mysql-中的字符串类型都有哪些">MySQL 中的字符串类型都有哪些？</h5><p>MySQL 的字符串类型和取值如下：</p><table><thead><tr class="header"><th><strong>类型</strong></th><th><strong>取值范围</strong></th></tr></thead><tbody><tr class="odd"><td>CHAR(N)</td><td>0~255</td></tr><tr class="even"><td>VARCHAR(N)</td><td>0~65536</td></tr><tr class="odd"><td>TINYBLOB</td><td>0~255</td></tr><tr class="even"><td>BLOB</td><td>0~65535</td></tr><tr class="odd"><td>MEDUIMBLOB</td><td>0~167772150</td></tr><tr class="even"><td>LONGBLOB</td><td>0~4294967295</td></tr><tr class="odd"><td>TINYTEXT</td><td>0~255</td></tr><tr class="even"><td>TEXT</td><td>0~65535</td></tr><tr class="odd"><td>MEDIUMTEXT</td><td>0~167772150</td></tr><tr class="even"><td>LONGTEXT</td><td>0~4294967295</td></tr><tr class="odd"><td>VARBINARY(N)</td><td>0~N个字节的变长字节字符集</td></tr><tr class="even"><td>BINARY(N)</td><td>0~N个字节的定长字节字符集</td></tr></tbody></table><h5 id="varchar-和-char-的区别是什么分别适用的场景有哪些">VARCHAR 和 CHAR 的区别是什么？分别适用的场景有哪些？</h5><p>VARCHAR 和 CHAR 最大区别就是，VARCHAR 的长度是可变的，而 CHAR 是固定长度，CHAR 的取值范围为1-255，因此 VARCHAR 可能会造成存储碎片。由于它们的特性决定了 CHAR 比较适合长度较短的字段和固定长度的字段，如身份证号、手机号等，反之则适合使用 VARCHAR。</p><h5 id="mysql-存储金额应该使用哪种数据类型为什么">MySQL 存储金额应该使用哪种数据类型？为什么？</h5><p>MySQL 存储金额应该使用 decimal ，因为如果存储其他数据类型，比如 float 有导致小数点后数据丢失的风险。</p><h5 id="limit-32-的含义是什么">limit 3,2 的含义是什么？</h5><p>去除前三条数据之后查询两条信息。</p><h5 id="now-和-current_date-有什么区别">now() 和 current_date() 有什么区别？</h5><p>now() 返回当前时间包含日期和时分秒，current_date() 只返回当前时间，如下图所示：</p><p><img src="/images/db/mysql/cur.png"></p><h5 id="如何去重计算总条数">如何去重计算总条数？</h5><p>使用 distinct 去重，使用 count 统计总条数，具体实现脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select count(distinct f) from t;<br></code></pre></td></tr></table></figure><h5 id="lastinsertid-函数功能是什么有什么特点">lastinsertid() 函数功能是什么？有什么特点？</h5><p>lastinsertid() 用于查询最后一次自增表的编号，它的特点是查询时不需要不需要指定表名，使用 select last_insert_id() 即可查询，因为不需要指定表名所以它始终以最后一条自增编号为主，可以被其它表的自增编号覆盖。比如 A 表的最大编号是 10，lastinsertid() 查询出来的值为 10，这时 B 表插入了一条数据，它的最大编号为 3，这个时候使用 lastinsertid() 查询的值就是 3。</p><h5 id="删除表的数据有几种方式它们有什么区别">删除表的数据有几种方式？它们有什么区别？</h5><p>删除数据有两种方式：delete 和 truncate，它们的区别如下：</p><ul><li><p>delete 可以添加 where 条件删除部分数据，truncate 不能添加 where 条件只能删除整张表；</p></li><li><p>delete 的删除信息会在 MySQL 的日志中记录，而 truncate 的删除信息不被记录在 MySQL 的日志中，因此 detele 的信息可以被找回而 truncate 的信息无法被找回；</p></li><li><p>truncate 因为不记录日志所以执行效率比 delete 快。</p></li></ul><p>delete 和 truncate 的使用脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from t where username=&#x27;redis&#x27;; <br>truncate table t;<br></code></pre></td></tr></table></figure><h5 id="mysql-中支持几种模糊查询它们有什么区别">MySQL 中支持几种模糊查询？它们有什么区别？</h5><p>MySQL 中支持两种模糊查询：regexp 和 like，like 是对任意多字符匹配或任意单字符进行模糊匹配，而 regexp 则支持正则表达式的匹配方式，提供比 like 更多的匹配方式。</p><p>regexp 和 like 的使用示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from person where uname like &#x27;%SQL%&#x27;; select  from person where uname regexp &#x27;.SQL*.&#x27;;<br></code></pre></td></tr></table></figure><h5 id="mysql-支持枚举吗如何实现它的用途是什么">MySQL 支持枚举吗？如何实现？它的用途是什么？</h5><p>MySQL 支持枚举，它的实现方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t(   <br>  sex enum(&#x27;boy&#x27;,&#x27;grid&#x27;) default &#x27;unknown&#x27; <br>);<br></code></pre></td></tr></table></figure><p>枚举的作用是预定义结果值，当插入数据不在枚举值范围内，则插入失败，提示错误 Data truncated for column 'xxx' at row n 。</p><h5 id="countcolumn-和-count-有什么区别">count(column) 和 count(*) 有什么区别？</h5><p>count(column) 和 count() 最大区别是统计结果可能不一致，count(column) 统计不会统计列值为 null 的数据，而 count() 则会统计所有信息，所以最终的统计结果可能会不同。</p><h5 id="以下关于-count-说法正确的是">以下关于 count 说法正确的是？</h5><p>A. count 的查询性能在各种存储引擎下的性能都是一样的。</p><p>B. count 在 MyISAM 比 InnoDB 的性能要低。</p><p>C. count 在 InnoDB 中是一行一行读取，然后累计计数的。</p><p>D. count 在 InnoDB 中存储了总条数，查询的时候直接取出。</p><p>答：C</p><h5 id="为什么-innodb-不把总条数记录下来查询的时候直接返回呢">为什么 InnoDB 不把总条数记录下来，查询的时候直接返回呢？</h5><p>因为 InnoDB 使用了事务实现，而事务的设计使用了多版本并发控制，即使是在同一时间进行查询，得到的结果也可能不相同，所以 InnoDB 不能把结果直接保存下来，因为这样是不准确的。</p><h5 id="能否使用-show-table-status-中的表行数作为表的总行数直接使用为什么">能否使用 show table status 中的表行数作为表的总行数直接使用？为什么？</h5><p>不能，因为 show table status 是通过采样统计估算出来的，官方文档说误差可能在 40% 左右，所以 show table status 中的表行数不能直接使用。</p><h5 id="以下哪个-sql-的查询性能最高">以下哪个 SQL 的查询性能最高？</h5><p>A. select count(*) from t where time&gt;1000 and time&lt;4500</p><p>B. show table status where name='t'</p><p>C. select count(id) from t where time&gt;1000 and time&lt;4500</p><p>D. select count(name) from t where time&gt;1000 and time&lt;4500</p><p>答：B 题目解析：因为 show table status 的表行数是估算出来，而其他的查询因为添加了 where 条件，即使是 MyISAM 引擎也不能直接使用已经存储的总条数，所以 show table status 的查询性能最高。</p><h5 id="innodb-和-myisam-执行-select-count-from-t哪个效率更高为什么">InnoDB 和 MyISAM 执行 select count(*) from t，哪个效率更高？为什么？</h5><p>MyISAM 效率最高，因为 MyISAM 内部维护了一个计数器，直接返回总条数，而 InnoDB 要逐行统计。</p><h5 id="在-mysql-中有对-count-做优化吗做了哪些优化">在 MySQL 中有对 count(*) 做优化吗？做了哪些优化？</h5><p>count(*) 在不同的 MySQL 引擎中的实现方式是不相同的，在没有 where 条件的情况下：</p><ul><li><p>MyISAM 引擎会把表的总行数存储在磁盘上，因此在执行 count(*) 的时候会直接返回这个这个行数，执行效率很高；</p></li><li><p>InnoDB 引擎中 count(*) 就比较麻烦了，需要把数据一行一行的从引擎中读出来，然后累计基数。</p></li></ul><p>但即使这样，在 InnoDB 中，MySQL 还是做了优化的，我们知道对于 count() 这样的操作，遍历任意索引树得到的结果，在逻辑上都是一样的，因此，MySQL 优化器会找到最小的那颗索引树来遍历，这样就能在保证逻辑正确的前提下，尽量少扫描数据量，从而优化了 count() 的执行效率。</p><h5 id="在-innodb-引擎中-countcount1count主键count字段-哪个性能最高">在 InnoDB 引擎中 count(*)、count(1)、count(主键)、count(字段) 哪个性能最高？</h5><p>count(字段)&lt;count(主键 id)&lt;count(1)≈count(*) 题目解析：</p><ul><li><p>对于 count(主键 id) 来说，InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。</p></li><li><p>对于 count(1) 来说，InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p></li><li><p>对于 count(字段) 来说，如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是 null，还要把值取出来再判断一下，不是 null 才累加。</p></li><li><p>对于 count(*) 来说，并不会把全部字段取出来，而是专门做了优化，不取值，直接按行累加。</p></li></ul><p>所以最后得出的结果是：count(字段)&lt;count(主键 id)&lt;count(1)≈count(*)。</p><h5 id="mysql-中内连接左连接右连接有什么区别">MySQL 中内连接、左连接、右连接有什么区别？</h5><ul><li><p>内连（inner join）— 把匹配的关联数据显示出来；</p></li><li><p>左连接（left join）— 把左边的表全部显示出来，右边的表显示出符合条件的数据；</p></li><li><p>右连接（right join）— 把右边的表全部显示出来，左边的表显示出符合条件的数据；</p></li></ul><h5 id="什么是视图如何创建视图">什么是视图？如何创建视图？</h5><p>视图是一种虚拟的表，具有和物理表相同的功能，可以对视图进行增、改、查操作。视图通常是一个表或者多个表的行或列的子集。 视图创建脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create view vname as select column_names from table_name where condition;<br></code></pre></td></tr></table></figure><h5 id="视图有哪些优点">视图有哪些优点？</h5><ul><li><p>获取数据更容易，相对于多表查询来说；</p></li><li><p>视图能够对机密数据提供安全保护；</p></li><li><p>视图的修改不会影响基本表，提供了独立的操作单元，比较轻量。</p></li></ul><h5 id="mysql-中视图的概念有几个分别代表什么含义">MySQL 中“视图”的概念有几个？分别代表什么含义？</h5><p>MySQL 中的“视图”概念有两个，它们分别是：</p><ul><li><p>MySQL 中的普通视图也是我们最常用的 view，创建语法是 create view …,它的查询和普通表一样；</p></li><li><p>InnoDB 实现 MVCC（Multi-Version Concurrency Control）多版本并发控制时用到的一致性读视图，它没有物理结构，作用是事务执行期间定于可以看到的数据。</p></li></ul><h5 id="使用-delete-误删数据怎么找回">使用 delete 误删数据怎么找回？</h5><p>可以用 Flashback 工具通过闪回把数据恢复回来。</p><h5 id="flashback-恢复数据的原理是什么">Flashback 恢复数据的原理是什么？</h5><p>Flashback 恢复数据的原理是是修改 binlog 的内容，拿回原库重放，从而实现数据找回。</p><h4 id="mysql-事务">MySQL 事务</h4><h5 id="事务是什么">事务是什么？</h5><p>事务是一系列的数据库操作，是数据库应用的基本单位。MySQL 事务主要用于处理操作量大，复杂度高的数据。</p><h5 id="事务有哪些特性">事务有哪些特性？</h5><p>在 MySQL 中只有 InnDB 引擎支持事务，它的四个特性如下：</p><ul><li><p>原子性（Atomic）：要么全部执行，要么全部不执行；</p></li><li><p>一致性（Consistency）：事务的执行使得数据库从一种正确状态转化为另一种正确状态；</p></li><li><p>隔离性（Isolation）：在事务正确提交之前，不允许把该事务对数据的任何改变提供给其他事务；</p></li><li><p>持久性（Durability）：事务提交后，其结果永久保存在数据库中。</p></li></ul><h5 id="mysql-中有几种事务隔离级别分别是什么">MySQL 中有几种事务隔离级别？分别是什么？</h5><p>MySQL 中有四种事务隔离级别，它们分别是：</p><ul><li><p>read uncommited：未提交读，读到未提交数据；</p></li><li><p>read committed：读已提交，也叫不可重复读，两次读取到的数据不一致；</p></li><li><p>repetable read：可重复读；</p></li><li><p>serializable：串行化，读写数据都会锁住整张表，数据操作不会出错，但并发性能极低，开发中很少用到。</p></li></ul><p>MySQL 默认使用 REPEATABLE-READ 的事务隔离级别。</p><h5 id="幻读和不可重复读的区别">幻读和不可重复读的区别？</h5><ul><li><p>不可重复读的重点是修改：在同一事务中，同样的条件，第一次读的数据和第二次读的数据不一样。（因为中间有其他事务提交了修改）。</p></li><li><p>幻读的重点在于新增或者删除：在同一事务中，同样的条件,，第一次和第二次读出来的记录数不一样。（因为中间有其他事务提交了插入/删除）。</p></li></ul><h5 id="并发事务一般有哪些问题">并发事务一般有哪些问题？</h5><ul><li><p>更新丢失（Lost Update）：当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题，最后的更新覆盖了由其他事务所做的更新。例如，两个编辑人员制作了同一文档的电子副本，每个编辑人员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。 最后保存其更改副本的编辑人员覆盖另一个编辑人员所做的更改，如果在前一个编辑人员完成并提交事务之前，另一个编辑人员不能访问同一文件，则可避免此问题。</p></li><li><p>脏读（Dirty Reads）：一个事务正在对一条记录做修改，在这个事务完成并提交前， 这条记录的数据就处于不一致状态； 这时， 另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些脏数据，并据此做进一步的处理，就会产生未提交的数据依赖关系，这种现象被形象地叫做脏读。</p></li><li><p>不可重复读（Non-Repeatable Reads）：一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除了！这种现象就叫做“不可重复读” 。</p></li><li><p>幻读（Phantom Reads）： 一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读” 。</p></li></ul><h5 id="并发事务会有什么问题应该如何解决">并发事务会有什么问题？应该如何解决？</h5><p>并发事务可能造成：脏读、不可重复读和幻读等问题 ，这些问题其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决，解决方案如下：</p><ul><li><p>加锁：在读取数据前，对其加锁，阻止其他事务对数据进行修改。</p></li><li><p>提供数据多版本并发控制（MultiVersion Concurrency Control，简称 MVCC 或 MCC），也称为多版本数据库：不用加任何锁， 通过一定机制生成一个数据请求时间点的一致性数据快照（Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取，从用户的角度来看，好象是数据库可以提供同一数据的多个版本。</p></li></ul><h5 id="什么是-mvcc">什么是 MVCC？</h5><p>MVCC 全称是多版本并发控制系统，InnoDB 和 Falcon 存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决幻读问题。</p><h5 id="mvcc-是怎么工作的">MVCC 是怎么工作的？</h5><p>InnoDB 的 MVCC 是通过在每行记录后面保存两个隐藏的列来实现，这两个列一个保存了行的创建时间，一个保存行的过期时间（删除时间）。当然存储的并不是真实的时间而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动新增，事务开始时刻的系统版本号会作为事务的版本号，用来查询到每行记录的版本号进行比较。</p><h5 id="repeatable-read可重读隔离级别下-mvcc-如何工作">REPEATABLE READ（可重读）隔离级别下 MVCC 如何工作？</h5><ul><li><p>SELECT：InnoDB 会根据以下条件检查每一行记录：第一，InnoDB 只查找版本早于当前事务版本的数据行，这样可以确保事务读取的行要么是在开始事务之前已经存在要么是事务自身插入或者修改过的。第二，行的删除版本号要么未定义，要么大于当前事务版本号，这样可以确保事务读取到的行在事务开始之前未被删除。</p></li><li><p>INSERT：InnoDB 为新插入的每一行保存当前系统版本号作为行版本号。</p></li><li><p>DELETE：InnoDB 为删除的每一行保存当前系统版本号作为行删除标识。</p></li><li><p>UPDATE：InnoDB 为插入的一行新纪录保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识保存这两个版本号，使大多数操作都不用加锁。它不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作和一些额外的维护工作。</p></li></ul><h5 id="mysql-事务实现原理是什么">MySQL 事务实现原理是什么？</h5><p>事务的实现是基于数据库的存储引擎，不同的存储引擎对事务的支持程度不一样。MySQL 中支持事务的存储引擎有InnoDB 和 NDB。 InnoDB 是高版本 MySQL 的默认的存储引擎，因此就以 InnoDB 的事务实现为例，InnoDB 是通过多版本并发控制（MVCC，Multiversion Concurrency Control ）解决不可重复读问题，加上间隙锁（也就是并发控制）解决幻读问题。因此 InnoDB 的 RR 隔离级别其实实现了串行化级别的效果，而且保留了比较好的并发性能。事务的隔离性是通过锁实现，而事务的原子性、一致性和持久性则是通过事务日志实现。</p><h5 id="如何设置-mysql-的事务隔离级别">如何设置 MySQL 的事务隔离级别？</h5><p>MySQL 事务隔离级别 MySQL.cnf 文件里设置的（默认目录 /etc/my.cnf），在文件的文末添加配置：</p><p><code>transaction-isolation = REPEATABLE-READ</code></p><p>可用的配置值：<code>READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE</code>。</p><h5 id="innodb-默认的事务隔离级别是什么如何修改">InnoDB 默认的事务隔离级别是什么？如何修改？</h5><p><code>InnoDB</code>默认的事务隔离是 <code>repetable read</code>（可重复读）；可以通过<code>set</code> 作用域 <code>transaction isolation level</code>事务隔离级别 来修改事务的隔离级别</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MySQL&gt; set global transaction isolation level read committed;  // 设置全局事务隔离级别为 read committed   <br>MySQL&gt; set session transaction isolation level read committed; // 设置当前会话事务隔离级别为 read committed <br></code></pre></td></tr></table></figure><h5 id="innodb-如何开启手动提交事务">InnoDB 如何开启手动提交事务？</h5><p><code>InnoDB</code> 默认是自动提交事务的，每一次<code>SQL</code> 操作（非<code>select</code>操作）都会自动提交一个事务，如果要手动开启事务需要设置 <code>set autocommit=0</code>禁止自动提交事务，相当于开启手动提交事务。</p><h5 id="在-innodb-中设置了-autocommit0添加一条信息之后没有手动执行提交操作请问这条信息可以被查到吗">在 InnoDB 中设置了 autocommit=0，添加一条信息之后没有手动执行提交操作，请问这条信息可以被查到吗？</h5><p><code>autocommit=0</code> 表示禁止自动事务提交，在添加操作之后没有进行手动提交，默认情况下其他连接客户端是查询不到此条新增数据的。</p><h5 id="如何手动操作事务">如何手动操作事务？</h5><p>使用 begin 开启事务；rollback 回滚事务；commit 提交事务。具体使用示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">begin; <br>insert person(name,age) values(&#x27;laowang&#x27;,18); <br>rollback; <br>commit;<br></code></pre></td></tr></table></figure><h4 id="mysql-日志">MySQL 日志</h4><h5 id="mysql-有哪些重要的日志文件">MySQL 有哪些重要的日志文件？</h5><p><img src="/images/db/mysql/logfile.png"></p><p>MySQL 中的重要日志分为以下几个：</p><p>① 错误日志：用来记录 MySQL 服务器运行过程中的错误信息，比如，无法加载 MySQL 数据库的数据文件，或权限不正确等都会被记录在此，还有复制环境下，从服务器进程的信息也会被记录进错误日志。默认情况下，错误日志是开启的，且无法被禁止。</p><p>​ 错误日志是存储在数据库的数据文件目录中，名称为 hostname.err，其中 hostname 为服务器主机名。在 MySQL 5.5.7 之前，数据库管理员可以删除很长时间之前的错误日志，以节省服务器上的硬盘空间， MySQL 5.5.7 之后，服务器将关闭此项功能，只能使用重命名原来的错误日志文件，手动冲洗日志创建一个新的，命令为：</p><p><code>mv hostname.err  hostname.err.old mysqladmin flush-logs</code></p><p>② 查询日志：查询日志在 MySQL 中被称为 general log(通用日志)，查询日志里的内容不要被“查询日志”误导，认为里面只存储 select 语句，其实不然，查询日志里面记录了数据库执行的所有命令，不管语句是否正确，都会被记录，具体原因如下:</p><ul><li><p>insert 查询为了避免数据冲突，如果此前插入过数据，当前插入的数据如果跟主键或唯一键的数据重复那肯定会报错；</p></li><li><p>update 时也会查询因为更新的时候很可能会更新某一块数据；</p></li><li><p>delete 查询，只删除符合条件的数据；</p></li></ul><p>因此都会产生日志，在并发操作非常多的场景下，查询信息会非常多，那么如果都记录下来会导致 IO 非常大，影响 MySQL 性能，因此如果不是在调试环境下，是不建议开启查询日志功能的。</p><p>查询日志的开启有助于帮助我们分析哪些语句执行密集，执行密集的 select 语句对应的数据是否能够被缓存，同时也可以帮助我们分析问题，所以，我们可以根据自己的实际情况来决定是否开启查询日志。</p><p>查询日志模式是关闭的，可以通过以下命令开启查询日志：</p><p><code>set global generallog=1 set global logoutput='table';</code></p><p><code>general_log=1</code> 为开启查询日志，0 为关闭查询日志，这个设置命令即时生效，不用重启 MySQL 服务器。</p><p>③ 慢日志：慢查询会导致 CPU、IOPS、内存消耗过高，当数据库遇到性能瓶颈时，大部分时间都是由于慢查询导致的。开启慢查询日志，可以让 MySQL 记录下查询超过指定时间的语句，之后运维人员通过定位分析，能够很好的优化数据库性能。默认情况下，慢查询日志是不开启的，只有手动开启了，慢查询才会被记录到慢查询日志中。使用如下命令记录当前数据库的慢查询语句：</p><p><code>set global slowquerylog='ON';</code></p><p>使用 <code>set global slowquerylog='ON'</code> 开启慢查询日志，只是对当前数据库有效，如果 MySQL 数据库重启后就会失效。所以如果要永久生效，就要修改配置文件<code>my.cnf</code>，设置<code>slowquerylog=1</code> 并重启 MySQL 服务器。</p><p>④ <code>redo log</code>（重做日志）：为了最大程度的避免数据写入时，因为 IO 瓶颈造成的性能问题，MySQL 采用了这样一种缓存机制，先将数据写入内存中，再批量把内存中的数据统一刷回磁盘。为了避免将数据刷回磁盘过程中，因为掉电或系统故障带来的数据丢失问题，InnoDB 采用 <code>redo log</code> 来解决此问题。</p><p>⑤ <code>undo log</code>（回滚日志）：用于存储日志被修改前的值，从而保证如果修改出现异常，可以使用 <code>undo log</code>日志来实现回滚操作。<code>undo log</code>和<code>redo log</code> 记录物理日志不一样，它是逻辑日志，可以认为当 <code>delete</code> 一条记录时，<code>undo log</code> 中会记录一条对应的<code>insert</code> 记录，反之亦然，当 <code>update</code> 一条记录时，它记录一条对应相反的 <code>update</code> 记录，当执行 rollback 时，就可以从 <code>undo log</code> 中的逻辑记录读取到相应的内容并进行回滚。<code>undo log</code>默认存放在共享表空间中，在 <code>mySQL 5.6</code> 中，<code>undo log</code> 的存放位置还可以通过变量<code>innodbundodirectory</code>来自定义存放目录，默认值为“.”表示 <code>datadir</code>目录。</p><p>⑥ <code>bin log</code>（二进制日志）：是一个二进制文件，主要记录所有数据库表结构变更，比如，<code>CREATE、ALTER TABLE</code> 等，以及表数据修改，比如，<code>INSERT、UPDATE、DELETE</code> 的所有操作，<code>bin log</code> 中记录了对 MySQL 数据库执行更改的所有操作，并且记录了语句发生时间、执行时长、操作数据等其它额外信息，但是它不记录<code>SELECT、SHOW</code>等那些不修改数据的 SQL 语句。</p><p>binlog 的作用如下：</p><ul><li><p>恢复（recovery）：某些数据的恢复需要二进制日志。比如，在一个数据库全备文件恢复后，用户可以通过二进制日志进行 point-in-time 的恢复；</p></li><li><p>复制（replication）：其原理与恢复类似，通过复制和执行二进制日志使一台远程的MySQL数据库（一般称为 slave 或者 standby）与一台 MySQL 数据库（一般称为 master 或者 primary）进行实时同步；</p></li><li><p>审计（audit）：用户可以通过二进制日志中的信息来进行审计，判断是否有对数据库进行注入攻击。</p></li></ul><p>除了上面介绍的几个作用外，binlog 对于事务存储引擎的崩溃恢复也有非常重要的作用，在开启 binlog 的情况下，为了保证 binlog 与 redo 的一致性，MySQL 将采用事务的两阶段提交协议。当 MySQL 系统发生崩溃时，事务在存储引擎内部的状态可能为 prepared（准备状态）和 commit（提交状态）两种，对于 prepared 状态的事务，是进行提交操作还是进行回滚操作，这时需要参考 binlog，如果事务在 binlog 中存在，那么将其提交；如果不在 binlog 中存在，那么将其回滚，这样就保证了数据在主库和从库之间的一致性。</p><p>binlog 默认是关闭状态，可以在 MySQL 配置文件（my.cnf）中通过配置参数 <code>log-bin = [base-name]</code> 开启记录 binlog 日志，如果不指定 <code>base-name</code>，则默认二进制日志文件名为主机名，并以自增的数字作为后缀，比如：<code>mysql-bin.000001</code>，所在目录为数据库所在目录（datadir）。</p><p>通过以下命令来查询 binlog 是否开启：</p><p><code>show variables like 'log_%';</code></p><p><img src="/images/db/mysql/binlog.png"></p><p>binlog 格式分为: STATEMENT、ROW 和 MIXED 三种：</p><ul><li><p>STATEMENT 格式的 binlog 记录的是数据库上执行的原生 SQL 语句。这种格式的优点是简单，简单地记录和执行这些语句，能够让主备保持同步，在主服务器上执行的 SQL 语句，在从服务器上执行同样的语句。另一个好处是二进制日志里的时间更加紧凑，所以相对而言，基于语句的复制模式不会使用太多带宽，同时也节约磁盘空间。并且通过 mysqlbinlog 工具容易读懂其中的内容。缺点就是同一条 SQL 在主库和从库上执行的时间可能稍微或很大不相同，因此在传输的二进制日志中，除了查询语句，还包括了一些元数据信息，如当前的时间戳。即便如此，还存在着一些无法被正确复制的 SQL。比如，使用 <code>INSERT INTO TB1 VALUE(CUURENT_DATE())</code>这一条使用函数的语句插入的数据复制到当前从服务器上来就会发生变化，存储过程和触发器在使用基于语句的复制模式时也可能存在问题；另外一个问题就是基于语句的复制必须是串行化的，比如：InnoDB 的 next-key 锁等，并不是所有的存储引擎都支持基于语句的复制；</p></li><li><p>ROW 格式是从 MySQL 5.1 开始支持基于行的复制，也就是基于数据的复制，基于行的更改。这种方式会将实际数据记录在二进制日志中，它有其自身的一些优点和缺点，最大的好处是可以正确地复制每一行数据，一些语句可以被更加有效地复制，另外就是几乎没有基于行的复制模式无法处理的场景，对于所有的 SQL 构造、触发器、存储过程等都能正确执行；它的缺点就是二进制日志可能会很大，而且不直观，所以，你不能使用 mysqlbinlog 来查看二进制日志，也无法通过看二进制日志判断当前执行到那一条 SQL 语句。现在对于 ROW 格式的二进制日志基本是标配了，主要是因为它的优势远远大于缺点，并且由于 ROW 格式记录行数据，所以可以基于这种模式做一些 DBA 工具，比如数据恢复，不同数据库之间数据同步等；</p></li><li><p>MIXED 也是 MySQL 默认使用的二进制日志记录方式，但 MIXED 格式默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。比如用到 UUID()、USER()、CURRENTUSER()、ROWCOUNT() 等无法确定的函数。</p></li></ul><h5 id="redo-log-和-binlog-有什么区别">redo log 和 binlog 有什么区别？</h5><p>redo log（重做日志）和 binlog（归档日志）都是 MySQL 的重要的日志，它们的区别如下：</p><ul><li><p>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”。</p></li><li><p>binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</p></li><li><p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p></li><li><p>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p></li></ul><p>最开始 MySQL 里并没有 InnoDB 引擎，MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统，也就是 redo log 来实现 crash-safe 能力。</p><h5 id="什么是-crash-safe">什么是 crash-safe？</h5><p>crash-safe 是指发生宕机等意外情况下，服务器重启后数据依然不会丢失的情况。</p><h5 id="什么是脏页和干净页">什么是脏页和干净页？</h5><p>MySQL 为了操作的性能优化，会把数据更新先放入内存中，之后再统一更新到磁盘。当内存数据和磁盘数据内容不一致的时候，我们称这个内存页为脏页；内存数据写到磁盘后，内存的数据和磁盘上的内容就一致了，我们称为“干净页”。</p><h5 id="什么情况下会引发-mysql-刷脏页flush的操作">什么情况下会引发 MySQL 刷脏页（flush）的操作？</h5><ul><li><p>内存写满了，这个时候就会引发 flush 操作，对应到 InnoDB 就是 redo log 写满了；</p></li><li><p>系统的内存不足了，当需要新的内存页的时候，就会淘汰一些内存页，如果淘汰的是脏页这个时候就会触发 flush 操作；</p></li><li><p>系统空闲的时候，MySQL 会同步内存中的数据到磁盘也会触发 flush 操作；</p></li><li><p>MySQL 服务关闭的时候也会刷脏页，触发 flush 操作。</p></li></ul><h5 id="mysql-刷脏页的速度很慢可能是什么原因">MySQL 刷脏页的速度很慢可能是什么原因？</h5><p>在 MySQL 中单独刷一个脏页的速度是很快的，如果发现刷脏页的速度很慢，说明触发了 MySQL 刷脏页的“连坐”机制，MySQL 的“连坐”机制是指当 MySQL 刷脏页的时候如果发现相邻的数据页也是脏页也会一起刷掉，而这个动作可以一直蔓延下去，这就是导致 MySQL 刷脏页慢的原因了。</p><h5 id="如何控制-mysql-只刷新当前脏页">如何控制 MySQL 只刷新当前脏页？</h5><p>在 InnoDB 中设置 innodbflushneighbors 这个参数的值为 0，来规定 MySQL 只刷当前脏页，MySQL 8 这个值默认是 0。</p><h5 id="mysql-的-wal-技术是解决什么问题的">MySQL 的 WAL 技术是解决什么问题的？</h5><p>A.防止误删除，找回数据用的</p><p>B.容灾恢复，为了还原异常数据用的</p><p>C.事务处理，为了数据库的稳定性</p><p>D.为了降低 IO 成本</p><p>答：D 题目解析：WAL 技术的全称是 Write Ahead Logging（中文：预写式日志），是先写日志，再写磁盘的方式，因为每次更新都写磁盘的话 IO 成本很高，所以才有了 WAL 技术。</p><h5 id="为什么有时候会感觉-mysql-偶尔卡一下">为什么有时候会感觉 MySQL 偶尔卡一下？</h5><p>如果偶尔感觉 MySQL 卡一下，可能是 MySQL 正在刷脏页，正在把内存中的更新操作刷到磁盘中。</p><h5 id="redo-log-和-binlog-是怎么关联的">redo log 和 binlog 是怎么关联的?</h5><p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：</p><ul><li><p>如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；</p></li><li><p>如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。</p></li></ul><h5 id="mysql-怎么知道-binlog-是完整的">MySQL 怎么知道 binlog 是完整的?</h5><ul><li><p>statement 格式的 binlog，完整的标识是最后有 COMMIT 关键字。</p></li><li><p>row 格式的 binlog，完整的标识是最后会有一个 XID event 关键字。</p></li></ul><h5 id="mysql-中可不可以只要-binlog不要-redo-log">MySQL 中可不可以只要 binlog，不要 redo log？</h5><p>不可以，binlog 没有崩溃恢复的能力。</p><h5 id="mysql-中可不可以只要-redo-log不要-binlog">MySQL 中可不可以只要 redo log，不要 binlog？</h5><p>不可以，原因有以下两个：</p><ul><li><p>redo log 是循环写不能保证所有的历史数据，这些历史数据只能在 binlog 中找到；</p></li><li><p>binlog 是高可用的基础，高可用的实现原理就是 binlog 复制。</p></li></ul><h5 id="为什么-binlog-cache-是每个线程自己维护的而-redo-log-buffer-是全局共用的">为什么 binlog cache 是每个线程自己维护的，而 redo log buffer 是全局共用的？</h5><p>因为 binlog 是不能“被打断的”，一个事务的 binlog 必须连续写，因此要整个事务完成后，再一起写到文件里。而 redo log 并没有这个要求，中间有生成的日志可以写到 redo log buffer 中，redo log buffer 中的内容还能“搭便车”，其他事务提交的时候可以被一起写到磁盘中。</p><h5 id="事务执行期间还未提交如果发生-crashredo-log-丢失会导致主备不一致呢">事务执行期间，还未提交，如果发生 crash，redo log 丢失，会导致主备不一致呢？</h5><p>不会，因为这时候 binlog 也还在 binlog cache 里，没发给备库，crash 以后 redo log 和 binlog 都没有了，从业务角度看这个事务也没有提交，所以数据是一致的。</p><h5 id="在-mysql-中用什么机制来优化随机读写磁盘对-io-的消耗">在 MySQL 中用什么机制来优化随机读/写磁盘对 IO 的消耗？</h5><p>redo log 是用来节省随机写磁盘的 IO 消耗，而 change buffer 主要是节省随机读磁盘的 IO 消耗。redo log 会把 MySQL 的更新操作先记录到内存中，之后再统一更新到磁盘，而 change buffer 也是把关键查询数据先加载到内存中，以便优化 MySQL 的查询。</p><h5 id="以下说法错误的是">以下说法错误的是？</h5><p>A.redo log 是 InnoDB 引擎特有的，它的固定大小的</p><p>B.redo log 日志是不全的，只有最新的一些日志，这和它的内存大小有关</p><p>C.redo log 可以保证数据库异常重启之后，数据不丢失</p><p>D.binlog 是 MySQL 自带的日志，它能保证数据库异常重启之后，数据不丢失</p><p>答：D 题目解析：binlog 是 MySQL 自带的日志，但它并不能保证数据库异常重启之后数据不丢失。</p><h5 id="以下说法正确的是">以下说法正确的是？</h5><p>A.redo log 日志是追加写的，后面的日志并不会覆盖前面的日志</p><p>B.binlog 日志是追加写的，后面的日志并不会覆盖前面的日志</p><p>C.redo log 和 binlog 日志都是追加写的，后面的日志并不会覆盖前面的日志</p><p>D.以上说法都正确</p><p>答：B 题目解析：binlog 日志是追加写的，后面的日志并不会覆盖前面的日志，redo log 日志是固定大小的，后面的日志会覆盖前面的日志。</p><h5 id="有没有办法把-mysql-的数据恢复到过去某个指定的时间节点怎么恢复">有没有办法把 MySQL 的数据恢复到过去某个指定的时间节点？怎么恢复？</h5><p>可以恢复，只要你备份了这段时间的所有 binlog，同时做了全量数据库的定期备份，比如，一天一备，或者三天一备，这取决于你们的备份策略，这个时候你就可以把之前备份的数据库先还原到测试库，从备份的时间点开始，将备份的 binlog 依次取出来，重放到你要恢复数据的那个时刻，这个时候就完成了数据到指定节点的恢复。比如，今天早上 9 点的时候，你想把数据恢复成今天早上 6:00:00 的状态，这个时候你可以先取出今天凌晨（00:01:59）备份的数据库文件，还原到测试库，再从 binlog 文件中依次取出 00:01:59 之后的操作信息，重放到 6:00:00 这个时刻，这就完成了数据库的还原。</p><h4 id="mysql-命令和内置函数">MySQL 命令和内置函数</h4><h5 id="如何用命令行方式连接-mysql-数据库">如何用命令行方式连接 MySQL 数据库？</h5><p>使用 mysql -u用户名 -p密码; 输入用户名和密码就可以正常进入数据库连接了，实例如下：</p><p><code>mysql -uroot -p123456;</code></p><p>其中，用户名为 root，密码为 123456。</p><h5 id="关于命令-mysql--h-127.0.0.1--uroot--p-3307--p3307-以下说法错误的是">关于命令 mysql -h 127.0.0.1 -uroot -P 3307 -p3307 以下说法错误的是？</h5><p>A.-h 和 -P 可以省略</p><p>B.-u 和用户名之间不能有空格</p><p>C.-p 和密码之间不能用空格</p><p>D.小写 -p 对应的是用户密码，大写 -P 对应的是 MySQL 服务器的端口</p><p>答：B 题目解析：-p 和密码之间不能用空格，否则空格会被识别为密码的一部分，提示密码错误。-u 和用户名之间可以有空格。</p><h5 id="如何创建用户并给用户授权">如何创建用户？并给用户授权？</h5><p>创建用户使用关键字：CREATE USER ，授权使用关键字： GRANT ，具体实现脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建用户laowang <br>create user &#x27;laowang&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;; <br>-- 授权 test 数据库给 laowang <br>grant all on test.* to &#x27;laowang&#x27;@&#x27;localhost&#x27;<br></code></pre></td></tr></table></figure><h5 id="如何修改-mysql-密码">如何修改 MySQL 密码？</h5><p>使用如下命令，修改密码：</p><p><code>mysqladmin -u用户名 -p旧密码 password 新密码;</code></p><p>注意：刚开始 root 没有密码，所以 -p 旧密码一项就可以省略了。</p><h5 id="如何使用-sql-创建数据库并设置数据库的编码格式">如何使用 SQL 创建数据库，并设置数据库的编码格式？</h5><p>创建数据库可使用关键字： CREATE DATABASE ，设置编码格式使用关键字： CHARSET ，具体 SQL 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database learndb default charset utf8 collate utf8_general_ci;<br></code></pre></td></tr></table></figure><h5 id="如何修改数据库表的编码格式">如何修改数据库、表的编码格式？</h5><p>使用 alter 关键字设置库或表的编码格式即可，具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; alter database dbname default character set utf8; mysql&gt; alter table t default character set utf8;<br></code></pre></td></tr></table></figure><h5 id="如何使用-sql-创建表">如何使用 SQL 创建表？</h5><p>创建表的 SQL 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t(   <br>  tid int not null autoincrement,   <br>  tname char(50) not null,   <br>  tage int null default 18,   <br>  primary key(t_id) <br>)engine=innodb;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><p>auto_increment：表示自增；</p></li><li><p>primary key：用于指定主键；</p></li><li><p>engine：用于指定表的引擎。</p></li></ul><h5 id="在-mysql-命令行中如何查看表结构信息">在 MySQL 命令行中如何查看表结构信息？</h5><p>使用 desc 表名 查看表结构信息，示例信息如下：</p><p><img src="/images/db/mysql/desc.png"></p><p>使用 desc person; 查看表 person 的结构信息。</p><h5 id="如何使用-sql-查看已知表的建表脚本">如何使用 SQL 查看已知表的建表脚本？</h5><p>查看已知表的建表脚本，命令如下：</p><p>mysql&gt; show create table 表名;</p><p>效果如下图所示：</p><p><img src="/images/db/mysql/create.png"></p><h5 id="如何使用-sql-语句更新表结构">如何使用 SQL 语句更新表结构？</h5><p>更新表结构信息可以使用 alter table 子句，如，为表增加一列的脚本如下：alter</p><p><code>alter table t add name char(20)；</code></p><p>如果要重命名表名，使用如下命令：</p><p><code>rename table new_t to t;</code></p><h5 id="mysql-有哪些删除方式有什么区别">MySQL 有哪些删除方式？有什么区别？</h5><p>MySQL 有三种删除方式： 1）删除表数据：</p><p><code>delete from t;</code></p><p>2）删除数据，保留表结构：</p><p><code>truncate table t;</code></p><p>3）删数据和表结构：</p><p><code>drop table t;</code></p><p>它们的区别如下：</p><ul><li><p>delete 可以有条件的删除，也可以回滚数据，删除数据时进行两个动作：删除与备份，所以速度很慢；</p></li><li><p>truncate 删除所有数据，无条件选择删除，不可回滚，保留表结构；</p></li><li><p>drop：删除数据和表结构 删除速度最快。</p></li></ul><p>执行速度，一般来说：drop&gt; truncate &gt; delete。</p><p>补充：delete 语句是数据库操作语言（dml），这个操作会放到 rollback segement 中，事务提交之后才生效；如果有相应的 trigger，执行的时候将被触发。truncate、drop 是数据库定义语言（ddl），操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。</p><p>应用场景：</p><ul><li><p>当你不再需要该表时， 用 drop</p></li><li><p>当你仍要保留该表，但要删除所有记录时， 用 truncate</p></li><li><p>当你要删除部分记录时（always with a where clause），用 delete</p></li></ul><h5 id="如何开启和关闭-mysql-服务">如何开启和关闭 MySQL 服务？</h5><p>使用 systemctl stop mysqld 停止 MySQL 服务，使用 systemctl start mysqld 启动 MySQL 服务。</p><h5 id="如何查询当前-mysql-安装的版本号">如何查询当前 MySQL 安装的版本号？</h5><p>使用 SELECT VERSION();</p><p>可以查询当前连接的 MySQL 的版本号。</p><h5 id="如何查看某张表的存储引擎">如何查看某张表的存储引擎？</h5><p>可使用 show table status from db where name='t'; 查询数据库 db 中表 t 的所有信息，其中 Engine 列表示表 t 使用的存储引擎，如下图所示：</p><p><img src="/images/db/mysql/engine.png"></p><h5 id="如何查看当前数据库增删改查的执行次数统计">如何查看当前数据库增删改查的执行次数统计？</h5><p>使用以下命令行查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show global status where variablename in(&#x27;comselect&#x27;,&#x27;cominsert&#x27;,&#x27;comdelete&#x27;,&#x27;comupdate&#x27;); <br>+---------------+-------+ <br>| Variablename | Value | <br>+---------------+-------+ <br>| Comdelete   | 0   | <br>| Cominsert   | 1   | <br>| Comselect   | 40   | <br>| Comupdate   | 0   | <br>+---------------+-------+<br></code></pre></td></tr></table></figure><h5 id="如何查询线程连接数">如何查询线程连接数？</h5><p>使用如下命令：</p><p><code>mysql&gt; show global status like 'threads_%';</code></p><p>执行效果如下图所示：</p><p><img src="/images/db/mysql/thread.png"></p><p>其中：</p><ul><li><p>Threads_cached：代表当前此时此刻线程缓存中有多少空闲线程；</p></li><li><p>Threads_connected：代表当前已建立连接的数量，因为一个连接就需要一个线程，所以也可以看成当前被使用的线程数；</p></li><li><p>Threads_created：代表从最近一次服务启动，已创建线程的数量；</p></li><li><p>Threads_running：代表当前激活的（非睡眠状态）线程数。</p></li></ul><h5 id="如何查看-mysql-的最大连接数能不能修改怎么修改">如何查看 MySQL 的最大连接数？能不能修改？怎么修改？</h5><p>查询 MySQL 最大连接数，使用如下命令：</p><p><code>mysql&gt; show variables like 'max_connections%';</code></p><p>此命令输出的结果如下：</p><p><img src="/images/db/mysql/maxconn.png"></p><p>可以修改 MySQL 的最大连接数，可以在 MySQL 的配置文件 my.cnf 里修改最大连接数，通过修改 maxconnections 的值，然后重启 MySQL 就会生效，如果 my.ini 文件中没有找到 maxconnections，可自行添加 max_connections 的设置，内容如下：</p><p><code>max_connections=200</code></p><h5 id="char_length-和-length-有什么区别">CHAR_LENGTH 和 LENGTH 有什么区别？</h5><p>CHARLENGTH 是字符数，而 LENGTH 是字节数。它们在不同编码下，值是不相同的，比如对于 UTF-8 编码来说，一个中文字的 LENGTH 为 1，而 CHARLENGTH 通常等于 3，如下图所示：</p><p><img src="/images/db/mysql/charlength.png"></p><h5 id="union-和-union-all-的用途是什么有什么区别">UNION 和 UNION ALL 的用途是什么？有什么区别？</h5><p>UNION 和 UNION ALL 都是用于合并数据集的，它们的区别如下：</p><ul><li><p>去重：UNION 会对结果进行去重，UNION ALL 则不会进行去重操作；</p></li><li><p>排序：UNION 会对结果根据字段进行排序，而 UNION ALL 则不会进行排序；</p></li><li><p>性能：UNION ALL 的性能要高于 UNION。</p></li></ul><h5 id="以下关于-where-和-having-说法正确的是">以下关于 WHERE 和 HAVING 说法正确的是？</h5><p>A.任何情况 WHERE 和 HAVING 都可以相互替代</p><p>B.GROUP BY 前后都可以使用 WHERE</p><p>C.使用 SELECT X FROM T HAVING Y&gt;20 查询报错</p><p>D.使用 SELECT X FROM T WHERE Y&gt;20 查询报错</p><p>答：C，HAVING 非报错用法是 SELECT X,Y FROM T HAVING Y&gt;20 。</p><h5 id="空值和-null-的区别是什么">空值和 NULL 的区别是什么？</h5><p>空值表示字段的值为空，而 NULL 则表示字段没有值，它们的区别如下：</p><ul><li><p>空值不占用空间，NULL 值是未知的占用空间；</p></li><li><p>空值判断使用 ='' 或 &lt;&gt;'' 来判断，NULL 值使用 IS NULL 或 IS NOT NULL 来判断；</p></li><li><p>使用 COUNT 统计某字段时，如果是 NULL 则会忽略不统计，而空值则会算入统计之内。</p></li></ul><p>比如，其中字段 name 有一个 NULL 值和两个空值，查询结果如图：</p><p><img src="/images/db/mysql/count.png"></p><h5 id="mysql-的常用函数有哪些">MySQL 的常用函数有哪些？</h5><ul><li><p>sum(field) – 求某个字段的和值；</p></li><li><p>count(*) – 查询总条数；</p></li><li><p>min(field) – 某列中最小的值；</p></li><li><p>max(field) – 某列中最大的值；</p></li><li><p>avg(field) – 求平均数；</p></li><li><p>current_date() – 获取当前日期；</p></li><li><p>now() – 获取当前日期和时间；</p></li><li><p>concat(a, b) – 连接两个字符串值以创建单个字符串输出；</p></li><li><p>datediff(a, b) – 确定两个日期之间的差异，通常用于计算年龄。</p></li></ul><h4 id="mysql-性能优化-分布式">MySQL 性能优化 &amp; 分布式</h4><h5 id="mysql-性能指标都有哪些如何得到这些指标">MySQL 性能指标都有哪些？如何得到这些指标？</h5><p>MySQL 的性能指标如下：</p><p>① TPS（Transaction Per Second） 每秒事务数，即数据库每秒执行的事务数。</p><p>MySQL 本身没有直接提供 TPS 参数值，如果我们想要获得 TPS 的值，只有我们自己计算了，可以根据 MySQL 数据库提供的状态变量，来计算 TPS。</p><p>需要使用的参数：</p><ul><li><p>Com_commit ：表示提交次数，通过命令 show global status like 'Com_commit'; 获取；</p></li><li><p>Com_rollback：表示回滚次数，通过命令 show global status like 'Com_rollback'; 获取。</p></li></ul><p>我们定义第一次获取的 Comcommit 的值与 Comrollback 值的和为 c_r1，时间为 t1；</p><p>第二次获取的 Comcommit 的值与 Comrollback 值的和为 cr2，时间为 t2，t1 与 t2 单位为秒。 那么 TPS = ( cr2 - c_r1 ) / ( t2 - t1 ) 算出来的就是该 MySQL 实例在 t1 与 t2 生命周期之间的平均 TPS。</p><p>② QPS（Query Per Second） 每秒请求次数，也就是数据库每秒执行的 SQL 数量，包含 INSERT、SELECT、UPDATE、DELETE 等。 QPS = Queries / Seconds Queries 是系统状态值—总查询次数，可以通过 show status like 'queries'; 查询得出，如下所示：</p><p><img src="/imaegs/queries.png"></p><p>Seconds 是监控的时间区间，单位为秒。 比如，采样 10 秒内的查询次数，那么先查询一次 Queries 值（Q1），等待 10 秒，再查询一次 Queries 值（Q2），那么 QPS 就可以通过，如下公式获得：</p><p>QPS = (Q2 - Q1) / 10</p><p>③ IOPS（Input/Output Operations per Second） 每秒处理的 I/O 请求次数。</p><p>IOPS 是判断磁盘 I/O 能力的指标之一，一般来讲 IOPS 指标越高，那么单位时间内能够响应的请求自然也就越多。理论上讲，只要系统实际的请求数低于 IOPS 的能力，就相当于每一个请求都能得到即时响应，那么 I/O 就不会是瓶颈了。</p><p>注意：IOPS 与磁盘吞吐量不一样，吞吐量是指单位时间内可以成功传输的数据数量。</p><p>可以使用 iostat 命令，查看磁盘的 IOPS，命令如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">yum install sysstat iostat  -dx 1 10<br></code></pre></td></tr></table></figure><p>执行效果如下图所示：</p><p><img src="/images/db/mysql/iostat.png"></p><p>IOPS = r/s + w/s 其中：</p><p>l r/s：代表每秒读了多少次；</p><p>l w/s：代表每秒写了多少次。</p><h5 id="什么是慢查询">什么是慢查询？</h5><p>慢查询是 MySQL 中提供的一种慢查询日志，它用来记录在 MySQL 中响应时间超过阀值的语句，具体指运行时间超过 longquerytime 值的 SQL，则会被记录到慢查询日志中。longquerytime 的默认值为 10，意思是运行 10S 以上的语句。默认情况下，MySQL 数据库并不启动慢查询日志，需要我们手动来设置这个参数，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会给 MySQL 服务器带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。</p><p>使用 <code>mysql&gt; show variables like '%slow_query_log%';</code>来查询慢查询日志是否开启，执行效果如下图所示：</p><p><img src="/images/db/mysql/slow.png"></p><p>slowquerylog 的值为 OFF 时，表示未开启慢查询日志。</p><h5 id="如何开启慢查询日志">如何开启慢查询日志？</h5><p>开启慢查询日志，可以使用如下 MySQL 命令：</p><p><code>mysql&gt; set global slowquerylog=1</code></p><p>不过这种设置方式，只对当前数据库生效，如果 MySQL 重启也会失效，如果要永久生效，就必须修改 MySQL 的配置文件 my.cnf，配置如下：</p><p><code>slowquerylog =1 slowquerylogfile=/tmp/mysqlslow.log</code></p><h5 id="如何定位慢查询">如何定位慢查询？</h5><p>使用 MySQL 中的 explain 分析执行语句，比如：</p><p><code>explain select * from t where id=5;</code></p><p>如下图所示：</p><p><img src="/images/db/mysql/explain.png"></p><p>其中：</p><ul><li><p>id — 选择标识符。id越大优先级越高，越先被执行。</p></li><li><p>select_type — 表示查询的类型。</p></li><li><p>table — 输出结果集的表</p></li><li><p>partitions — 匹配的分区</p></li><li><p>type — 表示表的连接类型</p></li><li><p>possible_keys — 表示查询时，可能使用的索引</p></li><li><p>key — 表示实际使用的索引</p></li><li><p>key_len — 索引字段的长度</p></li><li><p>ref— 列与索引的比较</p></li><li><p>rows — 大概估算的行数</p></li><li><p>filtered — 按表条件过滤的行百分比</p></li><li><p>Extra — 执行情况的描述和说明</p></li></ul><p>其中最重要的就是 type 字段，type 值类型如下：</p><ul><li><p>all — 扫描全表数据</p></li><li><p>index — 遍历索引</p></li><li><p>range — 索引范围查找</p></li><li><p>index_subquery — 在子查询中使用 ref</p></li><li><p>uniquesubquery — 在子查询中使用 eqref</p></li><li><p>refornull — 对 null 进行索引的优化的 ref</p></li><li><p>fulltext — 使用全文索引</p></li><li><p>ref — 使用非唯一索引查找数据</p></li><li><p>eq_ref — 在 join 查询中使用主键或唯一索引关联</p></li><li><p>const — 将一个主键放置到 where 后面作为条件查询， MySQL 优化器就能把这次查询优化转化为一个常量，如何转化以及何时转化，这个取决于优化器，这个比 eq_ref 效率高一点</p></li></ul><h5 id="mysql-的优化手段都有哪些">MySQL 的优化手段都有哪些？</h5><p>MySQL 的常见的优化手段有以下五种：</p><p>① 查询优化</p><ul><li><p>避免 SELECT *，只查询需要的字段。</p></li><li><p>小表驱动大表，即小的数据集驱动大的数据集，比如，当 B 表的数据集小于 A 表时，用 in 优化 exist，两表执行顺序是先查 B 表，再查 A 表，查询语句：select * from A where id in (select id from B) 。</p></li><li><p>一些情况下，可以使用连接代替子查询，因为使用 join 时，MySQL 不会在内存中创建临时表。</p></li></ul><p>② 优化索引的使用</p><ul><li><p>尽量使用主键查询，而非其他索引，因为主键查询不会触发回表查询。</p></li><li><p>不做列运算，把计算都放入各个业务系统实现</p></li><li><p>查询语句尽可能简单，大语句拆小语句，减少锁时间</p></li><li><p>不使用 select * 查询</p></li><li><p>or 查询改写成 in 查询</p></li><li><p>不用函数和触发器</p></li><li><p>避免 %xx 查询</p></li><li><p>少用 join 查询</p></li><li><p>使用同类型比较，比如 '123' 和 '123'、123 和 123</p></li><li><p>尽量避免在 where 子句中使用 != 或者 &lt;&gt; 操作符，查询引用会放弃索引而进行全表扫描</p></li><li><p>列表数据使用分页查询，每页数据量不要太大</p></li><li><p>用 exists 替代 in 查询</p></li><li><p>避免在索引列上使用 is null 和 is not null</p></li><li><p>尽量使用主键查询</p></li><li><p>避免在 where 子句中对字段进行表达式操作</p></li><li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型</p></li></ul><p>③ 表结构设计优化</p><ul><li><p>使用可以存下数据最小的数据类型。</p></li><li><p>使用简单的数据类型，int 要比 varchar 类型在 MySQL 处理简单。</p></li><li><p>尽量使用 tinyint、smallint、mediumint 作为整数类型而非 int。</p></li><li><p>尽可能使用 not null 定义字段，因为 null 占用 4 字节空间。</p></li><li><p>尽量少用 text 类型，非用不可时最好考虑分表。</p></li><li><p>尽量使用 timestamp，而非 datetime。</p></li><li><p>单表不要有太多字段，建议在 20 个字段以内。</p></li></ul><p>④ 表拆分</p><p>当数据库中的数据非常大时，查询优化方案也不能解决查询速度慢的问题时，我们可以考虑拆分表，让每张表的数据量变小，从而提高查询效率。</p><p>a）垂直拆分：是指数据表列的拆分，把一张列比较多的表拆分为多张表，比如，用户表中一些字段经常被访问，将这些字段放在一张表中，另外一些不常用的字段放在另一张表中，插入数据时，使用事务确保两张表的数据一致性。 垂直拆分的原则：</p><ul><li><p>把不常用的字段单独放在一张表；</p></li><li><p>把 text，blob 等大字段拆分出来放在附表中；</p></li><li><p>经常组合查询的列放在一张表中。</p></li></ul><p>b）水平拆分：指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。</p><p>通常情况下，我们使用取模的方式来进行表的拆分，比如，一张有 400W 的用户表 users，为提高其查询效率我们把其分成 4 张表 users1，users2，users3，users4，然后通过用户 ID 取模的方法，同时查询、更新、删除也是通过取模的方法来操作。</p><p>⑤ 读写分离</p><p>一般情况下对数据库而言都是“读多写少”，换言之，数据库的压力多数是因为大量的读取数据的操作造成的，我们可以采用数据库集群的方案，使用一个库作为主库，负责写入数据；其他库为从库，负责读取数据。这样可以缓解对数据库的访问压力。</p><h5 id="mysql-常见读写分离方案有哪些">MySQL 常见读写分离方案有哪些？</h5><p>MySQL 常见的读写分离方案，如下列表：</p><p>1）应用层解决方案 可以通过应用层对数据源做路由来实现读写分离，比如，使用 SpringMVC + MyBatis，可以将 SQL 路由交给 Spring，通过 AOP 或者 Annotation 由代码显示的控制数据源。 优点：路由策略的扩展性和可控性较强。 缺点：需要在 Spring 中添加耦合控制代码。</p><p>2）中间件解决方案 通过 MySQL 的中间件做主从集群，比如：Mysql Proxy、Amoeba、Atlas 等中间件都能符合需求。 优点：与应用层解耦。 缺点：增加一个服务维护的风险点，性能及稳定性待测试，需要支持代码强制主从和事务。</p><h5 id="介绍一下-sharding-jdbc-的功能和执行流程">介绍一下 Sharding-JDBC 的功能和执行流程？</h5><p>Sharding-JDBC 在客户端对数据库进行水平分区的常用解决方案，也就是保持表结构不变，根据策略存储数据分片，这样每一片数据被分散到不同的表或者库中，</p><p>Sharding-JDBC 提供以下功能：</p><ul><li><p>分库分表</p></li><li><p>读写分离</p></li><li><p>分布式主键生成</p></li></ul><p>Sharding-JDBC 的执行流程：当业务代码调用数据库执行的时候，先触发 Sharding-JDBC 的分配规则对 SQL 语句进行解析、改写之后，才会对改写的 SQL 进行执</p><p>行和结果归并，然后返回给调用层。</p><h5 id="什么是-mysql-多实例如何配置-mysql-多实例">什么是 MySQL 多实例？如何配置 MySQL 多实例？</h5><p>MySQL 多实例就是在同一台服务器上启用多个 MySQL 服务，它们监听不同的端口，运行多个服务进程，它们相互独立，互不影响的对外提供服务，便于节约服务器</p><p>资源与后期架构扩展。 多实例的配置方法有两种：</p><ul><li><p>一个实例一个配置文件，不同端口；</p></li><li><p>同一配置文件(my.cnf)下配置不同实例，基于 MySQL 的 d_multi 工具。</p></li></ul><h5 id="怎样保证确保备库无延迟">怎样保证确保备库无延迟？</h5><p>通常保证主备无延迟有以下三种方法：</p><ul><li><p>每次从库执行查询请求前，先判断 secondsbehindmaster 是否已经等于 0。如果还不等于 0 ，那就必须等到这个参数变为 0 才能执行查询请求，secondsbehindmaster 参数是用来衡量主备延迟时间的长短；</p></li><li><p>对比位点确保主备无延迟。MasterLogFile 和 ReadMasterLogPos，表示的是读到的主库的最新位点，RelayMasterLogFile 和 ExecMasterLog_Pos，表示的是备库执行的最新位点；</p></li><li><p>对比 GTID 集合确保主备无延迟。AutoPosition=1 ，表示这对主备关系使用了 GTID 协议；RetrievedGtidSet，是备库收到的所有日志的 GTID 集合；ExecutedGtid_Set，是备库所有已经执行完成的 GTID 集合。</p></li></ul><h4 id="mysql-常见的开放性问题">MySQL 常见的开放性问题</h4><h5 id="有一个超级大表如何优化分页查询">有一个超级大表，如何优化分页查询？</h5><p>超级大表的分页优化分有以下两种方式：</p><ul><li><p>数据库层面优化：利用子查询优化超多分页场景，比如：SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id ，先快速定位需要获取的 id 段，然后再关联查询。MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写，利用子查询先快速定位需要获取的 id 段，然后再关联查询，就是对分页进行 SQL 改写的具体实现；</p></li><li><p>程序层面优化：可以利用缓存把查询的结果缓存起来，这样再下一次查询的时候性能就非常高了。</p></li></ul><h5 id="线上修改表结构有哪些风险">线上修改表结构有哪些风险？</h5><p>线上修改表结构有可能 MySQL 服务器阻塞，因为在执行 DML（select、update、delete、insert）操作时，会给表增加一个元数据锁，这个元数据锁是为了保证在查询期间表结构不会被修改，而执行修改表结构时，必须要等待元数据锁完成之后才能执行，这就可能造成数据库服务器的阻塞。</p><p>在 MySQL 5.6 开始提供了 online ddl 功能，允许一些 DDL（create table/view/index/syn/cluster）语句和 DML 语句并发，在 5.7 版本对 online ddl 又有了增强，这使得大部分 DDL 操作可以在线进行，详见：https://dev.mysql.com/doc/refman/5.7/en/innodb-create-index-overview.html，这使得在线上修改表结构的风险变的更大，如果在业务开发过程中必须在线修改表结构，可以参考以下方案：</p><ul><li><p>尽量在业务量小的时间段进行；</p></li><li><p>查看官方文档，确认要做的表修改可以和 DML 并发，不会阻塞线上业务；</p></li><li><p>推荐使用 percona 公司的 pt-online-schema-change 工具，该工具被官方的 online ddl 更为强大，它的基本原理是：通过 insert…select… 语句进行一次全量拷贝，通过触发器记录表结构变更过程中产生的增量，从而达到表结构变更的目的。比如，要对 A 表进行变更，它的主要流程为：</p></li></ul><p>1）创建目的表结构的空表 A_new；</p><p>2）在A表上创建触发器，包括增、删、改触发器；</p><p>3）通过 insert…select…limit N 语句分片拷贝数据到目的表；</p><p>4）Copy完成后，将 A_new 表 rename 到 A 表。</p><h5 id="查询长时间不返回可能是什么原因应该如何处理">查询长时间不返回可能是什么原因？应该如何处理？</h5><p>查询速度慢的原因很多，常见如下几种：</p><p>1）查询字段没有索引或者没有触发索引查询，没有触发索引查询的情况如下： 不会使用索引的情况如下：</p><ul><li><p>以 % 开头的 like 查询不会使用 b-tree 索引；</p></li><li><p>数据类型出现隐式转换时不会使用索引，比如，某列是 varchar 类型，却使用了columnname=1 的查询语句，这是不会使用索引，正确触发索引的查询语句为：columnname='1' ；</p></li><li><p>不符合最左前缀原则；</p></li><li><p>如果查询条件有 or 分割，or 前面的使用索引，or 后面的未使用索引，则不会使用索引，因为即使 or 之前的使用了索引，但是 or 之后的也需要全表查询，索引就忽略索引，直接全表查询；</p></li><li><p>如果 MySQL 认为使用索引会比全表查询更慢，则不会使用索引。</p></li></ul><p>2）I/O 压力大，读取磁盘速度变慢。</p><p>3）内存不足</p><p>4）网络速度慢</p><p>5）查询出的数据量过大，可以采用多次查询或其他的方法降低数据量</p><p>6）死锁，一般碰到这种情况的话，大概率是表被锁住了，可以使用 show processlist; 命令，看看 SQL 语句的状态，再针对不同的状态做相应的处理。</p><p><img src="/images/db/mysql/deadlock.png"></p><p>其中，当 State 列值为 Locked 时，表示被锁定。 其它关于查看死锁的命令：</p><p>a）查看当前的事务：</p><p><code>select * from informationschema.innodbtrx;</code></p><p>b）查看当前锁定的事务：</p><p><code>select * from informationschema.innodblocks;</code></p><p>c）查看当前等锁的事务</p><p><code>select * from informationschema.innodblock_waits;</code></p><p>以上问题的解决方案如下：</p><p>1）正确创建和使用索引。</p><p>2）把数据、日志、索引放到不同的 IO 设备上，减少主数据库的 IO 操作。更换 MySQL 的磁盘为固态硬盘，以提高磁盘的 IO 性能。</p><p>3）升级内存，更换更大的内存。</p><p>4）提升网速，升级带宽。</p><p>5）用 Profiler 来跟踪查询，得到查询所需的时间，找出有问题的 SQL 语句，优化 SQL。</p><p>6）查询时值返回需要的字段。</p><p>7）设置死锁的超时时间，限制和避免死锁消耗过多服务器的资源。</p><p>8）尽量少用视图，它的效率低，对视图操作比直接对表操作慢,可以用存储过程来代替视图。不要用视图嵌套，嵌套视图增加了寻找原始数据的难度。</p><h5 id="什么是-mysql-主从主从同步有什么好处">什么是 MySQL 主从？主从同步有什么好处？</h5><p>MySQL 主从同步：MySQL 有多个服务器去，一个服务器作为主服务器，其它服务器作为从服务器，通过配置我们可以将主服务器的所有数据或者部分数据复制到从服务器上。复制的过程是异步进行的。</p><p>主从同步的好处：（读写分离，数据备份，负载均衡）我们可以设置主服务器写入数据，读取数据使用从服务器。保证数据库负载均衡。数据随时都在进行同步备份，保证了数据的安全性。</p><h5 id="mysql-主从延迟的原因有哪些">MySQL 主从延迟的原因有哪些？</h5><p>主从延迟可以根据 MySQL 提供的命令判断，比如，在从服务器使用命令： show slave status;，其中 SecondsBehindMaster 如果为 0 表示主从复制状态正常。 导致</p><p>主从延迟的原因有以下几个：</p><ul><li><p>主库有大事务处理；</p></li><li><p>主库做大量的增、删、改操作；</p></li><li><p>主库对大表进行字段新增、修改或添加索引等操作；</p></li><li><p>主库的从库太多，导致复制延迟。从库数量一般 3-5 个为宜，要复制的节点过多，导致复制延迟；</p></li><li><p>从库硬件配置比主库差，导致延迟。查看 Master 和 Slave 的配置，可能因为从库的配置过低，执行时间长，由此导致的复制延迟时间长；</p></li><li><p>主库读写压力大，导致复制延迟；</p></li><li><p>从库之间的网络延迟。主从库网卡、网线、连接的交换机等网络设备都可能成为复制的瓶颈，导致复制延迟，另外跨公网主从复制很容易导致主从复制延迟。</p></li></ul><h5 id="mysql-主从与-mongodb-副本集有什么区别">MySQL 主从与 MongoDB 副本集有什么区别？</h5><ul><li><p>MongoDB 是在同一个服务器（一台机器），同时复制备份多个数据库</p></li><li><p>MySQL 复制备份数据是在多个服务器（多台机器），复制备份多个数据库</p></li><li><p>MongoDB 复制备份是同步的，MySQL 复制备份可以是异步的，也可以主从同步</p></li><li><p>MongoDB 读写在指定的某一个数据库作为主数据库</p></li><li><p>MySQL 一般主服务器写，从服务器读，读写分离</p></li></ul><h5 id="如何保证数据不被误删">如何保证数据不被误删？</h5><p>保证数据不被误删的方法如下列表：</p><ul><li><p>权限控制与分配（数据库和服务器权限）</p></li><li><p>避免数据库账号信息泄露，在生产环境中，业务代码不要使用明文保存数据库连接信息；</p></li><li><p>重要的数据库操作，通过平台型工具自动实施，减少人工操作；</p></li><li><p>部署延迟复制从库，万一误删除时用于数据回档，且从库设置为 read-only；</p></li><li><p>确认备份制度及时有效；</p></li><li><p>启用 SQL 审计功能，养成良好 SQL 习惯；</p></li><li><p>启用 sqlsafeupdates 选项，不允许没 where 条件的更新/删除；</p></li><li><p>将系统层的 rm 改为 mv；</p></li><li><p>线上不进行物理删除，改为逻辑删除（将 row data 标记为不可用）；</p></li><li><p>启用堡垒机，屏蔽高危 SQL；</p></li><li><p>降低数据库中普通账号的权限级别；</p></li><li><p>开启 binlog，方便追溯数据。</p></li></ul><h5 id="mysql-服务器-cpu-飙升应该如何处理">MySQL 服务器 CPU 飙升应该如何处理？</h5><p>使用 show full processlist; 查出慢查询，为了缓解数据库服务器压力，先使用 kill 命令杀掉慢查询的客户端，效果如下：</p><p><img src="/images/db/mysql/fullprocesslist.png"></p><p>然后再去项目中找到执行慢的 SQL 语句进行修改和优化。</p><h5 id="mysql-毫无规律的异常重启可能产生的原因是什么该如何解决">MySQL 毫无规律的异常重启，可能产生的原因是什么？该如何解决？</h5><p>可能是积累的长连接导致内存占用太多，被系统强行杀掉导致的异常重启，因为在 MySQL 中长连接在执行过程中使用的临时内存对象，只有在连接断开的时候才会</p><p>释放，这就会导致内存不断飙升，解决方案如下：</p><ul><li><p>定期断开空闲的长连接；</p></li><li><p>如果是用的是 MySQL 5.7 以上的版本，可以定期执行 <code>mysqlresetconnection</code> 重新初始化连接资源，这个过程会释放之前使用的内存资源，恢复到连接刚初始化的状态。</p></li></ul><h5 id="如何实现一个高并发的系统">如何实现一个高并发的系统？</h5><p>这道面试题涉及的知识点比较多，主要考察的是面试者的综合技术能力。高并发系统的设计手段有很多，主要体现在以下五个方面。</p><p>1）前端优化</p><p>① 静态资源缓存：将活动页面上的所有可以静态的元素全部静态化，尽量减少动态元素；通过 CDN、浏览器缓存，来减少客户端向服务器端的数据请求。</p><p>② 禁止重复提交：用户提交之后按钮置灰，禁止重复提交。</p><p>③ 用户限流：在某一时间段内只允许用户提交一次请求，比如，采取 IP 限流。</p><p>2）中间层负载分发</p><p>可利用负载均衡，比如 nginx 等工具，可以将并发请求分配到不同的服务器，从而提高了系统处理并发的能力。 nginx 负载分发的五种方式：</p><p>① 轮询（默认） 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器不能正常响应，nginx 能自动剔除故障服务器。</p><p>② 按权重（weight） 使用 weight 参数，指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况，配置如下：</p><p><code>upstream backend &#123;   server 192.168.0.14 weight=10;   server 192.168.0.15 weight=10; &#125;</code></p><p>③ IP 哈希值（ip_hash） 每个请求按访问 IP 的哈希值分配，这样每个访客固定访问一个后端服务器，可以解决 session 共享的问题，配置如下：</p><p><code>upstream backend &#123;   ip_hash;   server 192.168.0.14:88;   server 192.168.0.15:80; &#125;</code></p><p>④ 响应时间（fair） 按后端服务器的响应时间来分配请求，响应时间短的优先分配，配置如下：</p><p><code>upstream backend &#123;   fair;   server server1.com;   server server2.com; &#125;</code></p><p>⑤ URL 哈希值（url_hash） 按访问 url 的 hash 结果来分配请求，和 IP 哈希值类似。</p><p><code>upstream backend &#123;   hash $request_uri;   server server1.com;   server server2.com;  &#125;</code></p><p>3）控制层（网关层）</p><p>限制同一个用户的访问频率，限制访问次数，防止多次恶意请求。</p><p>4）服务层</p><p>① 业务服务器分离：比如，将秒杀业务系统和其他业务分离，单独放在高配服务器上，可以集中资源对访问请求抗压。</p><p>② 采用 MQ（消息队列）缓存请求：MQ 具有削峰填谷的作用，可以把客户端的请求先导流到 MQ，程序在从 MQ 中进行消费（执行请求），这样可以避免短时间内大量请求，导致服务器程序无法响应的问题。</p><p>③ 利用缓存应对读请求，比如，使用 Redis 等缓存，利用 Redis 可以分担数据库很大一部分压力。</p><p>5）数据库层</p><p>① 合理使用数据库引擎</p><p>② 合理设置事务隔离级别，合理使用事务</p><p>③ 正确使用 SQL 语句和查询索引</p><p>④ 合理分库分表</p><p>⑤ 使用数据库中间件实现数据库读写分离</p><p>⑥ 设置数据库主从读写分离</p><h3 id="qa">Q&amp;A</h3><div class="note note-success">            <p><span class="label label-danger"><strong>时间字段创建索引和不创建索引查询性能分析</strong></span></p><p>对于MyISAM引擎，不建立索引的情况下（推荐），效率从高到低：int &gt; UNIX_TIMESTAMP(timestamp) &gt; datetime（直接和时间比较）&gt;timestamp（直接和时间比较）&gt;UNIX_TIMESTAMP(datetime) 。</p><p>对于MyISAM引擎，建立索引的情况下，效率从高到低： UNIX_TIMESTAMP(timestamp) &gt; int &gt; datetime（直接和时间比较）&gt;timestamp（直接和时间比较）&gt;UNIX_TIMESTAMP(datetime) 。</p><p>对于InnoDB引擎，没有索引的情况下(不建议)，效率从高到低：int &gt; UNIX_TIMESTAMP(timestamp) &gt; datetime（直接和时间比较） &gt; timestamp（直接和时间比较）&gt; UNIX_TIMESTAMP(datetime)。</p><p>对于InnoDB引擎，建立索引的情况下，效率从高到低：int &gt; datetime（直接和时间比较） &gt; timestamp（直接和时间比较）&gt; UNIX_TIMESTAMP(timestamp) &gt; UNIX_TIMESTAMP(datetime)。</p><p>总之，对于MyISAM引擎，采用 UNIX_TIMESTAMP(timestamp) 比较；对于InnoDB引擎，建立索引，采用 int 或 datetime直接时间比较。</p><p><a href="https://www.jianshu.com/p/c3dc98515977">来源</a></p>          </div><div class="note note-primary">            <p><span class="label label-danger">insert on duplicate key update does not return Last Insert ID in the case of an update</span></p><p>​ TiDB insert on duplicate key update 无法返回Last Insert ID</p><p>​ <a href="https://github.com/pingcap/tidb/issues/23914">问题</a></p>          </div><div class="note note-warning">            <p><span class="label label-danger">packets.go:36: unexpected EOF</span></p><p>Go Mysql Driver的unexpected EOF错误。</p><p><a href="https://xiaopengli89.github.io/posts/go-mysql-driver-eof/">解决1</a></p><p><a href="https://www.alexedwards.net/blog/configuring-sqldb">解决2</a></p>          </div><div class="note note-warning">            <p><span class="label label-danger">MySql Lock wait timeout exceeded</span></p><p>通过设置<a href="https://golang.org/pkg/database/sql/#DB.SetMaxOpenConns"><code>SetMaxOpenConns()</code></a>, <a href="https://golang.org/pkg/database/sql/#DB.SetMaxIdleConns"><code>SetMaxIdleConns()</code></a> and <a href="https://golang.org/pkg/database/sql/#DB.SetConnMaxLifetime"><code>SetConnMaxLifetime()</code></a>值解决。</p><p><a href="https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/">解决</a></p>          </div><div class="note note-warning">            <p><span class="label label-danger">Error 1040: Too Many Connection</span></p><p>增加mysql中的max_connections值。</p><p><a href="https://stackoverflow.com/questions/14331032/mysql-error-1040-too-many-connection">解决</a></p>          </div><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Datebase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Datebase</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】图结构相关</title>
    <link href="/2021/03/12/lt-graph/"/>
    <url>/2021/03/12/lt-graph/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】排序算法</title>
    <link href="/2021/03/10/lt-sort/"/>
    <url>/2021/03/10/lt-sort/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="排序算法"><span id="more"></span>排序算法</h3><h4 id="快速排序quick-sort及优化"><strong>快速排序（Quick-Sort）及优化</strong></h4><h4 id="归并排序merge-sort从二路到多路">归并排序（Merge-Sort）：从二路到多路</h4><h4 id="算法系列algorith法杂谈m有趣的排序思想">算法系列（Algorith法杂谈m）：有趣的排序思想</h4><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】树结构相关</title>
    <link href="/2021/03/08/lt-tree/"/>
    <url>/2021/03/08/lt-tree/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="数结构相关与递归"><span id="more"></span> 数结构相关与递归</h3><h4 id="二叉树binary-tree与经典问题"><strong>二叉树（Binary-Tree）与经典问题</strong></h4><h5 id="二叉树的基本操作">二叉树的基本操作</h5><h6 id="二叉树的前序遍历"><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h6><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,null,2,3]</span><br>输出：<span class="hljs-comment">[1,2,3]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,2]</span><br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：root = <span class="hljs-comment">[1,null,2]</span><br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[0, 100]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreePreorderTraversal</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> BinaryTreePreorderTraversal().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// Given the root of a binary tree, return the preorder traversal of its nodes&#x27; values.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">// Input: root = [1,null,2,3]</span><br>    <span class="hljs-comment">// Output: [1,2,3]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">// Input: root = []</span><br>    <span class="hljs-comment">// Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">// Input: root = [1]</span><br>    <span class="hljs-comment">// Output: [1]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 4:</span><br>    <span class="hljs-comment">// Input: root = [1,2]</span><br>    <span class="hljs-comment">// Output: [1,2]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 5:</span><br>    <span class="hljs-comment">// Input: root = [1,null,2]</span><br>    <span class="hljs-comment">// Output: [1,2]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the tree is in the range [0, 100].</span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Follow up: Recursive solution is trivial, could you do it iteratively?</span><br>    <span class="hljs-comment">// Related Topics 栈 树</span><br>    <span class="hljs-comment">// 👍 549 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for a binary tree node.</span><br><span class="hljs-comment">     */</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>          <span class="hljs-keyword">int</span> val;<br>          TreeNode left;<br>          TreeNode right;<br>          TreeNode() &#123;&#125;<br>          TreeNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>          TreeNode(<span class="hljs-keyword">int</span> val, TreeNode left, TreeNode right) &#123;<br>              <span class="hljs-keyword">this</span>.val = val;<br>              <span class="hljs-keyword">this</span>.left = left;<br>              <span class="hljs-keyword">this</span>.right = right;<br>          &#125;<br>     &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>          List&lt;Integer&gt; ret = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>          <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>              preOrder(root);<br>              <span class="hljs-keyword">return</span> ret;<br>          &#125;<br><br>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>              <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                  ret.add(root.val);<br>                  preOrder(root.left);<br>                  preOrder(root.right);<br>              &#125;<br>          &#125;<br>    &#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">var</span> ret []<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(root *TreeNode)</span> []<span class="hljs-title">int</span></span> &#123;<br>    ret = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    preOrder(root)<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(root *TreeNode)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    ret = <span class="hljs-built_in">append</span>(ret, root.Val)<br>    preOrder(root.Left)<br>    preOrder(root.Right)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 144-二叉树的前序遍历</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给你二叉树的根节点 root ，返回它节点值的 前序 遍历。 </span><br><span class="hljs-string">        #  示例 1：</span><br><span class="hljs-string">        # 输入：root = [1,null,2,3]</span><br><span class="hljs-string">        # 输出：[1,2,3]</span><br><span class="hljs-string">        #  示例 2：</span><br><span class="hljs-string">        # 输入：root = []</span><br><span class="hljs-string">        # 输出：[]</span><br><span class="hljs-string">        #  示例 3：</span><br><span class="hljs-string">        # 输入：root = [1]</span><br><span class="hljs-string">        # 输出：[1]</span><br><span class="hljs-string">        #  示例 4：</span><br><span class="hljs-string">        # 输入：root = [1,2]</span><br><span class="hljs-string">        # 输出：[1,2]</span><br><span class="hljs-string">        #  示例 5：</span><br><span class="hljs-string">        # 输入：root = [1,null,2]</span><br><span class="hljs-string">        # 输出：[1,2]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  树中节点数目在范围 [0, 100] 内</span><br><span class="hljs-string">        #  -100 &lt;= Node.val &lt;= 100</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  进阶：递归算法很简单，你可以通过迭代算法完成吗？</span><br><span class="hljs-string">        #  Related Topics 栈 树</span><br><span class="hljs-string">        #  👍 549 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.ret = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        self.pre_order(root)<br>        <span class="hljs-keyword">return</span> self.ret<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_order</span>(<span class="hljs-params">self, root: TreeNode</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br>        self.ret.append(root.val)<br>        self.pre_order(root.left)<br>        self.pre_order(root.right)<br><br></code></pre></td></tr></table></figure><h6 id="n-叉树的前序遍历"><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589. N 叉树的前序遍历</a></h6><p>给定一个 N 叉树，返回其节点值的 <strong>前序遍历</strong> 。</p><p>N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p><p><strong>进阶：</strong></p><p>递归法很简单，你可以使用迭代法完成此题吗?</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">输入：root = [1,null,3,2,4,null,5,6]<br>输出：[1,3,5,6,2,4]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">8</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">11</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">12</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">13</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">14</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">14</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">13</span>,<span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>N 叉树的高度小于或等于 <code>1000</code></li><li>节点总数在范围 <code>[0, 10^4]</code> 内</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NAryTreePreorderTraversal</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> NAryTreePreorderTraversal().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// Given the root of an n-ary tree, return the preorder traversal of its nodes&#x27; values.</span><br>    <span class="hljs-comment">// Nary-Tree input serialization is represented in their level order traversal.</span><br>    <span class="hljs-comment">//Each group of children is separated by the null value (See examples)</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: root = [1,null,3,2,4,null,5,6]</span><br>    <span class="hljs-comment">//Output: [1,3,5,6,2,4]</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null</span><br>    <span class="hljs-comment">//,12,null,13,null,null,14]</span><br>    <span class="hljs-comment">//Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the tree is in the range [0, 104].</span><br>    <span class="hljs-comment">// 0 &lt;= Node.val &lt;= 104</span><br>    <span class="hljs-comment">// The height of the n-ary tree is less than or equal to 1000.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Follow up: Recursive solution is trivial, could you do it iteratively?</span><br>    <span class="hljs-comment">// Related Topics 树</span><br>    <span class="hljs-comment">// 👍 152 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">// Definition for a Node.</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> val;<br>        <span class="hljs-keyword">public</span> List&lt;Node&gt; children;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _val)</span> </span>&#123;<br>            val = _val;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _val, List&lt;Node&gt; _children)</span> </span>&#123;<br>            val = _val;<br>            children = _children;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        List&lt;Integer&gt; ret = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorder</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>            preOrder(root);<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                ret.add(root.val);<br>                <span class="hljs-keyword">for</span> (Node n: root.children) &#123;<br>                    preOrder(n);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a Node.</span><br><span class="hljs-comment"> * type Node struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Children []*Node</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> ret []<span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorder</span><span class="hljs-params">(root *Node)</span> []<span class="hljs-title">int</span></span> &#123;<br>    ret = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    preOrder(root)<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(root *Node)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    ret = <span class="hljs-built_in">append</span>(ret, root.Val)<br>    <span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> root.Children &#123;<br>        preOrder(c)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 589-N 叉树的前序遍历</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个 N 叉树，返回其节点值的 前序遍历 。 </span><br><span class="hljs-string">        #  N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 null 分隔（请参见示例）。</span><br><span class="hljs-string">        #  进阶：</span><br><span class="hljs-string">        #  递归法很简单，你可以使用迭代法完成此题吗?</span><br><span class="hljs-string">        #  示例 1：</span><br><span class="hljs-string">        # 输入：root = [1,null,3,2,4,null,5,6]</span><br><span class="hljs-string">        # 输出：[1,3,5,6,2,4]</span><br><span class="hljs-string">        # 示例 2：</span><br><span class="hljs-string">        # 输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,</span><br><span class="hljs-string">        # null,13,null,null,14]</span><br><span class="hljs-string">        # 输出：[1,2,3,6,7,11,14,4,8,12,5,9,13,10]</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  N 叉树的高度小于或等于 1000</span><br><span class="hljs-string">        #  节点总数在范围 [0, 10^4] 内</span><br><span class="hljs-string">        #  Related Topics 树</span><br><span class="hljs-string">        #  👍 152 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># Definition for a Node.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-literal">None</span>, children=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.children = children<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.ret = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preorder</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;Node&#x27;</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        self.pre_order(root)<br>        <span class="hljs-keyword">return</span> self.ret<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_order</span>(<span class="hljs-params">self, root: <span class="hljs-string">&#x27;Node&#x27;</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br>        self.ret.append(root.val)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> root.children:<br>            self.pre_order(c)<br>        <br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="翻转二叉树"><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h6><p>翻转一棵二叉树。</p><p><strong>示例：</strong></p><p>输入：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">     <span class="hljs-number">4</span><br>   /   <span class="hljs-string">\</span><br>  <span class="hljs-number">2</span>     <span class="hljs-number">7</span><br> / <span class="hljs-string">\</span>   / <span class="hljs-string">\</span><br><span class="hljs-number">1</span>   <span class="hljs-number">3</span> <span class="hljs-number">6</span>   <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">     <span class="hljs-number">4</span><br>   /   <span class="hljs-string">\</span><br>  <span class="hljs-number">7</span>     <span class="hljs-number">2</span><br> / <span class="hljs-string">\</span>   / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>   <span class="hljs-number">6</span> <span class="hljs-number">3</span>   <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>备注:</strong> 这个问题是受到 <a href="https://twitter.com/mxcl">Max Howell</a>的 <a href="https://twitter.com/mxcl/status/608682016205344768">原问题</a> 启发的 ：</p><blockquote><p>谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvertBinaryTree</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> InvertBinaryTree().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// Given the root of a binary tree, invert the tree, and return its root.</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: root = [4,2,7,1,3,6,9]</span><br>    <span class="hljs-comment">//Output: [4,7,2,9,6,3,1]</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: root = [2,1,3]</span><br>    <span class="hljs-comment">//Output: [2,3,1]</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: root = []</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the tree is in the range [0, 100].</span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 树</span><br>    <span class="hljs-comment">// 👍 807 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>         <span class="hljs-keyword">int</span> val;<br>         TreeNode left;<br>         TreeNode right;<br>         TreeNode() &#123;&#125;<br>         TreeNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>         TreeNode(<span class="hljs-keyword">int</span> val, TreeNode left, TreeNode right) &#123;<br>             <span class="hljs-keyword">this</span>.val = val;<br>             <span class="hljs-keyword">this</span>.left = left;<br>             <span class="hljs-keyword">this</span>.right = right;<br>         &#125;<br>     &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            invertTree(root.left);<br>            invertTree(root.right);<br>            TreeNode temp = root.left;<br>            root.left = root.right;<br>            root.right = temp;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">invertTree</span><span class="hljs-params">(root *TreeNode)</span> *<span class="hljs-title">TreeNode</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    invertTree(root.Left)<br>    invertTree(root.Right)<br>    root.Left, root.Right = root.Right, root.Left <br>    <span class="hljs-keyword">return</span> root<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 226-翻转二叉树</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 翻转一棵二叉树。 </span><br><span class="hljs-string">        #  示例：</span><br><span class="hljs-string">        #  输入：</span><br><span class="hljs-string">        #       4</span><br><span class="hljs-string">        #    /   \</span><br><span class="hljs-string">        #   2     7</span><br><span class="hljs-string">        #  / \   / \</span><br><span class="hljs-string">        # 1   3 6   9</span><br><span class="hljs-string">        #  输出：</span><br><span class="hljs-string">        #       4</span><br><span class="hljs-string">        #    /   \</span><br><span class="hljs-string">        #   7     2</span><br><span class="hljs-string">        #  / \   / \</span><br><span class="hljs-string">        # 9   6 3   1</span><br><span class="hljs-string">        #  备注:</span><br><span class="hljs-string">        # 这个问题是受到 Max Howell 的 原问题 启发的 ：</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。</span><br><span class="hljs-string">        #  Related Topics 树</span><br><span class="hljs-string">        #  👍 807 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invertTree</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; TreeNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        self.invertTree(root.left)<br>        self.invertTree(root.right)<br>        root.left, root.right = root.right, root.left<br>        <span class="hljs-keyword">return</span> root<br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="剑指-offer-32---ii.-从上到下打印二叉树-ii"><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></h6><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p><p>例如: 给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">  <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  <span class="hljs-string">\</span><br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>返回其层次遍历结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>  [<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">9</span>,<span class="hljs-number">20</span>],<br>  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol type="1"><li><code>节点总数 &lt;= 1000</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CongShangDaoXiaDaYinErChaShuIiLcof</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> CongShangDaoXiaDaYinErChaShuIiLcof().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//English description is not available for the problem. Please switch to Chinese</span><br>    <span class="hljs-comment">//. Related Topics 树 广度优先搜索</span><br>    <span class="hljs-comment">// 👍 95 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for a binary tree node.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>         <span class="hljs-keyword">int</span> val;<br>         TreeNode left;<br>         TreeNode right;<br>         TreeNode(<span class="hljs-keyword">int</span> x) &#123; val = x; &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>        List&lt;List&lt;Integer&gt;&gt; liiRet = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;<br><br>            signKLevel(root, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> liiRet;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signKLevel</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (liiRet.size() == k) &#123;<br>                    liiRet.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>                &#125;<br>                liiRet.get(k).add(root.val);<br>                signKLevel(root.left, k+<span class="hljs-number">1</span>);<br>                signKLevel(root.right, k+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> ret [][]<span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-comment">// write code here</span><br>    ret = <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>    ret = <span class="hljs-built_in">append</span>(ret, []<span class="hljs-keyword">int</span>&#123;&#125;)<br>    travelTree(root, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">travelTree</span><span class="hljs-params">(root *TreeNode, k <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <br>    &#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ret) == k &#123;<br>        ret = <span class="hljs-built_in">append</span>(ret, []<span class="hljs-keyword">int</span>&#123;&#125;)<br>    &#125;<br>    ret[k] = <span class="hljs-built_in">append</span>(ret[k], root.Val)<br>    travelTree(root.Left, k+<span class="hljs-number">1</span>)<br>    travelTree(root.Right, k+<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 剑指 Offer 32 - II-从上到下打印二叉树 II</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-04-03 12:10:11</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。 </span><br><span class="hljs-string">        #  例如:</span><br><span class="hljs-string">        # 给定二叉树: [3,9,20,null,null,15,7],</span><br><span class="hljs-string">        #      3</span><br><span class="hljs-string">        #    / \</span><br><span class="hljs-string">        #   9  20</span><br><span class="hljs-string">        #     /  \</span><br><span class="hljs-string">        #    15   7</span><br><span class="hljs-string">        #  返回其层次遍历结果：</span><br><span class="hljs-string">        #  [</span><br><span class="hljs-string">        #   [3],</span><br><span class="hljs-string">        #   [9,20],</span><br><span class="hljs-string">        #   [15,7]</span><br><span class="hljs-string">        # ]</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  节点总数 &lt;= 1000</span><br><span class="hljs-string">        #  注意：本题与主站 102 题相同：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</span><br><span class="hljs-string">        #  Related Topics 树 广度优先搜索</span><br><span class="hljs-string">        #  👍 95 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x</span>):</span><br>        self.val = x<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.lii_ret = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        self.sign_k_level(root, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> self.lii_ret<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sign_k_level</span>(<span class="hljs-params">self, root: TreeNode, k: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.lii_ret) == k:<br>            self.lii_ret.append([])<br><br>        self.lii_ret[k].append(root.val)<br>        self.sign_k_level(root.left, k+<span class="hljs-number">1</span>)<br>        self.sign_k_level(root.right, k+<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="二叉树的层序遍历-ii"><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/">107. 二叉树的层序遍历 II</a></h6><p>给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><p>例如： 给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">  <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  <span class="hljs-string">\</span><br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>返回其自底向上的层序遍历为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>],<br>  [<span class="hljs-number">9</span>,<span class="hljs-number">20</span>],<br>  [<span class="hljs-number">3</span>]<br>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeLevelOrderTraversalIi</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> BinaryTreeLevelOrderTraversalIi().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the root of a binary tree, return the bottom-up level order traversal of its nodes&#x27; values. (i.e., from left to right, level by level from leaf to root).</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: root = [3,9,20,null,null,15,7]</span><br>    <span class="hljs-comment">//Output: [[15,7],[9,20],[3]]</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: root = [1]</span><br>    <span class="hljs-comment">//Output: [[1]]</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: root = []</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the tree is in the range [0, 2000].</span><br>    <span class="hljs-comment">// -1000 &lt;= Node.val &lt;= 1000</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 树 广度优先搜索</span><br>    <span class="hljs-comment">// 👍 423 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for a binary tree node.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        TreeNode left;<br>        TreeNode right;<br>        TreeNode() &#123;&#125;<br>        TreeNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        TreeNode(<span class="hljs-keyword">int</span> val, TreeNode left, TreeNode right) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.left = left;<br>            <span class="hljs-keyword">this</span>.right = right;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>        List&lt;List&lt;Integer&gt;&gt; liiRet = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;<br>            signKLevel(root, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j=liiRet.size()-<span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>                List&lt;Integer&gt; tmp = liiRet.get(i);<br>                liiRet.set(i, liiRet.get(j));<br>                liiRet.set(j, tmp);<br>            &#125;<br>            <span class="hljs-keyword">return</span> liiRet;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signKLevel</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><br>            <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (liiRet.size() == k) &#123;<br>                    liiRet.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>                &#125;<br>                liiRet.get(k).add(root.val);<br>                signKLevel(root.left, k+<span class="hljs-number">1</span>);<br>                signKLevel(root.right, k+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">var</span> ret [][]<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrderBottom</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br>    ret = <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>    travelTree(root, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i, j := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ret) - <span class="hljs-number">1</span>; i &lt; j; i,j = i+<span class="hljs-number">1</span>, j<span class="hljs-number">-1</span> &#123;<br>        ret[i], ret[j] = ret[j], ret[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">travelTree</span><span class="hljs-params">(root *TreeNode, k <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <br>    &#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ret) == k &#123;<br>        ret = <span class="hljs-built_in">append</span>(ret, []<span class="hljs-keyword">int</span>&#123;&#125;)<br>    &#125;<br>    ret[k] = <span class="hljs-built_in">append</span>(ret[k], root.Val)<br>    travelTree(root.Left, k+<span class="hljs-number">1</span>)<br>    travelTree(root.Right, k+<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 107-二叉树的层序遍历 II</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-04-03 12:32:50</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个二叉树，返回其节点值自底向上的层序遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历） </span><br><span class="hljs-string">        #  例如：</span><br><span class="hljs-string">        # 给定二叉树 [3,9,20,null,null,15,7],</span><br><span class="hljs-string">        #     3</span><br><span class="hljs-string">        #    / \</span><br><span class="hljs-string">        #   9  20</span><br><span class="hljs-string">        #     /  \</span><br><span class="hljs-string">        #    15   7</span><br><span class="hljs-string">        #  返回其自底向上的层序遍历为：</span><br><span class="hljs-string">        # [</span><br><span class="hljs-string">        #   [15,7],</span><br><span class="hljs-string">        #   [9,20],</span><br><span class="hljs-string">        #   [3]</span><br><span class="hljs-string">        # ]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 树 广度优先搜索</span><br><span class="hljs-string">        #  👍 423 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.lii_ret = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sign_k_level</span>(<span class="hljs-params">self, root: TreeNode, k: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.lii_ret) == k:<br>            self.lii_ret.append([])<br><br>        self.lii_ret[k].append(root.val)<br>        self.sign_k_level(root.left, k + <span class="hljs-number">1</span>)<br>        self.sign_k_level(root.right, k + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">levelOrderBottom</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        self.sign_k_level(root, <span class="hljs-number">0</span>)<br>        self.lii_ret.reverse()<br>        <span class="hljs-keyword">return</span> self.lii_ret<br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="二叉树的锯齿形层序遍历"><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></h6><p>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><p>例如： 给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">  <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  <span class="hljs-string">\</span><br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>返回锯齿形层序遍历如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>  [<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">20</span>,<span class="hljs-number">9</span>],<br>  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeZigzagLevelOrderTraversal</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> BinaryTreeZigzagLevelOrderTraversal().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the root of a binary tree, return the zigzag level order traversal of its nodes&#x27; values. (i.e., from left to right, then right to left for the next level and alternate between).</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: root = [3,9,20,null,null,15,7]</span><br>    <span class="hljs-comment">//Output: [[3],[20,9],[15,7]]</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: root = [1]</span><br>    <span class="hljs-comment">//Output: [[1]]</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: root = []</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the tree is in the range [0, 2000].</span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 栈 树 广度优先搜索</span><br>    <span class="hljs-comment">// 👍 424 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>     <span class="hljs-keyword">int</span> val;<br>     TreeNode left;<br>     TreeNode right;<br>     TreeNode() &#123;&#125;<br>     TreeNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>     TreeNode(<span class="hljs-keyword">int</span> val, TreeNode left, TreeNode right) &#123;<br>         <span class="hljs-keyword">this</span>.val = val;<br>         <span class="hljs-keyword">this</span>.left = left;<br>         <span class="hljs-keyword">this</span>.right = right;<br>     &#125;<br> &#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;List&lt;Integer&gt;&gt; liiRet = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;<br>        signKLevel(root, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; liiRet.size(); k++) &#123;<br>            <span class="hljs-keyword">if</span> (k%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j=liiRet.get(k).size()-<span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>                    <span class="hljs-keyword">int</span> tmp = liiRet.get(k).get(i);<br>                    liiRet.get(k).set(i, liiRet.get(k).get(j));<br>                    liiRet.get(k).set(j, tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> liiRet;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signKLevel</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (liiRet.size() == k) &#123;<br>                liiRet.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>            &#125;<br>            liiRet.get(k).add(root.val);<br>            signKLevel(root.left, k+<span class="hljs-number">1</span>);<br>            signKLevel(root.right, k+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> ret [][]<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zigzagLevelOrder</span><span class="hljs-params">(root *TreeNode)</span> [][]<span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-comment">// write code here</span><br>    ret = <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>    ret = <span class="hljs-built_in">append</span>(ret, []<span class="hljs-keyword">int</span>&#123;&#125;)<br>    travelTree(root, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> ret &#123;<br>        <span class="hljs-keyword">if</span> i% <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">for</span> j, k := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(v)<span class="hljs-number">-1</span>; j&lt;k; j, k = j+<span class="hljs-number">1</span>, k<span class="hljs-number">-1</span> &#123;<br>                v[j], v[k] = v[k], v[j]<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">travelTree</span><span class="hljs-params">(root *TreeNode, k <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <br>    &#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ret) == k &#123;<br>        ret = <span class="hljs-built_in">append</span>(ret, []<span class="hljs-keyword">int</span>&#123;&#125;)<br>    &#125;<br>    ret[k] = <span class="hljs-built_in">append</span>(ret[k], root.Val)<br>    travelTree(root.Left, k+<span class="hljs-number">1</span>)<br>    travelTree(root.Right, k+<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 103-二叉树的锯齿形层序遍历</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。 </span><br><span class="hljs-string">        #  例如：</span><br><span class="hljs-string">        # 给定二叉树 [3,9,20,null,null,15,7],</span><br><span class="hljs-string">        #     3</span><br><span class="hljs-string">        #    / \</span><br><span class="hljs-string">        #   9  20</span><br><span class="hljs-string">        #     /  \</span><br><span class="hljs-string">        #    15   7</span><br><span class="hljs-string">        #  返回锯齿形层序遍历如下：</span><br><span class="hljs-string">        # [</span><br><span class="hljs-string">        #   [3],</span><br><span class="hljs-string">        #   [20,9],</span><br><span class="hljs-string">        #   [15,7]</span><br><span class="hljs-string">        # ]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 栈 树 广度优先搜索</span><br><span class="hljs-string">        #  👍 424 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.lii_ret = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sign_k_level</span>(<span class="hljs-params">self, root: TreeNode, k: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.lii_ret) == k:<br>            self.lii_ret.append([])<br><br>        self.lii_ret[k].append(root.val)<br>        self.sign_k_level(root.left, k + <span class="hljs-number">1</span>)<br>        self.sign_k_level(root.right, k + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">zigzagLevelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        self.sign_k_level(root, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(self.lii_ret)):<br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>                self.lii_ret[i].reverse()<br>        <span class="hljs-keyword">return</span> self.lii_ret<br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h5 id="二叉树的进阶操作">二叉树的进阶操作</h5><h6 id="平衡二叉树"><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></h6><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = []<br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中的节点数在范围 <code>[0, 5000]</code> 内</li><li><code>-104 &lt;= Node.val &lt;= 104</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BalancedBinaryTree</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> BalancedBinaryTree().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given a binary tree, determine if it is height-balanced.</span><br>    <span class="hljs-comment">// For this problem, a height-balanced binary tree is defined as:</span><br>    <span class="hljs-comment">// a binary tree in which the left and right subtrees of every node differ in height by no more than 1.</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: root = [3,9,20,null,null,15,7]</span><br>    <span class="hljs-comment">//Output: true</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: root = [1,2,2,3,3,null,null,4,4]</span><br>    <span class="hljs-comment">//Output: false</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: root = []</span><br>    <span class="hljs-comment">//Output: true</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the tree is in the range [0, 5000].</span><br>    <span class="hljs-comment">// -104 &lt;= Node.val &lt;= 104</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 树 深度优先搜索 递归</span><br>    <span class="hljs-comment">// 👍 652 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for a binary tree node.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        TreeNode left;<br>        TreeNode right;<br>        TreeNode() &#123;&#125;<br>        TreeNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        TreeNode(<span class="hljs-keyword">int</span> val, TreeNode left, TreeNode right) &#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.left = left;<br>            <span class="hljs-keyword">this</span>.right = right;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> getTreeHeight(root) &gt;= <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTreeHeight</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> l = getTreeHeight(root.left);<br>            <span class="hljs-keyword">int</span> r = getTreeHeight(root.right);<br>            <span class="hljs-keyword">if</span> (l &lt; <span class="hljs-number">0</span> || r &lt; <span class="hljs-number">0</span> || Math.abs(l-r) &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> Math.max(l, r) + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> treeHeight(root) &gt;= <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">treeHeight</span><span class="hljs-params">(root *TreeNode)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br>l := treeHeight(root.Left)<br>r := treeHeight(root.Right)<br><br><span class="hljs-keyword">if</span> l &lt; <span class="hljs-number">0</span> || r &lt; <span class="hljs-number">0</span> || math.Abs(<span class="hljs-keyword">float64</span>(l-r)) &gt; <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">int</span>(math.Max(<span class="hljs-keyword">float64</span>(l), <span class="hljs-keyword">float64</span>(r))) + <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 110-平衡二叉树</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个二叉树，判断它是否是高度平衡的二叉树。 </span><br><span class="hljs-string">        #  本题中，一棵高度平衡二叉树定义为：</span><br><span class="hljs-string">        #  一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</span><br><span class="hljs-string">        #  示例 1：</span><br><span class="hljs-string">        # 输入：root = [3,9,20,null,null,15,7]</span><br><span class="hljs-string">        # 输出：true</span><br><span class="hljs-string">        #  示例 2：</span><br><span class="hljs-string">        # 输入：root = [1,2,2,3,3,null,null,4,4]</span><br><span class="hljs-string">        # 输出：false</span><br><span class="hljs-string">        #  示例 3：</span><br><span class="hljs-string">        # 输入：root = []</span><br><span class="hljs-string">        # 输出：true</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  树中的节点数在范围 [0, 5000] 内</span><br><span class="hljs-string">        #  -104 &lt;= Node.val &lt;= 104</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 树 深度优先搜索 递归</span><br><span class="hljs-string">        #  👍 652 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for a binary tree node.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, left=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.left = left<br>        self.right = right<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isBalanced</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">return</span> self.get_tree_height(root) &gt;= <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_tree_height</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        l, r = self.get_tree_height(root.left), self.get_tree_height(root.right)<br>        <span class="hljs-keyword">if</span> l &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> r &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(l-r) &gt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(l, r) + <span class="hljs-number">1</span><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="路径总和"><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h6><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum ，判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>], <span class="hljs-attr">targetSum</span> = <span class="hljs-number">22</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-attr">targetSum</span> = <span class="hljs-number">5</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 3</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">root</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">targetSum</span> = <span class="hljs-number">0</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 [0, 5000] 内</li><li>-1000 &lt;= Node.val &lt;= 1000</li><li>-1000 &lt;= targetSum &lt;= 1000</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="从前序与中序遍历序列构造二叉树"><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></h6><p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><p><strong>注意:</strong> 你可以假设树中没有重复的元素。</p><p>例如，给出</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">前序遍历 preorder = <span class="hljs-string">[3,9,20,15,7]</span><br>中序遍历 inorder = <span class="hljs-string">[9,3,15,20,7]</span><br></code></pre></td></tr></table></figure><p>返回如下的二叉树：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">  <span class="hljs-number">3</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  <span class="hljs-string">\</span><br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="完全二叉树的节点个数"><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数</a></h6><p>给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。</p><p>完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^h 个节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/14/complete.jpg"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：root = <span class="hljs-string">[1,2,3,4,5,6]</span><br>输出：<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：root </span>=<span class="hljs-string"> []</span><br><span class="hljs-string">输出：0</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">输入：root </span>=<span class="hljs-string"> [1]</span><br><span class="hljs-string">输出：1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目范围是<code>[0, 5 * 104]</code></li><li><code>0 &lt;= Node.val &lt;= 5 * 104</code></li><li>题目数据保证输入的树是 <strong>完全二叉树</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="剑指-offer-54.-二叉搜索树的第k大节点"><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">剑指 Offer 54. 二叉搜索树的第k大节点</a></h6><p>给定一棵二叉搜索树，请找出其中第k大的节点。</p><p><strong>示例 1:</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入: root = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>], k = <span class="hljs-number">1</span><br>   <span class="hljs-number">3</span><br>  / <span class="hljs-string">\</span><br> <span class="hljs-number">1</span>   <span class="hljs-number">4</span><br>  <span class="hljs-string">\</span><br>   <span class="hljs-number">2</span><br>输出: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入: root = [<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>], k = <span class="hljs-number">3</span><br>       <span class="hljs-number">5</span><br>      / <span class="hljs-string">\</span><br>     <span class="hljs-number">3</span>   <span class="hljs-number">6</span><br>    / <span class="hljs-string">\</span><br>   <span class="hljs-number">2</span>   <span class="hljs-number">4</span><br>  /<br> <span class="hljs-number">1</span><br>输出: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><p>1 ≤ k ≤ 二叉搜索树元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="剑指-offer-26.-树的子结构"><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></h6><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><p>例如: 给定的树 A:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">    <span class="hljs-number">3</span><br>   / <span class="hljs-string">\</span><br>  <span class="hljs-number">4</span>   <span class="hljs-number">5</span><br> / <span class="hljs-string">\</span><br><span class="hljs-number">1</span>   <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>给定的树 B：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap"> <span class="hljs-number"> 4 </span><br> /<br>1<br></code></pre></td></tr></table></figure><p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">A</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-attr">B</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">A</span> = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], <span class="hljs-attr">B</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 节点个数 &lt;= <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="二叉树最大宽度"><a href="https://leetcode-cn.com/problems/maximum-width-of-binary-tree/">662. 二叉树最大宽度</a></h6><p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。</p><p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: <br><br>           1<br>         /   \<br>       <span class="hljs-number"> 3 </span>    2<br>       / \     \  <br>     <span class="hljs-number"> 5 </span> <span class="hljs-number"> 3 </span>   <span class="hljs-number"> 9 </span><br><br>输出: 4<br>解释: 最大值出现在树的第<span class="hljs-number"> 3 </span>层，宽度为<span class="hljs-number"> 4 </span>(5,3,null,9)。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: <br><br>          1<br>         /  <br>       <span class="hljs-number"> 3 </span>   <br>       / \       <br>     <span class="hljs-number"> 5 </span> <span class="hljs-number"> 3 </span>    <br><br>输出: 2<br>解释: 最大值出现在树的第<span class="hljs-number"> 3 </span>层，宽度为<span class="hljs-number"> 2 </span>(5,3)。<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: <br><br>          1<br>         / \<br>       <span class="hljs-number"> 3 </span> <span class="hljs-number"> 2 </span><br>       /        <br>     <span class="hljs-number"> 5 </span>     <br><br>输出: 2<br>解释: 最大值出现在树的第<span class="hljs-number"> 2 </span>层，宽度为<span class="hljs-number"> 2 </span>(3,2)。<br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入: <br><br>          <span class="hljs-number">1</span><br>         / <span class="hljs-string">\</span><br>        <span class="hljs-number">3</span>   <span class="hljs-number">2</span><br>       /     <span class="hljs-string">\</span>  <br>      <span class="hljs-number">5</span>       <span class="hljs-number">9</span> <br>     /         <span class="hljs-string">\</span><br>    <span class="hljs-number">6</span>           <span class="hljs-number">7</span><br>输出: <span class="hljs-number">8</span><br>解释: 最大值出现在树的第 <span class="hljs-number">4</span> 层，宽度为 <span class="hljs-number">8</span> (<span class="hljs-number">6</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">7</span>)。<br></code></pre></td></tr></table></figure><p><strong>注意:</strong> 答案在32位有符号整数的表示范围内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="监控二叉树"><a href="https://leetcode-cn.com/problems/binary-tree-cameras/">968. 监控二叉树</a></h6><p>给定一个二叉树，我们在树的节点上安装摄像头。</p><p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p><p>计算监控树的所有节点所需的最小摄像头数量。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">1</span><br>解释：如图所示，一台摄像头足以监控所有节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>]<br>输出：<span class="hljs-number">2</span><br>解释：需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol type="1"><li>给定树的节点数的范围是 <code>[1, 1000]</code>。</li><li>每个节点的值都是 0。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h4 id="堆heap与优先队列"><strong>堆（Heap）与优先队列</strong></h4><blockquote><p>维护集合最值</p></blockquote><h5 id="基础应用">基础应用</h5><h6 id="剑指-offer-40.-最小的k个数"><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的k个数</a></h6><p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：arr = <span class="hljs-comment">[3,2,1]</span>, k = 2<br>输出：<span class="hljs-comment">[1,2]</span> 或者 <span class="hljs-comment">[2,1]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：arr = <span class="hljs-comment">[0,1,2,1]</span>, k = 1<br>输出：<span class="hljs-comment">[0]</span><br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><ul><li><code>0 &lt;= k &lt;= arr.length &lt;= 10000</code></li><li><code>0 &lt;= arr[i] &lt;= 10000</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">大顶堆堆顶为k个数的最大的<br>遍历数组，入堆 如果入堆后堆的大小大于k，出堆<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="最后一块石头的重量"><a href="https://leetcode-cn.com/problems/last-stone-weight/">1046. 最后一块石头的重量</a></h6><p>有一堆石头，每块石头的重量都是正整数。</p><p>每一回合，从中选出两块 <strong>最重的</strong> 石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p><ul><li>如果 x == y，那么两块石头都会被完全粉碎；</li><li>如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。</li></ul><p>最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 <code>0</code>。</p><p><strong>示例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">输入：<span class="hljs-selector-attr">[2,7,4,1,8,1]</span><br>输出：<span class="hljs-number">1</span><br>解释：<br>先选出 <span class="hljs-number">7</span> 和 <span class="hljs-number">8</span>，得到 <span class="hljs-number">1</span>，所以数组转换为 <span class="hljs-selector-attr">[2,4,1,1,1]</span>，<br>再选出 <span class="hljs-number">2</span> 和 <span class="hljs-number">4</span>，得到 <span class="hljs-number">2</span>，所以数组转换为 <span class="hljs-selector-attr">[2,1,1,1]</span>，<br>接着是 <span class="hljs-number">2</span> 和 <span class="hljs-number">1</span>，得到 <span class="hljs-number">1</span>，所以数组转换为 <span class="hljs-selector-attr">[1,1,1]</span>，<br>最后选出 <span class="hljs-number">1</span> 和 <span class="hljs-number">1</span>，得到 <span class="hljs-number">0</span>，最终数组转换为 <span class="hljs-selector-attr">[1]</span>，这就是最后剩下那块石头的重量。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= stones.length &lt;= 30</code></li><li><code>1 &lt;= stones[i] &lt;= 1000</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">大顶堆<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="数据流中的第-k-大元素"><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">703. 数据流中的第 K 大元素</a></h6><p>设计一个找到数据流中第 <code>k</code> 大元素的类<code>（class）</code>。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。</p><p>请实现 <code>KthLargest</code> 类：</p><ul><li><code>KthLargest(int k, int[] nums)</code> 使用整数 k 和整数流 <code>nums</code>初始化对象。</li><li><code>int add(int val)</code>将 val 插入数据流 <code>nums</code>后，返回当前数据流中第 <code>k</code> 大的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp">输入：<br>[<span class="hljs-meta"><span class="hljs-meta-string">&quot;KthLargest&quot;</span>, <span class="hljs-meta-string">&quot;add&quot;</span>, <span class="hljs-meta-string">&quot;add&quot;</span>, <span class="hljs-meta-string">&quot;add&quot;</span>, <span class="hljs-meta-string">&quot;add&quot;</span>, <span class="hljs-meta-string">&quot;add&quot;</span></span>]<br>[<span class="hljs-meta">[3, [4, 5, 8, 2</span>]], [<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>], [<span class="hljs-number">10</span>], [<span class="hljs-number">9</span>], [<span class="hljs-number">4</span>]]<br>输出：<br>[<span class="hljs-meta">null, 4, 5, 5, 8, 8</span>]<br><br>解释：<br>KthLargest kthLargest = <span class="hljs-keyword">new</span> KthLargest(<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>]);<br>kthLargest.<span class="hljs-keyword">add</span>(<span class="hljs-number">3</span>);   <span class="hljs-comment">// return 4</span><br>kthLargest.<span class="hljs-keyword">add</span>(<span class="hljs-number">5</span>);   <span class="hljs-comment">// return 5</span><br>kthLargest.<span class="hljs-keyword">add</span>(<span class="hljs-number">10</span>);  <span class="hljs-comment">// return 5</span><br>kthLargest.<span class="hljs-keyword">add</span>(<span class="hljs-number">9</span>);   <span class="hljs-comment">// return 8</span><br>kthLargest.<span class="hljs-keyword">add</span>(<span class="hljs-number">4</span>);   <span class="hljs-comment">// return 8</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= 10^4</code></li><li><code>0 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>-10^4 &lt;= val &lt;= 10^4</code></li><li>最多调用 add 方法<code>10^4</code> 次</li><li>题目数据保证，在查找第 k 大元素时，数组中至少有 k 个元素</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">小顶堆堆顶为k个数的最大的<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="数组中的第k个最大元素"><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h6><p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: [3,2,1,5,6,4] 和 k = 2</span><br><span class="hljs-section">输出: 5</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: [<span class="hljs-number">3,2,3,1</span>,<span class="hljs-number">2,4,5,5</span>,<span class="hljs-number">6</span>] 和 k = <span class="hljs-number">4</span><br>输出: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="查找和最小的k对数字"><a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/">373. 查找和最小的K对数字</a></h6><p>给定两个以升序排列的整形数组 nums1 和 nums2, 以及一个整数 k。</p><p>定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2。</p><p>找到和最小的 k 对数字 (u1,v1), (u2,v2) ... (uk,vk)。</p><p><strong>示例 1:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums1 = <span class="hljs-comment">[1,7,11]</span>, nums2 = <span class="hljs-comment">[2,4,6]</span>, k = 3<br>输出: <span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[1,4]</span>,<span class="hljs-comment">[1,6]</span><br>解释: 返回序列中的前 3 对数：<br>     <span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[1,4]</span>,<span class="hljs-comment">[1,6]</span>,<span class="hljs-comment">[7,2]</span>,<span class="hljs-comment">[7,4]</span>,<span class="hljs-comment">[11,2]</span>,<span class="hljs-comment">[7,6]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[11,6]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums1 = <span class="hljs-comment">[1,1,2]</span>, nums2 = <span class="hljs-comment">[1,2,3]</span>, k = 2<br>输出: <span class="hljs-comment">[1,1]</span>,<span class="hljs-comment">[1,1]</span><br>解释: 返回序列中的前 2 对数：<br>     <span class="hljs-comment">[1,1]</span>,<span class="hljs-comment">[1,1]</span>,<span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[2,1]</span>,<span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[2,2]</span>,<span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[2,3]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: nums1 = <span class="hljs-comment">[1,2]</span>, nums2 = <span class="hljs-comment">[3]</span>, k = 3 <br>输出: <span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[2,3]</span><br>解释: 也可能序列中所有的数对都被返回:<span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[2,3]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h5 id="进阶应用">进阶应用</h5><h6 id="前k个高频单词"><a href="https://leetcode-cn.com/problems/top-k-frequent-words/">692. 前K个高频单词</a></h6><p>给一非空的单词列表，返回前 <em>k</em> 个出现次数最多的单词。</p><p>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: [<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;leetcode&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;coding&quot;</span>], k = <span class="hljs-number">2</span><br>输出: [<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>]<br>解析: <span class="hljs-string">&quot;i&quot;</span> 和 <span class="hljs-string">&quot;love&quot;</span> 为出现次数最多的两个单词，均为<span class="hljs-number">2</span>次。<br>    注意，按字母顺序 <span class="hljs-string">&quot;i&quot;</span> 在 <span class="hljs-string">&quot;love&quot;</span> 之前。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">输入: [<span class="hljs-comment">&quot;the&quot;</span>, <span class="hljs-comment">&quot;day&quot;</span>, <span class="hljs-comment">&quot;is&quot;</span>, <span class="hljs-comment">&quot;sunny&quot;</span>, <span class="hljs-comment">&quot;the&quot;</span>, <span class="hljs-comment">&quot;the&quot;</span>, <span class="hljs-comment">&quot;the&quot;</span>, <span class="hljs-comment">&quot;sunny&quot;</span>, <span class="hljs-comment">&quot;is&quot;</span>, <span class="hljs-comment">&quot;is&quot;</span>], k = <span class="hljs-number">4</span><br>输出: [<span class="hljs-comment">&quot;the&quot;</span>, <span class="hljs-comment">&quot;is&quot;</span>, <span class="hljs-comment">&quot;sunny&quot;</span>, <span class="hljs-comment">&quot;day&quot;</span>]<br>解析: <span class="hljs-comment">&quot;the&quot;</span>, <span class="hljs-comment">&quot;is&quot;</span>, <span class="hljs-comment">&quot;sunny&quot;</span> 和 <span class="hljs-comment">&quot;day&quot;</span> 是出现次数最多的四个单词，<br>    出现次数依次为 <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span> 和 <span class="hljs-number">1</span> 次。<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol type="1"><li>假定 <em>k</em> 总为有效值， 1 ≤ <em>k</em> ≤ 集合元素数。</li><li>输入的单词均由小写字母组成。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="剑指-offer-41.-数据流中的中位数"><a href="https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/">剑指 Offer 41. 数据流中的中位数</a></h6><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><p>例如，</p><p>[2,3,4] 的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul><li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li><li>double findMedian() - 返回目前所有元素的中位数。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;MedianFinder&quot;</span>,<span class="hljs-string">&quot;addNum&quot;</span>,<span class="hljs-string">&quot;addNum&quot;</span>,<span class="hljs-string">&quot;findMedian&quot;</span>,<span class="hljs-string">&quot;addNum&quot;</span>,<span class="hljs-string">&quot;findMedian&quot;</span>]<br>[[],[<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>],[],[<span class="hljs-number">3</span>],[]]<br>输出：[null,null,null,<span class="hljs-number">1.50000</span>,null,<span class="hljs-number">2.00000</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：<br>[<span class="hljs-string">&quot;MedianFinder&quot;</span>,<span class="hljs-string">&quot;addNum&quot;</span>,<span class="hljs-string">&quot;findMedian&quot;</span>,<span class="hljs-string">&quot;addNum&quot;</span>,<span class="hljs-string">&quot;findMedian&quot;</span>]<br>[[],[<span class="hljs-number">2</span>],[],[<span class="hljs-number">3</span>],[]]<br>输出：[null,null,<span class="hljs-number">2.00000</span>,null,<span class="hljs-number">2.50000</span>]<br></code></pre></td></tr></table></figure><h6 id="数据流的中位数"><a href="https://leetcode-cn.com/problems/find-median-from-data-stream/">295. 数据流的中位数</a></h6><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p><p>例如，</p><p>[2,3,4] 的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul><li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li><li>double findMedian() - 返回目前所有元素的中位数。</li></ul><p><strong>示例：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">findMedian</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-number">1.5</span><br><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span> <br><span class="hljs-function"><span class="hljs-title">findMedian</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>进阶:</p><ul><li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li><li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">两个堆<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="设计推特"><a href="https://leetcode-cn.com/problems/design-twitter/">355. 设计推特</a></h6><p>设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注/取消关注其他用户，能够看见关注人（包括自己）的最近十条推文。你的设计需要支持以下的几个功能</p><ul><li><code>postTweet(userId, tweetId)</code>: 创建一条新的推文</li><li><code>getNewsFeed(userId)</code>: 检索最近的十条推文。每个推文都必须是由此用户关注的人或者是用户自己发出的。推文必须按照时间顺序由最近的开始排序。</li><li><code>follow(followerId, followeeId)</code>: 关注一个用户</li><li><code>unfollow(followerId, followeeId)</code>: 取消关注一个用户</li></ul><p><strong>示例:</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">Twitter twitter = new Twitter();<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">1</span>发送了一条新推文 (用户id = <span class="hljs-number">1</span>, 推文id = <span class="hljs-number">5</span>).<br>twitter.postTweet(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">1</span>的获取推文应当返回一个列表，其中包含一个id为<span class="hljs-number">5</span>的推文.<br>twitter.getNewsFeed(<span class="hljs-number">1</span>);<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">1</span>关注了用户<span class="hljs-number">2</span>.<br>twitter.follow(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">2</span>发送了一个新推文 (推文id = <span class="hljs-number">6</span>).<br>twitter.postTweet(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>);<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">1</span>的获取推文应当返回一个列表，其中包含两个推文，id分别为 -&gt; [<span class="hljs-number">6</span>, <span class="hljs-number">5</span>].<br><span class="hljs-regexp">//</span> 推文id6应当在推文id5之前，因为它是在<span class="hljs-number">5</span>之后发送的.<br>twitter.getNewsFeed(<span class="hljs-number">1</span>);<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">1</span>取消关注了用户<span class="hljs-number">2</span>.<br>twitter.unfollow(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-regexp">//</span> 用户<span class="hljs-number">1</span>的获取推文应当返回一个列表，其中包含一个id为<span class="hljs-number">5</span>的推文.<br><span class="hljs-regexp">//</span> 因为用户<span class="hljs-number">1</span>已经不再关注用户<span class="hljs-number">2</span>.<br>twitter.getNewsFeed(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="面试题-17.20.-连续中值"><a href="https://leetcode-cn.com/problems/continuous-median-lcci/">面试题 17.20. 连续中值</a></h6><p>随机产生数字并传递给一个方法。你能否完成这个方法，在每次产生新值时，寻找当前所有值的中间值（中位数）并保存。</p><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p><p>例如，</p><p>[2,3,4] 的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul><li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li><li>double findMedian() - 返回目前所有元素的中位数。</li></ul><p><strong>示例：</strong></p><p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">findMedian</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-number">1.5</span><br><span class="hljs-function"><span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span> <br><span class="hljs-function"><span class="hljs-title">findMedian</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="积压订单中的订单总数"><a href="https://leetcode-cn.com/problems/number-of-orders-in-the-backlog/">1801. 积压订单中的订单总数</a></h6><p>给你一个二维整数数组 <code>orders</code> ，其中每个 <code>orders[i] = [pricei, amounti, orderTypei]</code>表示有 <code>amounti</code>笔类型为 <code>orderTypei</code>、价格为<code>pricei</code> 的订单。</p><p>订单类型 <code>orderTypei</code> 可以分为两种：</p><ul><li><code>0</code> 表示这是一批采购订单 <code>buy</code></li><li><code>1</code> 表示这是一批销售订单 <code>sell</code></li></ul><p>注意，orders[i] 表示一批共计 amounti 笔的独立订单，这些订单的价格和类型相同。对于所有有效的 i ，由 orders[i] 表示的所有订单提交时间均早于 orders[i+1] 表示的所有订单。</p><p>存在由未执行订单组成的 <strong>积压订单</strong> 。积压订单最初是空的。提交订单时，会发生以下情况：</p><ul><li>如果该订单是一笔采购订单 buy ，则可以查看积压订单中价格 最低 的销售订单 sell 。如果该销售订单 sell 的价格 低于或等于 当前采购订单 buy 的价格，则匹配并执行这两笔订单，并将销售订单 sell 从积压订单中删除。否则，采购订单 buy 将会添加到积压订单中。</li><li>反之亦然，如果该订单是一笔销售订单 sell ，则可以查看积压订单中价格 最高 的采购订单 buy 。如果该采购订单 buy 的价格 高于或等于 当前销售订单 sell 的价格，则匹配并执行这两笔订单，并将采购订单 buy 从积压订单中删除。否则，销售订单 sell 将会添加到积压订单中。</li></ul><p>输入所有订单后，返回积压订单中的 <strong>订单总数</strong> 。由于数字可能很大，所以需要返回对 <code>109 + 7</code> 取余的结果。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/21/ex1.png"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]<br>输出：6<br>解释：输入订单后会发生下述情况：<br>- 提交<span class="hljs-number"> 5 </span>笔采购订单，价格为<span class="hljs-number"> 10 </span>。没有销售订单，所以这<span class="hljs-number"> 5 </span>笔订单添加到积压订单中。<br>- 提交<span class="hljs-number"> 2 </span>笔销售订单，价格为<span class="hljs-number"> 15 </span>。没有采购订单的价格大于或等于<span class="hljs-number"> 15 </span>，所以这<span class="hljs-number"> 2 </span>笔订单添加到积压订单中。<br>- 提交<span class="hljs-number"> 1 </span>笔销售订单，价格为<span class="hljs-number"> 25 </span>。没有采购订单的价格大于或等于<span class="hljs-number"> 25 </span>，所以这<span class="hljs-number"> 1 </span>笔订单添加到积压订单中。<br>- 提交<span class="hljs-number"> 4 </span>笔采购订单，价格为<span class="hljs-number"> 30 </span>。前<span class="hljs-number"> 2 </span>笔采购订单与价格最低（价格为 15）的<span class="hljs-number"> 2 </span>笔销售订单匹配，从积压订单中删除这<span class="hljs-number"> 2 </span>笔销售订单。第<span class="hljs-number"> 3 </span>笔采购订单与价格最低的<span class="hljs-number"> 1 </span>笔销售订单匹配，销售订单价格为<span class="hljs-number"> 25 </span>，从积压订单中删除这<span class="hljs-number"> 1 </span>笔销售订单。积压订单中不存在更多销售订单，所以第<span class="hljs-number"> 4 </span>笔采购订单需要添加到积压订单中。<br>最终，积压订单中有<span class="hljs-number"> 5 </span>笔价格为<span class="hljs-number"> 10 </span>的采购订单，和<span class="hljs-number"> 1 </span>笔价格为<span class="hljs-number"> 30 </span>的采购订单。所以积压订单中的订单总数为<span class="hljs-number"> 6 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/21/ex2.png"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]<br>输出：999999984<br>解释：输入订单后会发生下述情况：<br>- 提交<span class="hljs-number"> 109 </span>笔销售订单，价格为<span class="hljs-number"> 7 </span>。没有采购订单，所以这<span class="hljs-number"> 109 </span>笔订单添加到积压订单中。<br>- 提交<span class="hljs-number"> 3 </span>笔采购订单，价格为<span class="hljs-number"> 15 </span>。这些采购订单与价格最低（价格为<span class="hljs-number"> 7 </span>）的<span class="hljs-number"> 3 </span>笔销售订单匹配，从积压订单中删除这<span class="hljs-number"> 3 </span>笔销售订单。<br>- 提交<span class="hljs-number"> 999999995 </span>笔采购订单，价格为<span class="hljs-number"> 5 </span>。销售订单的最低价为<span class="hljs-number"> 7 </span>，所以这<span class="hljs-number"> 999999995 </span>笔订单添加到积压订单中。<br>- 提交<span class="hljs-number"> 1 </span>笔销售订单，价格为<span class="hljs-number"> 5 </span>。这笔销售订单与价格最高（价格为<span class="hljs-number"> 5 </span>）的<span class="hljs-number"> 1 </span>笔采购订单匹配，从积压订单中删除这<span class="hljs-number"> 1 </span>笔采购订单。<br>最终，积压订单中有 (1000000000-3) 笔价格为<span class="hljs-number"> 7 </span>的销售订单，和 (999999995-1) 笔价格为<span class="hljs-number"> 5 </span>的采购订单。所以积压订单中的订单总数为<span class="hljs-number"> 1999999991 </span>，等于<span class="hljs-number"> 999999984 </span>% (109 + 7) 。<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= orders.length &lt;= 10^5</code></li><li><code>orders[i].length == 3</code></li><li><code>1 &lt;= pricei, amounti &lt;= 10^9</code></li><li><code>orderTypei 为 0 或 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h5 id="智力题">智力题</h5><h6 id="丑数-ii"><a href="https://leetcode-cn.com/problems/ugly-number-ii/">264. 丑数 II</a></h6><p>编写一个程序，找出第 <code>n</code> 个丑数。</p><p>丑数就是质因数只包含 <code>2, 3, 5</code> 的<strong>正整数</strong>。</p><p><strong>示例:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: n = 10</span><br><span class="hljs-section">输出: 12</span><br><span class="hljs-section">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol type="1"><li><code>1</code> 是丑数。</li><li><code>n</code> <strong>不超过</strong>1690。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="超级丑数"><a href="https://leetcode-cn.com/problems/super-ugly-number/">313. 超级丑数</a></h6><p>编写一段程序来查找第 <code>*n*</code> 个超级丑数。</p><p>超级丑数是指其所有质因数都是长度为 <code>k</code> 的质数列表 <code>primes</code> 中的正整数。</p><p><strong>示例:</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入: n = <span class="hljs-number">12</span>, primes = [<span class="hljs-number">2,7,13,19</span>]<br>输出: <span class="hljs-number">32</span> <br>解释: 给定长度为 <span class="hljs-number">4</span> 的质数列表 primes = [<span class="hljs-number">2,7,13,19</span>]，前 <span class="hljs-number">12</span> 个超级丑数序列为：[<span class="hljs-number">1,2,4,7</span>,<span class="hljs-number">8,13,14,16</span>,<span class="hljs-number">19,26,28,32</span>] 。<br></code></pre></td></tr></table></figure><p>说明:</p><ul><li>1 是任何给定 primes 的超级丑数。</li><li>给定 primes 中的数字以升序排列。</li><li>0 &lt; k ≤ 100, 0 &lt; n ≤ 10^6, 0 &lt; primes[i] &lt; 1000 。</li><li>第 n 个超级丑数确保在 32 位有符整数范围内。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="移除石子的最大得分"><a href="https://leetcode-cn.com/problems/maximum-score-from-removing-stones/">1753. 移除石子的最大得分</a></h6><p>你正在玩一个单人游戏，面前放置着大小分别为 <code>a</code>、<code>b</code> 和 <code>c</code> 的 <strong>三堆</strong> 石子。</p><p>每回合你都要从两个 <strong>不同的非空堆</strong> 中取出一颗石子，并在得分上加 <code>1</code> 分。当存在 <strong>两个或更多</strong> 的空堆时，游戏停止。</p><p>给你三个整数 <code>a</code> 、<code>b</code> 和 <code>c</code> ，返回可以得到的 <strong>最大分数</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：a = <span class="hljs-number">2</span>, b = <span class="hljs-number">4</span>, c = <span class="hljs-number">6</span><br>输出：<span class="hljs-number">6</span><br>解释：石子起始状态是 <span class="hljs-comment">(2, 4, 6)</span> ，最优的一组操作是：<br>- 从第一和第三堆取，石子状态现在是 <span class="hljs-comment">(1, 4, 5)</span><br>- 从第一和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 4, 4)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 3, 3)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 2, 2)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 1, 1)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 0, 0)</span><br>总分：<span class="hljs-number">6</span> 分 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：a = <span class="hljs-number">4</span>, b = <span class="hljs-number">4</span>, c = <span class="hljs-number">6</span><br>输出：<span class="hljs-number">7</span><br>解释：石子起始状态是 <span class="hljs-comment">(4, 4, 6)</span> ，最优的一组操作是：<br>- 从第一和第二堆取，石子状态现在是 <span class="hljs-comment">(3, 3, 6)</span><br>- 从第一和第三堆取，石子状态现在是 <span class="hljs-comment">(2, 3, 5)</span><br>- 从第一和第三堆取，石子状态现在是 <span class="hljs-comment">(1, 3, 4)</span><br>- 从第一和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 3, 3)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 2, 2)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 1, 1)</span><br>- 从第二和第三堆取，石子状态现在是 <span class="hljs-comment">(0, 0, 0)</span><br>总分：<span class="hljs-number">7</span> 分 。<br><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">a</span> = <span class="hljs-number">1</span>, <span class="hljs-attr">b</span> = <span class="hljs-number">8</span>, <span class="hljs-attr">c</span> = <span class="hljs-number">8</span><br>输出：<span class="hljs-number">8</span><br>解释：最优的一组操作是连续从第二和第三堆取 <span class="hljs-number">8</span> 回合，直到将它们取空。<br>注意，由于第二和第三堆已经空了，游戏结束，不能继续从第一堆中取石子。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= a, b, c &lt;= 10^5</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h4 id="并查集union-find及经典问题"><strong>并查集（Union-find）及经典问题</strong></h4><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】线性表相关问题</title>
    <link href="/2021/03/05/lt-linkedList/"/>
    <url>/2021/03/05/lt-linkedList/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>把所有数据用一根线儿串起来，再存储到物理空间中的数据结构<span id="more"></span></p></blockquote><p>来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problemset/all/</p><h4 id="链表相关">链表相关</h4><h5 id="链表访问">链表访问</h5><h6 id="环形链表"><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h6><p>给定一个链表，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><p>解题思路</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-number">1.</span>快慢指针，相遇问题<br><span class="hljs-number">2.</span>借助哈希（<span class="hljs-keyword">Set</span>）<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-04 17:27:34</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedListCycle</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> LinkedListCycle().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given head, the head of a linked list, determine if the linked list has a cycl</span><br>    <span class="hljs-comment">//e in it.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// There is a cycle in a linked list if there is some node in the list that can</span><br>    <span class="hljs-comment">//be reached again by continuously following the next pointer. Internally, pos is</span><br>    <span class="hljs-comment">//used to denote the index of the node that tail&#x27;s next pointer is connected to. N</span><br>    <span class="hljs-comment">//ote that pos is not passed as a parameter.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Return true if there is a cycle in the linked list. Otherwise, return false.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [3,2,0,-4], pos = 1</span><br>    <span class="hljs-comment">//Output: true</span><br>    <span class="hljs-comment">//Explanation: There is a cycle in the linked list, where the tail connects to t</span><br>    <span class="hljs-comment">//he 1st node (0-indexed).</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [1,2], pos = 0</span><br>    <span class="hljs-comment">//Output: true</span><br>    <span class="hljs-comment">//Explanation: There is a cycle in the linked list, where the tail connects to t</span><br>    <span class="hljs-comment">//he 0th node.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: head = [1], pos = -1</span><br>    <span class="hljs-comment">//Output: false</span><br>    <span class="hljs-comment">//Explanation: There is no cycle in the linked list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of the nodes in the list is in the range [0, 104].</span><br>    <span class="hljs-comment">// -105 &lt;= Node.val &lt;= 105</span><br>    <span class="hljs-comment">// pos is -1 or a valid index in the linked-list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Follow up: Can you solve it using O(1) (i.e. constant) memory?</span><br>    <span class="hljs-comment">// Related Topics 链表 双指针</span><br>    <span class="hljs-comment">// 👍 970 👎 0</span><br><br>  <span class="hljs-comment">// leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode(<span class="hljs-keyword">int</span> x) &#123;<br>            val = x;<br>            next = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> ||  head.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            ListNode p = head, q = head;<br>            <span class="hljs-keyword">do</span> &#123;<br>                p = p.next;<br>                q = q.next.next;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (q != <span class="hljs-keyword">null</span> &amp;&amp; q.next != <span class="hljs-keyword">null</span> &amp;&amp; p != q);<br>            <span class="hljs-keyword">return</span> p == q;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 11:03:59</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//Given head, the head of a linked list, determine if the linked list has a cycl</span><br><span class="hljs-comment">//e in it. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// There is a cycle in a linked list if there is some node in the list that can </span><br><span class="hljs-comment">//be reached again by continuously following the next pointer. Internally, pos is </span><br><span class="hljs-comment">//used to denote the index of the node that tail&#x27;s next pointer is connected to. N</span><br><span class="hljs-comment">//ote that pos is not passed as a parameter. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Return true if there is a cycle in the linked list. Otherwise, return false. </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Example 1: </span><br><span class="hljs-comment">//Input: head = [3,2,0,-4], pos = 1</span><br><span class="hljs-comment">//Output: true</span><br><span class="hljs-comment">//Explanation: There is a cycle in the linked list, where the tail connects to t</span><br><span class="hljs-comment">//he 1st node (0-indexed).</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Example 2: </span><br><span class="hljs-comment">//Input: head = [1,2], pos = 0</span><br><span class="hljs-comment">//Output: true</span><br><span class="hljs-comment">//Explanation: There is a cycle in the linked list, where the tail connects to t</span><br><span class="hljs-comment">//he 0th node.</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Example 3: </span><br><span class="hljs-comment">//Input: head = [1], pos = -1</span><br><span class="hljs-comment">//Output: false</span><br><span class="hljs-comment">//Explanation: There is no cycle in the linked list.</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Constraints: </span><br><span class="hljs-comment">// The number of the nodes in the list is in the range [0, 104]. </span><br><span class="hljs-comment">// -105 &lt;= Node.val &lt;= 105 </span><br><span class="hljs-comment">// pos is -1 or a valid index in the linked-list. </span><br><span class="hljs-comment">// Follow up: Can you solve it using O(1) (i.e. constant) memory? </span><br><span class="hljs-comment">// Related Topics 链表 双指针 </span><br><span class="hljs-comment">// 👍 971 👎 0</span><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">// Definition for singly-linked list.</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>   Val <span class="hljs-keyword">int</span><br>   Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>p := head.Next<br>q := head.Next.Next<br><span class="hljs-keyword">for</span> q != <span class="hljs-literal">nil</span> &amp;&amp; q.Next != <span class="hljs-literal">nil</span> &amp;&amp; p != q&#123;<br>p = p.Next<br>q = q.Next.Next<br>&#125;<br>    <span class="hljs-keyword">return</span> p == q<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 141-环形链表</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 10:38:59</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个链表，判断链表中是否有环。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的</span><br><span class="hljs-string"># 位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  如果链表中存在环，则返回 true 。 否则，返回 false 。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  进阶： </span><br><span class="hljs-string">#  你能用 O(1)（即，常量）内存解决此问题吗？ </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  示例 1： </span><br><span class="hljs-string">#  输入：head = [3,2,0,-4], pos = 1</span><br><span class="hljs-string"># 输出：true</span><br><span class="hljs-string"># 解释：链表中有一个环，其尾部连接到第二个节点。</span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  示例 2： </span><br><span class="hljs-string">#  输入：head = [1,2], pos = 0</span><br><span class="hljs-string"># 输出：true</span><br><span class="hljs-string"># 解释：链表中有一个环，其尾部连接到第一个节点。</span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  示例 3： </span><br><span class="hljs-string">#  输入：head = [1], pos = -1</span><br><span class="hljs-string"># 输出：false</span><br><span class="hljs-string"># 解释：链表中没有环。</span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  提示：  </span><br><span class="hljs-string">#  链表中节点的数目范围是 [0, 104] </span><br><span class="hljs-string">#  -105 &lt;= Node.val &lt;= 105 </span><br><span class="hljs-string">#  pos 为 -1 或者链表中的一个 有效索引 。 </span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  Related Topics 链表 双指针 </span><br><span class="hljs-string">#  👍 971 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x</span>):</span><br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasCycle</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        p = ListNode(-<span class="hljs-number">1</span>)<br>        p.<span class="hljs-built_in">next</span> = head<br>        p, q = head, head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> q.<span class="hljs-built_in">next</span>:<br>            p = p.<span class="hljs-built_in">next</span><br>            q = q.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> p == q:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="环形链表-ii"><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h6><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><p>进阶：</p><p>你是否可以使用 O(1) 空间解决此题？</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"></p><figure class="highlight plaintext"><figcaption><span>1：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 示例">输入：head = [3,2,0,-4], pos = 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><figure class="highlight plaintext"><figcaption><span>2：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 示例">输入：head = [1,2], pos = 0<br>输出：返回索引为 0 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><figure class="highlight plaintext"><figcaption><span>3：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 示例">输入：head = [1], pos = -1<br>输出：返回 null<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p>解题思路</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-number">1.</span>快慢指针，相遇后，head-&gt;入环的第一个节点距离=相遇点-&gt;入环的第一个节点距离<br><span class="hljs-number">2.</span>借助哈希（<span class="hljs-keyword">Set</span>）<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-04 19:03:31</span><br><span class="hljs-comment"> * Description: 142-Linked List Cycle II</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedListCycleIi</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> LinkedListCycleIi().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given a linked list, return the node where the cycle begins. If there is no cy</span><br>    <span class="hljs-comment">//cle, return null.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// There is a cycle in a linked list if there is some node in the list that can</span><br>    <span class="hljs-comment">//be reached again by continuously following the next pointer. Internally, pos is</span><br>    <span class="hljs-comment">//used to denote the index of the node that tail&#x27;s next pointer is connected to. N</span><br>    <span class="hljs-comment">//ote that pos is not passed as a parameter.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Notice that you should not modify the linked list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [3,2,0,-4], pos = 1</span><br>    <span class="hljs-comment">//Output: tail connects to node index 1</span><br>    <span class="hljs-comment">//Explanation: There is a cycle in the linked list, where tail connects to the s</span><br>    <span class="hljs-comment">//econd node.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [1,2], pos = 0</span><br>    <span class="hljs-comment">//Output: tail connects to node index 0</span><br>    <span class="hljs-comment">//Explanation: There is a cycle in the linked list, where tail connects to the f</span><br>    <span class="hljs-comment">//irst node.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: head = [1], pos = -1</span><br>    <span class="hljs-comment">//Output: no cycle</span><br>    <span class="hljs-comment">//Explanation: There is no cycle in the linked list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of the nodes in the list is in the range [0, 104].</span><br>    <span class="hljs-comment">// -105 &lt;= Node.val &lt;= 105</span><br>    <span class="hljs-comment">// pos is -1 or a valid index in the linked-list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Follow up: Can you solve it using O(1) (i.e. constant) memory?</span><br>    <span class="hljs-comment">// Related Topics 链表 双指针</span><br>    <span class="hljs-comment">// 👍 897 👎 0</span><br> <br>    <span class="hljs-comment">// leetcode submit region begin(Prohibit modification and deletion)</span><br>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>         <span class="hljs-keyword">int</span> val;<br>         ListNode next;<br>         ListNode(<span class="hljs-keyword">int</span> x) &#123;<br>             val = x;<br>             next = <span class="hljs-keyword">null</span>;<br>         &#125;<br>     &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            ListNode p = head, q = head;<br>            <span class="hljs-keyword">do</span> &#123;<br>                p = p.next;<br>                q = q.next.next;<br>            &#125; <span class="hljs-keyword">while</span> (q != <span class="hljs-keyword">null</span> &amp;&amp; q.next != <span class="hljs-keyword">null</span> &amp;&amp; p != q);<br>            <span class="hljs-keyword">if</span> (p != q) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            q = head;<br>            <span class="hljs-keyword">while</span> (p != q) &#123;<br>                p = p.next;<br>                q = q.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> q;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 11:14:26</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//Given a linked list, return the node where the cycle begins. If there is no cy</span><br><span class="hljs-comment">//cle, return null. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// There is a cycle in a linked list if there is some node in the list that can </span><br><span class="hljs-comment">//be reached again by continuously following the next pointer. Internally, pos is </span><br><span class="hljs-comment">//used to denote the index of the node that tail&#x27;s next pointer is connected to. N</span><br><span class="hljs-comment">//ote that pos is not passed as a parameter. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Notice that you should not modify the linked list. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 1: </span><br><span class="hljs-comment">//Input: head = [3,2,0,-4], pos = 1</span><br><span class="hljs-comment">//Output: tail connects to node index 1</span><br><span class="hljs-comment">//Explanation: There is a cycle in the linked list, where tail connects to the s</span><br><span class="hljs-comment">//econd node.</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Example 2: </span><br><span class="hljs-comment">//Input: head = [1,2], pos = 0</span><br><span class="hljs-comment">//Output: tail connects to node index 0</span><br><span class="hljs-comment">//Explanation: There is a cycle in the linked list, where tail connects to the f</span><br><span class="hljs-comment">//irst node.</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Example 3: </span><br><span class="hljs-comment">//Input: head = [1], pos = -1</span><br><span class="hljs-comment">//Output: no cycle</span><br><span class="hljs-comment">//Explanation: There is no cycle in the linked list.</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Constraints: </span><br><span class="hljs-comment">// The number of the nodes in the list is in the range [0, 104]. </span><br><span class="hljs-comment">// -105 &lt;= Node.val &lt;= 105 </span><br><span class="hljs-comment">// pos is -1 or a valid index in the linked-list. </span><br><br><span class="hljs-comment">// Follow up: Can you solve it using O(1) (i.e. constant) memory? </span><br><span class="hljs-comment">// Related Topics 链表 双指针 </span><br><span class="hljs-comment">// 👍 898 👎 0</span><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>p := head.Next<br>q := head.Next.Next<br><span class="hljs-keyword">for</span> q != <span class="hljs-literal">nil</span> &amp;&amp; q.Next != <span class="hljs-literal">nil</span> &amp;&amp; p != q&#123;<br>q = q.Next.Next<br>p = p.Next<br>&#125;<br><span class="hljs-keyword">if</span> p != q &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>q = head<br><span class="hljs-keyword">for</span> p != q &#123;<br>p = p.Next<br>q = q.Next<br>&#125;<br><span class="hljs-keyword">return</span> q<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 142-环形链表 II</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 10:47:28</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem: 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，po</span><br><span class="hljs-string"># s 仅仅是用于标识环的情况，并不会作为参数传递到函数中。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  说明：不允许修改给定的链表。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  进阶：</span><br><span class="hljs-string">#  你是否可以使用 O(1) 空间解决此题？ </span><br><span class="hljs-string">#</span><br><span class="hljs-string">#  示例 1：</span><br><span class="hljs-string"># 输入：head = [3,2,0,-4], pos = 1</span><br><span class="hljs-string"># 输出：返回索引为 1 的链表节点</span><br><span class="hljs-string"># 解释：链表中有一个环，其尾部连接到第二个节点。</span><br><span class="hljs-string">#</span><br><span class="hljs-string">#  示例 2：</span><br><span class="hljs-string"># 输入：head = [1,2], pos = 0</span><br><span class="hljs-string"># 输出：返回索引为 0 的链表节点</span><br><span class="hljs-string"># 解释：链表中有一个环，其尾部连接到第一个节点。</span><br><span class="hljs-string">#</span><br><span class="hljs-string">#  示例 3：</span><br><span class="hljs-string"># 输入：head = [1], pos = -1</span><br><span class="hljs-string"># 输出：返回 null</span><br><span class="hljs-string"># 解释：链表中没有环。</span><br><span class="hljs-string">#</span><br><span class="hljs-string">#  提示：</span><br><span class="hljs-string">#  链表中节点的数目范围在范围 [0, 104] 内 </span><br><span class="hljs-string">#  -105 &lt;= Node.val &lt;= 105 </span><br><span class="hljs-string">#  pos 的值为 -1 或者链表中的一个有效索引 </span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  Related Topics 链表 双指针 </span><br><span class="hljs-string">#  👍 898 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x</span>):</span><br>        self.val = x<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detectCycle</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        p, q = head.<span class="hljs-built_in">next</span>, head.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> q.<span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> p != q:<br>            p = p.<span class="hljs-built_in">next</span><br>            q = q.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> p != q:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        q = head<br>        <span class="hljs-keyword">while</span> p != q:<br>            p = p.<span class="hljs-built_in">next</span><br>            q = q.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> q<br>        <br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="快乐数"><a href="https://leetcode-cn.com/problems/happy-number/">202. 快乐数</a></h6><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 如果 可以变为 1，那么这个数就是快乐数。 如果 n 是快乐数就返回 true ；不是，则返回 false 。</p><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1.链表是否有环问题<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：19<br>输出：true<br>解释：<br>12 +<span class="hljs-number"> 92 </span>= 82<br>82 +<span class="hljs-number"> 22 </span>= 68<br>62 +<span class="hljs-number"> 82 </span>= 100<br>12 +<span class="hljs-number"> 02 </span>+<span class="hljs-number"> 02 </span>= 1<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">输入：<span class="hljs-built_in">n</span> = <span class="hljs-number">2</span><br>输出：<span class="hljs-built_in">false</span><br><br>提示：<br><span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">n</span> &lt;= <span class="hljs-number">231</span> - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-04 17:56:08</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HappyNumber</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> HappyNumber().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">100000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s.isHappy(i)) &#123;<br>                sum++;<br>            &#125;<br>        &#125;<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class="hljs-comment">//Write an algorithm to determine if a number n is happy.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// A happy number is a number defined by the following process:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Starting with any positive integer, replace the number by the sum of the squares of its digits.</span><br>    <span class="hljs-comment">// Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</span><br>    <span class="hljs-comment">// Those numbers for which this process ends in 1 are happy.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Return true if n is a happy number, and false if not.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: n = 19</span><br>    <span class="hljs-comment">//Output: true</span><br>    <span class="hljs-comment">//Explanation:</span><br>    <span class="hljs-comment">//12 + 92 = 82</span><br>    <span class="hljs-comment">//82 + 22 = 68</span><br>    <span class="hljs-comment">//62 + 82 = 100</span><br>    <span class="hljs-comment">//12 + 02 + 02 = 1</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: n = 2</span><br>    <span class="hljs-comment">//Output: false</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// 1 &lt;= n &lt;= 231 - 1</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 哈希表 数学</span><br>    <span class="hljs-comment">// 👍 542 👎 0</span><br><br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>                <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(n &gt; <span class="hljs-number">0</span>) &#123;<br>                    x += (n % <span class="hljs-number">10</span>) * (n % <span class="hljs-number">10</span>);<br>                    n = n / <span class="hljs-number">10</span>;<br>                &#125;<br>                <span class="hljs-keyword">return</span> x;<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>                <span class="hljs-keyword">int</span> p = n, q = n;<br>                <span class="hljs-keyword">do</span>&#123;<br>                    p = getNext(p);<br>                    q = getNext(getNext(q));<br>                &#125; <span class="hljs-keyword">while</span> (p != q &amp;&amp; q!= <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">return</span> q == <span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 12:56:41</span><br><span class="hljs-comment"> * Description: //Write an algorithm to determine if a number n is happy.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// A happy number is a number defined by the following process:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Starting with any positive integer, replace the number by the sum of the squa</span><br><span class="hljs-comment">//res of its digits.</span><br><span class="hljs-comment">// Repeat the process until the number equals 1 (where it will stay), or it loop</span><br><span class="hljs-comment">//s endlessly in a cycle which does not include 1.</span><br><span class="hljs-comment">// Those numbers for which this process ends in 1 are happy.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Return true if n is a happy number, and false if not.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: n = 19</span><br><span class="hljs-comment">//Output: true</span><br><span class="hljs-comment">//Explanation:</span><br><span class="hljs-comment">//12 + 92 = 82</span><br><span class="hljs-comment">//82 + 22 = 68</span><br><span class="hljs-comment">//62 + 82 = 100</span><br><span class="hljs-comment">//12 + 02 + 02 = 1</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: n = 2</span><br><span class="hljs-comment">//Output: false</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// 1 &lt;= n &lt;= 231 - 1</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Related Topics 哈希表 数学</span><br><span class="hljs-comment">// 👍 547 👎 0</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsHappy</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>p, q := getNext(n), getNext(getNext(n))<br><span class="hljs-keyword">for</span> p != q &amp;&amp; q != <span class="hljs-number">1</span> &#123;<br>p = getNext(p)<br>q = getNext(getNext(q))<br>&#125;<br><span class="hljs-keyword">return</span> q == <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getNext</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>x := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n &gt; <span class="hljs-number">0</span> &#123;<br>x += (n % <span class="hljs-number">10</span>) * (n % <span class="hljs-number">10</span>)<br>n = n / <span class="hljs-number">10</span><br>&#125;<br><span class="hljs-keyword">return</span> x<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 202-快乐数</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 12:02:33</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 编写一个算法来判断一个数 n 是不是快乐数。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  「快乐数」定义为： </span><br><span class="hljs-string">#  对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 </span><br><span class="hljs-string">#  然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 </span><br><span class="hljs-string">#  如果 可以变为 1，那么这个数就是快乐数。 </span><br><span class="hljs-string">#  如果 n 是快乐数就返回 true ；不是，则返回 false 。 </span><br><span class="hljs-string"># </span><br><span class="hljs-string">#  示例 1： </span><br><span class="hljs-string"># 输入：19</span><br><span class="hljs-string"># 输出：true</span><br><span class="hljs-string"># 解释：</span><br><span class="hljs-string"># 12 + 92 = 82</span><br><span class="hljs-string"># 82 + 22 = 68</span><br><span class="hljs-string"># 62 + 82 = 100</span><br><span class="hljs-string"># 12 + 02 + 02 = 1</span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  示例 2： </span><br><span class="hljs-string"># 输入：n = 2</span><br><span class="hljs-string"># 输出：false</span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  提示： </span><br><span class="hljs-string">#  1 &lt;= n &lt;= 231 - 1 </span><br><span class="hljs-string">#  </span><br><span class="hljs-string">#  Related Topics 哈希表 数学 </span><br><span class="hljs-string">#  👍 548 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-keyword">import</span> math<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isHappy</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        p, q = n, self.get_next(n)<br>        <span class="hljs-keyword">while</span> p != q <span class="hljs-keyword">and</span> q != <span class="hljs-number">1</span>:<br>            p = self.get_next(p)<br>            q = self.get_next(self.get_next(q))<br>        <span class="hljs-keyword">return</span> q == <span class="hljs-number">1</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_next</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        x = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> n:<br>            n, tmp = <span class="hljs-built_in">divmod</span>(n, <span class="hljs-number">10</span>)<br>            x += (tmp * tmp)<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h5 id="链表反转">链表反转</h5><h6 id="反转链表"><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h6><p>反转一个单链表。</p><p>示例:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL<br>输出: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL<br></code></pre></td></tr></table></figure><p>进阶: 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.通过前驱、后继对链表进行反转<br>2.递归方式<br>3.借助栈结构<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 17:30:32</span><br><span class="hljs-comment"> * Description: 206-Reverse Linked List</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseLinkedList</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> ReverseLinkedList().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the head of a singly linked list, reverse the list, and return the reversed list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5]</span><br>    <span class="hljs-comment">//Output: [5,4,3,2,1]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [1,2]</span><br>    <span class="hljs-comment">//Output: [2,1]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: head = []</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is the range [0, 5000].</span><br>    <span class="hljs-comment">// -5000 &lt;= Node.val &lt;= 5000</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Follow up: A linked list can be reversed either iteratively or recursively. C</span><br>    <span class="hljs-comment">//ould you implement both?</span><br>    <span class="hljs-comment">// Related Topics 链表</span><br>    <span class="hljs-comment">// 👍 1568 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            ListNode pre = <span class="hljs-keyword">null</span>, cur = head, next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>                next = cur.next;<br>                cur.next = pre;<br>                pre = cur;<br>                cur = next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> pre;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 17:46:07</span><br><span class="hljs-comment"> * Description: //Given the head of a singly linked list, reverse the list, and return the reversed list.</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: head = [1,2,3,4,5]</span><br><span class="hljs-comment">//Output: [5,4,3,2,1]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: head = [1,2]</span><br><span class="hljs-comment">//Output: [2,1]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 3:</span><br><span class="hljs-comment">//Input: head = []</span><br><span class="hljs-comment">//Output: []</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// The number of nodes in the list is the range [0, 5000].</span><br><span class="hljs-comment">// -5000 &lt;= Node.val &lt;= 5000</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Follow up: A linked list can be reversed either iteratively or recursively. C</span><br><span class="hljs-comment">//ould you implement both?</span><br><span class="hljs-comment">// Related Topics 链表</span><br><span class="hljs-comment">// 👍 1568 👎 0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val <span class="hljs-keyword">int</span><br>Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">var</span> pre, cur, next *ListNode = <span class="hljs-literal">nil</span>, head, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &#123;<br>next = cur.Next<br>cur.Next = pre<br>pre = cur<br>cur = next<br>&#125;<br><span class="hljs-keyword">return</span> pre<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 206-反转链表</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 17:45:14</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 反转一个单链表。 </span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例:</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="hljs-string">        # 输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  进阶:</span><br><span class="hljs-string">        # 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</span><br><span class="hljs-string">        #  Related Topics 链表</span><br><span class="hljs-string">        #  👍 1568 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        pre, cur, nex = <span class="hljs-literal">None</span>, head, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> cur:<br>            nex = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            pre = cur<br>            cur = nex<br>        <span class="hljs-keyword">return</span> pre<br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="反转链表-ii"><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h6><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p><p>说明: 1 ≤ m ≤ n ≤ 链表长度。</p><p>示例:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL, m = <span class="hljs-number">2</span>, n = <span class="hljs-number">4</span><br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL<br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.先通过虚拟节点找到链表反转部分的头部<br><span class="hljs-attribute">2</span>.从反转部分的头部，反转n-m+<span class="hljs-number">1</span>个<br><span class="hljs-attribute">3</span>.将反转后的部分拼接上<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 19:05:32</span><br><span class="hljs-comment"> * Description: 92-Reverse Linked List II</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseLinkedListIi</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>        Solution s = <span class="hljs-keyword">new</span> ReverseLinkedListIi().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>        ListNode n5 = <span class="hljs-keyword">new</span> ReverseLinkedListIi().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-keyword">null</span>)</span></span>;<br>        ListNode n4 = <span class="hljs-keyword">new</span> ReverseLinkedListIi().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">4</span>, n5)</span></span>;<br>        ListNode n3 = <span class="hljs-keyword">new</span> ReverseLinkedListIi().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">3</span>, n4)</span></span>;<br>        ListNode n2 = <span class="hljs-keyword">new</span> ReverseLinkedListIi().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">2</span>, n3)</span></span>;<br>        ListNode n1 = <span class="hljs-keyword">new</span> ReverseLinkedListIi().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">1</span>, n2)</span></span>;<br>        ListNode n = s.reverseBetween(n1, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-keyword">null</span> &amp;&amp; n.val &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.print(n.val);<br>            System.out.print(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>            n = n.next;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the head of a singly linked list and two integers left and right where left &lt;= right,</span><br>    <span class="hljs-comment">// reverse the nodes of the list from position left to position right, and return the reversed list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5], left = 2, right = 4</span><br>    <span class="hljs-comment">//Output: [1,4,3,2,5]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [5], left = 1, right = 1</span><br>    <span class="hljs-comment">//Output: [5]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is n.</span><br>    <span class="hljs-comment">// 1 &lt;= n &lt;= 500</span><br>    <span class="hljs-comment">// -500 &lt;= Node.val &lt;= 500</span><br>    <span class="hljs-comment">// 1 &lt;= left &lt;= right &lt;= n</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//Follow up: Could you do it in one pass? Related Topics 链表</span><br>    <span class="hljs-comment">// 👍 709 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>            <span class="hljs-comment">// 需要虚拟节点</span><br>            ListNode hair = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head), cur = hair ;<br>            <span class="hljs-keyword">int</span> n = right - left + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (left &gt; <span class="hljs-number">1</span>) &#123;<br>                cur = cur.next;<br>                left--;<br>            &#125;<br>            cur.next = reverse(cur.next, n);<br>            <span class="hljs-keyword">return</span> hair.next;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>            <span class="hljs-comment">// 从头节点开始，反转n个节点</span><br>            ListNode pre = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>), cur = head, next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>                next = cur.next;<br>                cur.next = pre.next;<br>                pre.next = cur;<br>                cur = next;<br>                x--;<br>            &#125;<br>            head.next = cur;<br>            <span class="hljs-keyword">return</span> pre.next;<br>        &#125;<br>      <br>      <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseN</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            <span class="hljs-comment">// 递归方式</span><br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            ListNode tail = head.next, p = reverseN(head.next, n-<span class="hljs-number">1</span>);<br>            head.next = tail.next;<br>            tail.next = head;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 19:07:45</span><br><span class="hljs-comment"> * Description: //Given the head of a singly linked list and two integers left and right where left &lt;= right, reverse</span><br><span class="hljs-comment">                //the nodes of the list from position left to position right, and return the reversed list.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: head = [1,2,3,4,5], left = 2, right = 4</span><br><span class="hljs-comment">//Output: [1,4,3,2,5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: head = [5], left = 1, right = 1</span><br><span class="hljs-comment">//Output: [5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// The number of nodes in the list is n.</span><br><span class="hljs-comment">// 1 &lt;= n &lt;= 500</span><br><span class="hljs-comment">// -500 &lt;= Node.val &lt;= 500</span><br><span class="hljs-comment">// 1 &lt;= left &lt;= right &lt;= n</span><br><span class="hljs-comment">//Follow up: Could you do it in one pass? Related Topics 链表</span><br><span class="hljs-comment">// 👍 709 👎 0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val <span class="hljs-keyword">int</span><br>Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseBetween</span><span class="hljs-params">(head *ListNode, left <span class="hljs-keyword">int</span>, right <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>hair := &amp;ListNode&#123;Next:head&#125;<br>cur := hair<br>n := right - left + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> left &gt; <span class="hljs-number">1</span> &#123;<br>cur = cur.Next<br>left--<br>&#125;<br>cur.Next = reverse(cur.Next, n)<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(head *ListNode, n <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>pre, next := &amp;ListNode&#123;&#125;, &amp;ListNode&#123;&#125;<br>cur := head<br><br><span class="hljs-keyword">for</span> n &gt; <span class="hljs-number">0</span> &#123;<br>next = cur.Next<br>cur.Next = pre.Next<br>pre.Next = cur<br>cur = next<br>n--<br>&#125;<br>head.Next = cur<br><span class="hljs-keyword">return</span> pre.Next<br>&#125;<br><br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 92-反转链表 II</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 19:06:58</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。 </span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  说明:</span><br><span class="hljs-string">        # 1 ≤ m ≤ n ≤ 链表长度。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例:</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4</span><br><span class="hljs-string">        # 输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br><span class="hljs-string">        #  Related Topics 链表</span><br><span class="hljs-string">        #  👍 709 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">#         self.val = val</span><br><span class="hljs-comment">#         self.next = next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseBetween</span>(<span class="hljs-params">self, head: ListNode, left: <span class="hljs-built_in">int</span>, right: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        cur = hair = ListNode(<span class="hljs-built_in">next</span>=head)<br>        n = right - left + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &gt; <span class="hljs-number">1</span>:<br>            cur = cur.<span class="hljs-built_in">next</span><br>            left -= <span class="hljs-number">1</span><br><br>        cur.<span class="hljs-built_in">next</span> = self.reverse(cur.<span class="hljs-built_in">next</span>, n)<br>        <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">self, head: ListNode, n: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        pre, cur, nex = ListNode(), head, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>            nex = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre.<span class="hljs-built_in">next</span><br>            pre.<span class="hljs-built_in">next</span> = cur<br>            cur = nex<br>            n -= <span class="hljs-number">1</span><br>        head.<span class="hljs-built_in">next</span> = cur<br>        <span class="hljs-keyword">return</span> pre.<span class="hljs-built_in">next</span><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="k-个一组翻转链表"><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表</a></h6><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>进阶：</p><p>你可以设计一个只使用常数额外空间的算法来解决此问题吗？ 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例 1</strong>：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">2</span><br>输出：<span class="hljs-string">[2,1,4,3,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[3,2,1,4,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span>, k = <span class="hljs-number">1</span><br>输出：<span class="hljs-string">[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1]</span>, k = 1<br>输出：<span class="hljs-comment">[1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>列表中节点的数量在范围 <code>sz</code> 内</li><li><code>1 &lt;= sz &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li><li><code>1 &lt;= k &lt;= sz</code></li></ul><p>解题思路</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">将链表分成sz<span class="hljs-built_in">%k</span>链表进行反转，然后拼接末尾部分<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 17:42:34</span><br><span class="hljs-comment"> * Description: 25-Reverse Nodes in k-Group</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseNodesInKGroup</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> ReverseNodesInKGroup().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. </span><br>    <span class="hljs-comment">//k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. </span><br>    <span class="hljs-comment">// Follow up: </span><br>    <span class="hljs-comment">// Could you solve the problem in O(1) extra memory space? </span><br>    <span class="hljs-comment">// You may not alter the values in the list&#x27;s nodes, only nodes itself may be changed. </span><br> <br>    <span class="hljs-comment">// Example 1: </span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 2</span><br>    <span class="hljs-comment">//Output: [2,1,4,3,5]</span><br><br>    <span class="hljs-comment">// Example 2: </span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 3</span><br>    <span class="hljs-comment">//Output: [3,2,1,4,5]</span><br><br>    <span class="hljs-comment">// Example 3: </span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 1</span><br>    <span class="hljs-comment">//Output: [1,2,3,4,5]</span><br><br>    <span class="hljs-comment">// Example 4: </span><br>    <span class="hljs-comment">//Input: head = [1], k = 1</span><br>    <span class="hljs-comment">//Output: [1]</span><br><br>    <span class="hljs-comment">// Constraints: </span><br>    <span class="hljs-comment">// The number of nodes in the list is in the range sz. </span><br>    <span class="hljs-comment">// 1 &lt;= sz &lt;= 5000 </span><br>    <span class="hljs-comment">// 0 &lt;= Node.val &lt;= 1000 </span><br>    <span class="hljs-comment">// 1 &lt;= k &lt;= sz </span><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-comment">// Related Topics 链表 </span><br>    <span class="hljs-comment">// 👍 977 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            ListNode hair = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head), pre = hair, tail = pre;<br>            <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">//tail = pre;</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;k; i++) &#123;<br>                    tail = tail.next;<br>                    <span class="hljs-keyword">if</span> (tail == <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-keyword">return</span> hair.next;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 反转长度为k的链表，并返回链表的新头尾节点</span><br>                ListNode[] ln = reverse(head, tail);<br>                head = ln[<span class="hljs-number">0</span>];<br>                tail = ln[<span class="hljs-number">1</span>];<br>                pre.next = head;<br>                pre = tail;<br>                head = pre.next;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> hair.next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> ListNode[] reverse(ListNode head, ListNode tail)&#123;<br>            ListNode pre = tail.next, cur = head, next = <span class="hljs-keyword">null</span>;<br><br>            <span class="hljs-keyword">while</span> (tail != pre) &#123;<br>                next = cur.next;<br>                cur.next = pre;<br>                pre = cur;<br>                cur = next;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ListNode[]&#123;tail, head&#125;;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-18 18:38:00</span><br><span class="hljs-comment"> * Description: //Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.</span><br><span class="hljs-comment">// k is a positive integer and is less than or equal to the length of the linked</span><br><span class="hljs-comment">// list. If the number of nodes is not a multiple of k then left-out nodes, in the</span><br><span class="hljs-comment">// end, should remain as it is.</span><br><span class="hljs-comment">// Follow up:</span><br><span class="hljs-comment">// Could you solve the problem in O(1) extra memory space?</span><br><span class="hljs-comment">// You may not alter the values in the list&#x27;s nodes, only nodes itself may be changed.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 2</span><br><span class="hljs-comment">//Output: [2,1,4,3,5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 3</span><br><span class="hljs-comment">//Output: [3,2,1,4,5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 3:</span><br><span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 1</span><br><span class="hljs-comment">//Output: [1,2,3,4,5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 4:</span><br><span class="hljs-comment">//Input: head = [1], k = 1</span><br><span class="hljs-comment">//Output: [1]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// The number of nodes in the list is in the range sz.</span><br><span class="hljs-comment">// 1 &lt;= sz &lt;= 5000</span><br><span class="hljs-comment">// 0 &lt;= Node.val &lt;= 1000</span><br><span class="hljs-comment">// 1 &lt;= k &lt;= sz</span><br><span class="hljs-comment">// Related Topics 链表</span><br><span class="hljs-comment">// 👍 977 👎 0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>    Val <span class="hljs-keyword">int</span><br>    Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(head *ListNode, k <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>hair := &amp;ListNode&#123;Next:head&#125;<br>pre, tail := hair, hair<br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br>tail = tail.Next<br><span class="hljs-keyword">if</span> tail == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br>&#125;<br><br>head, tail = reverseK(head, tail)<br>pre.Next = head<br>pre = tail<br>head = pre.Next<br>&#125;<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseK</span><span class="hljs-params">(head, tail *ListNode)</span> <span class="hljs-params">(*ListNode, *ListNode)</span></span> &#123;<br><br>pre, cur, next := tail.Next, head, &amp;ListNode&#123;&#125;<br><span class="hljs-keyword">for</span> pre != tail &#123;<br>next = cur.Next<br>cur.Next = pre<br>pre = cur<br>cur = next<br>&#125;<br><br><span class="hljs-keyword">return</span> tail, head<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 25-K 个一组翻转链表</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-06 18:15:19</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。 </span><br><span class="hljs-string">        #  k 是一个正整数，它的值小于或等于链表的长度。</span><br><span class="hljs-string">        #  如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</span><br><span class="hljs-string">        #  进阶：</span><br><span class="hljs-string">        #  你可以设计一个只使用常数额外空间的算法来解决此问题吗？</span><br><span class="hljs-string">        #  你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 1：</span><br><span class="hljs-string">        # 输入：head = [1,2,3,4,5], k = 2</span><br><span class="hljs-string">        # 输出：[2,1,4,3,5]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 2：</span><br><span class="hljs-string">        # 输入：head = [1,2,3,4,5], k = 3</span><br><span class="hljs-string">        # 输出：[3,2,1,4,5]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 3：</span><br><span class="hljs-string">        # 输入：head = [1,2,3,4,5], k = 1</span><br><span class="hljs-string">        # 输出：[1,2,3,4,5]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 4：</span><br><span class="hljs-string">        # 输入：head = [1], k = 1</span><br><span class="hljs-string">        # 输出：[1]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  列表中节点的数量在范围 sz 内</span><br><span class="hljs-string">        #  1 &lt;= sz &lt;= 5000</span><br><span class="hljs-string">        #  0 &lt;= Node.val &lt;= 1000</span><br><span class="hljs-string">        #  1 &lt;= k &lt;= sz</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 链表</span><br><span class="hljs-string">        #  👍 977 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseKGroup</span>(<span class="hljs-params">self, head: ListNode, k: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        tail = pre = hair = ListNode(<span class="hljs-built_in">next</span>=head)<br>        <span class="hljs-keyword">while</span> head:<br>            <span class="hljs-comment"># tail = pre</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, k):<br>                tail = tail.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tail:<br>                    <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><br>            head, tail = self.reverse(head, tail)<br>            pre.<span class="hljs-built_in">next</span> = head<br>            pre = tail<br>            head = pre.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">self, head, tail: ListNode</span>) -&gt; (ListNode, ListNode):</span><br>        pre, cur, nex = tail.<span class="hljs-built_in">next</span>, head, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> pre != tail:<br>            nex = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            pre = cur<br>            cur = nex<br><br>        <span class="hljs-keyword">return</span> tail, head<br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h6 id="旋转链表"><a href="https://leetcode-cn.com/problems/rotate-list/">61. 旋转链表</a></h6><p>给定一个链表，旋转链表，将链表每个节点向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例 1:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL, k = <span class="hljs-number">2</span><br>输出: <span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;NULL<br>解释:<br>向右旋转 <span class="hljs-number">1</span> 步: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;NULL<br>向右旋转 <span class="hljs-number">2</span> 步: <span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;NULL<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">0</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;NULL, k = <span class="hljs-number">4</span><br>输出: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">0</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL<br>解释:<br>向右旋转 <span class="hljs-number">1</span> 步: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">0</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL<br>向右旋转 <span class="hljs-number">2</span> 步: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">0</span>-&gt;NULL<br>向右旋转 <span class="hljs-number">3</span> 步: <span class="hljs-number">0</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;NULL<br>向右旋转 <span class="hljs-number">4</span> 步: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">0</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL<br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>.先将链表首尾相连并获取链表的长度<br><span class="hljs-number">2</span>.找到新链表要断开的前一个节点，后继指向<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:20:15</span><br><span class="hljs-comment"> * Description: 61-Rotate List</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RotateList</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>        Solution s = <span class="hljs-keyword">new</span> RotateList().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>        ListNode n5 = <span class="hljs-keyword">new</span> RotateList().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-keyword">null</span>)</span></span>;<br>        ListNode n4 = <span class="hljs-keyword">new</span> RotateList().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">4</span>, n5)</span></span>;<br>        ListNode n3 = <span class="hljs-keyword">new</span> RotateList().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">3</span>, n4)</span></span>;<br>        ListNode n2 = <span class="hljs-keyword">new</span> RotateList().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">2</span>, n3)</span></span>;<br>        ListNode n1 = <span class="hljs-keyword">new</span> RotateList().<span class="hljs-function">new <span class="hljs-title">ListNode</span><span class="hljs-params">(<span class="hljs-number">1</span>, n2)</span></span>;<br>        ListNode n = s.rotateRight(n1, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.print(n.val);<br>            System.out.print(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>            n = n.next;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the head of a linked list, rotate the list to the right by k places. </span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5], k = 2</span><br>    <span class="hljs-comment">//Output: [4,5,1,2,3]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [0,1,2], k = 4</span><br>    <span class="hljs-comment">//Output: [2,0,1]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is in the range [0, 500].</span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">// 0 &lt;= k &lt;= 2 * 109</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 链表 双指针</span><br>    <span class="hljs-comment">// 👍 444 👎 0</span><br><br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>         <span class="hljs-keyword">int</span> val;<br>         ListNode next;<br>         ListNode() &#123;&#125;<br>         ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>         ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>     &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<br>            <span class="hljs-keyword">int</span> length = <span class="hljs-number">1</span>;<br>            ListNode oldTail = head;<br>            <span class="hljs-keyword">while</span> (oldTail.next != <span class="hljs-keyword">null</span>) &#123;<br>                oldTail = oldTail.next;<br>                length++;<br>            &#125;<br>            oldTail.next = head;<br>            ListNode newTail = head;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length - (k % length) - <span class="hljs-number">1</span>; i++)&#123;<br>                newTail = newTail.next;<br>            &#125;<br>            ListNode newHead = newTail.next;<br>            newTail.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span> newHead;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:26:17</span><br><span class="hljs-comment"> * Description:  Given the head of a linked list, rotate the list to the right by k places.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Example 1:</span><br><span class="hljs-comment">Input: head = [1,2,3,4,5], k = 2</span><br><span class="hljs-comment">Output: [4,5,1,2,3]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Example 2:</span><br><span class="hljs-comment">Input: head = [0,1,2], k = 4</span><br><span class="hljs-comment">Output: [2,0,1]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Constraints:</span><br><span class="hljs-comment"> The number of nodes in the list is in the range [0, 500].</span><br><span class="hljs-comment"> -100 &lt;= Node.val &lt;= 100</span><br><span class="hljs-comment"> 0 &lt;= k &lt;= 2 * 109</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Related Topics 链表 双指针</span><br><span class="hljs-comment"> 👍 444 👎 0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rotateRight</span><span class="hljs-params">(head *ListNode, k <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> head<br>&#125;<br>oldTail := head<br>length := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> oldTail.Next != <span class="hljs-literal">nil</span> &#123;<br>oldTail = oldTail.Next<br>length++<br>&#125;<br>oldTail.Next = head<br>newTail := head<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; length - k%length <span class="hljs-number">-1</span>; i++ &#123;<br>newTail = newTail.Next<br>&#125;<br>head = newTail.Next<br>newTail.Next = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span> head<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 61-旋转链表</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-06 20:23:59</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:  给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 1:</span><br><span class="hljs-string">          输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2</span><br><span class="hljs-string">         输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="hljs-string">         解释:</span><br><span class="hljs-string">         向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL</span><br><span class="hljs-string">         向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 2:</span><br><span class="hljs-string">          输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4</span><br><span class="hljs-string">         输出: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="hljs-string">         解释:</span><br><span class="hljs-string">         向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="hljs-string">         向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL</span><br><span class="hljs-string">         向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL</span><br><span class="hljs-string">         向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</span><br><span class="hljs-string">          Related Topics 链表 双指针</span><br><span class="hljs-string">          👍 444 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rotateRight</span>(<span class="hljs-params">self, head: ListNode, k: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> head.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">return</span> head<br><br>        old_tail = head<br>        length = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> old_tail.<span class="hljs-built_in">next</span>:<br>            old_tail = old_tail.<span class="hljs-built_in">next</span><br>            length += <span class="hljs-number">1</span><br><br>        old_tail.<span class="hljs-built_in">next</span> = head<br><br>        new_tail = head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length - (k % length) - <span class="hljs-number">1</span>):<br>            new_tail = new_tail.<span class="hljs-built_in">next</span><br><br>        head = new_tail.<span class="hljs-built_in">next</span><br>        new_tail.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">return</span> head<br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="两两交换链表中的节点"><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h6><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>]<br>输出：[<span class="hljs-number">2,1,4,3</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1]</span><br>输出：<span class="hljs-comment">[1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶：</strong>你能在不修改链表节点值的情况下解决这个问题吗?（也就是说，仅修改节点本身。）</p><p>解题思路</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">K</span>个一组反转中 <span class="hljs-built_in">K</span>等于<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:22:33</span><br><span class="hljs-comment"> * Description: 24-Swap Nodes in Pairs</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwapNodesInPairs</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> SwapNodesInPairs().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//Given a linked list, swap every two adjacent nodes and return its head. </span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4]</span><br>    <span class="hljs-comment">//Output: [2,1,4,3]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = []</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: head = [1]</span><br>    <span class="hljs-comment">//Output: [1]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is in the range [0, 100].</span><br>    <span class="hljs-comment">// 0 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">//Follow up: Can you solve the problem without modifying the values in the list&#x27;</span><br>    <span class="hljs-comment">//s nodes? (i.e., Only nodes themselves may be changed.) Related Topics 递归 链表</span><br>    <span class="hljs-comment">// 👍 859 👎 0</span><br><br>        <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>     &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            ListNode hair = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head), pre = hair, tail = pre;<br>            <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; i++) &#123;<br>                    tail = tail.next;<br>                    <span class="hljs-keyword">if</span> (tail == <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-keyword">return</span> hair.next;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 反转长度为k的链表，并返回链表的新头尾节点</span><br>                ListNode[] ln = reverse(head, tail);<br>                head = ln[<span class="hljs-number">0</span>];<br>                tail = ln[<span class="hljs-number">1</span>];<br>                pre.next = head;<br>                pre = tail;<br>                head = pre.next;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> hair.next;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> ListNode[] reverse(ListNode head, ListNode tail)&#123;<br>            ListNode pre = tail.next, cur = head, next = <span class="hljs-keyword">null</span>;<br><br>            <span class="hljs-keyword">while</span> (tail != pre) &#123;<br>                next = cur.next;<br>                cur.next = pre;<br>                pre = cur;<br>                cur = next;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ListNode[]&#123;tail, head&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:26:56</span><br><span class="hljs-comment"> * Description:  Given a linked list, swap every two adjacent nodes and return its head.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Example 1:</span><br><span class="hljs-comment">Input: head = [1,2,3,4]</span><br><span class="hljs-comment">Output: [2,1,4,3]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Example 2:</span><br><span class="hljs-comment">Input: head = []</span><br><span class="hljs-comment">Output: []</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Example 3:</span><br><span class="hljs-comment">Input: head = [1]</span><br><span class="hljs-comment">Output: [1]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Constraints:</span><br><span class="hljs-comment"> The number of nodes in the list is in the range [0, 100].</span><br><span class="hljs-comment"> 0 &lt;= Node.val &lt;= 100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Follow up: Can you solve the problem without modifying the values in the list&#x27;</span><br><span class="hljs-comment">s nodes? (i.e., Only nodes themselves may be changed.) Related Topics 递归 链表</span><br><span class="hljs-comment"> 👍 859 👎 0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapPairs</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>hair := &amp;ListNode&#123;Next:head&#125;<br>pre, tail := hair, hair<br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++ &#123;<br>tail = tail.Next<br><span class="hljs-keyword">if</span> tail == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br>&#125;<br><br>head, tail = reverseN(head, tail)<br>pre.Next = head<br>pre = tail<br>head = pre.Next<br>&#125;<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseN</span><span class="hljs-params">(head, tail *ListNode)</span> <span class="hljs-params">(*ListNode, *ListNode)</span></span> &#123;<br><br>pre, cur, next := tail.Next, head, &amp;ListNode&#123;&#125;<br><span class="hljs-keyword">for</span> pre != tail &#123;<br>next = cur.Next<br>cur.Next = pre<br>pre = cur<br>cur = next<br>&#125;<br><br><span class="hljs-keyword">return</span> tail, head<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 24-两两交换链表中的节点</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-06 20:25:15</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:  给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</span><br><span class="hljs-string">          你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 1：</span><br><span class="hljs-string">         输入：head = [1,2,3,4]</span><br><span class="hljs-string">         输出：[2,1,4,3]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 2：</span><br><span class="hljs-string">         输入：head = []</span><br><span class="hljs-string">         输出：[]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 3：</span><br><span class="hljs-string">         输入：head = [1]</span><br><span class="hljs-string">         输出：[1]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          提示：</span><br><span class="hljs-string">          链表中节点的数目在范围 [0, 100] 内</span><br><span class="hljs-string">          0 &lt;= Node.val &lt;= 100</span><br><span class="hljs-string">          进阶：你能在不修改链表节点值的情况下解决这个问题吗?（也就是说，仅修改节点本身。）</span><br><span class="hljs-string">          Related Topics 递归 链表</span><br><span class="hljs-string">          👍 859 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swapPairs</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        tail = pre = hair = ListNode(<span class="hljs-built_in">next</span>=head)<br>        <span class="hljs-keyword">while</span> head:<br>            <span class="hljs-comment"># tail = pre</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>):<br>                tail = tail.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tail:<br>                    <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><br>            head, tail = self.reverse(head, tail)<br>            pre.<span class="hljs-built_in">next</span> = head<br>            pre = tail<br>            head = pre.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">self, head, tail: ListNode</span>) -&gt; (ListNode, ListNode):</span><br>        pre, cur, nex = tail.<span class="hljs-built_in">next</span>, head, <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> pre != tail:<br>            nex = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            pre = cur<br>            cur = nex<br><br>        <span class="hljs-keyword">return</span> tail, head<br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h5 id="链表节点删除">链表节点删除</h5><h6 id="删除链表的倒数第-n-个结点"><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h6><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><p>示例 1：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5</span>], n = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">1,2,3,5</span>]<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1]</span>, n = 1<br>输出：<span class="hljs-comment">[]</span><br></code></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[1,2]</span>, n = 1<br>输出：<span class="hljs-comment">[1]</span><br></code></pre></td></tr></table></figure><p>提示：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">链表中结点的数目为 sz<br><span class="hljs-number">1</span> &lt;= sz &lt;= <span class="hljs-number">30</span><br><span class="hljs-number">0</span> &lt;= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Node</span>.</span></span><span class="hljs-keyword">val</span> &lt;= <span class="hljs-number">100</span><br><span class="hljs-number">1</span> &lt;= n &lt;= sz<br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">快慢指针<br><span class="hljs-number">1</span>.快指针先行<span class="hljs-built_in">N</span>步；<br><span class="hljs-number">2</span>.慢指针与快指针开始同时走，快指针走到头，慢指针走到第<span class="hljs-built_in">N</span>个节点的前驱<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 12:54:46</span><br><span class="hljs-comment"> * Description: 19-Remove Nth Node From End of List</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoveNthNodeFromEndOfList</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> RemoveNthNodeFromEndOfList().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the head of a linked list, remove the nth node from the end of the list </span><br>    <span class="hljs-comment">//and return its head.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Follow up: Could you do this in one pass?</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,2,3,4,5], n = 2</span><br>    <span class="hljs-comment">//Output: [1,2,3,5]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [1], n = 1</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: head = [1,2], n = 1</span><br>    <span class="hljs-comment">//Output: [1]</span><br><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is sz.</span><br>    <span class="hljs-comment">// 1 &lt;= sz &lt;= 30</span><br>    <span class="hljs-comment">// 0 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">// 1 &lt;= n &lt;= sz</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 链表 双指针</span><br>    <span class="hljs-comment">// 👍 1264 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>         <span class="hljs-keyword">int</span> val;<br>         ListNode next;<br>         ListNode() &#123;&#125;<br>         ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>         ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>     &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            ListNode hair = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head), fast = head, slow = hair;<br>            <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>)&#123;<br>                fast = fast.next;<br>                n--;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>                fast = fast.next;<br>                slow = slow.next;<br>            &#125;<br>            slow.next = slow.next.next;<br>            <span class="hljs-keyword">return</span> hair.next;<br>        &#125;<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 13:43:33</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//Given the head of a linked list, remove the nth node from the end of the list </span><br><span class="hljs-comment">//and return its head. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Follow up: Could you do this in one pass? </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: head = [1,2,3,4,5], n = 2</span><br><span class="hljs-comment">//Output: [1,2,3,5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: head = [1], n = 1</span><br><span class="hljs-comment">//Output: []</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 3:</span><br><span class="hljs-comment">//Input: head = [1,2], n = 1</span><br><span class="hljs-comment">//Output: [1]</span><br><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// The number of nodes in the list is sz. </span><br><span class="hljs-comment">// 1 &lt;= sz &lt;= 30 </span><br><span class="hljs-comment">// 0 &lt;= Node.val &lt;= 100 </span><br><span class="hljs-comment">// 1 &lt;= n &lt;= sz </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Related Topics 链表 双指针 </span><br><span class="hljs-comment">// 👍 1264 👎 0</span><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val <span class="hljs-keyword">int</span><br>Next *ListNode<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(head *ListNode, n <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>hair := &amp;ListNode&#123;Next:head&#125;<br>fast, slow := head, hair<br><span class="hljs-keyword">for</span> n &gt; <span class="hljs-number">0</span> &#123;<br>fast = fast.Next<br>n--<br>&#125;<br><span class="hljs-keyword">for</span> fast != <span class="hljs-literal">nil</span> &#123;<br>fast = fast.Next<br>slow = slow.Next<br>&#125;<br>slow.Next = slow.Next.Next<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 19-删除链表的倒数第 N 个结点</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 13:39:13</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 </span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  进阶：你能尝试使用一趟扫描实现吗？</span><br><span class="hljs-string"></span><br><span class="hljs-string">        #  示例 1：</span><br><span class="hljs-string">        # 输入：head = [1,2,3,4,5], n = 2</span><br><span class="hljs-string">        # 输出：[1,2,3,5]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 2：</span><br><span class="hljs-string">        # 输入：head = [1], n = 1</span><br><span class="hljs-string">        # 输出：[]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 3：</span><br><span class="hljs-string">        # 输入：head = [1,2], n = 1</span><br><span class="hljs-string">        # 输出：[1]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  链表中结点的数目为 sz</span><br><span class="hljs-string">        #  1 &lt;= sz &lt;= 30</span><br><span class="hljs-string">        #  0 &lt;= Node.val &lt;= 100</span><br><span class="hljs-string">        #  1 &lt;= n &lt;= sz</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 链表 双指针</span><br><span class="hljs-string">        #  👍 1264 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeNthFromEnd</span>(<span class="hljs-params">self, head: ListNode, n: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        hair = ListNode(<span class="hljs-built_in">next</span>=head)<br>        slow, fast = hair, head;<br>        <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>            fast = fast.<span class="hljs-built_in">next</span><br>            n -= <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">while</span> fast:<br>            fast = fast.<span class="hljs-built_in">next</span><br>            slow = slow.<span class="hljs-built_in">next</span><br><br>        slow.<span class="hljs-built_in">next</span> = slow.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="删除排序链表中的重复元素"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h6><p>给定一个<strong>排序</strong>链表，删除所有重复的元素，使得每个元素只出现一次。</p><p>示例 1:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span><br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">3</span><br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">排序链表<br>某节点与下一个节点值相等则删除<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 13:48:45</span><br><span class="hljs-comment"> * Description: 83-Remove Duplicates from Sorted List</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoveDuplicatesFromSortedList</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> RemoveDuplicatesFromSortedList().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the head of a sorted linked list, delete all duplicates such that each e</span><br>    <span class="hljs-comment">//lement appears only once. Return the linked list sorted as well. </span><br><br>    <span class="hljs-comment">// Example 1: </span><br>    <span class="hljs-comment">//Input: head = [1,1,2]</span><br>    <span class="hljs-comment">//Output: [1,2]</span><br><br>    <span class="hljs-comment">// Example 2: </span><br>    <span class="hljs-comment">//Input: head = [1,1,2,3,3]</span><br>    <span class="hljs-comment">//Output: [1,2,3]</span><br><br>    <span class="hljs-comment">// Constraints: </span><br>    <span class="hljs-comment">// The number of nodes in the list is in the range [0, 300]. </span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100 </span><br>    <span class="hljs-comment">// The list is guaranteed to be sorted in ascending order. </span><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-comment">// Related Topics 链表 </span><br>    <span class="hljs-comment">// 👍 488 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            ListNode fast = head.next, slow = head;<br>            <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (fast.val == slow.val) &#123;<br>                    slow.next = fast.next;<br>                    fast = slow.next;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    fast = fast.next;<br>                    slow = slow.next;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 13:50:35</span><br><span class="hljs-comment"> * Description: //Given the head of a sorted linked list, delete all duplicates such that each e</span><br><span class="hljs-comment">//lement appears only once. Return the linked list sorted as well.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: head = [1,1,2]</span><br><span class="hljs-comment">//Output: [1,2]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: head = [1,1,2,3,3]</span><br><span class="hljs-comment">//Output: [1,2,3]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// The number of nodes in the list is in the range [0, 300].</span><br><span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br><span class="hljs-comment">// The list is guaranteed to be sorted in ascending order.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Related Topics 链表</span><br><span class="hljs-comment">// 👍 488 👎 0</span><br><span class="hljs-comment"> **/</span><br><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val <span class="hljs-keyword">int</span><br>Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>cur := head<br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> cur.Val == cur.Next.Val &#123;<br>cur.Next = cur.Next.Next<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>cur = cur.Next<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> head<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 83-删除排序链表中的重复元素</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 13:50:26</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。 </span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 1:</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  输入: 1-&gt;1-&gt;2</span><br><span class="hljs-string">        # 输出: 1-&gt;2</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 2:</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="hljs-string">        # 输出: 1-&gt;2-&gt;3</span><br><span class="hljs-string">        #  Related Topics 链表</span><br><span class="hljs-string">        #  👍 488 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteDuplicates</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        fast, slow = head.<span class="hljs-built_in">next</span>, head<br><br>        <span class="hljs-keyword">while</span> fast:<br>            <span class="hljs-keyword">if</span> fast.val == slow.val:<br>                slow.<span class="hljs-built_in">next</span> = fast.<span class="hljs-built_in">next</span><br>                fast = slow.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                fast = fast.<span class="hljs-built_in">next</span><br>                slow = slow.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> head<br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="删除排序链表中的重复元素-ii"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></h6><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 <em>没有重复出现</em> 的数字。</p><p><strong>示例 1:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span><br>输出: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span><br>输出: <span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 13:50:14</span><br><span class="hljs-comment"> * Description: 82-Remove Duplicates from Sorted List II</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoveDuplicatesFromSortedListIi</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> RemoveDuplicatesFromSortedListIi().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Given the head of a sorted linked list, delete all nodes that have duplicate numbers, </span><br>    <span class="hljs-comment">//leaving only distinct numbers from the original list. Return the linked</span><br>    <span class="hljs-comment">//list sorted as well.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,2,3,3,4,4,5]</span><br>    <span class="hljs-comment">//Output: [1,2,5]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [1,1,1,2,3]</span><br>    <span class="hljs-comment">//Output: [2,3]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is in the range [0, 300].</span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">// The list is guaranteed to be sorted in ascending order.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 链表</span><br>    <span class="hljs-comment">// 👍 469 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>            ListNode hair = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head), fast = head, slow = hair;<br>            <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">while</span> (fast.next != <span class="hljs-keyword">null</span> &amp;&amp; fast.val == fast.next.val) &#123;<br>                    fast = fast.next;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (slow.next == fast) &#123;<br>                    slow = slow.next;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    slow.next = fast.next;<br>                &#125;<br>                fast = fast.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> hair.next;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-05 13:50:38</span><br><span class="hljs-comment"> * Description: //Given the head of a sorted linked list, delete all nodes that have duplicate n</span><br><span class="hljs-comment">//umbers, leaving only distinct numbers from the original list. Return the linked</span><br><span class="hljs-comment">//list sorted as well.</span><br><span class="hljs-comment">// Example 1:</span><br><span class="hljs-comment">//Input: head = [1,2,3,3,4,4,5]</span><br><span class="hljs-comment">//Output: [1,2,5]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Example 2:</span><br><span class="hljs-comment">//Input: head = [1,1,1,2,3]</span><br><span class="hljs-comment">//Output: [2,3]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Constraints:</span><br><span class="hljs-comment">// The number of nodes in the list is in the range [0, 300].</span><br><span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br><span class="hljs-comment">// The list is guaranteed to be sorted in ascending order.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Related Topics 链表</span><br><span class="hljs-comment">// 👍 469 👎 0</span><br><span class="hljs-comment"> **/</span><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val <span class="hljs-keyword">int</span><br>Next *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>hair := &amp;ListNode&#123;Next: head&#125;<br>fast, slow := head, hair<br><span class="hljs-keyword">for</span> fast != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> fast.Next != <span class="hljs-literal">nil</span> &amp;&amp; fast.Val == fast.Next.Val &#123;<br>fast = fast.Next<br>&#125;<br><span class="hljs-keyword">if</span> slow.Next == fast&#123;<br>slow = slow.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>slow.Next = fast.Next<br>&#125;<br>fast = fast.Next<br>&#125;<br><span class="hljs-keyword">return</span> hair.Next<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 82-删除排序链表中的重复元素 II</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-05 13:50:50</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</span><br><span class="hljs-string">        #  示例 1:</span><br><span class="hljs-string">        #  输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="hljs-string">        # 输出: 1-&gt;2-&gt;5</span><br><span class="hljs-string">        #  示例 2:</span><br><span class="hljs-string">        #  输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="hljs-string">        # 输出: 2-&gt;3</span><br><span class="hljs-string">        #  Related Topics 链表</span><br><span class="hljs-string">        #  👍 469 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteDuplicates</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        hair, fast = ListNode(<span class="hljs-built_in">next</span>=head), head<br>        slow = hair<br>        <span class="hljs-keyword">while</span> fast:<br>            <span class="hljs-keyword">while</span> fast.<span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> fast.val == fast.<span class="hljs-built_in">next</span>.val:<br>                fast = fast.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> slow.<span class="hljs-built_in">next</span> == fast:<br>                slow = slow.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                slow.<span class="hljs-built_in">next</span> = fast.<span class="hljs-built_in">next</span><br>            fast = fast.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> hair.<span class="hljs-built_in">next</span><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h5 id="经典面试题">经典面试题</h5><h6 id="分隔链表"><a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表</a></h6><p>给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。</p><p>你应当 保留 两个分区中每个节点的初始相对位置。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/partition.jpg"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,4,3,2,5,2]</span>, x = <span class="hljs-number">3</span><br>输出：<span class="hljs-string">[1,2,2,4,3,5]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[2,1]</span>, x = 2<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>-200 &lt;= x &lt;= 200</code></li></ul><p>解题思路</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">准备两个虚拟头指针 一个用于连接小于 <span class="hljs-keyword">x</span> 的节点，一个用于连接大于或等于<span class="hljs-keyword">x</span>的节点，然后将两个链表连接即可<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:29:46</span><br><span class="hljs-comment"> * Description: 86-Partition List</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PartitionList</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> PartitionList().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.</span><br>    <span class="hljs-comment">// You should preserve the original relative order of the nodes in each of the two partitions.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [1,4,3,2,5,2], x = 3</span><br>    <span class="hljs-comment">//Output: [1,2,2,4,3,5]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [2,1], x = 2</span><br>    <span class="hljs-comment">//Output: [1,2]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// The number of nodes in the list is in the range [0, 200].</span><br>    <span class="hljs-comment">// -100 &lt;= Node.val &lt;= 100</span><br>    <span class="hljs-comment">// -200 &lt;= x &lt;= 200</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 链表 双指针</span><br>    <span class="hljs-comment">// 👍 378 👎 0</span><br><br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Definition for singly-linked list.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        ListNode next;<br>        ListNode() &#123;&#125;<br>        ListNode(<span class="hljs-keyword">int</span> val) &#123; <span class="hljs-keyword">this</span>.val = val; &#125;<br>        ListNode(<span class="hljs-keyword">int</span> val, ListNode next) &#123; <span class="hljs-keyword">this</span>.val = val; <span class="hljs-keyword">this</span>.next = next; &#125;<br>     &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">partition</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>            ListNode less = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head), greater = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>, head);<br>            ListNode curLess = less, curGreater = greater;<br>            <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (head.val &lt; x) &#123;<br>                    curLess.next = head;<br>                    curLess = curLess.next;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    curGreater.next = head;<br>                    curGreater = curGreater.next;<br>                &#125;<br>                head = head.next;<br>            &#125;<br>            curGreater.next = <span class="hljs-keyword">null</span>;<br>            curLess.next = greater.next;<br>            <span class="hljs-keyword">return</span> less.next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:37:43</span><br><span class="hljs-comment"> * Description: Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.</span><br><span class="hljs-comment">You should preserve the original relative order of the nodes in each of the two partitions.</span><br><span class="hljs-comment">Example 1:</span><br><span class="hljs-comment">Input: head = [1,4,3,2,5,2], x = 3</span><br><span class="hljs-comment">Output: [1,2,2,4,3,5]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Example 2:</span><br><span class="hljs-comment">Input: head = [2,1], x = 2</span><br><span class="hljs-comment">Output: [1,2]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Constraints:</span><br><span class="hljs-comment"> The number of nodes in the list is in the range [0, 200].</span><br><span class="hljs-comment"> -100 &lt;= Node.val &lt;= 100</span><br><span class="hljs-comment"> -200 &lt;= x &lt;= 200</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> Related Topics 链表 双指针</span><br><span class="hljs-comment"> 👍 378 👎 0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">partition</span><span class="hljs-params">(head *ListNode, x <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>lesser, greater := &amp;ListNode&#123;Next:head&#125;, &amp;ListNode&#123;Next:head&#125;<br>less, great := lesser, greater<br><span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> head.Val &lt; x &#123;<br>less.Next = head<br>less = less.Next<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>great.Next = head<br>great = great.Next<br>&#125;<br>head = head.Next<br>&#125;<br>great.Next = <span class="hljs-literal">nil</span><br>less.Next = greater.Next<br><br><span class="hljs-keyword">return</span> lesser.Next<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 86-分隔链表</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-06 20:33:40</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:  给你一个链表的头节点 head 和一个特定值 x ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。</span><br><span class="hljs-string">          你应当 保留 两个分区中每个节点的初始相对位置。</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 1：</span><br><span class="hljs-string">         输入：head = [1,4,3,2,5,2], x = 3</span><br><span class="hljs-string">         输出：[1,2,2,4,3,5]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 2：</span><br><span class="hljs-string">         输入：head = [2,1], x = 2</span><br><span class="hljs-string">         输出：[1,2]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          提示：</span><br><span class="hljs-string">          链表中节点的数目在范围 [0, 200] 内</span><br><span class="hljs-string">          -100 &lt;= Node.val &lt;= 100</span><br><span class="hljs-string">          -200 &lt;= x &lt;= 200</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Related Topics 链表 双指针</span><br><span class="hljs-string">          👍 378 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val=<span class="hljs-number">0</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span></span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params">self, head: ListNode, x: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        lesser, greater = ListNode(<span class="hljs-built_in">next</span>=head), ListNode(<span class="hljs-built_in">next</span>=head)<br>        less, great = lesser, greater<br>        <span class="hljs-keyword">while</span> head:<br>            <span class="hljs-keyword">if</span> head.val &lt; x:<br>                less.<span class="hljs-built_in">next</span> = head<br>                less = less.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                great.<span class="hljs-built_in">next</span> = head<br>                great = great.<span class="hljs-built_in">next</span><br><br>            head = head.<span class="hljs-built_in">next</span><br><br>        great.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        less.<span class="hljs-built_in">next</span> = greater.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> lesser.<span class="hljs-built_in">next</span><br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="复制带随机指针的链表"><a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">138. 复制带随机指针的链表</a></h6><p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</p><p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点 。</strong></p><p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --&gt; y 。</p><p>返回复制链表的头节点。</p><p>用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：</p><p>val：一个表示 Node.val 的整数。 random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为 null 。 你的代码 只 接受原链表的头节点 head 作为传入参数。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[<span class="hljs-comment">[7,null]</span>,<span class="hljs-comment">[13,0]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[10,2]</span>,<span class="hljs-comment">[1,0]</span>]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[7,null]</span>,<span class="hljs-comment">[13,0]</span>,<span class="hljs-comment">[11,4]</span>,<span class="hljs-comment">[10,2]</span>,<span class="hljs-comment">[1,0]</span>]</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：head = <span class="hljs-string">[[1,1],[2,1]]</span><br>输出：<span class="hljs-string">[[1,1],[2,1]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png"></p><p><strong>示例 4：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：head = <span class="hljs-comment">[]</span><br>输出：<span class="hljs-comment">[]</span><br>解释：给定的链表为空（空指针），因此返回 null。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>-10000 &lt;= Node.val &lt;= 10000</code></li><li><code>Node.random</code> 为空（null）或指向链表中的节点。</li></ul><p>解题思路</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">三轮：<br><span class="hljs-number">1.</span>原始链表每个节点后插入该节点的复制节点（<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span> =&gt; <span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>&#x27;-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">2</span>&#x27;-&gt;<span class="hljs-number">3</span><span class="hljs-number">-3</span>&#x27;）<br><span class="hljs-number">2.</span>修正新节点的random值<br><span class="hljs-number">3.</span>将<span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>&#x27;-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">2</span>&#x27;-&gt;<span class="hljs-number">3</span><span class="hljs-number">-3</span>&#x27;拆分成<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>  <span class="hljs-number">1</span>&#x27;-&gt;<span class="hljs-number">2</span>&#x27;-&gt;<span class="hljs-number">3</span>&#x27;<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-06 20:31:24</span><br><span class="hljs-comment"> * Description: 138-Copy List with Random Pointer</span><br><span class="hljs-comment"> **/</span><br> <br><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyListWithRandomPointer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> CopyListWithRandomPointer().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corre</span><br>    <span class="hljs-comment">//sponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original li</span><br>    <span class="hljs-comment">//st and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// For example, if there are two nodes X and Y in the original list, where X.random --&gt; Y, then for the corresponding two nodes x and y in the copied list, x.random --&gt; y.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Return the head of the copied linked list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// val: an integer representing Node.val</span><br>    <span class="hljs-comment">// random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Your code will only be given the head of the original linked list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br>    <span class="hljs-comment">//Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 2:</span><br>    <span class="hljs-comment">//Input: head = [[1,1],[2,1]]</span><br>    <span class="hljs-comment">//Output: [[1,1],[2,1]]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 3:</span><br>    <span class="hljs-comment">//Input: head = [[3,null],[3,0],[3,null]]</span><br>    <span class="hljs-comment">//Output: [[3,null],[3,0],[3,null]]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 4:</span><br>    <span class="hljs-comment">//Input: head = []</span><br>    <span class="hljs-comment">//Output: []</span><br>    <span class="hljs-comment">//Explanation: The given linked list is empty (null pointer), so return null.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// 0 &lt;= n &lt;= 1000</span><br>    <span class="hljs-comment">// -10000 &lt;= Node.val &lt;= 10000</span><br>    <span class="hljs-comment">// Node.random is null or is pointing to some node in the linked list.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 哈希表 链表</span><br>    <span class="hljs-comment">// 👍 519 👎 0</span><br><br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    // Definition for a Node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        Node next;<br>        Node random;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">this</span>.random = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">copyRandomList</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (head ==  <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            Node cur = head;<br>            <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>                Node n = <span class="hljs-keyword">new</span> Node(cur.val);<br>                n.next = cur.next;<br>                cur.next = n;<br>                cur = n.next;<br>            &#125;<br><br>            cur = head;<br>            <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>                cur.next.random = (cur.random != <span class="hljs-keyword">null</span>) ? cur.random.next : <span class="hljs-keyword">null</span>;<br>                cur = cur.next.next;<br>            &#125;<br>            cur = head;<br>            Node newNode = head.next, next = newNode;<br><br>            <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>                cur.next = cur.next.next;<br>                next.next = next.next != <span class="hljs-keyword">null</span> ? next.next.next: <span class="hljs-keyword">null</span>;<br>                cur = cur.next;<br>                next = next.next;<br>            &#125;<br>            <span class="hljs-keyword">return</span> newNode;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Author: Wang P</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Date: 2021-03-18 20:37:49</span><br><span class="hljs-comment"> * Description: A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corre</span><br><span class="hljs-comment">sponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original li</span><br><span class="hljs-comment">st and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">For example, if there are two nodes X and Y in the original list, where X.random --&gt; Y, then for the corresponding two nodes x and y in the copied list, x.random --&gt; y.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Return the head of the copied linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">val: an integer representing Node.val</span><br><span class="hljs-comment">random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Your code will only be given the head of the original linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Example 1:</span><br><span class="hljs-comment">Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="hljs-comment">Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Example 2:</span><br><span class="hljs-comment">Input: head = [[1,1],[2,1]]</span><br><span class="hljs-comment">Output: [[1,1],[2,1]]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Example 3:</span><br><span class="hljs-comment">Input: head = [[3,null],[3,0],[3,null]]</span><br><span class="hljs-comment">Output: [[3,null],[3,0],[3,null]]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Example 4:</span><br><span class="hljs-comment">Input: head = []</span><br><span class="hljs-comment">Output: []</span><br><span class="hljs-comment">Explanation: The given linked list is empty (null pointer), so return null.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Constraints:</span><br><span class="hljs-comment">0 &lt;= n &lt;= 1000</span><br><span class="hljs-comment">-10000 &lt;= Node.val &lt;= 10000</span><br><span class="hljs-comment">Node.random is null or is pointing to some node in the linked list.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Related Topics 哈希表 链表</span><br><span class="hljs-comment">👍 519 👎 0</span><br><span class="hljs-comment"> **/</span><br><br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a Node.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>Val <span class="hljs-keyword">int</span><br>   Next *Node<br>   Random *Node<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyRandomList</span><span class="hljs-params">(head *Node)</span> *<span class="hljs-title">Node</span></span> &#123;<br><span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>cur := head<br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &#123;<br>n := &amp;Node&#123;Val:cur.Val, Next:cur.Next&#125;<br>cur.Next = n<br>cur = n.Next<br>&#125;<br>  <br>cur = head<br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> cur.Random != <span class="hljs-literal">nil</span> &#123;<br>cur.Next.Random = cur.Random.Next<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>cur.Next.Random = <span class="hljs-literal">nil</span><br>&#125;<br>cur = cur.Next.Next<br>&#125;<br>  <br>cur = head<br>newNode, next := head.Next, head.Next<br><span class="hljs-keyword">for</span> cur != <span class="hljs-literal">nil</span> &amp;&amp; cur.Next != <span class="hljs-literal">nil</span> &#123;<br>cur.Next = cur.Next.Next<br><span class="hljs-keyword">if</span> next.Next != <span class="hljs-literal">nil</span> &#123;<br>next.Next = next.Next.Next<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>next.Next = <span class="hljs-literal">nil</span><br>&#125;<br>cur = cur.Next<br>next = next.Next<br>&#125;<br><span class="hljs-keyword">return</span> newNode<br>&#125;<br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 138-复制带随机指针的链表</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2021-03-06 20:33:56</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:  给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</span><br><span class="hljs-string">          构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random</span><br><span class="hljs-string">         指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</span><br><span class="hljs-string">          例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random--&gt; y 。</span><br><span class="hljs-string">          返回复制链表的头节点。</span><br><span class="hljs-string">          用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：</span><br><span class="hljs-string">          val：一个表示 Node.val 的整数。</span><br><span class="hljs-string">          random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为 null 。</span><br><span class="hljs-string">          你的代码 只 接受原链表的头节点 head 作为传入参数。</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 1：</span><br><span class="hljs-string">         输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="hljs-string">         输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 2：</span><br><span class="hljs-string">         输入：head = [[1,1],[2,1]]</span><br><span class="hljs-string">         输出：[[1,1],[2,1]]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 3：</span><br><span class="hljs-string">         输入：head = [[3,null],[3,0],[3,null]]</span><br><span class="hljs-string">         输出：[[3,null],[3,0],[3,null]]</span><br><span class="hljs-string"></span><br><span class="hljs-string">          示例 4：</span><br><span class="hljs-string"></span><br><span class="hljs-string">         输入：head = []</span><br><span class="hljs-string">         输出：[]</span><br><span class="hljs-string">         解释：给定的链表为空（空指针），因此返回 null。</span><br><span class="hljs-string"></span><br><span class="hljs-string">          提示：</span><br><span class="hljs-string">          0 &lt;= n &lt;= 1000</span><br><span class="hljs-string">          -10000 &lt;= Node.val &lt;= 10000</span><br><span class="hljs-string">          Node.random 为空（null）或指向链表中的节点。</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Related Topics 哈希表 链表</span><br><span class="hljs-string">          👍 519 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># Definition for a Node.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># class Node:</span><br><span class="hljs-comment">#     def __init__(self, x: int, next: &#x27;Node&#x27; = None, random: &#x27;Node&#x27; = None):</span><br><span class="hljs-comment">#         self.val = int(x)</span><br><span class="hljs-comment">#         self.next = next</span><br><span class="hljs-comment">#         self.random = random</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            n = Node(x=cur.val, <span class="hljs-built_in">next</span>=cur.<span class="hljs-built_in">next</span>)<br>            cur.<span class="hljs-built_in">next</span> = n<br>            cur = n.<span class="hljs-built_in">next</span><br><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">and</span> cur.<span class="hljs-built_in">next</span>:<br>            cur.<span class="hljs-built_in">next</span>.random = cur.random.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur.random <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            cur = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br><br>        cur = head<br>        new_node = nex = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">and</span> nex:<br>            cur.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            nex.<span class="hljs-built_in">next</span> = nex.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> nex.<span class="hljs-built_in">next</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>            nex = nex.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-keyword">return</span> new_node<br>        <br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br></code></pre></td></tr></table></figure><h4 id="线程池与任务队列">线程池与任务队列</h4><h5 id="简单队列设计">简单队列设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> array<br><br><span class="hljs-keyword">type</span> Queue []<span class="hljs-keyword">interface</span> &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">push</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<br>  <span class="hljs-comment">// 入队</span><br>*q = <span class="hljs-built_in">append</span>(*q, v)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>  <span class="hljs-comment">// 出队</span><br><span class="hljs-keyword">if</span> q.isEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br>head := (*q)[<span class="hljs-number">0</span>]<br>*q = (*q)[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> head, <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br>  <span class="hljs-comment">// 队列判空</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="设计循环队列"><a href="https://leetcode-cn.com/problems/design-circular-queue/">622. 设计循环队列</a></h6><p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</p><p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p><p><code>(tail-front)</code></p><p>你的实现应该支持如下操作：</p><ul><li>MyCircularQueue(k): 构造器，设置队列长度为 k 。</li><li>Front: 从队首获取元素。如果队列为空，返回 -1 。</li><li>Rear: 获取队尾元素。如果队列为空，返回 -1 。</li><li>enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。 deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。 isEmpty(): 检查循环队列是否为空。 isFull(): 检查循环队列是否已满。</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">基于数组实现<br>基于链表实现<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DesignCircularQueue</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> DesignCircularQueue().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircularQueue</span> </span>&#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] queue;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> capacity, front, rear, count;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCircularQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k];<br>            capacity = k;<br>            count = <span class="hljs-number">0</span>;<br>            front = <span class="hljs-number">0</span>;<br>            rear = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            queue[rear++] = value;<br>            rear %= capacity;<br>            count++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deQueue</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            front = (front + <span class="hljs-number">1</span>) % capacity;<br>            count--;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Front</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> queue[front];<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Rear</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> queue[(rear-<span class="hljs-number">1</span>+capacity)%capacity];<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> count == capacity;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">type</span> MyCircularQueue <span class="hljs-keyword">struct</span> &#123;<br>queue []<span class="hljs-keyword">int</span><br>capacity <span class="hljs-keyword">int</span><br>count <span class="hljs-keyword">int</span><br>front <span class="hljs-keyword">int</span><br>rear <span class="hljs-keyword">int</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">MyCircularQueue</span></span> &#123;<br><span class="hljs-keyword">return</span> MyCircularQueue&#123;<br>queue:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, k),<br>capacity:k,<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularQueue)</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>this.queue[this.rear] = value<br>this.rear = (this.rear + <span class="hljs-number">1</span>) % this.capacity<br>this.count++<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularQueue)</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty()&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>this.front = (this.front + <span class="hljs-number">1</span>) % this.capacity<br>this.count--<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularQueue)</span> <span class="hljs-title">Front</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;<br><span class="hljs-keyword">return</span> this.queue[this.front]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularQueue)</span> <span class="hljs-title">Rear</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;<br><span class="hljs-keyword">return</span> this.queue[(this.rear - <span class="hljs-number">1</span> + this.capacity)%this.capacity]<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularQueue)</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.count == <span class="hljs-number">0</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularQueue)</span> <span class="hljs-title">IsFull</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.count == this.capacity<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 622-设计循环队列</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。</span><br><span class="hljs-string">        #  循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  你的实现应该支持如下操作：</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  MyCircularQueue(k): 构造器，设置队列长度为 k 。</span><br><span class="hljs-string">        #  Front: 从队首获取元素。如果队列为空，返回 -1 。</span><br><span class="hljs-string">        #  Rear: 获取队尾元素。如果队列为空，返回 -1 。</span><br><span class="hljs-string">        #  enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。</span><br><span class="hljs-string">        #  deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。</span><br><span class="hljs-string">        #  isEmpty(): 检查循环队列是否为空。</span><br><span class="hljs-string">        #  isFull(): 检查循环队列是否已满。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例：</span><br><span class="hljs-string">        #  MyCircularQueue circularQueue = new MyCircularQueue(3); // 设置长度为 3</span><br><span class="hljs-string">        # circularQueue.enQueue(1);  // 返回 true</span><br><span class="hljs-string">        # circularQueue.enQueue(2);  // 返回 true</span><br><span class="hljs-string">        # circularQueue.enQueue(3);  // 返回 true</span><br><span class="hljs-string">        # circularQueue.enQueue(4);  // 返回 false，队列已满</span><br><span class="hljs-string">        # circularQueue.Rear();  // 返回 3</span><br><span class="hljs-string">        # circularQueue.isFull();  // 返回 true</span><br><span class="hljs-string">        # circularQueue.deQueue();  // 返回 true</span><br><span class="hljs-string">        # circularQueue.enQueue(4);  // 返回 true</span><br><span class="hljs-string">        # circularQueue.Rear();  // 返回 4</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  所有的值都在 0 至 1000 的范围内；</span><br><span class="hljs-string">        #  操作数将在 1 至 1000 的范围内；</span><br><span class="hljs-string">        #  请不要使用内置的队列库。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 设计 队列</span><br><span class="hljs-string">        #  👍 180 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircularQueue</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, k: <span class="hljs-built_in">int</span></span>):</span><br>        self.queue = []<br>        self.capacity = k<br>        self.count = <span class="hljs-number">0</span><br>        self.front = <span class="hljs-number">0</span><br>        self.rear = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, k):<br>            self.queue.append(-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enQueue</span>(<span class="hljs-params">self, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> self.isFull():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        self.queue[self.rear] = value<br>        self.rear = (self.rear + <span class="hljs-number">1</span>) % self.capacity<br>        self.count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deQueue</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        self.front = (self.front + <span class="hljs-number">1</span>) % self.capacity<br>        self.count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Front</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.isEmpty() <span class="hljs-keyword">else</span> self.queue[self.front]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rear</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.isEmpty() <span class="hljs-keyword">else</span> self.queue[(self.rear - <span class="hljs-number">1</span> + self.capacity) % self.capacity]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEmpty</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">return</span> self.count == <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isFull</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">return</span> self.count == self.capacity<br><br><span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><strong>链表方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 链表方式实现</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>     <span class="hljs-keyword">int</span> val;<br>     Node next;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>         <span class="hljs-keyword">this</span>.val = val;<br>     &#125;<br> &#125;<br><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularQueue</span> </span>&#123;<br>     <span class="hljs-keyword">private</span> Node head, tail;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count, capacity;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircularQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>         capacity = k;<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>         Node node = <span class="hljs-keyword">new</span> Node(value);<br>         <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>             head = node;<br>             tail = node;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>             tail.next = node;<br>             tail = tail.next;<br>         &#125;<br>         count++;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deQueue</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>         head = head.next;<br>         <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) tail = head;<br>         count--;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Front</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> head.val;<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Rear</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> tail.val;<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> count == capacity;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> ListNode <span class="hljs-keyword">struct</span> &#123;<br>Val  <span class="hljs-keyword">int</span><br>Next *ListNode<br>&#125;<br><br><span class="hljs-keyword">type</span> CircularQueue <span class="hljs-keyword">struct</span> &#123;<br>capacity <span class="hljs-keyword">int</span><br>count    <span class="hljs-keyword">int</span><br>head     *ListNode<br>tail     *ListNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCircularQueue</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">CircularQueue</span></span> &#123;<br><span class="hljs-keyword">return</span> CircularQueue&#123;<br>capacity:k,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *CircularQueue)</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>node := ListNode&#123;Val: value&#125;<br><span class="hljs-keyword">if</span> this.count == <span class="hljs-number">0</span> &#123;<br>this.head = &amp;node<br>this.tail = &amp;node<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>this.tail.Next = &amp;node<br>this.tail = this.tail.Next<br>&#125;<br>this.count++<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *CircularQueue)</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty()&#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>this.head = this.head.Next<br><span class="hljs-keyword">if</span> this.count == <span class="hljs-number">1</span> &#123;<br>this.tail = this.head<br>&#125;<br>this.count--<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *CircularQueue)</span> <span class="hljs-title">Front</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;<br><span class="hljs-keyword">return</span> this.head.Val<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *CircularQueue)</span> <span class="hljs-title">Rear</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;<br><span class="hljs-keyword">return</span> this.tail.Val<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *CircularQueue)</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.count == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *CircularQueue)</span> <span class="hljs-title">IsFull</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.count == this.capacity<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, value: <span class="hljs-built_in">int</span></span>):</span><br>        self.val = value<br>        self.next_node = <span class="hljs-literal">None</span><br>        <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularQueue</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, k: <span class="hljs-built_in">int</span></span>):</span><br>        self.capacity = k<br>        self.count = <span class="hljs-number">0</span><br>        self.head = <span class="hljs-literal">None</span><br>        self.tail = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enQueue</span>(<span class="hljs-params">self, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> self.isFull():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        node = Node(value)<br>        <span class="hljs-keyword">if</span> self.count == <span class="hljs-number">0</span>:<br>            self.head = self.tail = node<br>        <span class="hljs-keyword">else</span>:<br>            self.tail.next_node = node<br>            self.tail = self.tail.next_node<br>        self.count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deQueue</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        self.head = self.head.next_node<br>        <span class="hljs-keyword">if</span> self.count == <span class="hljs-number">1</span>:<br>            self.tail = self.head<br>        self.count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Front</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.isEmpty() <span class="hljs-keyword">else</span> self.head.val<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rear</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.isEmpty() <span class="hljs-keyword">else</span> self.tail.val<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEmpty</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">return</span> self.count == <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isFull</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">return</span> self.count == self.capacity<br></code></pre></td></tr></table></figure><h6 id="设计循环双端队列"><a href="https://leetcode-cn.com/problems/design-circular-deque/">641. 设计循环双端队列</a></h6><p>设计实现双端队列。 你的实现需要支持以下操作：</p><ul><li><code>MyCircularDeque(k)</code>：构造函数,双端队列的大小为k。</li><li><code>insertFront()</code>：将一个元素添加到双端队列头部。 如果操作成功返回 true。</li><li><code>insertLast()</code>：将一个元素添加到双端队列尾部。如果操作成功返回 true。</li><li><code>deleteFront()</code>：从双端队列头部删除一个元素。 如果操作成功返回 true。</li><li><code>deleteLast()</code>：从双端队列尾部删除一个元素。如果操作成功返回 true。</li><li><code>getFront()</code>：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</li><li><code>getRear()</code>：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1。</li><li><code>isEmpty()</code>：检查双端队列是否为空。</li><li><code>isFull()</code>：检查双端队列是否满了。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java">MyCircularDeque circularDeque = <span class="hljs-keyword">new</span> MycircularDeque(<span class="hljs-number">3</span>); <span class="hljs-comment">// 设置容量大小为3</span><br>circularDeque.insertLast(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insertLast(<span class="hljs-number">2</span>);        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insertFront(<span class="hljs-number">3</span>);        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insertFront(<span class="hljs-number">4</span>);        <span class="hljs-comment">// 已经满了，返回 false</span><br>circularDeque.getRear();  <span class="hljs-comment">// 返回 2</span><br>circularDeque.isFull();        <span class="hljs-comment">// 返回 true</span><br>circularDeque.deleteLast();        <span class="hljs-comment">// 返回 true</span><br>circularDeque.insertFront(<span class="hljs-number">4</span>);        <span class="hljs-comment">// 返回 true</span><br>circularDeque.getFront();<span class="hljs-comment">// 返回 4</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>所有值的范围为 [1, 1000]</li><li>操作次数的范围为 [1, 1000]</li><li>请不要使用内置的双端队列库。</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DesignCircularDeque</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        MyCircularDeque s = <span class="hljs-keyword">new</span> DesignCircularDeque().<span class="hljs-function">new <span class="hljs-title">MyCircularDeque</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br>        s.insertLast(<span class="hljs-number">1</span>); <span class="hljs-comment">// return True</span><br>        s.insertLast(<span class="hljs-number">2</span>); <span class="hljs-comment">// return True</span><br>        s.insertLast(<span class="hljs-number">3</span>); <span class="hljs-comment">// return True</span><br>        s.insertLast(<span class="hljs-number">4</span>); <span class="hljs-comment">// return False</span><br>        s.getRear();     <span class="hljs-comment">// return 3</span><br>        s.isFull();   <span class="hljs-comment">// return True</span><br>        s.deleteLast();  <span class="hljs-comment">// return True</span><br>        s.insertFront(<span class="hljs-number">4</span>); <span class="hljs-comment">// return True</span><br>        s.getFront();     <span class="hljs-comment">// return 4</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//Design your implementation of the circular double-ended queue (deque). </span><br>    <span class="hljs-comment">// Your implementation should support following operations:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// MyCircularDeque(k): Constructor, set the size of the deque to be k.</span><br>    <span class="hljs-comment">// insertFront(): Adds an item at the front of Deque. Return true if the operation is successful.</span><br>    <span class="hljs-comment">// insertLast(): Adds an item at the rear of Deque. Return true if the operationis successful.</span><br>    <span class="hljs-comment">// deleteFront(): Deletes an item from the front of Deque. Return true if the operation is successful.</span><br>    <span class="hljs-comment">// deleteLast(): Deletes an item from the rear of Deque. Return true if the operation is successful.</span><br>    <span class="hljs-comment">// getFront(): Gets the front item from the Deque. If the deque is empty, return-1.</span><br>    <span class="hljs-comment">// getRear(): Gets the last item from Deque. If the deque is empty, return -1.</span><br>    <span class="hljs-comment">// isEmpty(): Checks whether Deque is empty or not.</span><br>    <span class="hljs-comment">// isFull(): Checks whether Deque is full or not.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example:</span><br>    <span class="hljs-comment">//MyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be</span><br>    <span class="hljs-comment">//3</span><br>    <span class="hljs-comment">//circularDeque.insertLast(1);// return true</span><br>    <span class="hljs-comment">//circularDeque.insertLast(2);// return true</span><br>    <span class="hljs-comment">//circularDeque.insertFront(3);// return true</span><br>    <span class="hljs-comment">//circularDeque.insertFront(4);// return false, the queue is full</span><br>    <span class="hljs-comment">//circularDeque.getRear();  // return 2</span><br>    <span class="hljs-comment">//circularDeque.isFull();// return true</span><br>    <span class="hljs-comment">//circularDeque.deleteLast();// return true</span><br>    <span class="hljs-comment">//circularDeque.insertFront(4);// return true</span><br>    <span class="hljs-comment">//circularDeque.getFront();// return 4</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Note:</span><br>    <span class="hljs-comment">// All values will be in the range of [0, 1000].</span><br>    <span class="hljs-comment">// The number of operations will be in the range of [1, 1000].</span><br>    <span class="hljs-comment">// Please do not use the built-in Deque library.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 设计 队列</span><br>    <span class="hljs-comment">// 👍 77 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircularDeque</span> </span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] queue;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> capacity, front, rear, count;<br><br>        <span class="hljs-comment">/** Initialize your data structure here. Set the size of the deque to be k. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyCircularDeque</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>            queue = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k];<br>            capacity = k;<br>            count = <span class="hljs-number">0</span>;<br>            front = <span class="hljs-number">0</span>;<br>            rear = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** Adds an item at the front of Deque. Return true if the operation is successful. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">insertFront</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            front = (front -<span class="hljs-number">1</span> + capacity) % capacity;<br>            queue[front] = value;<br>            count++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** Adds an item at the rear of Deque. Return true if the operation is successful. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">insertLast</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isFull()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            queue[rear++] = value;<br>            rear %= capacity;<br>            count++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** Deletes an item from the front of Deque. Return true if the operation is successful. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteFront</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            front = (front + <span class="hljs-number">1</span>) % capacity;<br>            count--;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** Deletes an item from the rear of Deque. Return true if the operation is successful. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteLast</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            rear = (rear -<span class="hljs-number">1</span> + capacity) % capacity;<br>            count--;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** Get the front item from the deque. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFront</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> queue[front];<br>        &#125;<br><br>        <span class="hljs-comment">/** Get the last item from the deque. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRear</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> queue[(rear-<span class="hljs-number">1</span>+capacity)%capacity];<br>        &#125;<br><br>        <span class="hljs-comment">/** Checks whether the circular deque is empty or not. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/** Checks whether the circular deque is full or not. */</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> count == capacity;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Your MyCircularDeque object will be instantiated and called as such:</span><br><span class="hljs-comment">     * MyCircularDeque obj = new MyCircularDeque(k);</span><br><span class="hljs-comment">     * boolean param_1 = obj.insertFront(value);</span><br><span class="hljs-comment">     * boolean param_2 = obj.insertLast(value);</span><br><span class="hljs-comment">     * boolean param_3 = obj.deleteFront();</span><br><span class="hljs-comment">     * boolean param_4 = obj.deleteLast();</span><br><span class="hljs-comment">     * int param_5 = obj.getFront();</span><br><span class="hljs-comment">     * int param_6 = obj.getRear();</span><br><span class="hljs-comment">     * boolean param_7 = obj.isEmpty();</span><br><span class="hljs-comment">     * boolean param_8 = obj.isFull();</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">type</span> MyCircularDeque <span class="hljs-keyword">struct</span> &#123;<br>queue []<span class="hljs-keyword">int</span><br>front <span class="hljs-keyword">int</span><br>rear <span class="hljs-keyword">int</span><br>capacity <span class="hljs-keyword">int</span><br>count <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-comment">/** Initialize your data structure here. Set the size of the deque to be k. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">(k <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">MyCircularDeque</span></span> &#123;<br><span class="hljs-keyword">return</span> MyCircularDeque&#123;<br>queue:    <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, k),<br>capacity: k,<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/** Adds an item at the front of Deque. Return true if the operation is successful. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">InsertFront</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.front = (this.front - <span class="hljs-number">1</span> + this.capacity) % this.capacity<br>this.queue[this.front] = value<br>this.count += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">/** Adds an item at the rear of Deque. Return true if the operation is successful. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">InsertLast</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsFull() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.queue[this.rear] = value<br>this.rear = (this.rear +<span class="hljs-number">1</span>) % this.capacity<br>this.count += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">/** Deletes an item from the front of Deque. Return true if the operation is successful. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">DeleteFront</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.front = (this.front +<span class="hljs-number">1</span>) % this.capacity<br>this.count -= <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">/** Deletes an item from the rear of Deque. Return true if the operation is successful. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">DeleteLast</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>this.rear = (this.rear - <span class="hljs-number">1</span> + this.capacity) % this.capacity<br>this.count -= <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">/** Get the front item from the deque. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">GetFront</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> this.queue[this.front]<br>&#125;<br><br><span class="hljs-comment">/** Get the last item from the deque. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">GetRear</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> this.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> this.queue[(this.rear<span class="hljs-number">-1</span>+this.capacity)%this.capacity]<br>&#125;<br><br><span class="hljs-comment">/** Checks whether the circular deque is empty or not. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.count == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">/** Checks whether the circular deque is full or not. */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyCircularDeque)</span> <span class="hljs-title">IsFull</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.count == this.capacity<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 641-设计循环双端队列</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 设计实现双端队列。 </span><br><span class="hljs-string">        # 你的实现需要支持以下操作：</span><br><span class="hljs-string">        #  MyCircularDeque(k)：构造函数,双端队列的大小为k。</span><br><span class="hljs-string">        #  insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。</span><br><span class="hljs-string">        #  insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。</span><br><span class="hljs-string">        #  deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。</span><br><span class="hljs-string">        #  deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。</span><br><span class="hljs-string">        #  getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</span><br><span class="hljs-string">        #  getRear()：获得双端队列的最后一个元素。 如果双端队列为空，返回 -1。</span><br><span class="hljs-string">        #  isEmpty()：检查双端队列是否为空。</span><br><span class="hljs-string">        #  isFull()：检查双端队列是否满了。</span><br><span class="hljs-string">        #  示例：</span><br><span class="hljs-string">        #  MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3</span><br><span class="hljs-string">        # circularDeque.insertLast(1);        // 返回 true</span><br><span class="hljs-string">        # circularDeque.insertLast(2);        // 返回 true</span><br><span class="hljs-string">        # circularDeque.insertFront(3);        // 返回 true</span><br><span class="hljs-string">        # circularDeque.insertFront(4);        // 已经满了，返回 false</span><br><span class="hljs-string">        # circularDeque.getRear();          // 返回 2</span><br><span class="hljs-string">        # circularDeque.isFull();            // 返回 true</span><br><span class="hljs-string">        # circularDeque.deleteLast();          // 返回 true</span><br><span class="hljs-string">        # circularDeque.insertFront(4);        // 返回 true</span><br><span class="hljs-string">        # circularDeque.getFront();          // 返回 4</span><br><span class="hljs-string">        #  </span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  所有值的范围为 [1, 1000]</span><br><span class="hljs-string">        #  操作次数的范围为 [1, 1000]</span><br><span class="hljs-string">        #  请不要使用内置的双端队列库。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 设计 队列</span><br><span class="hljs-string">        #  👍 77 👎 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircularDeque</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, k: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize your data structure here. Set the size of the deque to be k.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.queue = []<br>        self.capacity = k<br>        self.count = <span class="hljs-number">0</span><br>        self.front = <span class="hljs-number">0</span><br>        self.rear = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, k):<br>            self.queue.append(-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertFront</span>(<span class="hljs-params">self, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Adds an item at the front of Deque. Return true if the operation is successful.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.isFull():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        self.front = (self.front - <span class="hljs-number">1</span> + self.capacity) % self.capacity<br>        self.queue[self.front] = value<br>        self.count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertLast</span>(<span class="hljs-params">self, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Adds an item at the rear of Deque. Return true if the operation is successful.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.isFull():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        self.queue[self.rear] = value<br>        self.rear = (self.rear + <span class="hljs-number">1</span>) % self.capacity<br>        self.count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteFront</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Deletes an item from the front of Deque. Return true if the operation is successful.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        self.front = (self.front + <span class="hljs-number">1</span>) % self.capacity<br>        self.count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteLast</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Deletes an item from the rear of Deque. Return true if the operation is successful.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        self.rear = (self.rear - <span class="hljs-number">1</span> + self.capacity) % self.capacity<br>        self.count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getFront</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get the front item from the deque.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.isEmpty() <span class="hljs-keyword">else</span> self.queue[self.front]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getRear</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get the last item from the deque.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.isEmpty() <span class="hljs-keyword">else</span> self.queue[(self.rear - <span class="hljs-number">1</span> + self.capacity) % self.capacity]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEmpty</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Checks whether the circular deque is empty or not.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.count == <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isFull</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Checks whether the circular deque is full or not.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.count == self.capacity<br><br>    <span class="hljs-comment"># Your MyCircularDeque object will be instantiated and called as such:</span><br>    <span class="hljs-comment"># obj = MyCircularDeque(k)</span><br>    <span class="hljs-comment"># param_1 = obj.insertFront(value)</span><br>    <span class="hljs-comment"># param_2 = obj.insertLast(value)</span><br>    <span class="hljs-comment"># param_3 = obj.deleteFront()</span><br>    <span class="hljs-comment"># param_4 = obj.deleteLast()</span><br>    <span class="hljs-comment"># param_5 = obj.getFront()</span><br>    <span class="hljs-comment"># param_6 = obj.getRear()</span><br>    <span class="hljs-comment"># param_7 = obj.isEmpty()</span><br>    <span class="hljs-comment"># param_8 = obj.isFull()</span><br>    <span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h6 id="设计前中后队列"><a href="https://leetcode-cn.com/problems/design-front-middle-back-queue/">1670. 设计前中后队列</a></h6><p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code> 和 <code>pop</code> 操作。</p><p>请你完成 <code>FrontMiddleBack</code> 类：</p><ul><li><code>FrontMiddleBack()</code> 初始化队列。</li><li><code>void pushFront(int val)</code>将<code>val</code>添加到队列的<strong>最前面</strong>。</li><li><code>void pushMiddle(int val)</code>将<code>val</code>添加到队列的<strong>正中间</strong>。</li><li><code>void pushBack(int val)</code>将<code>val</code>添加到队里的<strong>最后面</strong>。</li><li><code>int popFront()</code>将<strong>最前面</strong>的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li><li><code>int popMiddle()</code>将<strong>正中间</strong>的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li><li><code>int popBack()</code>将<strong>最后面</strong>的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</li></ul><p>请注意当有<strong>两个</strong>中间位置的时候，选择靠前面的位置进行操作。比方说：</p><p>将 6 添加到 <code>[1, 2, 3, 4, 5]</code>的中间位置，结果数组为<code>[1, 2, 6, 3, 4, 5]</code>。 从 <code>[1, 2, 3, 4, 5, 6]</code>的中间位置弹出元素，返回<code>3</code>，数组变为<code>[1, 2, 4, 5, 6]</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java">输入：<br>[<span class="hljs-string">&quot;FrontMiddleBackQueue&quot;</span>, <span class="hljs-string">&quot;pushFront&quot;</span>, <span class="hljs-string">&quot;pushBack&quot;</span>, <span class="hljs-string">&quot;pushMiddle&quot;</span>, <span class="hljs-string">&quot;pushMiddle&quot;</span>, <span class="hljs-string">&quot;popFront&quot;</span>, <span class="hljs-string">&quot;popMiddle&quot;</span>, <span class="hljs-string">&quot;popMiddle&quot;</span>, <span class="hljs-string">&quot;popBack&quot;</span>, <span class="hljs-string">&quot;popFront&quot;</span>]<br>[[], [<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>], [], [], [], [], []]<br>输出：<br>[<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>]<br><br>解释：<br>FrontMiddleBackQueue q = <span class="hljs-keyword">new</span> FrontMiddleBackQueue();<br>q.pushFront(<span class="hljs-number">1</span>);   <span class="hljs-comment">// [1]</span><br>q.pushBack(<span class="hljs-number">2</span>);    <span class="hljs-comment">// [1, 2]</span><br>q.pushMiddle(<span class="hljs-number">3</span>);  <span class="hljs-comment">// [1, 3, 2]</span><br>q.pushMiddle(<span class="hljs-number">4</span>);  <span class="hljs-comment">// [1, 4, 3, 2]</span><br>q.popFront();     <span class="hljs-comment">// 返回 1 -&gt; [4, 3, 2]</span><br>q.popMiddle();    <span class="hljs-comment">// 返回 3 -&gt; [4, 2]</span><br>q.popMiddle();    <span class="hljs-comment">// 返回 4 -&gt; [2]</span><br>q.popBack();      <span class="hljs-comment">// 返回 2 -&gt; []</span><br>q.popFront();     <span class="hljs-comment">// 返回 -1 -&gt; [] （队列为空）</span><br><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= val &lt;= 109</code></li><li>最多调用 1000 次 <code>pushFront</code>， <code>pushMiddle</code>， <code>pushBack</code>， <code>popFront</code>， <code>popMiddle</code> 和 <code>popBack</code>。</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">两个双端队列<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DesignFrontMiddleBackQueue</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        FrontMiddleBackQueue s = <span class="hljs-keyword">new</span> DesignFrontMiddleBackQueue().<span class="hljs-function">new <span class="hljs-title">FrontMiddleBackQueue</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Design a queue that supports push and pop operations in the front, middle, and back.</span><br>    <span class="hljs-comment">// Implement the FrontMiddleBack class:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// FrontMiddleBack() Initializes the queue.</span><br>    <span class="hljs-comment">// void pushFront(int val) Adds val to the front of the queue.</span><br>    <span class="hljs-comment">// void pushMiddle(int val) Adds val to the middle of the queue.</span><br>    <span class="hljs-comment">// void pushBack(int val) Adds val to the back of the queue.</span><br>    <span class="hljs-comment">// int popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1.</span><br>    <span class="hljs-comment">// int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1.</span><br>    <span class="hljs-comment">// int popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].</span><br>    <span class="hljs-comment">// Popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//Input:</span><br>    <span class="hljs-comment">//[&quot;FrontMiddleBackQueue&quot;, &quot;pushFront&quot;, &quot;pushBack&quot;, &quot;pushMiddle&quot;, &quot;pushMiddle&quot;,</span><br>    <span class="hljs-comment">//&quot;popFront&quot;, &quot;popMiddle&quot;, &quot;popMiddle&quot;, &quot;popBack&quot;, &quot;popFront&quot;]</span><br>    <span class="hljs-comment">//[[], [1], [2], [3], [4], [], [], [], [], []]</span><br>    <span class="hljs-comment">//Output:</span><br>    <span class="hljs-comment">//[null, null, null, null, null, 1, 3, 4, 2, -1]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//Explanation:</span><br>    <span class="hljs-comment">//FrontMiddleBackQueue q = new FrontMiddleBackQueue();</span><br>    <span class="hljs-comment">//q.pushFront(1);   // [1]</span><br>    <span class="hljs-comment">//q.pushBack(2);    // [1, 2]</span><br>    <span class="hljs-comment">//q.pushMiddle(3);  // [1, 3, 2]</span><br>    <span class="hljs-comment">//q.pushMiddle(4);  // [1, 4, 3, 2]</span><br>    <span class="hljs-comment">//q.popFront();     // return 1 -&gt; [4, 3, 2]</span><br>    <span class="hljs-comment">//q.popMiddle();    // return 3 -&gt; [4, 2]</span><br>    <span class="hljs-comment">//q.popMiddle();    // return 4 -&gt; [2]</span><br>    <span class="hljs-comment">//q.popBack();      // return 2 -&gt; []</span><br>    <span class="hljs-comment">//q.popFront();     // return -1 -&gt; [] (The queue is empty)</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// 1 &lt;= val &lt;= 109</span><br>    <span class="hljs-comment">// At most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront,</span><br>    <span class="hljs-comment">// popMiddle, and popBack.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 设计 链表</span><br>    <span class="hljs-comment">// 👍 6 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrontMiddleBackQueue</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Deque&lt;Integer&gt; left;<br>        <span class="hljs-keyword">private</span> Deque&lt;Integer&gt; right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FrontMiddleBackQueue</span><span class="hljs-params">()</span> </span>&#123;<br>            left = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>            right = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushFront</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            left.addFirst(val);<br>            balanceQueue();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushMiddle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (left.size() &gt; right.size()) &#123;<br>                right.addFirst(left.pollLast());<br>            &#125;<br>            left.addLast(val);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pushBack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            right.addLast(val);<br>            balanceQueue();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">popFront</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (left.size() + right.size() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            Integer v;<br>            <span class="hljs-keyword">if</span> (left.size() == <span class="hljs-number">0</span>) &#123;<br>                v = right.pollFirst();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                v= left.pollFirst();<br>            &#125;<br>            balanceQueue();<br>            <span class="hljs-keyword">return</span> v == <span class="hljs-keyword">null</span> ? -<span class="hljs-number">1</span>: v;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">popMiddle</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (left.size() + right.size() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            Integer v = left.pollLast();<br>            balanceQueue();<br>            <span class="hljs-keyword">return</span> v == <span class="hljs-keyword">null</span> ? -<span class="hljs-number">1</span>: v;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">popBack</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (left.size() + right.size() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            Integer v;<br>            <span class="hljs-keyword">if</span> (right.size() == <span class="hljs-number">0</span>) &#123;<br>                v = left.pollLast();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                v = right.pollLast();<br>            &#125;<br>            balanceQueue();<br>            <span class="hljs-keyword">return</span> v == <span class="hljs-keyword">null</span> ? -<span class="hljs-number">1</span>: v;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">balanceQueue</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (left.size() - right.size() &gt;=<span class="hljs-number">2</span>) &#123;<br>                right.addFirst(left.pollLast());<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left.size() &lt; right.size()) &#123;<br>                left.addLast(right.pollFirst());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Your FrontMiddleBackQueue object will be instantiated and called as such:</span><br><span class="hljs-comment">     * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();</span><br><span class="hljs-comment">     * obj.pushFront(val);</span><br><span class="hljs-comment">     * obj.pushMiddle(val);</span><br><span class="hljs-comment">     * obj.pushBack(val);</span><br><span class="hljs-comment">     * int param_4 = obj.popFront();</span><br><span class="hljs-comment">     * int param_5 = obj.popMiddle();</span><br><span class="hljs-comment">     * int param_6 = obj.popBack();</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">package</span> leetcode<br><br><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br><br><span class="hljs-comment">// 双向链表分装</span><br><span class="hljs-keyword">type</span> DNode <span class="hljs-keyword">struct</span> &#123;<br>val <span class="hljs-keyword">int</span><br>pre *DNode<br>next *DNode<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *DNode)</span> <span class="hljs-title">insertPre</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;<br>node := &amp;DNode&#123;<br>val: value,<br>pre:d.pre,<br>next: d,<br>&#125;<br><span class="hljs-keyword">if</span> d.pre != <span class="hljs-literal">nil</span> &#123;<br>d.pre.next = node<br>&#125;<br>d.pre = node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *DNode)</span> <span class="hljs-title">insertNext</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;<br>node := &amp;DNode&#123;<br>val:  value,<br>pre:  d,<br>next: d.next,<br>&#125;<br><span class="hljs-keyword">if</span> d.next != <span class="hljs-literal">nil</span> &#123;<br>d.next.pre = node<br>&#125;<br>d.next = node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *DNode)</span> <span class="hljs-title">deletePre</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> d.pre == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>d.pre = d.pre.pre<br><span class="hljs-keyword">if</span> d.pre != <span class="hljs-literal">nil</span> &#123;<br>d.pre.next = d<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *DNode)</span> <span class="hljs-title">deleteNext</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">if</span> d.next == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>d.next = d.next.next<br><span class="hljs-keyword">if</span> d.next != <span class="hljs-literal">nil</span> &#123;<br>d.next.pre = d<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *DNode)</span> <span class="hljs-title">printNode</span><span class="hljs-params">()</span></span>  &#123;<br>h := d<br><span class="hljs-keyword">for</span> h != <span class="hljs-literal">nil</span> &#123;<br>fmt.Print(h.val, <span class="hljs-string">&quot;-&gt;&quot;</span>)<br>h = h.next<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> CircularDeque <span class="hljs-keyword">struct</span> &#123;<br>front *DNode<br>rear *DNode<br>count <span class="hljs-keyword">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCircularDeque</span><span class="hljs-params">()</span> <span class="hljs-title">CircularDeque</span></span> &#123;<br><span class="hljs-keyword">return</span> CircularDeque&#123;<br>front:<span class="hljs-literal">nil</span>,<br>rear:<span class="hljs-literal">nil</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *CircularDeque)</span><span class="hljs-title">pushPre</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> c.count == <span class="hljs-number">0</span> &#123;<br>node := &amp;DNode&#123;<br>val:  value,<br>&#125;<br>c.front = node<br>c.rear = node<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.front.insertPre(value)<br>c.front = c.front.pre<br>&#125;<br>c.count += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *CircularDeque)</span><span class="hljs-title">pushTail</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">if</span> c.count == <span class="hljs-number">0</span> &#123;<br>node := &amp;DNode&#123;<br>val:  value,<br>&#125;<br>c.front = node<br>c.rear = node<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.rear.insertNext(value)<br>c.rear = c.rear.next<br>&#125;<br>c.count += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *CircularDeque)</span><span class="hljs-title">popFront</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> c.isEmpty() &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;<br>v := c.front.val<br><span class="hljs-keyword">if</span> c.count == <span class="hljs-number">1</span> &#123;<br>c.front = <span class="hljs-literal">nil</span><br>c.rear = <span class="hljs-literal">nil</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>c.front = c.front.next<br>c.front.deletePre()<br>&#125;<br>c.count -= <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *CircularDeque)</span><span class="hljs-title">popTail</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> c.isEmpty() &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>&#125;<br>v := c.rear.val<br><span class="hljs-keyword">if</span> c.count == <span class="hljs-number">1</span> &#123;<br>c.front = <span class="hljs-literal">nil</span><br>c.rear = <span class="hljs-literal">nil</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>c.rear = c.rear.pre<br>c.rear.deleteNext()<br>&#125;<br>c.count -= <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *CircularDeque)</span><span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> c.count == <span class="hljs-number">0</span><br>&#125;<br><br><br><span class="hljs-keyword">type</span> FrontMiddleBackQueue <span class="hljs-keyword">struct</span> &#123;<br>lQueue CircularDeque<br>rQueue CircularDeque<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">FrontMiddleBackQueue</span></span> &#123;<br><span class="hljs-keyword">return</span> FrontMiddleBackQueue&#123;<br>lQueue: NewCircularDeque(),<br>rQueue: NewCircularDeque(),<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">PushFront</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>this.lQueue.pushPre(val)<br>this.formatQueue()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">PushMiddle</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span></span>  &#123;<br><span class="hljs-comment">// 插入中间需要先平衡</span><br>  <span class="hljs-keyword">if</span> this.lQueue.count &gt; this.rQueue.count &#123;<br>this.rQueue.pushPre(this.lQueue.popTail())<br>&#125;<br>this.lQueue.pushTail(val)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">PushBack</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span></span>  &#123;<br>this.rQueue.pushTail(val)<br>this.formatQueue()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">PopFront</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>v := <span class="hljs-number">-1</span><br><span class="hljs-keyword">if</span> this.isEmpty() &#123;<br><span class="hljs-keyword">return</span> v<br>&#125;<br><span class="hljs-keyword">if</span> this.lQueue.count == <span class="hljs-number">0</span> &#123;<br>v = this.rQueue.popFront()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>v = this.lQueue.popFront()<br>&#125;<br>this.formatQueue()<br><br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">PopMiddle</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>v := <span class="hljs-number">-1</span><br><span class="hljs-keyword">if</span> this.isEmpty() &#123;<br><span class="hljs-keyword">return</span> v<br>&#125;<br>v = this.lQueue.popTail()<br>this.formatQueue()<br><br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">PopBack</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>v := <span class="hljs-number">-1</span><br><span class="hljs-keyword">if</span> this.isEmpty() &#123;<br><span class="hljs-keyword">return</span> v<br>&#125;<br><span class="hljs-keyword">if</span> this.rQueue.count == <span class="hljs-number">0</span> &#123;<br>v = this.lQueue.popTail()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>v = this.rQueue.popTail()<br>&#125;<br>this.formatQueue()<br><br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">isEmpty</span> <span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> this.lQueue.count + this.rQueue.count == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *FrontMiddleBackQueue)</span> <span class="hljs-title">formatQueue</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> this.lQueue.count &lt; this.rQueue.count &#123;<br>this.lQueue.pushTail(this.rQueue.popFront())<br>&#125;<br><span class="hljs-keyword">if</span> this.lQueue.count - this.rQueue.count &gt;= <span class="hljs-number">2</span> &#123;<br>this.rQueue.pushPre(this.lQueue.popTail())<br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your FrontMiddleBackQueue object will be instantiated and called as such:</span><br><span class="hljs-comment"> * obj := Constructor();</span><br><span class="hljs-comment"> * obj.PushFront(val);</span><br><span class="hljs-comment"> * obj.PushMiddle(val);</span><br><span class="hljs-comment"> * obj.PushBack(val);</span><br><span class="hljs-comment"> * param_4 := obj.PopFront();</span><br><span class="hljs-comment"> * param_5 := obj.PopMiddle();</span><br><span class="hljs-comment"> * param_6 := obj.PopBack();</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 1670-设计前中后队列</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 请你设计一个队列，支持在前，中，后三个位置的 push 和 pop 操作。 </span><br><span class="hljs-string">        #  请你完成 FrontMiddleBack 类：</span><br><span class="hljs-string">        #  FrontMiddleBack() 初始化队列。</span><br><span class="hljs-string">        #  void pushFront(int val) 将 val 添加到队列的 最前面 。</span><br><span class="hljs-string">        #  void pushMiddle(int val) 将 val 添加到队列的 正中间 。</span><br><span class="hljs-string">        #  void pushBack(int val) 将 val 添加到队里的 最后面 。</span><br><span class="hljs-string">        #  int popFront() 将 最前面 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</span><br><span class="hljs-string">        #  int popMiddle() 将 正中间 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</span><br><span class="hljs-string">        #  int popBack() 将 最后面 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 -1 。</span><br><span class="hljs-string">        #  请注意当有 两个 中间位置的时候，选择靠前面的位置进行操作。比方说：</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  将 6 添加到 [1, 2, 3, 4, 5] 的中间位置，结果数组为 [1, 2, 6, 3, 4, 5] 。</span><br><span class="hljs-string">        #  从 [1, 2, 3, 4, 5, 6] 的中间位置弹出元素，返回 3 ，数组变为 [1, 2, 4, 5, 6] 。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  示例 1：</span><br><span class="hljs-string">        # 输入：</span><br><span class="hljs-string">        # [&quot;FrontMiddleBackQueue&quot;, &quot;pushFront&quot;, &quot;pushBack&quot;, &quot;pushMiddle&quot;, &quot;pushMiddle&quot;,</span><br><span class="hljs-string">        # &quot;popFront&quot;, &quot;popMiddle&quot;, &quot;popMiddle&quot;, &quot;popBack&quot;, &quot;popFront&quot;]</span><br><span class="hljs-string">        # [[], [1], [2], [3], [4], [], [], [], [], []]</span><br><span class="hljs-string">        # 输出：</span><br><span class="hljs-string">        # [null, null, null, null, null, 1, 3, 4, 2, -1]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        # 解释：</span><br><span class="hljs-string">        # FrontMiddleBackQueue q = new FrontMiddleBackQueue();</span><br><span class="hljs-string">        # q.pushFront(1);   // [1]</span><br><span class="hljs-string">        # q.pushBack(2);    // [1, 2]</span><br><span class="hljs-string">        # q.pushMiddle(3);  // [1, 3, 2]</span><br><span class="hljs-string">        # q.pushMiddle(4);  // [1, 4, 3, 2]</span><br><span class="hljs-string">        # q.popFront();     // 返回 1 -&gt; [4, 3, 2]</span><br><span class="hljs-string">        # q.popMiddle();    // 返回 3 -&gt; [4, 2]</span><br><span class="hljs-string">        # q.popMiddle();    // 返回 4 -&gt; [2]</span><br><span class="hljs-string">        # q.popBack();      // 返回 2 -&gt; []</span><br><span class="hljs-string">        # q.popFront();     // 返回 -1 -&gt; [] （队列为空）</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  1 &lt;= val &lt;= 109</span><br><span class="hljs-string">        #  最多调用 1000 次 pushFront， pushMiddle， pushBack， popFront， popMiddle 和 popBack 。</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 设计 链表</span><br><span class="hljs-string">        #  👍 6 👎 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrontMiddleBackQueue</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.left = deque()<br>        self.right = deque()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pushFront</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.left.appendleft(val)<br>        self.balance_queue()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pushMiddle</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.left) &gt; <span class="hljs-built_in">len</span>(self.right):<br>            self.right.appendleft(self.left.pop())<br>        self.left.append(val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pushBack</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.right.append(val)<br>        self.balance_queue()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">popFront</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        v = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.left) + <span class="hljs-built_in">len</span>(self.right) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> v<br>        v = self.left.popleft()<br>        self.balance_queue()<br>        <span class="hljs-keyword">return</span> v<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">popMiddle</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        v = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.left) + <span class="hljs-built_in">len</span>(self.right) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> v<br>        v = self.left.pop()<br>        self.balance_queue()<br>        <span class="hljs-keyword">return</span> v<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">popBack</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        v = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.left) + <span class="hljs-built_in">len</span>(self.right) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> v<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.right) == <span class="hljs-number">0</span>:<br>            v = self.left.pop()<br>        <span class="hljs-keyword">else</span>:<br>            v = self.right.pop()<br>        self.balance_queue()<br>        <span class="hljs-keyword">return</span> v<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">balance_queue</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.left) - <span class="hljs-built_in">len</span>(self.right) &gt;= <span class="hljs-number">2</span>:<br>            self.right.appendleft(self.left.pop())<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.left) &lt; <span class="hljs-built_in">len</span>(self.right):<br>                self.left.append(self.right.popleft())<br><br>    <span class="hljs-comment"># Your FrontMiddleBackQueue object will be instantiated and called as such:</span><br>    <span class="hljs-comment"># obj = FrontMiddleBackQueue()</span><br>    <span class="hljs-comment"># obj.pushFront(val)</span><br>    <span class="hljs-comment"># obj.pushMiddle(val)</span><br>    <span class="hljs-comment"># obj.pushBack(val)</span><br>    <span class="hljs-comment"># param_4 = obj.popFront()</span><br>    <span class="hljs-comment"># param_5 = obj.popMiddle()</span><br>    <span class="hljs-comment"># param_6 = obj.popBack()</span><br>    <span class="hljs-comment"># leetcode submit region end(Prohibit modification and deletion)</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    obj = FrontMiddleBackQueue()<br>    obj.pushFront(<span class="hljs-number">1</span>)<br>    obj.pushMiddle(<span class="hljs-number">2</span>)<br>    obj.pushBack(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(obj.popFront())<br>    <span class="hljs-built_in">print</span>(obj.popMiddle())<br>    <span class="hljs-built_in">print</span>(obj.popBack())<br><br></code></pre></td></tr></table></figure><h6 id="最近的请求次数"><a href="https://leetcode-cn.com/problems/number-of-recent-calls/">933. 最近的请求次数</a></h6><p>写一个 <code>RecentCounter</code>类来计算特定时间范围内最近的请求。</p><p>请你实现<code>RecentCounter</code>类：</p><ul><li><code>RecentCounter()</code>初始化计数器，请求数为 0 。</li><li><code>int ping(int t)</code>在时间<code>t</code>添加一个新请求，其中 <code>t</code> 表示以毫秒为单位的某个时间，并返回过去 <code>3000</code> 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在<code>[t-3000, t]</code>内发生的请求数。 保证 每次对<code>ping</code>的调用都使用比之前更大的<code>t</code>值。</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">输入：<br>[<span class="hljs-string">&quot;RecentCounter&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>, <span class="hljs-string">&quot;ping&quot;</span>]<br>[[], [<span class="hljs-number">1</span>], [<span class="hljs-number">100</span>], [<span class="hljs-number">3001</span>], [<span class="hljs-number">3002</span>]]<br>输出：<br>[<span class="hljs-keyword">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><br>解释：<br>RecentCounter recentCounter = <span class="hljs-keyword">new</span> RecentCounter();<br>recentCounter.ping(<span class="hljs-number">1</span>);     <span class="hljs-comment">// requests = [1]，范围是 [-2999,1]，返回 1</span><br>recentCounter.ping(<span class="hljs-number">100</span>);   <span class="hljs-comment">// requests = [1, 100]，范围是 [-2900,100]，返回 2</span><br>recentCounter.ping(<span class="hljs-number">3001</span>);  <span class="hljs-comment">// requests = [1, 100, 3001]，范围是 [1,3001]，返回 3</span><br>recentCounter.ping(<span class="hljs-number">3002</span>);  <span class="hljs-comment">// requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= t &lt;= 10^9</code></li><li>保证每次对 <code>ping</code> 调用所使用的 <code>t</code> 值都 <strong>严格递增</strong></li><li>至多调用 <code>ping</code> 方法 <code>10^4</code> 次</li></ul><p>解题思路</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">队列实现<br>  入队时，对手请求时间&lt;当前-<span class="hljs-number">3000</span>，出队<br>  队列中的元素数量即是`[t-<span class="hljs-number">3000</span>, t]`内发生的请求数<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.weitrue.leetcode.editor.cn;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumberOfRecentCalls</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Solution s = <span class="hljs-keyword">new</span> NumberOfRecentCalls().<span class="hljs-function">new <span class="hljs-title">Solution</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//You have a RecentCounter class which counts the number of recent requests with in a certain time frame.</span><br>    <span class="hljs-comment">// Implement the RecentCounter class:</span><br>    <span class="hljs-comment">// RecentCounter() Initializes the counter with zero recent requests.</span><br>    <span class="hljs-comment">// int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number</span><br>    <span class="hljs-comment">// of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the</span><br>    <span class="hljs-comment">// number of requests that have happened in the inclusive range [t - 3000, t].</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Example 1:</span><br>    <span class="hljs-comment">//Input</span><br>    <span class="hljs-comment">//[&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]</span><br>    <span class="hljs-comment">//[[], [1], [100], [3001], [3002]]</span><br>    <span class="hljs-comment">//Output</span><br>    <span class="hljs-comment">//[null, 1, 2, 3, 3]</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//Explanation</span><br>    <span class="hljs-comment">//RecentCounter recentCounter = new RecentCounter();</span><br>    <span class="hljs-comment">//recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1</span><br>    <span class="hljs-comment">//recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2</span><br>    <span class="hljs-comment">//recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3</span><br>    <span class="hljs-comment">//recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3</span><br>    <span class="hljs-comment">// Constraints:</span><br>    <span class="hljs-comment">// 1 &lt;= t &lt;= 109</span><br>    <span class="hljs-comment">// Each test case will call ping with strictly increasing values of t.</span><br>    <span class="hljs-comment">// At most 104 calls will be made to ping.</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// Related Topics 队列</span><br>    <span class="hljs-comment">// 👍 82 👎 0</span><br> <br>    <span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecentCounter</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> LinkedList();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RecentCounter</span><span class="hljs-params">()</span> </span>&#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">ping</span><span class="hljs-params">(<span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>            deque.add(t);<br>            <span class="hljs-keyword">while</span> (deque.peek() &lt; t-<span class="hljs-number">3000</span>) &#123;<br>                deque.poll();<br>            &#125;<br>            <span class="hljs-keyword">return</span> deque.size();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Your RecentCounter object will be instantiated and called as such:</span><br><span class="hljs-comment">     * RecentCounter obj = new RecentCounter();</span><br><span class="hljs-comment">     * int param_1 = obj.ping(t);</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><span class="hljs-keyword">type</span> RecentCounter <span class="hljs-keyword">struct</span> &#123;<br>queue Queue<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">()</span> <span class="hljs-title">RecentCounter</span></span> &#123;<br><span class="hljs-keyword">return</span> RecentCounter&#123;<br>queue: <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>),<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *RecentCounter)</span> <span class="hljs-title">Ping</span><span class="hljs-params">(t <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>this.queue.push(t)<br><span class="hljs-keyword">for</span> this.queue.peek() &lt; t<span class="hljs-number">-3000</span> &#123;<br>this.queue.pop()<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(this.queue)<br>&#125;<br><br><span class="hljs-keyword">type</span> Queue []<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">push</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">error</span></span> &#123;<br>*q = <span class="hljs-built_in">append</span>(*q, v)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> q.isEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br>head := (*q)[<span class="hljs-number">0</span>]<br>*q = (*q)[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> head<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">peek</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> q.isEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> (*q)[<span class="hljs-number">0</span>]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 933-最近的请求次数</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">Problem:# 写一个 RecentCounter 类来计算特定时间范围内最近的请求。 </span><br><span class="hljs-string">        #  请你实现 RecentCounter 类：</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  RecentCounter() 初始化计数器，请求数为 0 。</span><br><span class="hljs-string">        #  int ping(int t) 在时间 t 添加一个新请求，其中 t 表示以毫秒为单位的某个时间，并返回过去 3000 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 [t-3000, t] 内发生的请求数。</span><br><span class="hljs-string">        #  保证 每次对 ping 的调用都使用比之前更大的 t 值。</span><br><span class="hljs-string">        #  示例：</span><br><span class="hljs-string">        # 输入：</span><br><span class="hljs-string">        # [&quot;RecentCounter&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;, &quot;ping&quot;]</span><br><span class="hljs-string">        # [[], [1], [100], [3001], [3002]]</span><br><span class="hljs-string">        # 输出：</span><br><span class="hljs-string">        # [null, 1, 2, 3, 3]</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        # 解释：</span><br><span class="hljs-string">        # RecentCounter recentCounter = new RecentCounter();</span><br><span class="hljs-string">        # recentCounter.ping(1);     // requests = [1]，范围是 [-2999,1]，返回 1</span><br><span class="hljs-string">        # recentCounter.ping(100);   // requests = [1, 100]，范围是 [-2900,100]，返回 2</span><br><span class="hljs-string">        # recentCounter.ping(3001);  // requests = [1, 100, 3001]，范围是 [1,3001]，返回 3</span><br><span class="hljs-string">        # recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</span><br><span class="hljs-string">        #  提示：</span><br><span class="hljs-string">        #  1 &lt;= t &lt;= 109</span><br><span class="hljs-string">        #  保证每次对 ping 调用所使用的 t 值都 严格递增</span><br><span class="hljs-string">        #  至多调用 ping 方法 104 次</span><br><span class="hljs-string">        #</span><br><span class="hljs-string">        #  Related Topics 队列</span><br><span class="hljs-string">        #  👍 82 👎 0</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><span class="hljs-comment"># leetcode submit region begin(Prohibit modification and deletion)</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecentCounter</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.queue = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ping</span>(<span class="hljs-params">self, t: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        self.push(t)<br>        <span class="hljs-keyword">while</span> self.peek() &lt; t - <span class="hljs-number">3000</span>:<br>            self.pop()<br>        <span class="hljs-keyword">return</span> self.size()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, t: <span class="hljs-built_in">int</span></span>):</span><br>        self.queue.append(t)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        t = self.queue[<span class="hljs-number">0</span>]<br>        self.queue = self.queue[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">return</span> t<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">peek</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self.queue[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_empty</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.queue) == <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">size</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.queue)<br></code></pre></td></tr></table></figure><h6 id="任务调度器"><a href="https://leetcode-cn.com/problems/task-scheduler/">621. 任务调度器</a></h6><p>给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。</p><p>然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。</p><p>你需要计算完成所有任务所需要的 最短时间 。</p><p><strong>示例 1：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：tasks = [<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>], n = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">8</span><br>解释：A -&gt; B -&gt; <span class="hljs-function"><span class="hljs-params">(待命)</span> -&gt;</span> A -&gt; B -&gt; <span class="hljs-function"><span class="hljs-params">(待命)</span> -&gt;</span> A -&gt; B<br>     在本示例中，两个相同类型任务之间必须间隔长度为 n = <span class="hljs-number">2</span> 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：tasks = [<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>], n = <span class="hljs-number">0</span><br>输出：<span class="hljs-number">6</span><br>解释：在这种情况下，任何大小为 <span class="hljs-number">6</span> 的排列都可以满足要求，因为 n = <span class="hljs-number">0</span><br>[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>]<br>[<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>]<br>[<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]<br>...<br>诸如此类<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：tasks = [<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>], n = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">16</span><br>解释：一种可能的解决方案是：<br>     A -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; <span class="hljs-function"><span class="hljs-params">(待命)</span> -&gt;</span> <span class="hljs-function"><span class="hljs-params">(待命)</span> -&gt;</span> A -&gt; <span class="hljs-function"><span class="hljs-params">(待命)</span> -&gt;</span> <span class="hljs-function"><span class="hljs-params">(待命)</span> -&gt;</span> A<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= task.length &lt;= 104</code></li><li><code>tasks[i]</code> 是大写英文字母</li><li><code>n</code> 的取值范围为 <code>[0, 100]</code></li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="面试题-17.09.-第-k-个数"><a href="https://leetcode-cn.com/problems/get-kth-magic-number-lcci/">面试题 17.09. 第 k 个数</a></h6><p>有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: k = 5</span><br><br><span class="hljs-section">输出: 9</span><br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">智力题<br>   熟悉数字规则即可<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="亲密字符串"><a href="https://leetcode-cn.com/problems/buddy-strings/">859. 亲密字符串</a></h6><p>给定两个由小写字母构成的字符串 A 和 B ，只要我们可以通过交换 A 中的两个字母得到与 B 相等的结果，就返回 true ；否则返回 false 。</p><p>交换字母的定义是取两个下标 i 和 j （下标从 0 开始），只要<code>i!=j</code>就交换<code>A[i]</code>和<code>A[j]</code>处的字符。例如，在 <code>"abcd"</code> 中交换下标 0 和下标 2 的元素可以生成 <code>"cbad"</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入： <span class="hljs-symbol">A</span> = <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-symbol">B</span> = <span class="hljs-string">&quot;ba&quot;</span><br>输出： true<br>解释： 你可以交换 <span class="hljs-symbol">A</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span> 和 <span class="hljs-symbol">A</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;b&#x27;</span> 生成 <span class="hljs-string">&quot;ba&quot;</span>，此时 <span class="hljs-symbol">A</span> 和 <span class="hljs-symbol">B</span> 相等。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入： <span class="hljs-symbol">A</span> = <span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-symbol">B</span> = <span class="hljs-string">&quot;ab&quot;</span><br>输出： false<br>解释： 你只能交换 <span class="hljs-symbol">A</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span> 和 <span class="hljs-symbol">A</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;b&#x27;</span> 生成 <span class="hljs-string">&quot;ba&quot;</span>，此时 <span class="hljs-symbol">A</span> 和 <span class="hljs-symbol">B</span> 不相等。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">输入： A = <span class="hljs-string">&quot;aa&quot;</span>, B = <span class="hljs-string">&quot;aa&quot;</span><br>输出： <span class="hljs-literal">true</span><br>解释： 你可以交换 A[<span class="hljs-number">0</span>] = <span class="hljs-comment">&#x27;a&#x27; 和 A[1] = &#x27;a&#x27; 生成 &quot;aa&quot;，此时 A 和 B 相等。</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入： <span class="hljs-attr">A</span> = <span class="hljs-string">&quot;aaaaaaabc&quot;</span>, <span class="hljs-attr">B</span> = <span class="hljs-string">&quot;aaaaaaacb&quot;</span><br>输出： <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入： <span class="hljs-attr">A</span> = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">B</span> = <span class="hljs-string">&quot;aa&quot;</span><br>输出： <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol type="1"><li><code>0 &lt;= A.length &lt;= 20000</code></li><li><code>0 &lt;= B.length &lt;= 20000</code></li><li><code>A</code> 和 <code>B</code> 仅由小写字母构成。</li></ol><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="柠檬水找零"><a href="https://leetcode-cn.com/problems/lemonade-change/">860. 柠檬水找零</a></h6><p>在柠檬水摊上，每一杯柠檬水的售价为 5 美元。</p><p>顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p><p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：[5,5,5,10,20]<br>输出：true<br>解释：<br>前<span class="hljs-number"> 3 </span>位顾客那里，我们按顺序收取<span class="hljs-number"> 3 </span>张<span class="hljs-number"> 5 </span>美元的钞票。<br>第<span class="hljs-number"> 4 </span>位顾客那里，我们收取一张<span class="hljs-number"> 10 </span>美元的钞票，并返还<span class="hljs-number"> 5 </span>美元。<br>第<span class="hljs-number"> 5 </span>位顾客那里，我们找还一张<span class="hljs-number"> 10 </span>美元的钞票和一张<span class="hljs-number"> 5 </span>美元的钞票。<br>由于所有客户都得到了正确的找零，所以我们输出 true。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：[<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>]<br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入：[<span class="hljs-number">10</span>,<span class="hljs-number">10</span>]<br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：[5,5,10,10,20]<br>输出：false<br>解释：<br>前<span class="hljs-number"> 2 </span>位顾客那里，我们按顺序收取<span class="hljs-number"> 2 </span>张<span class="hljs-number"> 5 </span>美元的钞票。<br>对于接下来的<span class="hljs-number"> 2 </span>位顾客，我们收取一张<span class="hljs-number"> 10 </span>美元的钞票，然后返还<span class="hljs-number"> 5 </span>美元。<br>对于最后一位顾客，我们无法退回<span class="hljs-number"> 15 </span>美元，因为我们现在只有两张<span class="hljs-number"> 10 </span>美元的钞票。<br>由于不是每位顾客都得到了正确的找零，所以答案是 false。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= bills.length &lt;= 10000</code></li><li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">贪心算法<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="煎饼排序"><a href="https://leetcode-cn.com/problems/pancake-sorting/">969. 煎饼排序</a></h6><p>给你一个整数数组<code>arr</code>，请使用<strong>煎饼翻转</strong>完成对数组的排序。</p><p>一次煎饼翻转的执行过程如下：</p><ul><li>选择一个整数<code>k</code>，<code>1 &lt;= k &lt;= arr.length</code></li><li>反转子数组 <code>arr[0...k-1]</code>（<strong>下标从 0 开始</strong>）</li></ul><p>例如，<code>arr = [3,2,1,4]</code>，选择<code>k = 3</code>进行一次煎饼翻转，反转子数组<code>[3,2,1]</code>，得到<code>arr = [1,2,3,4]</code>。</p><p>以数组形式返回能使<code>arr</code>有序的煎饼翻转操作所对应的<code>k</code>值序列。任何将数组排序且翻转次数在<code>10 * arr.length</code>范围内的有效答案都将被判断为正确。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>输出：[<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<br>解释：<br>我们执行 <span class="hljs-number">4</span> 次煎饼翻转，k 值分别为 <span class="hljs-number">4</span>，<span class="hljs-number">2</span>，<span class="hljs-number">4</span>，和 <span class="hljs-number">3</span>。<br>初始状态 <span class="hljs-attr">arr</span> = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>第一次翻转后（<span class="hljs-attr">k</span> = <span class="hljs-number">4</span>）：<span class="hljs-attr">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>第二次翻转后（<span class="hljs-attr">k</span> = <span class="hljs-number">2</span>）：<span class="hljs-attr">arr</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>第三次翻转后（<span class="hljs-attr">k</span> = <span class="hljs-number">4</span>）：<span class="hljs-attr">arr</span> = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]<br>第四次翻转后（<span class="hljs-attr">k</span> = <span class="hljs-number">3</span>）：<span class="hljs-attr">arr</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]，此时已完成排序。 <br></code></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">输入：<span class="hljs-selector-attr">[1,2,3]</span><br>输出：<span class="hljs-selector-attr">[]</span><br>解释：<br>输入已经排序，因此不需要翻转任何内容。<br>请注意，其他可能的答案，如 <span class="hljs-selector-attr">[3，3]</span> ，也将被判断为正确。<br></code></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= arr.length &lt;= 100</code></li><li><code>1 &lt;= arr[i] &lt;= arr.length</code></li><li><code>arr</code>中的所有整数互不相同（即<code>arr</code>是从<code>1</code>到<code>arr.length</code>整数的一个排列）</li></ul><p>解题思路</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">984132657 </span>排序<br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h4 id="递归与栈stack解决表达式求值">递归与栈（Stack）：解决表达式求值</h4><h5 id="基础知识">基础知识</h5><p>栈适合解决什么问题？</p><p>处理一种具有完全包含关系的问题。</p><h5 id="栈结构基础应用">栈结构基础应用</h5><h6 id="基本计算器-ii"><a href="https://leetcode-cn.com/problems/basic-calculator-ii/">227. 基本计算器 II</a></h6><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><p>整数除法仅保留整数部分。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;3+2*2&quot;</span><br>输出：<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot; 3/2 &quot;</span><br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot; 3+5 / 2 &quot;</span><br>输出：<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="面试题-03.04.-化栈为队"><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks-lcci/">面试题 03.04. 化栈为队</a></h6><p>实现一个MyQueue类，该类用两个栈来实现一个队列。</p><p><strong>示例：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">MyQueue queue = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyQueue</span>();<br><br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>queue.<span class="hljs-built_in">push</span>(<span class="hljs-number">2</span>);<br>queue.<span class="hljs-built_in">peek</span>();  <span class="hljs-comment">// 返回 1</span><br>queue.<span class="hljs-built_in">pop</span>();   <span class="hljs-comment">// 返回 1</span><br>queue.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">// 返回 false</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>你只能使用标准的栈操作 -- 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code> 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="棒球比赛"><a href="https://leetcode-cn.com/problems/baseball-game/">682. 棒球比赛</a></h6><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p><p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 <code>ops</code>，其中 <code>ops[i]</code> 是你需要记录的第 <code>i</code> 项操作，<code>ops</code> 遵循下述规则：</p><ol type="1"><li>整数 <code>x</code> - 表示本回合新获得分数 <code>x</code></li><li><code>"+"</code> - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li><li><code>"D"</code> - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li><li><code>"C"</code> - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。</li></ol><p>请你返回记录中所有得分的总和。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：ops = [<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>]<br>输出：<span class="hljs-number">30</span><br>解释：<br><span class="hljs-string">&quot;5&quot;</span> - 记录加 <span class="hljs-number">5</span> ，记录现在是 [<span class="hljs-number">5</span>]<br><span class="hljs-string">&quot;2&quot;</span> - 记录加 <span class="hljs-number">2</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>]<br><span class="hljs-string">&quot;C&quot;</span> - 使前一次得分的记录无效并将其移除，记录现在是 [<span class="hljs-number">5</span>].<br><span class="hljs-string">&quot;D&quot;</span> - 记录加 <span class="hljs-number">2</span> * <span class="hljs-number">5</span> = <span class="hljs-number">10</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>].<br><span class="hljs-string">&quot;+&quot;</span> - 记录加 <span class="hljs-number">5</span> + <span class="hljs-number">10</span> = <span class="hljs-number">15</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>].<br>所有得分的总和 <span class="hljs-number">5</span> + <span class="hljs-number">10</span> + <span class="hljs-number">15</span> = <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：ops = [<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;-2&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>]<br>输出：<span class="hljs-number">27</span><br>解释：<br><span class="hljs-string">&quot;5&quot;</span> - 记录加 <span class="hljs-number">5</span> ，记录现在是 [<span class="hljs-number">5</span>]<br><span class="hljs-string">&quot;-2&quot;</span> - 记录加 <span class="hljs-number">-2</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>]<br><span class="hljs-string">&quot;4&quot;</span> - 记录加 <span class="hljs-number">4</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">4</span>]<br><span class="hljs-string">&quot;C&quot;</span> - 使前一次得分的记录无效并将其移除，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>]<br><span class="hljs-string">&quot;D&quot;</span> - 记录加 <span class="hljs-number">2</span> * <span class="hljs-number">-2</span> = <span class="hljs-number">-4</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-4</span>]<br><span class="hljs-string">&quot;9&quot;</span> - 记录加 <span class="hljs-number">9</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-4</span>, <span class="hljs-number">9</span>]<br><span class="hljs-string">&quot;+&quot;</span> - 记录加 <span class="hljs-number">-4</span> + <span class="hljs-number">9</span> = <span class="hljs-number">5</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>]<br><span class="hljs-string">&quot;+&quot;</span> - 记录加 <span class="hljs-number">9</span> + <span class="hljs-number">5</span> = <span class="hljs-number">14</span> ，记录现在是 [<span class="hljs-number">5</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">14</span>]<br>所有得分的总和 <span class="hljs-number">5</span> + <span class="hljs-number">-2</span> + <span class="hljs-number">-4</span> + <span class="hljs-number">9</span> + <span class="hljs-number">5</span> + <span class="hljs-number">14</span> = <span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">ops</span> = [<span class="hljs-string">&quot;1&quot;</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= ops.length &lt;= 1000</code></li><li><code>ops[i]</code> 为 <code>"C"</code>、<code>"D"</code>、<code>"+"</code>，或者一个表示整数的字符串。整数范围是 <code>[-3 * 10^4, 3 * 10^4]</code></li><li>对于 <code>"+"</code> 操作，题目数据保证记录此操作时前面总是存在两个有效的分数</li><li>对于 <code>"C"</code> 和 <code>"D"</code> 操作，题目数据保证记录此操作时前面总是存在一个有效的分数</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="比较含退格的字符串"><a href="https://leetcode-cn.com/problems/backspace-string-compare/">844. 比较含退格的字符串</a></h6><p>给定 <code>S</code> 和 <code>T</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 <code>#</code> 代表退格字符。</p><p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p><p><strong>示例 1：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：S = <span class="hljs-string">&quot;ab<span class="hljs-subst">#c</span>&quot;</span>, T = <span class="hljs-string">&quot;ad<span class="hljs-subst">#c</span>&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：S 和 T 都会变成 “ac”。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">S</span> = <span class="hljs-string">&quot;ab##&quot;</span>, <span class="hljs-attr">T</span> = <span class="hljs-string">&quot;c#d#&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：S 和 T 都会变成 “”。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：S = <span class="hljs-string">&quot;a#<span class="hljs-subst">#c</span>&quot;</span>, T = <span class="hljs-string">&quot;<span class="hljs-subst">#a</span><span class="hljs-subst">#c</span>&quot;</span><br>输出：<span class="hljs-literal">true</span><br>解释：S 和 T 都会变成 “c”。<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">S</span> = <span class="hljs-string">&quot;a#c&quot;</span>, <span class="hljs-attr">T</span> = <span class="hljs-string">&quot;b&quot;</span><br>输出：<span class="hljs-literal">false</span><br>解释：S 会变成 “c”，但 T 仍然是 “b”。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= S.length &lt;= 200</code></li><li><code>1 &lt;= T.length &lt;= 200</code></li><li><code>S</code> 和 <code>T</code> 只含有小写字母以及字符 <code>'#'</code>。</li></ul><p><strong>进阶：</strong></p><ul><li>你可以用 <code>O(N)</code> 的时间复杂度和 <code>O(1)</code> 的空间复杂度解决该问题吗？</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="验证栈序列"><a href="https://leetcode-cn.com/problems/validate-stack-sequences/">946. 验证栈序列</a></h6><p>给定 pushed 和 popped 两个序列，每个序列中的 值都不重复，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 true；否则，返回 false 。</p><p><strong>示例 1：</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">输入：pushed = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], popped = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">true</span><br>解释：我们可以按以下顺序执行：<br>push<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">1</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span>, <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span>, <span class="hljs-title">pop</span><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">4</span>,<br>push<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">5</span>)</span>, <span class="hljs-title">pop</span><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">5</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">3</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">2</span>, pop<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">pushed</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], <span class="hljs-attr">popped</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：<span class="hljs-number">1</span> 不能在 <span class="hljs-number">2</span> 之前弹出。<br></code></pre></td></tr></table></figure><p>提示：</p><p><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code> <code>0 &lt;= pushed[i], popped[i] &lt; 1000</code> <code>pushed</code> 是 <code>popped</code>的排列。</p><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="section"></h6><h5 id="栈结构扩展应用">栈结构扩展应用</h5><h6 id="有效的括号"><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h6><p>给定一个只包括 <code>'('，')'，'&#123;'，'&#125;'，'['，']'</code>的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;()&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;()[]&#123;&#125;&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;(]&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;([)]&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;&#123;[]&#125;&quot;</span><br>输出：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅由括号 <code>'()[]&#123;&#125;'</code> 组成</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="删除最外层的括号"><a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/">1021. 删除最外层的括号</a></h6><p>有效括号字符串为空 <code>("")</code>、<code>"(" + A + ")"</code> 或 <code>A + B</code>，其中 <code>A</code> 和 <code>B</code> 都是有效的括号字符串，<code>+</code> 代表字符串的连接。例如，<code>""</code>，<code>"()"</code>，<code>"(())()"</code> 和 <code>"(()(()))"</code> 都是有效的括号字符串。</p><p>如果有效字符串 <code>S</code> 非空，且不存在将其拆分为 <code>S = A+B</code> 的方法，我们称其为<strong>原语（primitive）</strong>，其中 <code>A</code> 和 <code>B</code> 都是非空有效括号字符串。</p><p>给出一个非空有效字符串 <code>S</code>，考虑将其进行原语化分解，使得：<code>S = P_1 + P_2 + ... + P_k</code>，其中 <code>P_i</code> 是有效括号字符串原语。</p><p>对 <code>S</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 <code>S</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：<span class="hljs-string">&quot;(()())(())&quot;</span><br>输出：<span class="hljs-string">&quot;()()()&quot;</span><br>解释：<br>输入字符串为 <span class="hljs-string">&quot;(()())(())&quot;</span>，原语化分解得到 <span class="hljs-string">&quot;(()())&quot;</span> + <span class="hljs-string">&quot;(())&quot;</span>，<br>删除每个部分中的最外层括号后得到 <span class="hljs-string">&quot;()()&quot;</span> + <span class="hljs-string">&quot;()&quot;</span> = <span class="hljs-string">&quot;()()()&quot;</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：<span class="hljs-string">&quot;(()())(())(()(()))&quot;</span><br>输出：<span class="hljs-string">&quot;()()()()(())&quot;</span><br>解释：<br>输入字符串为 <span class="hljs-string">&quot;(()())(())(()(()))&quot;</span>，原语化分解得到 <span class="hljs-string">&quot;(()())&quot;</span> + <span class="hljs-string">&quot;(())&quot;</span> + <span class="hljs-string">&quot;(()(()))&quot;</span>，<br>删除每个部分中的最外层括号后得到 <span class="hljs-string">&quot;()()&quot;</span> + <span class="hljs-string">&quot;()&quot;</span> + <span class="hljs-string">&quot;()(())&quot;</span> = <span class="hljs-string">&quot;()()()()(())&quot;</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入：<span class="hljs-string">&quot;()()&quot;</span><br>输出：<span class="hljs-string">&quot;&quot;</span><br>解释：<br>输入字符串为 <span class="hljs-string">&quot;()()&quot;</span>，原语化分解得到 <span class="hljs-string">&quot;()&quot;</span> + <span class="hljs-string">&quot;()&quot;</span>，<br>删除每个部分中的最外层括号后得到 <span class="hljs-string">&quot;&quot;</span> + <span class="hljs-string">&quot;&quot;</span> = <span class="hljs-string">&quot;&quot;</span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol type="1"><li><code>S.length &lt;= 10000</code></li><li><code>S[i]</code> 为 <code>"("</code> 或 <code>")"</code></li><li><code>S</code> 是一个有效括号字符串</li></ol><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="移除无效的括号"><a href="https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses/">1249. 移除无效的括号</a></h6><p>给你一个由 <code>'('</code>、<code>')'</code> 和小写字母组成的字符串 <code>s</code>。</p><p>你需要从字符串中删除最少数目的 <code>'('</code> 或者 <code>')'</code> （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。</p><p>请返回任意一个合法字符串。</p><p>有效「括号字符串」应当符合以下 <strong>任意一条</strong> 要求:</p><ul><li>空字符串或只包含小写字母的字符串</li><li>可以被写作 <code>AB</code>（<code>A</code> 连接 <code>B</code>）的字符串，其中 <code>A</code> 和 <code>B</code> 都是有效「括号字符串」</li><li>可以被写作 <code>(A)</code> 的字符串，其中 <code>A</code> 是一个有效的「括号字符串」</li></ul><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;lee(t(c)o)de)&quot;</span><br>输出：<span class="hljs-string">&quot;lee(t(c)o)de&quot;</span><br>解释：<span class="hljs-string">&quot;lee(t(co)de)&quot;</span> , <span class="hljs-string">&quot;lee(t(c)ode)&quot;</span> 也是一个可行答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;a)b(c)d&quot;</span><br>输出：<span class="hljs-string">&quot;ab(c)d&quot;</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">&quot;))((&quot;</span><br>输出：<span class="hljs-string">&quot;&quot;</span><br>解释：空字符串也是有效的<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">输入：s = <span class="hljs-comment">&quot;(a(b(c)d)&quot;</span><br>输出：<span class="hljs-comment">&quot;a(b(c)d)&quot;</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s[i]</code> 可能是 <code>'('</code>、<code>')'</code> 或英文小写字母</li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="二叉树的后序遍历"><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a></h6><p>给定一个二叉树，返回它的 <em>后序</em> 遍历。</p><p><strong>示例:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入: <span class="hljs-comment">[1,null,2,3]</span>  <br>   1<br>    \<br>     2<br>    /<br>   3 <br><br>输出: <span class="hljs-comment">[3,2,1]</span><br></code></pre></td></tr></table></figure><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="验证二叉树的前序序列化"><a href="https://leetcode-cn.com/problems/verify-preorder-serialization-of-a-binary-tree/">331. 验证二叉树的前序序列化</a></h6><p>序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">     _9_<br>    /   <span class="hljs-string">\</span><br>   <span class="hljs-number">3</span>     <span class="hljs-number">2</span><br>  / <span class="hljs-string">\</span>   / <span class="hljs-string">\</span><br> <span class="hljs-number">4</span>   <span class="hljs-number">1</span>  <span class="hljs-comment">#  6</span><br>/ <span class="hljs-string">\</span> / <span class="hljs-string">\</span>   / <span class="hljs-string">\</span><br><span class="hljs-comment"># # # #   # #</span><br></code></pre></td></tr></table></figure><p>例如，上面的二叉树可以被序列化为字符串 <code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code>，其中 <code>#</code> 代表一个空节点。</p><p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p><p>每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的<code>'#'</code>。</p><p>你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如<code>"1,,3"</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入: <span class="hljs-string">&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</span><br>输出: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入: <span class="hljs-string">&quot;1,#&quot;</span><br>输出: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">输入: <span class="hljs-string">&quot;9,#,#,1&quot;</span><br>输出: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h6 id="函数的独占时间"><a href="https://leetcode-cn.com/problems/exclusive-time-of-functions/">636. 函数的独占时间</a></h6><p>给出一个非抢占单线程CPU的 <strong>n</strong> 个函数运行日志，找到函数的独占时间。</p><p>每个函数都有一个唯一的 Id，从 <strong>0</strong> 到 <strong>n-1</strong>，函数可能会递归调用或者被其他函数调用。</p><p>日志是具有以下格式的字符串：<code>function_id：start_or_end：timestamp。</code>例如：<code>"0:start:0"</code> 表示函数 0 从 0 时刻开始运行。<code>"0:end:0"</code> 表示函数 0 在 0 时刻结束。</p><p>函数的独占时间定义是在该方法中花费的时间，调用其他函数花费的时间不算该函数的独占时间。你需要根据函数的 Id 有序地返回每个函数的独占时间。</p><p><strong>示例 1:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入:<br>n = 2<br>logs = <br>[&quot;0:start:0&quot;,<br> &quot;1:start:2&quot;,<br> &quot;1:end:5&quot;,<br> &quot;0:end:6&quot;]<br>输出:[3, 4]<br>说明：<br>函数<span class="hljs-number"> 0 </span>在时刻<span class="hljs-number"> 0 </span>开始，在执行了  2个时间单位结束于时刻 1。<br>现在函数<span class="hljs-number"> 0 </span>调用函数 1，函数<span class="hljs-number"> 1 </span>在时刻<span class="hljs-number"> 2 </span>开始，执行<span class="hljs-number"> 4 </span>个时间单位后结束于时刻 5。<br>函数<span class="hljs-number"> 0 </span>再次在时刻<span class="hljs-number"> 6 </span>开始执行，并在时刻<span class="hljs-number"> 6 </span>结束运行，从而执行了<span class="hljs-number"> 1 </span>个时间单位。<br>所以函数<span class="hljs-number"> 0 </span>总共的执行了<span class="hljs-number"> 2 </span>+1 =3 个时间单位，函数<span class="hljs-number"> 1 </span>总共执行了<span class="hljs-number"> 4 </span>个时间单位。<br></code></pre></td></tr></table></figure><p>说明：</p><ol type="1"><li>输入的日志会根据时间戳排序，而不是根据日志Id排序。</li><li>你的输出会根据函数Id排序，也就意味着你的输出数组中序号为 0 的元素相当于函数 0 的执行时间。</li><li>两个函数不会在同时开始或结束。</li><li>函数允许被递归调用，直到运行结束。</li><li>1 &lt;= n &lt;= 100</li></ol><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><h5 id="section-1"></h5><h6 id="表现良好的最长时间段"><a href="https://leetcode-cn.com/problems/longest-well-performing-interval/">1124. 表现良好的最长时间段</a></h6><p>给你一份工作时间表 <code>hours</code>，上面记录着某一位员工每天的工作小时数。</p><p>我们认为当员工一天中的工作小时数大于 <code>8</code> 小时的时候，那么这一天就是「<strong>劳累的一天</strong>」。</p><p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 <strong>大于</strong>「不劳累的天数」。</p><p>请你返回「表现良好时间段」的最大长度。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：hours = <span class="hljs-comment">[9,9,6,0,6,6,9]</span><br>输出：3<br>解释：最长的表现良好时间段是 <span class="hljs-comment">[9,9,6]</span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= hours.length &lt;= 10000</code></li><li><code>0 &lt;= hours[i] &lt;= 16</code></li></ul><p>解题思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><code>Java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br></code></pre></td></tr></table></figure><p><code>Golang</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Golang"><br></code></pre></td></tr></table></figure><p><code>Python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Java</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Go】学习笔记</title>
    <link href="/2021/02/07/golang/"/>
    <url>/2021/02/07/golang/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>"Go has indeed become the language of cloud infrastructure" - Rob Pike interview<span id="more"></span></p></blockquote><h3 id="变量">变量</h3><h4 id="var与">var与:=</h4><ul><li>:=方式较为简洁，但只能在函数内使用该方式，var方式没有这个限制，var方式定义在汉书外的变量属于包内部的变量</li><li>函数中以:=方式定义变量为主</li></ul><h4 id="内建变量类型">内建变量类型</h4><ul><li>bool,string</li><li>(u)int, (u)int8, (u)int16, (u)int32, (u)int, uintptr</li><li>byte, rune</li><li>float32, float64, complex64, complex128</li><li>变量类型写在变量名之后</li><li>编译器可推测变量类型</li><li>没有char, 只有rune</li><li>原生支持复数类型</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;math/cmplx&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">euler</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 欧拉公式 e^(i*Pi) + 1 = 0</span><br>fmt.Println(cmplx.Exp(<span class="hljs-number">1i</span> * math.Pi) + <span class="hljs-number">1</span>)<br>  fmt.Println(cmplx.Pow(math.E, <span class="hljs-number">1i</span> * math.Pi) + <span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>euler()<br>&#125;<br><br><span class="hljs-comment">// 打印内容</span><br>(<span class="hljs-number">0</span>+<span class="hljs-number">1.2246467991473515e-16i</span>)<br>(<span class="hljs-number">0</span>+<span class="hljs-number">1.2246467991473515e-16i</span>)<br></code></pre></td></tr></table></figure><h4 id="强制类型转换">强制类型转换</h4><p>go语言需要开发时强制类型转换，不会自动隐式转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle</span><span class="hljs-params">()</span></span>  &#123;<br>a, b := <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">int</span> <br>c = math.Sqrt(a*a + b*b)                    <span class="hljs-comment">// 会在编译前idea便提示报错</span><br>  c = <span class="hljs-keyword">int</span>(math.Sqrt(<span class="hljs-keyword">float64</span>(a * a + b * b)))  <span class="hljs-comment">// 正确写法</span><br>fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><p>常量未声明类型，其类型是不确定的（数值可以作各种类型使用）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">consts</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 强制类型转换</span><br><span class="hljs-keyword">const</span> a, b = <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">int</span><br>c = <span class="hljs-keyword">int</span>(math.Sqrt(a * a + b * b))    <span class="hljs-comment">// a * a + b * b 部分可以不用加上强制类型转换</span><br>fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以利用常量申明枚举类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">enums</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">const</span> (<br>golang = <span class="hljs-literal">iota</span><br>_<br>java<br>python<br>)<br>fmt.Println(golang, java, python)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>可以以<code>iota</code>为基础，生成一系列枚举数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">enums</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">const</span> (<br>b = <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">10</span> * <span class="hljs-literal">iota</span>)<br>kb<br>mb<br>gb<br>tb<br>)<br>fmt.Println(b, kb, mb, gb, tb)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">1</span> <span class="hljs-number">1024</span> <span class="hljs-number">1048576</span> <span class="hljs-number">1073741824</span> <span class="hljs-number">1099511627776</span><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/variable.go</p><h3 id="指针">指针</h3><p>指针不能运算</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">2</span><br><span class="hljs-keyword">var</span> pa *<span class="hljs-keyword">int</span> = &amp;a<br>*pa = <span class="hljs-number">3</span><br>fmt.Println(a)<br>&#125;<br><br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>参数传递—只有<em>值传递</em>一种方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapV</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span></span> &#123;<br>b, a = a, b<br>fmt.Println(<span class="hljs-string">&quot;in &quot;</span>, a, b, &amp;a, &amp;b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapRN</span><span class="hljs-params">(a, b *<span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-comment">// 局部变量交换值（地址）</span><br>b, a = a, b<br>fmt.Println(<span class="hljs-string">&quot;in &quot;</span>, a, b, *a, *b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapR</span><span class="hljs-params">(a, b *<span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-comment">// 交换变量值（地址）指向的值</span><br>*b, *a = *a, *b<br>fmt.Println(<span class="hljs-string">&quot;in &quot;</span>, a, b, *a, *b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pointerSwap</span><span class="hljs-params">()</span></span>  &#123;<br>a, b := <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br>swapV(a, b)<br>fmt.Println(<span class="hljs-string">&quot;out&quot;</span>, a, b, &amp;a, &amp;b)<br><br>a, b = <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br>swapRN(&amp;a, &amp;b)<br>fmt.Println(<span class="hljs-string">&quot;out&quot;</span>, a, b, &amp;a, &amp;b)<br><br>a, b = <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br>swapR(&amp;a, &amp;b)<br>fmt.Println(<span class="hljs-string">&quot;out&quot;</span>, a, b, &amp;a, &amp;b)<br><br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>in  <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">0xc00001e0c8</span> <span class="hljs-number">0xc00001e0d0</span><br>out <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">0xc00001e0b8</span> <span class="hljs-number">0xc00001e0c0</span><br>in  <span class="hljs-number">0xc00001e0c0</span> <span class="hljs-number">0xc00001e0b8</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br>out <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">0xc00001e0b8</span> <span class="hljs-number">0xc00001e0c0</span><br>in  <span class="hljs-number">0xc00001e0b8</span> <span class="hljs-number">0xc00001e0c0</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br>out <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">0xc00001e0b8</span> <span class="hljs-number">0xc00001e0c0</span><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/pointer.go</p><h3 id="容器">容器</h3><h4 id="数组">数组</h4><p>Go 语言的数组有两种不同的创建方式</p><ul><li>一种是显式的指定数组大小<ul><li>变量的类型在编译进行到<strong>类型检查</strong>阶段就会被提取出来，随后使用 <a href="https://draveness.me/golang/tree/cmd/compile/internal/types.NewArray"><code>cmd/compile/internal/types.NewArray</code></a>创建包含数组大小的 <a href="https://draveness.me/golang/tree/cmd/compile/internal/types.Array"><code>cmd/compile/internal/types.Array</code></a> 结构体。</li></ul></li><li>一种是使用 <code>[...]T</code> 声明数组<ul><li>Go 语言编译器会在的 <a href="https://draveness.me/golang/tree/cmd/compile/internal/gc.typecheckcomplit"><code>cmd/compile/internal/gc.typecheckcomplit</code></a> 函数中对该数组的大小进行推导</li><li><code>[...]T</code> 这种初始化方式也只是 Go 语言为我们提供的一种语法糖，当我们不想计算数组中的元素个数时可以通过这种方法减少一些工作量</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">define</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span><br>arr2 := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;<br>arr3 := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;<br><br><span class="hljs-keyword">var</span> grid [<span class="hljs-number">4</span>][<span class="hljs-number">5</span>]<span class="hljs-keyword">bool</span><br>fmt.Println(arr1, arr2, arr3)<br>fmt.Println(grid)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>] [<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span>]<br>[[<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>] [<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>] [<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>] [<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>]]<br><br></code></pre></td></tr></table></figure><p>[5]int和[10]int是不同类型</p><p>调用func f(arr [10]int)会<em>拷贝</em>数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printArr</span><span class="hljs-params">(arr [5]<span class="hljs-keyword">int</span>)</span></span>  &#123;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr &#123;<br>fmt.Println(i, v)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">arrTest</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span><br>arr2 := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;<br>fmt.Println()<br>printArr(arr2)<br>fmt.Println()<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr1 &#123;<br>fmt.Println(i, v)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">0</span> <span class="hljs-number">100</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-number">4</span> <span class="hljs-number">0</span><br><br><span class="hljs-number">0</span> <span class="hljs-number">100</span><br><span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-number">2</span> <span class="hljs-number">6</span><br><span class="hljs-number">3</span> <span class="hljs-number">8</span><br><span class="hljs-number">4</span> <span class="hljs-number">10</span><br><br><span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-number">4</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>若要改变数组的值 需要传入数组的地址，因此go语言一般不使用数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printArrR</span><span class="hljs-params">(arr *[5]<span class="hljs-keyword">int</span>)</span></span>  &#123;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr &#123;<br>fmt.Println(i, v)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">arrTest</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span><br>printArrR(&amp;arr1)<br>fmt.Println()<br>fmt.Println(arr1)<br>&#125;<br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">0</span> <span class="hljs-number">100</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-number">4</span> <span class="hljs-number">0</span><br><br>[<span class="hljs-number">100</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/collections/array.go</p><h4 id="切片">切片</h4><ul><li><p>slice可以向后扩展，但不能向前扩展</p></li><li><p>s[i]不可超越len(s)，向后扩展不可以超越底层数组cap(s)</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slice</span><span class="hljs-params">()</span></span> &#123;<br>arr := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>s1 := arr[<span class="hljs-number">2</span>: <span class="hljs-number">6</span>]<br>fmt.Println(s1)<br>s2 := s1[<span class="hljs-number">3</span>: <span class="hljs-number">5</span>]<br>fmt.Println(s2)<br>  s3 := s1[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>]<br>fmt.Println(s3)<br>&#125;<br><span class="hljs-comment">//输出</span><br>[<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br>[<span class="hljs-number">6</span> <span class="hljs-number">7</span>]<br><span class="hljs-built_in">panic</span>: runtime error: slice bounds out of <span class="hljs-keyword">range</span> [:<span class="hljs-number">6</span>] with capacity <span class="hljs-number">5</span><br><br>goroutine <span class="hljs-number">1</span> [running]:<br>main.sliceDefine()<br>        ~/Projects/golang/src/offer/note/slices.<span class="hljs-keyword">go</span>:<span class="hljs-number">20</span> +<span class="hljs-number">0x164</span><br>main.main()<br>        ~/Projects/golang/src/offer/note/ab_test_func.<span class="hljs-keyword">go</span>:<span class="hljs-number">28</span> +<span class="hljs-number">0x20</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/golang/slice.png"></p><ul><li><p>向slice添加元素，如果超越cap，系统会自动分配更大的底层数组</p></li><li><p>由于值传递的原因，必须接收append的返回值<code>s=append(s, val)</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sliceAppend</span><span class="hljs-params">()</span></span> &#123;<br>arr := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;<br>s1 := arr[<span class="hljs-number">2</span>: <span class="hljs-number">6</span>]<br>fmt.Println(s1, <span class="hljs-built_in">cap</span>(s1), <span class="hljs-built_in">len</span>(s1))<br>s2 := s1[<span class="hljs-number">3</span>: <span class="hljs-number">5</span>]<br>fmt.Println(s2)<br>s3 := <span class="hljs-built_in">append</span>(s2, <span class="hljs-number">10</span>)<br>s4 := <span class="hljs-built_in">append</span>(s3, <span class="hljs-number">11</span>)<br>s5 := <span class="hljs-built_in">append</span>(s4, <span class="hljs-number">12</span>)<br>fmt.Println(<span class="hljs-string">&quot;s3, s4, s5=&quot;</span>, s3, s4, s5)<br>fmt.Println(arr)<br>  <br>  s6 := <span class="hljs-built_in">append</span>(s1, <span class="hljs-number">10</span>)<br>s7 := <span class="hljs-built_in">append</span>(s6, <span class="hljs-number">11</span>)<br>s8 := <span class="hljs-built_in">append</span>(s7, <span class="hljs-number">12</span>)<br>fmt.Println(<span class="hljs-string">&quot;s6, s7, s8=&quot;</span>, s6, s7, s8)<br>fmt.Println(<span class="hljs-string">&quot;cap(s6), cap(s7), cap(s8) =&quot;</span>, <span class="hljs-built_in">cap</span>(s6), <span class="hljs-built_in">cap</span>(s7), <span class="hljs-built_in">cap</span>(s8))<br>fmt.Println(arr)<br>&#125;<br><span class="hljs-comment">// 输出</span><br>[<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] <span class="hljs-number">6</span> <span class="hljs-number">4</span><br>[<span class="hljs-number">6</span> <span class="hljs-number">7</span>]<br>s3, s4, s5= [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span>] [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]<br><span class="hljs-built_in">cap</span>(s3), <span class="hljs-built_in">cap</span>(s4), <span class="hljs-built_in">cap</span>(s5) = <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span>]<br><br>s6, s7, s8= [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]<br><span class="hljs-built_in">cap</span>(s6), <span class="hljs-built_in">cap</span>(s7), <span class="hljs-built_in">cap</span>(s8) = <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">12</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]<br><br></code></pre></td></tr></table></figure><ul><li>Zero value for slice is nil</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sliceDefine</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s []<span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10</span>; i++ &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%v, cap(s) = %d, len(s) = %d\n&quot;</span>, s, <span class="hljs-built_in">cap</span>(s), <span class="hljs-built_in">len</span>(s))<br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>)<br>&#125;<br><br>s1 := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%v, cap(s1) = %d, len(s1) = %d\n&quot;</span>, s1, <span class="hljs-built_in">cap</span>(s1), <span class="hljs-built_in">len</span>(s1))<br><br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">8</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%v, cap(s2) = %d, len(s2) = %d\n&quot;</span>, s2, <span class="hljs-built_in">cap</span>(s2), <span class="hljs-built_in">len</span>(s2))<br><br>s3 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%v, cap(s3) = %d, len(s3) = %d\n&quot;</span>, s3, <span class="hljs-built_in">cap</span>(s3), <span class="hljs-built_in">len</span>(s3))<br><br><span class="hljs-comment">// 拷贝</span><br><span class="hljs-built_in">copy</span>(s2, s1)<br>fmt.Printf(<span class="hljs-string">&quot;%v, cap(s2) = %d, len(s2) = %d\n&quot;</span>, s2, <span class="hljs-built_in">cap</span>(s2), <span class="hljs-built_in">len</span>(s2))<br><br><span class="hljs-comment">// 删除 没有内建函数，只能通过截取+append</span><br>s4 := <span class="hljs-built_in">append</span>(s2[:<span class="hljs-number">2</span>], s2[<span class="hljs-number">3</span>:]...)<br>fmt.Printf(<span class="hljs-string">&quot;%v, cap(s4) = %d, len(s4) = %d\n&quot;</span>, s4, <span class="hljs-built_in">cap</span>(s4), <span class="hljs-built_in">len</span>(s4))<br>&#125;<br><br><span class="hljs-comment">//输出</span><br>[], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">0</span><br>[<span class="hljs-number">1</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">1</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">2</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">3</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">4</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">5</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">6</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">7</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">8</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">16</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">9</span><br>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>], <span class="hljs-built_in">cap</span>(s1) = <span class="hljs-number">3</span>, <span class="hljs-built_in">len</span>(s1) = <span class="hljs-number">3</span><br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s2) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s2) = <span class="hljs-number">8</span><br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s3) = <span class="hljs-number">32</span>, <span class="hljs-built_in">len</span>(s3) = <span class="hljs-number">8</span><br>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s2) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s2) = <span class="hljs-number">8</span><br>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s4) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s4) = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/collections/slices.go</p><h4 id="map">Map</h4><ul><li><p>创建<code>make(map[type]type)</code></p></li><li><p>key不存在时，获取value类型的初始值，需要<code>if value, ok := m[key]; ok &#123;...&#125;</code> 判断是否存在key</p></li><li><p>map使用哈希表，必须可以比较相等</p></li><li><p>除了slice, map,function的内建类型都可以作为map的key,Struct类型不包含上述字段时，也可作为key</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapDefine</span><span class="hljs-params">()</span></span>  &#123;<br>m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>&#123;<br><span class="hljs-number">1</span>: <span class="hljs-string">&quot;aa&quot;</span>,<br><span class="hljs-number">2</span>: <span class="hljs-string">&quot;bb&quot;</span>,<br>&#125;<br><span class="hljs-keyword">if</span> v, ok := m[<span class="hljs-number">3</span>]; ok &#123;<br>fmt.Println(v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;key not exists&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-built_in">panic</span>: key not exists<br><br>goroutine <span class="hljs-number">1</span> [running]:<br>main.mapDefine()<br>        /Users/wangpeng/Projects/golang/src/offer/note/maps.<span class="hljs-keyword">go</span>:<span class="hljs-number">20</span> +<span class="hljs-number">0x1f6</span><br>main.main()<br>        /Users/wangpeng/Projects/golang/src/offer/note/ab_test_func.<span class="hljs-keyword">go</span>:<span class="hljs-number">32</span> +<span class="hljs-number">0x20</span><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/collections/maps.go</p><h4 id="rune">Rune</h4><p>字符串在UTF-8编码中，一个中文占三个字节，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strByte</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span></span>  &#123;<br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;<br>s = <span class="hljs-string">&quot;yes,我喜欢你！&quot;</span><br>&#125;<br><span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">byte</span>(s) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;(%d, %X)&quot;</span>, i, ch)<br>&#125;<br>fmt.Println()<br>  <span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> s &#123; <span class="hljs-comment">// ch is a rune 其实是将s进行utf-8解码，解码后的字符会转成unicode,然后放入rune中</span><br>fmt.Printf(<span class="hljs-string">&quot;(%d, %X)&quot;</span>, i, ch)<br>&#125;<br>fmt.Println()<br>  bytes := []<span class="hljs-keyword">byte</span>(s)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(bytes) &gt;<span class="hljs-number">0</span> &#123;<br>ch, size := utf8.DecodeRune(bytes)<br>bytes = bytes[size:]<br>fmt.Printf(<span class="hljs-string">&quot;%c &quot;</span>, ch)<br>&#125;<br>fmt.Println()<br><span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">rune</span>(s) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;(%d, %X)&quot;</span>, i, ch)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">73</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>C)(<span class="hljs-number">4</span>, E6)(<span class="hljs-number">5</span>, <span class="hljs-number">88</span>)(<span class="hljs-number">6</span>, <span class="hljs-number">91</span>)(<span class="hljs-number">7</span>, E5)(<span class="hljs-number">8</span>, <span class="hljs-number">96</span>)(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>C)(<span class="hljs-number">10</span>, E6)(<span class="hljs-number">11</span>, AC)(<span class="hljs-number">12</span>, A2)(<span class="hljs-number">13</span>, E4)(<span class="hljs-number">14</span>, BD)(<span class="hljs-number">15</span>, A0)(<span class="hljs-number">16</span>, EF)(<span class="hljs-number">17</span>, BC)(<span class="hljs-number">18</span>, <span class="hljs-number">81</span>)<br>(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">73</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>C)(<span class="hljs-number">4</span>, <span class="hljs-number">6211</span>)(<span class="hljs-number">7</span>, <span class="hljs-number">559</span>C)(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>B22)(<span class="hljs-number">13</span>, <span class="hljs-number">4</span>F60)(<span class="hljs-number">16</span>, FF01)<br>y e s , 我 喜 欢 你 ！<br>(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">73</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>C)(<span class="hljs-number">4</span>, <span class="hljs-number">6211</span>)(<span class="hljs-number">5</span>, <span class="hljs-number">559</span>C)(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>B22)(<span class="hljs-number">7</span>, <span class="hljs-number">4</span>F60)(<span class="hljs-number">8</span>, FF01)<br><br></code></pre></td></tr></table></figure><p>因此在需要使用rune</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * Description: 获取字符串中不重复字串最大长度</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNoRepeated</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>  <span class="hljs-comment">// 仅支持英文字符</span><br><span class="hljs-comment">// 字符下标映射</span><br>  chNotRepeatIndex := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">byte</span>] <span class="hljs-keyword">int</span>)<br><span class="hljs-comment">// 最长串起始位置</span><br>  start := <span class="hljs-number">0</span><br>  <span class="hljs-comment">// 最长串长度</span><br>maxLength := <span class="hljs-number">0</span><br> <span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">byte</span>(s) &#123;<br> <span class="hljs-keyword">if</span> lastI, ok := chNotRepeatIndex[ch]; ok &amp;&amp; lastI &gt;= start &#123;<br> start = lastI + <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> i - start + <span class="hljs-number">1</span> &gt; maxLength &#123;<br>maxLength = i - start + <span class="hljs-number">1</span><br>&#125;<br>chNotRepeatIndex[ch] = i<br> &#125;<br> <span class="hljs-keyword">return</span> maxLength<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNoRepeatedChn</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>  <span class="hljs-comment">// 通过rune</span><br>chNotRepeatIndex := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">rune</span>] <span class="hljs-keyword">int</span>)<br>start := <span class="hljs-number">0</span><br>maxLength := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">rune</span>(s) &#123;<br><span class="hljs-keyword">if</span> lastI, ok := chNotRepeatIndex[ch]; ok &amp;&amp; lastI &gt;= start &#123;<br>start = lastI + <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">if</span> i - start + <span class="hljs-number">1</span> &gt; maxLength &#123;<br>maxLength = i - start + <span class="hljs-number">1</span><br>&#125;<br>chNotRepeatIndex[ch] = i<br>&#125;<br><span class="hljs-keyword">return</span> maxLength<br>&#125;<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/collections/strings.go</p><h3 id="面向对象">面向对象</h3><p>仅<em>支持封装</em>，不支持继承和多态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>Value       <span class="hljs-keyword">int</span><br>Left, Right *Node<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node Node)</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Print(node.Value, <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span> <span class="hljs-title">SetValue</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;<br>  <span class="hljs-comment">// 接收者使用指针才可以改变结构内容</span><br><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Setting Value to nil node. Ignored.&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>node.Value = value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node Node)</span> <span class="hljs-title">SetValueNotUpdate</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;<br>  <span class="hljs-comment">// 值传递 node内容无法改变</span><br><span class="hljs-keyword">if</span> &amp;node == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Setting Value to nil node. Ignored.&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>node.Value = value<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CreateNode</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Node</span></span> &#123;<br>  <span class="hljs-comment">// 返回局部变量地址，这样变量会在堆中声明，可以传到外部</span><br><span class="hljs-keyword">return</span> &amp;Node&#123;Value: value&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法有接收者（值/指针接收者），需要改变内容必须使用指针接收者，结构体过大考虑用指针接收者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  node := Node&#123;&#125;<br>node.Print()<br>node.SetValueNotUpdate(<span class="hljs-number">10</span>)<br>node.Print()<br>node.SetValue(<span class="hljs-number">10</span>)<br>node.Print()<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span> <br></code></pre></td></tr></table></figure><p>nil也可以调用方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> pNode *Node<br>pNode.SetValue(<span class="hljs-number">30</span>)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>Setting Value to <span class="hljs-literal">nil</span> node. Ignored.<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> pNode *Node<br>pNode.SetValueNotUpdate(<span class="hljs-number">20</span>)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-built_in">panic</span>: runtime error: invalid memory address or <span class="hljs-literal">nil</span> pointer dereference<br>[signal SIGSEGV: segmentation violation code=<span class="hljs-number">0x1</span> addr=<span class="hljs-number">0x0</span> pc=<span class="hljs-number">0x109d0af</span>]<br><br>goroutine <span class="hljs-number">1</span> [running]:<br>main.main()<br>        ～/Projects/golang/src/offer/note/ab_test_func.<span class="hljs-keyword">go</span>:<span class="hljs-number">50</span> +<span class="hljs-number">0x1f</span><br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/object/tree.go</p><h4 id="封装与包">封装与包</h4><p>首字母大写:public，首字母小写:private</p><p>为结构体定义的方法需要放在一个包下（可以是不同的文件）</p><p>扩充系统类型或者自定义类型方式：定义别名和使用组合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Queue []<span class="hljs-keyword">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Push</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">error</span></span> &#123;<br>*q = <span class="hljs-built_in">append</span>(*q, val)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> q.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">false</span><br>&#125;<br>head := (*q)[<span class="hljs-number">0</span>]<br>*q = (*q)[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> head, <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;<br>Value       <span class="hljs-keyword">int</span><br>Left, Right *Node<br>&#125;<br><br><span class="hljs-keyword">type</span> MyNode <span class="hljs-keyword">struct</span> &#123;<br>node *Node<br>&#125;<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/object/queue.go</p><h3 id="接口">接口</h3><h4 id="鸭子类型">鸭子类型</h4><h5 id="duck-typing">Duck Typing</h5><p>接口由使用者定义</p><p>​ Python的在运行时才能知道被调用的对象是否实现某个方法</p><p>​ Java中编译前，调用的对象就必须实现接口所有方法</p><p>接口变量自带指针（参数传递也是值传递），因此几乎不需要使用接口指针</p><p><img src="/images/golang/interface.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// offer/note/interfaces/mock/duck.go</span><br><span class="hljs-keyword">package</span> mock<br><br><span class="hljs-keyword">type</span> Duck <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br>  <span class="hljs-comment">// 实现者没有指明实现了哪个接口</span><br><span class="hljs-keyword">if</span> d.Name != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> d.Name<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是一个鸭子！&quot;</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// offer/note/interfaces/duckI.go</span><br><span class="hljs-keyword">package</span> interfaces<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> DuckI <span class="hljs-keyword">interface</span> &#123;<br>  <span class="hljs-comment">// 使用接口者 定义方法</span><br>GetName() <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FindDuck</span><span class="hljs-params">(d DuckI)</span></span>  &#123; <span class="hljs-comment">// 接口变量自带指针</span><br>name := d.GetName()<br>fmt.Println(name)<br>&#125;<br><br><span class="hljs-comment">// offer/note/main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;offer/note/interfaces&quot;</span><br><span class="hljs-string">&quot;offer/note/interfaces/mock&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  interfaces.FindDuck(&amp;mock.Duck&#123;&#125;)<br>  interfaces.FindDuck(&amp;mock.Duck&#123;Name:<span class="hljs-string">&quot;这是一只假鸭子&quot;</span>&#125;)<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>这是一个鸭子！<br>这是一只假鸭子<br></code></pre></td></tr></table></figure><h5 id="多态">多态</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MemberRights <span class="hljs-keyword">interface</span> &#123;<br> Information () <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> BronzeMember <span class="hljs-keyword">struct</span> &#123;<br> Discount <span class="hljs-keyword">uint8</span><br>&#125;<br><br><span class="hljs-keyword">type</span> SilverMember <span class="hljs-keyword">struct</span> &#123;<br> Discount <span class="hljs-keyword">uint8</span><br>&#125;<br><br><span class="hljs-keyword">type</span> GoldMember <span class="hljs-keyword">struct</span> &#123;<br> Discount <span class="hljs-keyword">uint8</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *BronzeMember)</span> <span class="hljs-title">Information</span> <span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br> <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Discount:%d&quot;</span>, b.Discount)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *SilverMember)</span> <span class="hljs-title">Information</span> <span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br> <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Discount:%d&quot;</span>, s.Discount)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *GoldMember)</span> <span class="hljs-title">Information</span> <span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br> <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Discount:%d&quot;</span>, g.Discount)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Price</span> <span class="hljs-params">(m MemberRights)</span></span> &#123;<br> fmt.Println(m.Information())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span> &#123;<br> b := &amp;BronzeMember&#123;Discount: <span class="hljs-number">9</span>&#125;<br> Price(b)<br> s := &amp;SilverMember&#123;<span class="hljs-number">8</span>&#125;<br> Price(s)<br> g := <span class="hljs-built_in">new</span>(GoldMember)<br> g.Discount = <span class="hljs-number">7</span><br> Price(g)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="任何类型">任何类型</h4><p><code>interface&#123;&#125;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Queue []<span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Push</span><span class="hljs-params">(val <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<br>*q = <span class="hljs-built_in">append</span>(*q, val)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;,<span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> q.IsEmpty() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">false</span><br>&#125;<br>head := (*q)[<span class="hljs-number">0</span>]<br>*q = (*q)[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> head, <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q) == <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  q := interfaces.Queue&#123;&#125;<br>_ = q.Push(<span class="hljs-string">&quot;asd&quot;</span>)<br>_ = q.Push(<span class="hljs-number">123</span>)<br><span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;<br>fmt.Println(v)<br>&#125;<br><span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;<br>fmt.Println(v)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>asd<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h4 id="组合">组合</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// offer/note/interfaces/animals.go</span><br><span class="hljs-keyword">package</span> animal<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> AnimalsI <span class="hljs-keyword">interface</span> &#123;<br>DuckI<br>BehaviorI<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DuckBehavior</span><span class="hljs-params">(a AnimalsI)</span></span>  &#123;<br>name := a.GetName()<br>dark := a.Shout(<span class="hljs-string">&quot;呱呱乱叫&quot;</span>)<br>fmt.Println(name, dark)<br>  fmt.Println(a.String())<br>&#125;<br><br><br><span class="hljs-comment">// offer/note/interfaces/behaviorI.go</span><br><span class="hljs-keyword">package</span> animal<br><br><span class="hljs-keyword">type</span> BehaviorI <span class="hljs-keyword">interface</span> &#123;<br>Shout(dark <span class="hljs-keyword">string</span>) <span class="hljs-keyword">string</span><br>&#125;<br><br><br><span class="hljs-comment">// offer/note/interfaces/duckI.go</span><br><span class="hljs-keyword">package</span> animal<br><br><span class="hljs-keyword">type</span> DuckI <span class="hljs-keyword">interface</span> &#123;<br>GetName() <span class="hljs-keyword">string</span><br>&#125;<br><br><br><span class="hljs-comment">// offer/note/interfaces/mock/duck.go</span><br><span class="hljs-keyword">package</span> mock<br><br><span class="hljs-keyword">type</span> Duck <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-keyword">string</span><br>bark <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">if</span> d.name != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> d.name<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是一个鸭子&quot;</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">Shout</span><span class="hljs-params">(dark <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">if</span> d.bark == <span class="hljs-string">&quot;&quot;</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;呱呱呱呱的叫&quot;</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> dark<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Duck: &#123; name = %s, bark = %s &#125;&quot;</span>, d.name, d.bark)<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>这是一个鸭子 呱呱呱呱的叫<br>Duck: &#123; name = , bark =  &#125;<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/tree/master/go/interfaces</p><h4 id="常用接口">常用接口</h4><ul><li><code>Stringer</code>相当于toString()</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;<br>String() <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Reader</code></li><li><code>Writer</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// io/io.go</span><br><br><span class="hljs-comment">// Reader is the interface that wraps the basic Read method.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Read reads up to len(p) bytes into p. It returns the number of bytes</span><br><span class="hljs-comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span><br><span class="hljs-comment">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span><br><span class="hljs-comment">// If some data is available but not len(p) bytes, Read conventionally</span><br><span class="hljs-comment">// returns what is available instead of waiting for more.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// When Read encounters an error or end-of-file condition after</span><br><span class="hljs-comment">// successfully reading n &gt; 0 bytes, it returns the number of</span><br><span class="hljs-comment">// bytes read. It may return the (non-nil) error from the same call</span><br><span class="hljs-comment">// or return the error (and n == 0) from a subsequent call.</span><br><span class="hljs-comment">// An instance of this general case is that a Reader returning</span><br><span class="hljs-comment">// a non-zero number of bytes at the end of the input stream may</span><br><span class="hljs-comment">// return either err == EOF or err == nil. The next Read should</span><br><span class="hljs-comment">// return 0, EOF.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Callers should always process the n &gt; 0 bytes returned before</span><br><span class="hljs-comment">// considering the error err. Doing so correctly handles I/O errors</span><br><span class="hljs-comment">// that happen after reading some bytes and also both of the</span><br><span class="hljs-comment">// allowed EOF behaviors.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Implementations of Read are discouraged from returning a</span><br><span class="hljs-comment">// zero byte count with a nil error, except when len(p) == 0.</span><br><span class="hljs-comment">// Callers should treat a return of 0 and nil as indicating that</span><br><span class="hljs-comment">// nothing happened; in particular it does not indicate EOF.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Implementations must not retain p.</span><br><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br>Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br>&#125;<br><br><span class="hljs-comment">// Writer is the interface that wraps the basic Write method.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Write writes len(p) bytes from p to the underlying data stream.</span><br><span class="hljs-comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span><br><span class="hljs-comment">// and any error encountered that caused the write to stop early.</span><br><span class="hljs-comment">// Write must return a non-nil error if it returns n &lt; len(p).</span><br><span class="hljs-comment">// Write must not modify the slice data, even temporarily.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Implementations must not retain p.</span><br><span class="hljs-keyword">type</span> Writer <span class="hljs-keyword">interface</span> &#123;<br>Write(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br>&#125;<br><br><span class="hljs-comment">// ReadWriter is the interface that groups the basic Read and Write methods.</span><br><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;<br>Reader<br>Writer<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数">函数</h3><ul><li>函数可以有多个返回值，并且这些返回值可以起别名（别名多用于简单函数），别名与调用者的申明变量并无关联</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">eval</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>, op <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;<br><span class="hljs-keyword">switch</span> op &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br><span class="hljs-keyword">return</span>  a + b, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br><span class="hljs-keyword">return</span> a - b, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br><span class="hljs-keyword">return</span> a * b, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>r, _ := div(a, b)<br><span class="hljs-keyword">return</span> r, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, fmt.Errorf(<span class="hljs-string">&quot;unsupported operation&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">div</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(q, r <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">return</span> a/b, a%b<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><em>一等公民</em> :变量、参数、返回值均可以是函数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">apply</span><span class="hljs-params">(op <span class="hljs-keyword">func</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span>, <span class="hljs-title">a</span>, <span class="hljs-title">b</span> <span class="hljs-title">int</span>) <span class="hljs-title">float64</span></span> &#123;<br><span class="hljs-comment">//</span><br>p := reflect.ValueOf(op).Pointer()<br>opName := runtime.FuncForPC(p).Name()<br>fmt.Printf(<span class="hljs-string">&quot;Calling function %s with params (%d, %d)\n&quot;</span>, opName, a, b)<br><span class="hljs-keyword">return</span> op(<span class="hljs-keyword">int</span>(a), <span class="hljs-keyword">int</span>(b))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pow</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span></span> &#123;<br><span class="hljs-keyword">return</span> math.Pow(<span class="hljs-keyword">float64</span>(a), <span class="hljs-keyword">float64</span>(b))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(apply(pow, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><br><span class="hljs-comment">// 匿名函数方式</span><br>fmt.Println(apply(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f, f2 <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span></span> &#123;<br><span class="hljs-keyword">return</span> math.Pow(<span class="hljs-keyword">float64</span>(f), <span class="hljs-keyword">float64</span>(f2))<br>&#125;, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br>&#125;<br><br><span class="hljs-comment">// 打印结果</span><br>Calling function main.pow with params (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-number">81</span><br>Calling function main.main.func1 with params (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><ul><li>可变参数列表，类似于Python中的*args</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-comment">// 函数可变参数列表</span><br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> nums &#123;<br>sum += nums[i]<br>&#125;<br><span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/functions/func.go</p><h4 id="闭包">闭包</h4><p><img src="/images/golang/func.png"></p><p>其中，<code>func(i int)</code>中<code>i</code>为局部变量，<code>sum</code>为自由变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">()</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>sum += i<br><span class="hljs-keyword">return</span> sum<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAdder</span><span class="hljs-params">()</span></span>  &#123;<br>a := adder()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++ &#123;<br>fmt.Printf(<span class="hljs-string">&quot;0 + ... + %d = %d \n&quot;</span>, i, a(i))<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">0</span> + ... + <span class="hljs-number">0</span> = <span class="hljs-number">0</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">1</span> = <span class="hljs-number">1</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">2</span> = <span class="hljs-number">3</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">3</span> = <span class="hljs-number">6</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">4</span> = <span class="hljs-number">10</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">5</span> = <span class="hljs-number">15</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">6</span> = <span class="hljs-number">21</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">7</span> = <span class="hljs-number">28</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">8</span> = <span class="hljs-number">36</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">9</span> = <span class="hljs-number">45</span> <br><br><br><span class="hljs-comment">// 正统函数式编程</span><br><span class="hljs-keyword">type</span> iAdder <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, iAdder)</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">iAdd</span><span class="hljs-params">(base <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">iAdder</span></span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, iAdder)</span></span> &#123;<br><span class="hljs-keyword">return</span> base +v, iAdd(base+v)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAdder</span><span class="hljs-params">()</span></span> &#123;<br>a2 := iAdd(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">var</span> s <span class="hljs-keyword">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;<span class="hljs-number">10</span>; i++ &#123;<br>s, a2 = a2(i)<br>fmt.Printf(<span class="hljs-string">&quot;0 + ... + %d = %d \n&quot;</span>, i, s)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-number">0</span> + ... + <span class="hljs-number">1</span> = <span class="hljs-number">1</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">2</span> = <span class="hljs-number">3</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">3</span> = <span class="hljs-number">6</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">4</span> = <span class="hljs-number">10</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">5</span> = <span class="hljs-number">15</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">6</span> = <span class="hljs-number">21</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">7</span> = <span class="hljs-number">28</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">8</span> = <span class="hljs-number">36</span> <br><span class="hljs-number">0</span> + ... + <span class="hljs-number">9</span> = <span class="hljs-number">45</span> <br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/go/functions/closure.go</p><h5 id="python中的闭包">Python中的闭包</h5><p>Python原生支持闭包</p><p><code>__closure__</code>可以查看闭包内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">adder</span>():</span><br>    s = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">v: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-keyword">nonlocal</span> s<br>        s += v<br>        <span class="hljs-keyword">return</span> s<br><br>    <span class="hljs-keyword">return</span> f<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    a = adder()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-built_in">print</span>(i, a(i), a.__closure__)<br>        <br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6290</span>&gt;,)<br><span class="hljs-number">1</span> <span class="hljs-number">1</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb62b0</span>&gt;,)<br><span class="hljs-number">2</span> <span class="hljs-number">3</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb62f0</span>&gt;,)<br><span class="hljs-number">3</span> <span class="hljs-number">6</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6350</span>&gt;,)<br><span class="hljs-number">4</span> <span class="hljs-number">10</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb63d0</span>&gt;,)<br><span class="hljs-number">5</span> <span class="hljs-number">15</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6470</span>&gt;,)<br><span class="hljs-number">6</span> <span class="hljs-number">21</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6530</span>&gt;,)<br><span class="hljs-number">7</span> <span class="hljs-number">28</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6610</span>&gt;,)<br><span class="hljs-number">8</span> <span class="hljs-number">36</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6710</span>&gt;,)<br><span class="hljs-number">9</span> <span class="hljs-number">45</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6830</span>&gt;,)<br></code></pre></td></tr></table></figure><h5 id="java中的闭包">Java中的闭包</h5><p>1.8以后，可以使用Function接口和Lambda表达式可以创建函数对象；</p><p>1.8之前，可以使用Lambda表达式或者匿名内部类也可以实现闭包；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> javax.xml.ws.Holder;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br><br>    <span class="hljs-keyword">final</span> Holder&lt;Integer&gt; sum = <span class="hljs-keyword">new</span> Holder&lt;&gt;(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">public</span>  Function&lt;Integer, Integer&gt;testClosure()&#123;<br>        <span class="hljs-comment">// 闭包  使用Function接口和Lambda表达式可以创建函数对象</span><br>        <span class="hljs-keyword">return</span> (Integer value) -&gt; &#123;<br>            sum.value += value;<br>            <span class="hljs-keyword">return</span> sum.value;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyTest mt = <span class="hljs-keyword">new</span> MyTest();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(i +<span class="hljs-string">&quot;, &quot;</span>+ mt.testClosure().apply(<span class="hljs-keyword">new</span> Integer(i)));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="闭包应用">闭包应用</h4><h6 id="为函数实现接口">为函数实现接口</h6><h6 id="实现函数遍历二叉树">实现函数遍历二叉树</h6><h6 id="单例模式限制流量模式">单例模式,限制流量模式</h6><h3 id="进阶">进阶</h3><h4 id="原生库">原生库</h4><h5 id="reflect">reflect</h5><p>reflect.ValueOf: 用于操作值，部分值可以被反射修改</p><p>reflect.TypeOf: 用于操作类信息，只能读取（可以通过reflect.Value得到）</p><p>reflect.Kind: 用于判断类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><br><span class="hljs-string">&quot;github.com/stretchr/testify/assert&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IteratorFields</span><span class="hljs-params">(val any)</span> <span class="hljs-params">(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]any, error)</span></span> &#123;<br><span class="hljs-keyword">if</span> val == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;val is nil&quot;</span>)<br>&#125;<br><br>typeOf := reflect.TypeOf(val)<br>valueOf := reflect.ValueOf(val)<br>res := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]any)<br><span class="hljs-keyword">for</span> typeOf.Kind() == reflect.Pointer &#123;<br>typeOf = typeOf.Elem()<br>valueOf = valueOf.Elem()<br>&#125;<br><span class="hljs-keyword">switch</span> typeOf.Kind() &#123;<br><span class="hljs-keyword">case</span> reflect.Struct:<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;unsupported type&quot;</span>)<br>&#125;<br>numField := typeOf.NumField()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; numField; i++ &#123;<br>field := typeOf.Field(i)<br>res[field.Name] = valueOf.Field(i).Interface()<br>&#125;<br><br><span class="hljs-keyword">return</span> res, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestIteratorFields</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>cases := []<span class="hljs-keyword">struct</span> &#123;<br>name   <span class="hljs-keyword">string</span><br>val    any<br>expect <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]any<br>e      error<br>&#125;&#123;<br>&#123;<br>name: <span class="hljs-string">&quot;user&quot;</span>,<br>val:  <span class="hljs-keyword">struct</span>&#123; Name <span class="hljs-keyword">string</span> &#125;&#123;Name: <span class="hljs-string">&quot;tom&quot;</span>&#125;,<br>expect: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]any&#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;tom&quot;</span>,<br>&#125;,<br>e: <span class="hljs-literal">nil</span>,<br>&#125;,<br>&#123;<br>name:   <span class="hljs-string">&quot;nil&quot;</span>,<br>val:    <span class="hljs-literal">nil</span>,<br>expect: <span class="hljs-literal">nil</span>,<br>e:      errors.New(<span class="hljs-string">&quot;val is nil&quot;</span>),<br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&quot;pointer&quot;</span>,<br>val:  &amp;<span class="hljs-keyword">struct</span>&#123; Name <span class="hljs-keyword">string</span> &#125;&#123;Name: <span class="hljs-string">&quot;pony&quot;</span>&#125;,<br>expect: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]any&#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;pony&quot;</span>,<br>&#125;,<br>e: <span class="hljs-literal">nil</span>,<br>&#125;,<br>&#123;<br>name:   <span class="hljs-string">&quot;unsupported&quot;</span>,<br>val:    <span class="hljs-number">1</span>,<br>expect: <span class="hljs-literal">nil</span>,<br>e:      errors.New(<span class="hljs-string">&quot;unsupported type&quot;</span>),<br>&#125;,<br>&#123;<br>name:   <span class="hljs-string">&quot;unsupported&quot;</span>,<br>val:    <span class="hljs-string">&quot;&quot;</span>,<br>expect: <span class="hljs-literal">nil</span>,<br>e:      errors.New(<span class="hljs-string">&quot;unsupported type&quot;</span>),<br>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> cases &#123;<br>t.Run(c.name, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>res, err := IteratorFields(c.val)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>assert.Equal(t, c.e, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>assert.Equal(t, c.expect, res)<br>&#125;)<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>reflect.FuncInfo</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> FuncInfo <span class="hljs-keyword">struct</span> &#123;<br>Name   <span class="hljs-keyword">string</span><br>In     []reflect.Type<br>Out    []reflect.Type<br>Result []any<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IteratorFuncInfo</span><span class="hljs-params">(val any)</span> <span class="hljs-params">(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo, error)</span></span> &#123;<br><span class="hljs-keyword">if</span> val == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;val is nil&quot;</span>)<br>&#125;<br><br>typeOf := reflect.TypeOf(val)<br><span class="hljs-keyword">if</span> typeOf.Kind() != reflect.Struct &amp;&amp; typeOf.Kind() != reflect.Ptr &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;unsupported type&quot;</span>)<br>&#125;<br><br>num := typeOf.NumMethod()<br>result := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo, num)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; num; i++ &#123;<br>f := typeOf.Method(i)<br>numIn := f.Type.NumIn()<br><br>in := <span class="hljs-built_in">make</span>([]reflect.Type, <span class="hljs-number">0</span>, f.Type.NumIn())<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; numIn; j++ &#123;<br>in = <span class="hljs-built_in">append</span>(in, f.Type.In(j))<br>&#125;<br><br>out := <span class="hljs-built_in">make</span>([]reflect.Type, <span class="hljs-number">0</span>, f.Type.NumOut())<br>numOut := f.Type.NumOut()<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; numOut; j++ &#123;<br>out = <span class="hljs-built_in">append</span>(out, f.Type.Out(j))<br>&#125;<br><br>callVals := f.Func.Call([]reflect.Value&#123;reflect.ValueOf(val)&#125;)<br>calRes := <span class="hljs-built_in">make</span>([]any, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(callVals))<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> callVals &#123;<br>calRes = <span class="hljs-built_in">append</span>(calRes, value.Interface())<br>&#125;<br><br>result[f.Name] = &amp;FuncInfo&#123;<br>Name:   f.Name,<br>In:     in,<br>Out:    out,<br>Result: calRes,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> result, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Order <span class="hljs-keyword">struct</span> &#123;<br>buyer  <span class="hljs-keyword">int64</span><br>seller <span class="hljs-keyword">int64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o Order)</span> <span class="hljs-title">GetBuyer</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;<br><span class="hljs-keyword">return</span> o.buyer<br>&#125;<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>age <span class="hljs-keyword">int64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(o *User)</span> <span class="hljs-title">GetAge</span><span class="hljs-params">()</span> <span class="hljs-title">int64</span></span> &#123;<br><span class="hljs-keyword">return</span> o.age<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestIteratorFuncInfo</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>cases := []<span class="hljs-keyword">struct</span> &#123;<br>name   <span class="hljs-keyword">string</span><br>val    any<br>expect <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo<br>e      error<br>&#125;&#123;<br>&#123;<br>name:   <span class="hljs-string">&quot;nil&quot;</span>,<br>val:    <span class="hljs-literal">nil</span>,<br>expect: <span class="hljs-literal">nil</span>,<br>e:      errors.New(<span class="hljs-string">&quot;val is nil&quot;</span>),<br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&quot;struct&quot;</span>,<br>val: Order&#123;<br>buyer: <span class="hljs-number">10</span>,<br>&#125;,<br>expect: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo&#123;<br><span class="hljs-string">&quot;GetBuyer&quot;</span>: &#123;<br>Name:   <span class="hljs-string">&quot;GetBuyer&quot;</span>,<br>In:     []reflect.Type&#123;reflect.TypeOf(Order&#123;&#125;)&#125;,<br>Out:    []reflect.Type&#123;reflect.TypeOf(<span class="hljs-keyword">int64</span>(<span class="hljs-number">0</span>))&#125;,<br>Result: []any&#123;<span class="hljs-keyword">int64</span>(<span class="hljs-number">10</span>)&#125;,<br>&#125;,<br>&#125;,<br>e: <span class="hljs-literal">nil</span>,<br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&quot;struct type but input pointer&quot;</span>,<br>val: &amp;Order&#123;<br>buyer: <span class="hljs-number">10</span>,<br>&#125;,<br>expect: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo&#123;<br><span class="hljs-string">&quot;GetBuyer&quot;</span>: &#123;<br>Name:   <span class="hljs-string">&quot;GetBuyer&quot;</span>,<br>In:     []reflect.Type&#123;reflect.TypeOf(&amp;Order&#123;&#125;)&#125;,<br>Out:    []reflect.Type&#123;reflect.TypeOf(<span class="hljs-keyword">int64</span>(<span class="hljs-number">0</span>))&#125;,<br>Result: []any&#123;<span class="hljs-keyword">int64</span>(<span class="hljs-number">10</span>)&#125;,<br>&#125;,<br>&#125;,<br>e: <span class="hljs-literal">nil</span>,<br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&quot;pointer&quot;</span>,<br>val: &amp;User&#123;<br>age: <span class="hljs-number">1</span>,<br>&#125;,<br>expect: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo&#123;<br><span class="hljs-string">&quot;GetAge&quot;</span>: &#123;<br>Name:   <span class="hljs-string">&quot;GetAge&quot;</span>,<br>In:     []reflect.Type&#123;reflect.TypeOf(&amp;User&#123;&#125;)&#125;,<br>Out:    []reflect.Type&#123;reflect.TypeOf(<span class="hljs-keyword">int64</span>(<span class="hljs-number">0</span>))&#125;,<br>Result: []any&#123;<span class="hljs-keyword">int64</span>(<span class="hljs-number">1</span>)&#125;,<br>&#125;,<br>&#125;,<br>e: <span class="hljs-literal">nil</span>,<br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&quot;pointer but input struct&quot;</span>,<br>val: User&#123;<br>age: <span class="hljs-number">1</span>,<br>&#125;,<br>expect: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*FuncInfo&#123;<br><span class="hljs-string">&quot;GetAge&quot;</span>: &#123;<br>Name:   <span class="hljs-string">&quot;GetAge&quot;</span>,<br>In:     []reflect.Type&#123;reflect.TypeOf(User&#123;&#125;)&#125;,<br>Out:    []reflect.Type&#123;reflect.TypeOf(<span class="hljs-keyword">int64</span>(<span class="hljs-number">0</span>))&#125;,<br>Result: []any&#123;<span class="hljs-keyword">int64</span>(<span class="hljs-number">1</span>)&#125;,<br>          <span class="hljs-comment">// expected: map[string]*reflectx.FuncInfo&#123;&quot;GetAge&quot;:(*reflectx.FuncInfo)(0xc000094480)&#125;</span><br>        <span class="hljs-comment">// actual  : map[string]*reflectx.FuncInfo&#123;&#125;</span><br>&#125;,<br>&#125;,<br>e: <span class="hljs-literal">nil</span>,<br>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> cases &#123;<br>t.Run(c.name, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>res, err := IteratorFuncInfo(c.val)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>assert.Equal(t, c.e, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>assert.Equal(t, c.expect, res)<br>&#125;)<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="unsafe">unsafe</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Test</span><span class="hljs-params">(t *testing.T)</span></span>  &#123;<br><br><span class="hljs-comment">// 任何类型的指针值都可以转换为Pointer // unsafe.Pointer(&amp;a1)</span><br><span class="hljs-comment">// Pointer可以转换为任何类型的指针值 // (*float32)(unsafe.Pointer(numPointer))</span><br><span class="hljs-comment">// uintptr可以转换为 Pointer // unsafe.Pointer(uintptr(nPointer) + + unsafe.Sizeof(&amp;a) * 3)</span><br><span class="hljs-comment">// Pointer可以转换为 uintptr // uintptr(unsafe.Pointer(numPointer))</span><br><span class="hljs-comment">// uintptr 是一个整数类型，它足够大，可以存储. 只有将Pointer转换成uintptr才能进行指针的相关操作</span><br><br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int32</span> = <span class="hljs-number">10</span><br>tt := unsafe.Sizeof(a)<br>fmt.Println(tt)  <span class="hljs-comment">// 4</span><br><br><span class="hljs-keyword">var</span> ab <span class="hljs-keyword">int64</span> = <span class="hljs-number">10</span><br>fmt.Println(unsafe.Sizeof(ab))  <span class="hljs-comment">// 8</span><br><br><span class="hljs-keyword">var</span> abc <span class="hljs-keyword">int</span> = <span class="hljs-number">10</span><br>fmt.Println(unsafe.Sizeof(abc))  <span class="hljs-comment">// 8</span><br><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;test&quot;</span><br>fmt.Println(unsafe.Sizeof(b))   <span class="hljs-comment">// 16 Sizeof(string)占计算string header的大小, struct string &#123; *str uint8; len int;&#125;</span><br><br><span class="hljs-keyword">var</span> bc <span class="hljs-keyword">string</span> = <span class="hljs-string">&quot;test-test-test-test-test-test-test-test-test-test-test-test-test-test&quot;</span><br>fmt.Println(unsafe.Sizeof(bc))  <span class="hljs-comment">// 16 Sizeof(string)占计算string header的大小, struct string &#123; *str uint8; len int;&#125;</span><br><br><span class="hljs-keyword">type</span> aa <span class="hljs-keyword">struct</span> &#123;<br>B <span class="hljs-keyword">bool</span><br>C <span class="hljs-keyword">uint64</span><br>&#125;<br>c := aa&#123;&#125;<br>fmt.Println(unsafe.Sizeof(c))  <span class="hljs-comment">// 16 涉及到内存对齐的问题</span><br><span class="hljs-comment">// 返回结构体中某个字段的偏移量, 这个字段必须是structValue.field形式. 也就是返回结构体变量的开始位置到那个字段的开始位置之间字节数.</span><br>fmt.Println(unsafe.Offsetof(c.B), unsafe.Offsetof(c.C)) <span class="hljs-comment">// 0 8</span><br><br>fmt.Println(unsafe.Sizeof(<span class="hljs-keyword">bool</span>(<span class="hljs-literal">true</span>)))           <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">type</span> bb <span class="hljs-keyword">struct</span> &#123;<br>B *<span class="hljs-keyword">bool</span><br>&#125;<br>c1 := bb&#123;&#125;<br>fmt.Println(unsafe.Sizeof(c1)) <span class="hljs-comment">// 指针占8个字节(64位机器)</span><br><br><span class="hljs-comment">// 内存对齐</span><br><span class="hljs-comment">// 就是为了加快内存的存取速度, 用空间换时间的做法</span><br>fmt.Printf(<span class="hljs-string">&quot;bool: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">bool</span>(<span class="hljs-literal">true</span>)))           <span class="hljs-comment">// 1</span><br>fmt.Printf(<span class="hljs-string">&quot;int32: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">int32</span>(<span class="hljs-number">0</span>)))            <span class="hljs-comment">// 4</span><br>fmt.Printf(<span class="hljs-string">&quot;int8: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">int8</span>(<span class="hljs-number">0</span>)))              <span class="hljs-comment">// 1</span><br>fmt.Printf(<span class="hljs-string">&quot;int64: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">int64</span>(<span class="hljs-number">0</span>)))            <span class="hljs-comment">// 8</span><br>fmt.Printf(<span class="hljs-string">&quot;byte: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">byte</span>(<span class="hljs-number">0</span>)))              <span class="hljs-comment">// 1</span><br>fmt.Printf(<span class="hljs-string">&quot;string: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">string</span>(<span class="hljs-string">&quot;true&quot;</span>)))     <span class="hljs-comment">// 8</span><br>fmt.Printf(<span class="hljs-string">&quot;map: %d\n&quot;</span>, unsafe.Alignof(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;&#125;))   <span class="hljs-comment">// 8</span><br><br><span class="hljs-comment">// 对齐规则</span><br><span class="hljs-comment">// 1.结构体的成员变量，第一个成员变量的偏移量为 0。往后的每个成员变量的对齐值必须为编译器默认对齐长度（#pragma pack(n)）或当前成员变量类型的长度（unsafe.Sizeof），取最小值作为当前类型的对齐值。其偏移量必须为对齐值的整数倍</span><br><span class="hljs-comment">// 2.结构体本身，对齐值必须为编译器默认对齐长度（#pragma pack(n)）或结构体的所有成员变量类型中的最大长度，取最大数的最小整数倍作为对齐值</span><br><span class="hljs-comment">// 3.结合以上两点，可得知若编译器默认对齐长度（#pragma pack(n)）超过结构体内成员变量的类型最大长度时，默认对齐长度是没有任何意义的</span><br><span class="hljs-keyword">type</span> Part1 <span class="hljs-keyword">struct</span> &#123;<br>a <span class="hljs-keyword">bool</span><br>b <span class="hljs-keyword">int32</span><br>c <span class="hljs-keyword">int8</span><br>d <span class="hljs-keyword">int64</span><br>e <span class="hljs-keyword">byte</span><br>&#125;<br>part := Part1&#123;&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Part1 Size: %d, align: %d\n&quot;</span>, unsafe.Sizeof(part), unsafe.Alignof(part))   <span class="hljs-comment">// 32 8</span><br><br><span class="hljs-keyword">type</span> Part2 <span class="hljs-keyword">struct</span> &#123;<br>a <span class="hljs-keyword">bool</span><br>e <span class="hljs-keyword">byte</span><br>c <span class="hljs-keyword">int8</span><br>b <span class="hljs-keyword">int32</span><br>d <span class="hljs-keyword">int64</span><br>&#125;<br>par2 := Part2&#123;&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Part1 Size: %d, align: %d\n&quot;</span>, unsafe.Sizeof(par2), unsafe.Alignof(par2))   <span class="hljs-comment">// 16 8</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestApply</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// Float64的bits</span><br><span class="hljs-keyword">var</span> f <span class="hljs-keyword">float64</span> = <span class="hljs-number">0.1</span><br>fmt.Println(*(*<span class="hljs-keyword">uint64</span>)(unsafe.Pointer(&amp;f)))  <span class="hljs-comment">// 4591870180066957722</span><br><br><span class="hljs-comment">// 计算偏移量</span><br><span class="hljs-keyword">type</span> aa <span class="hljs-keyword">struct</span> &#123;<br>B <span class="hljs-keyword">bool</span><br>C <span class="hljs-keyword">uint64</span><br>&#125;<br>c := aa&#123;&#125;<br>fmt.Println(c)  <span class="hljs-comment">// &#123;false 0&#125;</span><br>aac := (*<span class="hljs-keyword">uint64</span>)(unsafe.Pointer(<span class="hljs-keyword">uintptr</span>(unsafe.Pointer(&amp;c)) + unsafe.Offsetof(c.C)))<br>*aac = <span class="hljs-number">10</span><br>fmt.Println(c)  <span class="hljs-comment">// &#123;false 10&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="sync">sync</h5><div class="note note-success">            <p>sync.Mutex &amp;&amp; sync.RWMutex</p><ul><li>state用来控制锁状态的核心。</li><li>sema处理沉睡/唤醒的信号量<ul><li>runtime_SemacquireMutex：sema加1并且挂起goroutine</li><li>runtime_Semrelease：sema减1并唤起sema上等待的一个goroutine</li></ul></li><li>总体流程<ol type="1"><li>先进性一个人<em>CAS操作</em>。如果锁空闲，并且没有其他协程竞争，便直接成功。</li><li>否则自旋几次，如果成功，不用加入队列。</li><li>否则加入队列</li><li>从队列中被唤醒<ul><li>正常模式：和新来的协程一起竞争锁，但是大概率失败（等待队列中的协程等待时间<strong><em>超过1ms</em></strong>,锁会变成饥饿模式）</li><li>饥饿模式：肯定拿到锁</li></ul></li></ol></li><li>可以基于RWMutex实现double-check<ul><li>加读锁先检查一遍</li><li>释放读锁</li><li>加写锁</li><li>在检查一遍</li></ul></li></ul>          </div><div id="flowchart-0" class="flow-chart"></div><p><img src="/images/golang/sync.Mutex.interview.png"></p><div class="note note-success">            <p>sync.Once</p><ul><li>利原子操作实现读写锁的double-check</li></ul>          </div><p><img src="/images/golang/once.double-check.png"></p><div class="note note-success">            <p>sync.Pool</p><ul><li>PMG调度模型实现的Pool。<ul><li>每个P带有一个poolLocal对象</li><li>每个poolLocal又一个private和shared</li><li>shared指向的是一个poolChain，poolChain的数据会被别的P偷走</li><li>poolChain是一个链表+ring buffer的双重结构<ul><li>从总体上看，是一个双链表</li><li>从单个节点来说，它指向的是一个ring buffer（后面节点的ring buffer长度是前面节点ring buffer长度的二倍）</li></ul></li></ul></li><li>sync.Pool.Get<ul><li><em>private是否可用</em>，可用直接返回</li><li>不可用从自己的额poolChain里尝试获取<ul><li>从头开始找（当前头指向的是最近创建的ringbuffer）</li><li>在ringbuffer队列中从队头往队尾找</li></ul></li><li>找不到尝试从别的P里面偷（偷的过程是全局并发的）<ul><li>偷是从队尾开始找</li></ul></li><li>偷不到，会从victim中找</li><li>victim找不到，会创建新的</li></ul></li><li>sync.Pool.Put<ul><li>private没被占用，直接放private</li><li>否则放poolChain<ul><li>poolChain的HEAD没有创建,就创建一个HEAD,然后穿件一个容量为<em>8</em>的ring buffer,把数据丢过去</li><li>poolChain的HEAD指向的ring buffer没满，数据丢到ring buffer</li><li>poolChain的HEAD指向的ring buffer满了，创建新节点（2倍容量的ring buffer）,把数据丢过去</li></ul></li></ul></li><li>sync.Pool存粹依赖GC 进行淘汰。核心在于locals和victim<ul><li>locals会被挪过去变成victim</li><li>victim会被GC时直接回收掉，如果victim里的对象被再次使用，则会被丢到locals</li></ul></li></ul>          </div><p><img src="/images/golang/sync.pool.detail.png"></p><p><img src="/images/golang/sync.pool.png"></p><p><img src="/images/golang/sync.pool.interview.png"></p><div class="note note-success">            <p>sync.WaitGroup</p><ul><li>Add:state1的高32位自增1</li><li>Done:state1的高32位减1,就是Add(-1)</li><li>Wait:state1低32位自增1,同时利用state2和runtime_Semacquire将当前goroutine挂起</li></ul>          </div><p><img src="/images/golang/sync.waitgroup.add.png"></p><h5 id="ossignal">os/signal</h5><p>每个平台的信号定义或许有些不同。下面列出了POSIX中定义的信号。 Linux 使用34-64信号用作实时系统中。</p><h6 id="在posix.1-1990标准中定义的信号列表"><strong>在POSIX.1-1990标准中定义的信号列表</strong></h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Signals</span><br><span class="hljs-keyword">const</span> (<br>SIGABRT   = Signal(<span class="hljs-number">0x6</span>)<br>SIGALRM   = Signal(<span class="hljs-number">0xe</span>)<br>SIGBUS    = Signal(<span class="hljs-number">0xa</span>)<br>SIGCHLD   = Signal(<span class="hljs-number">0x14</span>)<br>SIGCONT   = Signal(<span class="hljs-number">0x13</span>)<br>SIGEMT    = Signal(<span class="hljs-number">0x7</span>)<br>SIGFPE    = Signal(<span class="hljs-number">0x8</span>)<br>SIGHUP    = Signal(<span class="hljs-number">0x1</span>)<br>SIGILL    = Signal(<span class="hljs-number">0x4</span>)<br>SIGINFO   = Signal(<span class="hljs-number">0x1d</span>)<br>SIGINT    = Signal(<span class="hljs-number">0x2</span>)<br>SIGIO     = Signal(<span class="hljs-number">0x17</span>)<br>SIGIOT    = Signal(<span class="hljs-number">0x6</span>)<br>SIGKILL   = Signal(<span class="hljs-number">0x9</span>)<br>SIGPIPE   = Signal(<span class="hljs-number">0xd</span>)<br>SIGPROF   = Signal(<span class="hljs-number">0x1b</span>)<br>SIGQUIT   = Signal(<span class="hljs-number">0x3</span>)<br>SIGSEGV   = Signal(<span class="hljs-number">0xb</span>)<br>SIGSTOP   = Signal(<span class="hljs-number">0x11</span>)<br>SIGSYS    = Signal(<span class="hljs-number">0xc</span>)<br>SIGTERM   = Signal(<span class="hljs-number">0xf</span>)<br>SIGTRAP   = Signal(<span class="hljs-number">0x5</span>)<br>SIGTSTP   = Signal(<span class="hljs-number">0x12</span>)<br>SIGTTIN   = Signal(<span class="hljs-number">0x15</span>)<br>SIGTTOU   = Signal(<span class="hljs-number">0x16</span>)<br>SIGURG    = Signal(<span class="hljs-number">0x10</span>)<br>SIGUSR1   = Signal(<span class="hljs-number">0x1e</span>)<br>SIGUSR2   = Signal(<span class="hljs-number">0x1f</span>)<br>SIGVTALRM = Signal(<span class="hljs-number">0x1a</span>)<br>SIGWINCH  = Signal(<span class="hljs-number">0x1c</span>)<br>SIGXCPU   = Signal(<span class="hljs-number">0x18</span>)<br>SIGXFSZ   = Signal(<span class="hljs-number">0x19</span>)<br>)<br><span class="hljs-comment">// Signal table</span><br><span class="hljs-keyword">var</span> signals = [...]<span class="hljs-keyword">string</span>&#123;<br><span class="hljs-number">1</span>:  <span class="hljs-string">&quot;hangup&quot;</span>,                     <span class="hljs-comment">// 终端控制进程结束(终端连接断开)</span><br><span class="hljs-number">2</span>:  <span class="hljs-string">&quot;interrupt&quot;</span>,                  <span class="hljs-comment">// 用户发送INTR字符(Ctrl+C)触发</span><br><span class="hljs-number">3</span>:  <span class="hljs-string">&quot;quit&quot;</span>,                       <span class="hljs-comment">// 用户发送QUIT字符(Ctrl+/)触发</span><br><span class="hljs-number">4</span>:  <span class="hljs-string">&quot;illegal instruction&quot;</span>,        <span class="hljs-comment">// 非法指令(程序错误、试图执行数据段、栈溢出等)</span><br><span class="hljs-number">5</span>:  <span class="hljs-string">&quot;trace/BPT trap&quot;</span>,             <span class="hljs-comment">// Trap指令触发(如断点，在调试器中使用)</span><br><span class="hljs-number">6</span>:  <span class="hljs-string">&quot;abort trap&quot;</span>,                 <span class="hljs-comment">// 调用abort函数触发</span><br><span class="hljs-number">7</span>:  <span class="hljs-string">&quot;EMT trap&quot;</span>,<br><span class="hljs-number">8</span>:  <span class="hljs-string">&quot;floating point exception&quot;</span>,   <span class="hljs-comment">// 算术运行错误(浮点运算错误、除数为零等)</span><br><span class="hljs-number">9</span>:  <span class="hljs-string">&quot;killed&quot;</span>,                     <span class="hljs-comment">// 无条件结束程序(不能被捕获、阻塞或忽略)</span><br><span class="hljs-number">10</span>: <span class="hljs-string">&quot;bus error&quot;</span>,                  <span class="hljs-comment">// 非法地址(内存地址对齐错误)</span><br><span class="hljs-number">11</span>: <span class="hljs-string">&quot;segmentation fault&quot;</span>,         <span class="hljs-comment">// 无效内存引用(试图访问不属于自己的内存空间、对只读内存空间进行写操作)</span><br><span class="hljs-number">12</span>: <span class="hljs-string">&quot;bad system call&quot;</span>,<br><span class="hljs-number">13</span>: <span class="hljs-string">&quot;broken pipe&quot;</span>,                <span class="hljs-comment">// 消息管道损坏(FIFO/Socket通信时，管道未打开而进行写操作)</span><br><span class="hljs-number">14</span>: <span class="hljs-string">&quot;alarm clock&quot;</span>,                <span class="hljs-comment">// 时钟定时信号</span><br><span class="hljs-number">15</span>: <span class="hljs-string">&quot;terminated&quot;</span>,                 <span class="hljs-comment">// 结束程序(可以被捕获、阻塞或忽略)</span><br><span class="hljs-number">16</span>: <span class="hljs-string">&quot;urgent I/O condition&quot;</span>,       <span class="hljs-comment">// </span><br><span class="hljs-number">17</span>: <span class="hljs-string">&quot;suspended (signal)&quot;</span>,<br><span class="hljs-number">18</span>: <span class="hljs-string">&quot;suspended&quot;</span>,<br><span class="hljs-number">19</span>: <span class="hljs-string">&quot;continued&quot;</span>,<br><span class="hljs-number">20</span>: <span class="hljs-string">&quot;child exited&quot;</span>,<br><span class="hljs-number">21</span>: <span class="hljs-string">&quot;stopped (tty input)&quot;</span>,<br><span class="hljs-number">22</span>: <span class="hljs-string">&quot;stopped (tty output)&quot;</span>,<br><span class="hljs-number">23</span>: <span class="hljs-string">&quot;I/O possible&quot;</span>,<br><span class="hljs-number">24</span>: <span class="hljs-string">&quot;cputime limit exceeded&quot;</span>,<br><span class="hljs-number">25</span>: <span class="hljs-string">&quot;filesize limit exceeded&quot;</span>,<br><span class="hljs-number">26</span>: <span class="hljs-string">&quot;virtual timer expired&quot;</span>,<br><span class="hljs-number">27</span>: <span class="hljs-string">&quot;profiling timer expired&quot;</span>,<br><span class="hljs-number">28</span>: <span class="hljs-string">&quot;window size changes&quot;</span>,<br><span class="hljs-number">29</span>: <span class="hljs-string">&quot;information request&quot;</span>,<br><span class="hljs-number">30</span>: <span class="hljs-string">&quot;user defined signal 1&quot;</span>,<br><span class="hljs-number">31</span>: <span class="hljs-string">&quot;user defined signal 2&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="kill-pid-与-kill--9-pid的区别"><strong>kill pid 与 kill -9 pid的区别</strong></h6><p>kill pid的作用是向进程号为pid的进程发送SIGTERM（这是kill默认发送的信号），该信号是一个结束进程的信号且可以被应用程序捕获。若应用程序没有捕获并响应该信号的逻辑代码，则该信号的默认动作是kill掉进程。这是终止指定进程的推荐做法。</p><p><code>kill -9 pid</code> 则是向进程号为pid的进程发送 SIGKILL（该信号的编号为9），从本文上面的说明可知，SIGKILL既不能被应用程序捕获，也不能被阻塞或忽略，其动作是立即结束指定进程。通俗地说，应用程序根本无法“感知”SIGKILL信号，它在完全无准备的情况下，就被收到SIGKILL信号的操作系统给干掉了，显然，在这种“暴力”情况下，应用程序完全没有释放当前占用资源的机会。事实上，SIGKILL信号是直接发给init进程的，它收到该信号后，负责终止pid指定的进程。在某些情况下（如进程已经hang死，无法响应正常信号），就可以使用 <code>kill -9</code> 来结束进程。</p><h6 id="应用程序如何优雅退出"><strong>应用程序如何优雅退出?</strong></h6><p>Linux Server端的应用程序经常会长时间运行，在运行过程中，可能申请了很多系统资源，也可能保存了很多状态，在这些场景下，我们希望进程在退出前，可以释放资源或将当前状态dump到磁盘上或打印一些重要的日志，也就是希望进程优雅退出（exit gracefully）。</p><h6 id="go中的signal发送和处理">Go中的Signal发送和处理</h6><ul><li>golang中对信号的处理主要使用os/signal包中的两个方法：</li><li>notify方法用来监听收到的信号</li><li>stop方法用来取消监听</li></ul><p>监听全部信号</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br>)<br><br><span class="hljs-comment">// 监听全部信号</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)<br><span class="hljs-comment">// 监听所有信号</span><br>signal.Notify(c)<br>fmt.Println(<span class="hljs-string">&quot;启动了程序&quot;</span>)<br>s := &lt;-c<br>fmt.Println(<span class="hljs-string">&quot;收到信号:&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><p>监听指定信号</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br>)<br><span class="hljs-comment">// 监听指定信号</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)<br><span class="hljs-comment">// 监听指定信号</span><br>signal.Notify(c, os.Interrupt, os.Kill, syscall.SIGUSR1, syscall.SIGUSR2)<br>fmt.Println(<span class="hljs-string">&quot;启动了程序&quot;</span>)<br>s := &lt;-c<br>fmt.Println(<span class="hljs-string">&quot;收到信号:&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><p>优雅退出go守护进程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/signal&quot;</span><br><span class="hljs-string">&quot;syscall&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// 优雅退出go守护进程</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 信号通知chan</span><br>onSignal := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)<br><span class="hljs-comment">// 优雅退出</span><br><span class="hljs-comment">// 监听指定信号 ctrl+c 结束程序(可以被捕获、阻塞或忽略)</span><br>signal.Notify(onSignal, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT, syscall.SIGUSR1, syscall.SIGUSR2)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> sig := &lt;-onSignal:<br><span class="hljs-keyword">switch</span> sig &#123;<br><span class="hljs-keyword">case</span> syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM:<br>fmt.Println(<span class="hljs-string">&quot;退出:&quot;</span>, sig)<br>ExitFunc()<br><span class="hljs-keyword">case</span> syscall.SIGUSR1:<br>fmt.Println(<span class="hljs-string">&quot;usr1&quot;</span>, sig)<br><span class="hljs-keyword">case</span> syscall.SIGUSR2:<br>fmt.Println(<span class="hljs-string">&quot;usr2&quot;</span>, sig)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;其他信号:&quot;</span>, sig)<br>&#125;<br>&#125;<br>&#125;()<br>fmt.Println(<span class="hljs-string">&quot;启动了程序&quot;</span>)<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br>sum++<br>fmt.Println(<span class="hljs-string">&quot;休眠了:&quot;</span>, sum, <span class="hljs-string">&quot;秒&quot;</span>)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ExitFunc</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;开始退出...&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;执行清理...&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;结束退出...&quot;</span>)<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文档">文档</h3><p><code>godoc -http :6060</code>,生成网页文档</p><p><img src="/images/golang/doc.jpg"></p><p><img src="/images/golang/doc1.jpg"></p><p><code>go doc 方法名（包括包名）</code>,查看方法注释</p><p><img src="/images/golang/doc2.jpg"></p><p><code>xxx_test.go</code>生成示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ExampleQueue_Pop</span><span class="hljs-params">()</span></span> &#123;<br>q := Queue&#123;&#125;<br>_ = q.Push(<span class="hljs-string">&quot;asd&quot;</span>)<br>_ = q.Push(<span class="hljs-number">123</span>)<br><span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;<br>fmt.Println(v)<br>&#125;<br><span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;<br>fmt.Println(v)<br>&#125;<br><br><span class="hljs-comment">//Output:</span><br><span class="hljs-comment">//asd</span><br><span class="hljs-comment">//123</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/golang/doc_output.jpg"></p><h3 id="测试">测试</h3><p><em>表格驱动</em>测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMaxNoRepeatedZhn</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>tests := []<span class="hljs-keyword">struct</span>&#123;<br>s <span class="hljs-keyword">string</span><br>ans <span class="hljs-keyword">int</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>&#125;,<br>&#123;<span class="hljs-string">&quot;yes, 我爱gogogo&quot;</span>, <span class="hljs-number">9</span>&#125;,<br>&#123;<span class="hljs-string">&quot;abcadcb&quot;</span>, <span class="hljs-number">4</span>&#125;,<br>&#123;<span class="hljs-string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span>, <span class="hljs-number">8</span>&#125;,<br>&#125;<br><br><span class="hljs-keyword">for</span> _, tt := <span class="hljs-keyword">range</span> tests &#123;<br>act := MaxNoRepeatedZhn(tt.s)<br><span class="hljs-keyword">if</span> act != tt.ans &#123;<br>t.Errorf(<span class="hljs-string">&quot;get %d for input %s , but expect %d&quot;</span>, act, tt.s, tt.ans)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br>=== RUN   TestMaxNoRepeatedZhn<br>--- PASS: TestMaxNoRepeatedZhn (<span class="hljs-number">0.00</span>s)<br>PASS<br></code></pre></td></tr></table></figure><h4 id="覆盖测试">覆盖测试</h4><p><code>go tool cover</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">Usage of &#x27;go tool cover&#x27;:<br>Given a coverage profile produced by &#x27;go test&#x27;:<br>        go test -coverprofile=c.out<br><br>Open a web browser displaying annotated source code:<br>        go tool cover -html=c.out    # 常用<br><br>Write out an HTML file instead of launching a web browser:<br>        go tool cover -html=c.out -o coverage.html<br><br>Display coverage percentages to stdout for each function:<br>        go tool cover -func=c.out<br><br>Finally, to generate modified source code with coverage annotations<br>(what go test -cover does):<br>        go tool cover -mode=set -var=CoverageVariableName program.go<br><br>Flags:<br>  -V    print version and exit<br>  -func string<br>        output coverage profile information for each function<br>  -html string<br>        generate HTML representation of coverage profile<br>  -mode string<br>        coverage mode: set, count, atomic<br>  -o string<br>        file for output; default: stdout<br>  -var string<br>        name of coverage variable to generate (default &quot;GoCover&quot;)<br><br>  Only one of -html, -func, or -mode may be set.<br></code></pre></td></tr></table></figure><h4 id="benchmark"><code>Benchmark</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMaxNoRepeatedZhn</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>s := <span class="hljs-string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span><br>ans := <span class="hljs-number">8</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>act := MaxNoRepeatedZhn(s)<br><span class="hljs-keyword">if</span> act != ans &#123;<br>b.Errorf(<span class="hljs-string">&quot;get %d for input %s , but expect %d&quot;</span>, act, s, ans)<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// 输出</span><br>goos: darwin<br>goarch: amd64<br>pkg: offer/note/collections<br>BenchmarkMaxNoRepeatedZhn<br>BenchmarkMaxNoRepeatedZhn<span class="hljs-number">-8</span>    <span class="hljs-number">1097594</span>      <span class="hljs-number">1024</span> ns/op<br>PASS<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/collections/strings_test.go</p><h4 id="pprof性能测试">pprof性能测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxx@xxxdeMacBook-Pro  ~/Projects/golang/src/offer/note/collections master ±✚ go test -bench . -cpuprofile cpu.out<br>goos: darwin<br>goarch: amd64<br>pkg: offer/note/collections<br>BenchmarkMaxNoRepeatedZhn-8      1286594               934 ns/op<br>PASS<br>ok      offer/note/collections  2.656s<br>xxx@xxxdeMacBook-Pro  ~/Projects/golang/src/offer/note/collections master ±✚ go tool pprof cpu.out               <br>Type: cpu<br>Time: Mar 2, 2021 at 6:03pm (CST)<br>Duration: 2.34s, Total samples = 2.05s (87.57%)<br>Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)<br>(pprof) web<br>failed to execute dot. Is Graphviz installed? Error: exec: &quot;dot&quot;: executable file not found in $PATH<br>(pprof) <br></code></pre></td></tr></table></figure><p>☞<code>failed to execute dot. Is Graphviz installed? Error: exec: "dot": executable file not found in $PATH</code>是因为电脑未安装生成.svg文件的工具<code>Graphviz</code></p><h5 id="安装graphviz">安装<code>Graphviz</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install graphviz<br>xxx@xxxdeMacBook-Pro  ~/Projects/golang/src/github.com  brew install graphviz<br>Error:<br>  homebrew-core is a shallow clone.<br>  homebrew-cask is a shallow clone.<br>To `brew update`, first run:<br>  git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow<br>  git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow<br>These commands may take a few minutes to run due to the large size of the repositories.<br>This restriction has been made on GitHub&#x27;s request because updating shallow<br>clones is an extremely expensive operation due to the tree layout and traffic of<br>Homebrew/homebrew-core and Homebrew/homebrew-cask. We don&#x27;t do this for you<br>automatically to avoid repeatedly performing an expensive unshallow operation in<br>CI systems (which should instead be fixed to not use shallow clones). Sorry for<br>the inconvenience!<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libpng-1.6.37.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/freetype-2.10.4.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fontconfig-2.13.1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jpeg-9d.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtiff-4.1.0_1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">########################################                                 58.1%</span></span><br>curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54<br>Error: Failed to download resource &quot;libtiff&quot;<br>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtiff-4.1.0_1.big_sur.bottle.tar.gz<br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://download.osgeo.org/libtiff/tiff-4.1.0.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/webp-1.1.0.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gd-2.3.0.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libffi-3.3.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pcre-8.44.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/glib-2.66.2_1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#########                                                                14.5%</span></span><br>curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54<br>Error: Failed to download resource &quot;glib&quot;<br>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/glib-2.66.2_1.big_sur.bottle.tar.gz<br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/6164294a75541c278f3863b111791376caa3ad26/glib/hardcoded-paths.diff<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://download.gnome.org/sources/glib/2.66/glib-2.66.2.tar.xz<br>==&gt; Downloading from https://mirrors.ustc.edu.cn/gnome/sources/glib/2.66/glib-2.66.2.tar.xz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jasper-2.0.22.big_sur.bottle.tar.gz<br>==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/ad3715537b3001b9a8924896e5c4e7eb90b21bb37e7171d964de2008edb13910?response-content-disposition=attachment%3Bfilename%3D%22jasper-2.0.22.big_sur.bo<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/netpbm-10.86.17.big_sur.bottle.tar.gz<br>==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/3540b31b88e9d8fc7288de5dac7b96be6f1c6652c604cfd167113bdf07738ca7?response-content-disposition=attachment%3Bfilename%3D%22netpbm-10.86.17.big_sur.<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gts-0.7.6_2.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/lzo-2.10.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pixman-0.40.0.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/cairo-1.16.0_3.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz<br>==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/1819bb48f7487d522a69c564dca6fe5dff4da658269f067e47edccddfaab9440?response-content-disposition=attachment%3Bfilename%3D%22gdk-pixbuf-2.42.0.big_su<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fribidi-1.0.10.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pkg-config-0.29.2_3.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphite2-1.3.14.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/icu4c-67.1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/harfbuzz-2.7.2.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pango-1.48.0.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################                                                     29.6%</span></span><br>curl: (18) transfer closed with 28187304 bytes remaining to read<br>Error: Failed to download resource &quot;librsvg&quot;<br>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gz<br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://download.gnome.org/sources/librsvg/2.50/librsvg-2.50.2.tar.xz<br>==&gt; Downloading from https://mirrors.ustc.edu.cn/gnome/sources/librsvg/2.50/librsvg-2.50.2.tar.xz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtool-2.4.6_2.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphviz-2.44.1.big_sur.bottle.1.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#####################################                                    52.9%</span></span><br>curl: (18) transfer closed with 6363689 bytes remaining to read<br>Error: Failed to download resource &quot;graphviz&quot;<br>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphviz-2.44.1.big_sur.bottle.1.tar.gz<br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/autoconf-2.69.big_sur.bottle.4.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/automake-1.16.3.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pkg-config-0.29.2_3.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/c393e3a39326eab27929f0f2ce40cb425e78bd8812166e6d835a08a8bf0c5f56--pkg-config-0.29.2_3.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libpng-1.6.37.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/3bd2e2a75fbfc893d9acc20eeafc5274e260ed2ca39483ccbb1450a734bc6775--libpng-1.6.37.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/freetype-2.10.4.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/1399fc577f7998623378e7bb01f8a716a43eff701304059936d592a76d5a4d31--freetype-2.10.4.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fontconfig-2.13.1.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/3790f4e94c8e7c868307933e3445a1244aadd794adaa6ed5f743533334489f93--fontconfig-2.13.1.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jpeg-9d.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/7ed5b41c2937740eca747a8077502454971fbbe02cfb5cfbd9b9e7379345d0cd--jpeg-9d.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtiff-4.1.0_1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/webp-1.1.0.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/1ae441623b4c63d896b5566300b24c06d772ff9f2676d7c9bd692ff6b8e22edb--webp-1.1.0.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gd-2.3.0.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/d71eed744db212a24cc7f607842253aacf0e1d25cd7891c884ec7ffc969162ac--gd-2.3.0.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libffi-3.3.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/49892306006d42a1f69ae4b36ff44b37c8e7170f6cf73a20e97f10bf9fa10e72--libffi-3.3.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pcre-8.44.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/9998b74590fa558f4c346e9770a62495d4aca8e992d0e883435e3574303ee241--pcre-8.44.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/glib-2.66.2_1.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jasper-2.0.22.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/86ba13e63264cbcafb0dbec9e35960e2662f9e4bde0306bd52984bf487e6581a--jasper-2.0.22.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/netpbm-10.86.17.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/9f8fa63491038e9bb811b03f09660342641c7f8132169bdb3800631d8d2b189e--netpbm-10.86.17.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gts-0.7.6_2.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/eab94b3870ce0c63232e9a992963c8a32ea53a7efa8a09e639066b40ae0a132b--gts-0.7.6_2.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/lzo-2.10.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/0020e09d8a2c473efa8db2af4b402358f5184578c801c7a7650de6c8bedca06a--lzo-2.10.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pixman-0.40.0.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/ddf94c89d763f2c63c00ce2090ff16d5abd832ca0e1e9beb2245da3cc159ce41--pixman-0.40.0.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/cairo-1.16.0_3.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/8ad096f68fcc70615ff77f14b50eafbed94e4a261c7860dcda41ba25c7d12f52--cairo-1.16.0_3.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/fb191d15b537de812241fe664f4149209c4d58ce3fbdd5e98a292fe495420f39--gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fribidi-1.0.10.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/9013c8a0aeb1d2fee9a999ef14adfb2416fef4e8399d87a65d753d44a586427b--fribidi-1.0.10.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/a7f9a1bcb83a7d322e495d163f15b4b8f4d0c05649eeacfcef2681a23b3eb8dd--gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphite2-1.3.14.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/5ce053636ab73845d956142cfd518a21701d3ec972e73367d204b81619b8b845--graphite2-1.3.14.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/icu4c-67.1.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/ddca8d436054c0f9c8c333d2e8dd957ccd3902680baf619e4baed434c9806998--icu4c-67.1.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/harfbuzz-2.7.2.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/1aead0f1ab97b4307a9c487a3191213ff63fd200d5eb9be947a11e8ca78df24a--harfbuzz-2.7.2.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pango-1.48.0.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/eded163bf136aa7a73e07f22c8b16f3a406bbd849b865246a95ee89ecd60aa4e--pango-1.48.0.big_sur.bottle.tar.gz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">##################################################                       71.3%</span></span><br>curl: (18) transfer closed with 11492026 bytes remaining to read<br>Error: Failed to download resource &quot;librsvg&quot;<br>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gz<br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://download.gnome.org/sources/librsvg/2.50/librsvg-2.50.2.tar.xz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/0388827e738392e3705cbb8800e43f279723caf5126ba50c7cd4e1ca5e2af872--librsvg-2.50.2.tar.xz<br>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtool-2.4.6_2.big_sur.bottle.tar.gz<br>Already downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/59a8e4e9bff6153b4cb25fda4de99648330e04fefdd7e9c98f92fa4d049a9f30--libtool-2.4.6_2.big_sur.bottle.tar.gz<br>==&gt; Downloading https://www2.graphviz.org/Packages/stable/portable_source/graphviz-2.44.1.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">###################                                                      28.5%</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; Installing dependencies for graphviz: autoconf, automake, pkg-config, libpng, freetype, fontconfig, jpeg, libtiff, webp, gd, libffi, pcre, glib, jasper, netpbm, gts, lzo, pixman, cairo, gdk-pixbuf, fribidi, gobject-introspection, graphite2, icu4c, harfbuzz, pango, librsvg and libtool<br>==&gt; Installing graphviz dependency: autoconf<br>==&gt; Pouring autoconf-2.69.big_sur.bottle.4.tar.gz<br>🍺  /usr/local/Cellar/autoconf/2.69: 68 files, 3.0MB<br>==&gt; Installing graphviz dependency: automake<br>==&gt; Pouring automake-1.16.3.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/automake/1.16.3: 131 files, 3.4MB<br>==&gt; Installing graphviz dependency: pkg-config<br>==&gt; Pouring pkg-config-0.29.2_3.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/pkg-config/0.29.2_3: 11 files, 656.6KB<br>==&gt; Installing graphviz dependency: libpng<br>==&gt; Pouring libpng-1.6.37.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/libpng/1.6.37: 27 files, 1.3MB<br>==&gt; Installing graphviz dependency: freetype<br>==&gt; Pouring freetype-2.10.4.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/freetype/2.10.4: 64 files, 2.3MB<br>==&gt; Installing graphviz dependency: fontconfig<br>==&gt; Pouring fontconfig-2.13.1.big_sur.bottle.tar.gz<br>==&gt; Regenerating font cache, this may take a while<br>==&gt; /usr/local/Cellar/fontconfig/2.13.1/bin/fc-cache -frv<br>🍺  /usr/local/Cellar/fontconfig/2.13.1: 531 files, 3.6MB<br>==&gt; Installing graphviz dependency: jpeg<br>==&gt; Pouring jpeg-9d.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/jpeg/9d: 21 files, 953.8KB<br>==&gt; Installing graphviz dependency: libtiff<br>==&gt; Pouring libtiff-4.1.0_1.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/libtiff/4.1.0_1: 247 files, 4.2MB<br>==&gt; Installing graphviz dependency: webp<br>==&gt; Pouring webp-1.1.0.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/webp/1.1.0: 39 files, 2.4MB<br>==&gt; Installing graphviz dependency: gd<br>==&gt; Pouring gd-2.3.0.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/gd/2.3.0: 34 files, 1.4MB<br>==&gt; Installing graphviz dependency: libffi<br>==&gt; Pouring libffi-3.3.big_sur.bottle.tar.gz<br>==&gt; Caveats<br>libffi is keg-only, which means it was not symlinked into /usr/local,<br>because macOS already provides this software and installing another version in<br>parallel can cause all kinds of trouble.<br><br>For compilers to find libffi you may need to set:<br>  export LDFLAGS=&quot;-L/usr/local/opt/libffi/lib&quot;<br>  export CPPFLAGS=&quot;-I/usr/local/opt/libffi/include&quot;<br><br>For pkg-config to find libffi you may need to set:<br>  export PKG_CONFIG_PATH=&quot;/usr/local/opt/libffi/lib/pkgconfig&quot;<br><br>==&gt; Summary<br>🍺  /usr/local/Cellar/libffi/3.3: 17 files, 540.2KB<br>==&gt; Installing graphviz dependency: pcre<br>==&gt; Pouring pcre-8.44.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/pcre/8.44: 204 files, 5.8MB<br>==&gt; Installing graphviz dependency: glib<br>==&gt; Pouring glib-2.66.2_1.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/glib/2.66.2_1: 436 files, 15.5MB<br>==&gt; Installing graphviz dependency: jasper<br>==&gt; Pouring jasper-2.0.22.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/jasper/2.0.22: 42 files, 1.5MB<br>==&gt; Installing graphviz dependency: netpbm<br>==&gt; Pouring netpbm-10.86.17.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/netpbm/10.86.17: 410 files, 17.7MB<br>==&gt; Installing graphviz dependency: gts<br>==&gt; Pouring gts-0.7.6_2.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/gts/0.7.6_2: 27 files, 1.4MB<br>==&gt; Installing graphviz dependency: lzo<br>==&gt; Pouring lzo-2.10.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/lzo/2.10: 31 files, 570.7KB<br>==&gt; Installing graphviz dependency: pixman<br>==&gt; Pouring pixman-0.40.0.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/pixman/0.40.0: 14 files, 1.3MB<br>==&gt; Installing graphviz dependency: cairo<br>==&gt; Pouring cairo-1.16.0_3.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/cairo/1.16.0_3: 119 files, 5.9MB<br>==&gt; Installing graphviz dependency: gdk-pixbuf<br>==&gt; Pouring gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz<br>==&gt; /usr/local/Cellar/gdk-pixbuf/2.42.0/bin/gdk-pixbuf-query-loaders --update-cache<br>🍺  /usr/local/Cellar/gdk-pixbuf/2.42.0: 149 files, 3.8MB<br>==&gt; Installing graphviz dependency: fribidi<br>==&gt; Pouring fribidi-1.0.10.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/fribidi/1.0.10: 67 files, 669.0KB<br>==&gt; Installing graphviz dependency: gobject-introspection<br>==&gt; Pouring gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/gobject-introspection/1.66.1_1: 191 files, 12.7MB<br>==&gt; Installing graphviz dependency: graphite2<br>==&gt; Pouring graphite2-1.3.14.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/graphite2/1.3.14: 18 files, 291.7KB<br>==&gt; Installing graphviz dependency: icu4c<br>==&gt; Pouring icu4c-67.1.big_sur.bottle.tar.gz<br>==&gt; Caveats<br>icu4c is keg-only, which means it was not symlinked into /usr/local,<br>because macOS provides libicucore.dylib (but nothing else).<br><br>If you need to have icu4c first in your PATH run:<br>  echo &#x27;export PATH=&quot;/usr/local/opt/icu4c/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc<br>  echo &#x27;export PATH=&quot;/usr/local/opt/icu4c/sbin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc<br><br>For compilers to find icu4c you may need to set:<br>  export LDFLAGS=&quot;-L/usr/local/opt/icu4c/lib&quot;<br>  export CPPFLAGS=&quot;-I/usr/local/opt/icu4c/include&quot;<br><br>For pkg-config to find icu4c you may need to set:<br>  export PKG_CONFIG_PATH=&quot;/usr/local/opt/icu4c/lib/pkgconfig&quot;<br><br>==&gt; Summary<br>🍺  /usr/local/Cellar/icu4c/67.1: 258 files, 71.8MB<br>==&gt; Installing graphviz dependency: harfbuzz<br>==&gt; Pouring harfbuzz-2.7.2.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/harfbuzz/2.7.2: 68 files, 6.4MB<br>==&gt; Installing graphviz dependency: pango<br>==&gt; Pouring pango-1.48.0.big_sur.bottle.tar.gz<br>🍺  /usr/local/Cellar/pango/1.48.0: 64 files, 3MB<br>==&gt; Installing graphviz dependency: librsvg<br>==&gt; Pouring librsvg-2.50.2.big_sur.bottle.tar.gz<br>tar: Error opening archive: Failed to open &#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/3eb605900a29b02eb026199f14474efc43e313ee2b9de389706c795eebdc24f5--librsvg-2.50.2.big_sur.bottle.tar.gz&#x27;<br>Error: Failure while executing; `tar xof /Users/wangpeng/Library/Caches/Homebrew/downloads/3eb605900a29b02eb026199f14474efc43e313ee2b9de389706c795eebdc24f5--librsvg-2.50.2.big_sur.bottle.tar.gz -C /var/folders/zs/2875szcx7jn6lbmqd0jfbprr0000gn/T/d20210302-22554-102pbtw` exited with 1. Here&#x27;s the output:<br>tar: Error opening archive: Failed to open &#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/3eb605900a29b02eb026199f14474efc43e313ee2b9de389706c795eebdc24f5--librsvg-2.50.2.big_sur.bottle.tar.gz&#x27;<br><br>Warning: Bottle installation failed: building from source.<br>==&gt; Installing dependencies for librsvg: libssh2 and rust<br>==&gt; Installing librsvg dependency: libssh2<br>==&gt; Pouring libssh2-1.9.0_1.big_sur.bottle.tar.gz<br>tar: Error opening archive: Failed to open &#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/45db0c196aa97bf6c0a9c6e7787ad2cd0d14d563c03d0f4e0d52392a0f3a1c81--libssh2-1.9.0_1.big_sur.bottle.tar.gz&#x27;<br>Error: Failure while executing; `tar xof /Users/wangpeng/Library/Caches/Homebrew/downloads/45db0c196aa97bf6c0a9c6e7787ad2cd0d14d563c03d0f4e0d52392a0f3a1c81--libssh2-1.9.0_1.big_sur.bottle.tar.gz -C /var/folders/zs/2875szcx7jn6lbmqd0jfbprr0000gn/T/d20210302-22554-qzrgbb` exited with 1. Here&#x27;s the output:<br>tar: Error opening archive: Failed to open &#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/45db0c196aa97bf6c0a9c6e7787ad2cd0d14d563c03d0f4e0d52392a0f3a1c81--libssh2-1.9.0_1.big_sur.bottle.tar.gz&#x27;<br><br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://libssh2.org/download/libssh2-1.9.0.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; ./configure --prefix=/usr/local/Cellar/libssh2/1.9.0_1 --disable-examples-build --with-openssl --with-libz --with-libssl-prefix=/usr/local/opt/openssl@1.1<br>==&gt; make install<br>🍺  /usr/local/Cellar/libssh2/1.9.0_1: 184 files, 969.9KB, built in 33 seconds<br>==&gt; Installing librsvg dependency: rust<br>==&gt; Pouring rust-1.47.0.big_sur.bottle.tar.gz<br>tar: Error opening archive: Failed to open &#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/f1482d118ddb120ff152e8f8aa88afa9bebc5674cc42aebca96249cffbdd8bdb--rust-1.47.0.big_sur.bottle.tar.gz&#x27;<br>Error: Failure while executing; `tar xof /Users/wangpeng/Library/Caches/Homebrew/downloads/f1482d118ddb120ff152e8f8aa88afa9bebc5674cc42aebca96249cffbdd8bdb--rust-1.47.0.big_sur.bottle.tar.gz -C /var/folders/zs/2875szcx7jn6lbmqd0jfbprr0000gn/T/d20210302-22554-16tqegl` exited with 1. Here&#x27;s the output:<br>tar: Error opening archive: Failed to open &#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/f1482d118ddb120ff152e8f8aa88afa9bebc5674cc42aebca96249cffbdd8bdb--rust-1.47.0.big_sur.bottle.tar.gz&#x27;<br><br>Warning: Bottle installation failed: building from source.<br>==&gt; Downloading https://static.rust-lang.org/dist/rustc-1.47.0-src.tar.gz<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####################################################################### 100.0%</span></span><br>==&gt; ./configure --prefix=/usr/local/Cellar/rust/1.47.0 --release-channel=stable<br>==&gt; make<br>Last 15 lines from /Users/wangpeng/Library/Logs/Homebrew/rust/02.make:<br>error: failed to get `cc` as a dependency of package `bootstrap v0.0.0 (/private/tmp/rust-20210302-29879-dftrmf/rustc-1.47.0-src/src/bootstrap)`<br><br>Caused by:<br>  failed to fetch `https://github.com/rust-lang/crates.io-index`<br><br>Caused by:<br>  network failure seems to have happened<br>  if a proxy or similar is necessary `net.git-fetch-with-cli` may help here<br>  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli<br><br>Caused by:<br>  http parser error: stream ended at an unexpected time; class=Http (34)<br>failed to run: /private/tmp/rust-20210302-29879-dftrmf/rustc-1.47.0-src/build/x86_64-apple-darwin/stage0/bin/cargo build --manifest-path /private/tmp/rust-20210302-29879-dftrmf/rustc-1.47.0-src/src/bootstrap/Cargo.toml<br>Build completed unsuccessfully in 0:33:17<br>make: *** [all] Error 1<br><br>READ THIS: https://docs.brew.sh/Troubleshooting<br><br>These open issues may also help:<br>rust 1.50.0 https://github.com/Homebrew/homebrew-core/pull/70922<br>Rust-dependent formulae on Apple Silicon - upstream issue tracker https://github.com/Homebrew/homebrew-core/issues/68301<br></code></pre></td></tr></table></figure><h3 id="deferrecover在简单web服务应用">defer/recover在简单web服务应用</h3><p>代码结构<img src="/images/golang/web.jpg"></p><p>https://github.com/weitrue/note/tree/master/go/web/</p><h3 id="包管理">包管理</h3><h4 id="gopm-获取无法下载的包">gopm 获取无法下载的包</h4><p><code>go get -v github.com/gpmgo/gopm</code></p><p>github地址：https://github.com/gpmgo/gopm</p><p>文档路径：https://github.com/gpmgo/docs/tree/master/zh-CN</p><p>安装踩坑：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh">github.com/codegangsta/cli: github.com/codegangsta/cli@v1.22.5: parsing go.mod:<br>module declares its path as: github.com/urfave/cli<br>        but was required as: github.com/codegangsta/cli<br>        <br></code></pre></td></tr></table></figure><p>关闭go mod即可成功安装</p><h3 id="工具">工具</h3><div class="note note-info">            <p><a href="https://google.github.io/osv-scanner/">OSV-扫描仪</a></p><p><a href="https://github.com/google/osv-scanner">github</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">- Scan a docker image 扫描基于Debian的docker镜像包:<br>    osv-scanner -D docker_image_name<br><br>- Scan a package lockfile 扫描特定锁定文件:<br>    osv-scanner -L path/to/lockfile<br><br>- Scan an SBOM file 只检查SBOM中依赖项中的漏洞:<br>    osv-scanner -S path/to/sbom_file<br><br>- Scan multiple directories recursively 扫描目录:<br>    osv-scanner -r directory1 directory2 ...<br><br>- Skip scanning git repositories:<br>    osv-scanner --skip-git -r|-D target<br><br>- Output result in JSON format:<br>    osv-scanner --json -D|-L|-S|-r target<br></code></pre></td></tr></table></figure>          </div><div class="note note-info">            <p><a href="https://silenceper.com/blog/201609/go-wechat-sdk/">WeChat SDK for Go</a></p>          </div><h5 id="爬虫相关">爬虫相关</h5><ul><li><a href="https://github.com/henrylee2cn/pholcus">henrylee2cn/pholcus</a></li><li><a href="https://github.com/PuerkitoBio/gocrawl">gocrawl</a></li><li><a href="https://github.com/gocolly/colly">colly</a></li><li><a href="https://github.com/hu17889/go_spider">hu17889/go_spider</a></li></ul><h5 id="middleware">Middleware</h5><div class="note note-success">            <p><a href="https://github.com/valyala/bytebufferpool">bytebufferpool</a></p><ul><li>依托sync.Pool进行了二次封装。</li><li>defaultSize设置每次创建buffer的默认大小,超过maxSize的buffer不会被放回去。</li><li>分组统计不同大小buffer的使用次数,例如0-64bytes的buffer被使用的次数。</li><li>引入校准机制,动态计算defaultSize和maxSize。</li></ul>          </div><h5 id="其他">其他</h5><ul><li><p><a href="https://github.com/skip2/go-qrcode">二维码生成</a></p></li><li><p><a href="https://github.com/spf13/viper">viper</a></p></li><li><p><a href="https://github.com/spf13/cobra">CLI applications</a></p></li></ul><h3 id="qa">Q&amp;A</h3><div class="note note-warning">            <p><span class="label label-danger">go http client protocol error: received DATA after END_STREAM</span></p><p>received DATA after END_STREAM只会存在于http2协议中,因此需要设置http client中的ForceAttempHTTP2=false。</p><p><a href="https://www.google.com.hk/search?q=go+http+client+protocol+error%3A+received+DATA+after+END_STREAM&amp;ei=gwt2YoaqHKyWseMPkdiP6Aw&amp;ved=0ahUKEwjG97rJ28z3AhUsS2wGHRHsA80Q4dUDCA4&amp;uact=5&amp;oq=go+http+client+protocol+error%3A+received+DATA+after+END_STREAM&amp;gs_lcp=Cgdnd3Mtd2l6EANKBAhBGABKBAhGGABQAFjuOGCcPWgAcAF4AYABlgaIAZkjkgENMC43LjQuMS4wLjIuMZgBAKABAcABAQ&amp;sclient=gws-wiz">解决</a></p>          </div><div class="note note-warning">            <p><span class="label label-danger">context canceled</span></p><p>增加客户端请求超时时间。</p><p><a href="https://learnku.com/articles/63884">解决</a></p>          </div><h3 id="面试题">面试题</h3><h4 id="基础语法">基础语法</h4><p>Q1 <code>=</code> 和 <code>:=</code> 的区别？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p><code>:=</code> 声明+赋值</p><p><code>=</code> 仅赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> foo <span class="hljs-keyword">int</span><br>foo = <span class="hljs-number">10</span><br><span class="hljs-comment">// 等价于</span><br>foo := <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>    </div></div><p>Q2 指针的作用?</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>指针用来保存变量的地址。</p><p>例如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x =  <span class="hljs-number">5</span><br><span class="hljs-keyword">var</span> p *<span class="hljs-keyword">int</span> = &amp;x<br>fmt.Printf(<span class="hljs-string">&quot;x = %d&quot;</span>,  *p) <span class="hljs-comment">// x 可以用 *p 访问</span><br></code></pre></td></tr></table></figure><ul><li><code>*</code> 运算符，也称为解引用运算符，用于访问地址中的值。</li><li><code>＆</code>运算符，也称为地址运算符，用于返回变量的地址。</li></ul>    </div></div><p>Q3 Go 允许多个返回值吗？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>允许</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(x, y <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>, <span class="hljs-keyword">string</span>)</span></span> &#123;<br>   <span class="hljs-keyword">return</span> y, x<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   a, b := swap(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>)<br>   fmt.Println(a, b) <span class="hljs-comment">// B A</span><br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>Q4 Go 有异常类型吗？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>Go 没有异常类型，只有错误类型（Error），通常使用返回值来表示异常状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">f, err := os.Open(<span class="hljs-string">&quot;test.txt&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    log.Fatal(err)<br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>Q5 什么是协程（Goroutine）</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>Goroutine 是与其他函数或方法同时运行的函数或方法。 Goroutines 可以被认为是轻量级的线程。 与线程相比，创建 Goroutine 的开销很小。 Go应用程序同时运行数千个 Goroutine 是非常常见的做法。</p>    </div></div><p>Q6 如何高效地拼接字符串</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>Go 语言中，字符串是只读的，也就意味着每次修改操作都会创建一个新的字符串。如果需要拼接多次，应使用 <code>strings.Builder</code>，最小化内存拷贝次数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> str strings.Builder<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>    str.WriteString(<span class="hljs-string">&quot;a&quot;</span>)<br>&#125;<br>fmt.Println(str.String())<br></code></pre></td></tr></table></figure>    </div></div><p>Q7 什么是 rune 类型</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ASCII 码只需要 7 bit 就可以完整地表示，但只能表示英文字母在内的128个字符，为了表示世界上大部分的文字系统，发明了 Unicode， 它是ASCII的超集，包含世界上书写系统中存在的所有字符，并为每个代码分配一个标准编号（称为Unicode CodePoint），在 Go 语言中称之为 rune，是 int32 类型的别名。</p><p>Go 语言中，字符串的底层表示是 byte (8 bit) 序列，而非 rune (32 bit) 序列。例如下面的例子中 <code>语</code> 和 <code>言</code> 使用 UTF-8 编码后各占 3 个 byte，因此 <code>len("Go语言")</code> 等于 8，当然我们也可以将字符串转换为 rune 序列。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;Go语言&quot;</span>)) <span class="hljs-comment">// 8</span><br>fmt.Println(<span class="hljs-built_in">len</span>([]<span class="hljs-keyword">rune</span>(<span class="hljs-string">&quot;Go语言&quot;</span>))) <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure>    </div></div><p>Q8 如何判断 map 中是否包含某个 key ？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> val, ok := dict[<span class="hljs-string">&quot;foo&quot;</span>]; ok &#123;<br>    <span class="hljs-comment">//do something here</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>dict["foo"]</code> 有 2 个返回值，val 和 ok，如果 ok 等于 <code>true</code>，则说明 dict 包含 key <code>"foo"</code>，val 将被赋予 <code>"foo"</code> 对应的值。</p>    </div></div><p>Q9 Go 支持默认参数或可选参数吗？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>Go 语言不支持可选参数（python 支持），也不支持方法重载（java支持）。</p>    </div></div><p>Q10 defer 的执行顺序</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <ul><li>多个 defer 语句，遵从后进先出(Last In First Out，LIFO)的原则，最后声明的 defer 语句，最先得到执行。</li><li>defer 在 return 语句之后执行，但在函数退出之前，defer 可以修改返回值。</li></ul><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;defer1&quot;</span>)<br>&#125;()<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i += <span class="hljs-number">1</span><br>fmt.Println(<span class="hljs-string">&quot;defer2&quot;</span>)<br>&#125;()<br><span class="hljs-keyword">return</span> i<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;return&quot;</span>, test())<br>&#125;<br><span class="hljs-comment">// defer2</span><br><span class="hljs-comment">// defer1</span><br><span class="hljs-comment">// return 0</span><br></code></pre></td></tr></table></figure><p>这个例子中，可以看到 defer 的执行顺序：后进先出。但是返回值并没有被修改，这是由于 Go 的返回机制决定的，执行 return 语句后，Go 会创建一个临时变量保存返回值，因此，defer 语句修改了局部变量 i，并没有修改返回值。那如果是有名的返回值呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span></span> &#123;<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i += <span class="hljs-number">1</span><br>fmt.Println(<span class="hljs-string">&quot;defer2&quot;</span>)<br>&#125;()<br><span class="hljs-keyword">return</span> i<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;return&quot;</span>, test())<br>&#125;<br><span class="hljs-comment">// defer2</span><br><span class="hljs-comment">// return 1</span><br></code></pre></td></tr></table></figure><p>这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。</p>    </div></div><p>Q11 如何交换 2 个变量的值？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b := <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span><br>a, b = b, a<br>fmt.Println(a, b) <span class="hljs-comment">// B A</span><br></code></pre></td></tr></table></figure>    </div></div><p>Q12 Go 语言 tag 的用处？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>tag 可以理解为 struct 字段的注解，可以用来定义字段的一个或多个属性。框架/工具可以通过反射获取到某个字段定义的属性，采取相应的处理方式。tag 丰富了代码的语义，增强了灵活性。</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;encoding/json&quot;</span><br><br><span class="hljs-keyword">type</span> Stu <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;stu_name&quot;`</span><br>ID   <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;stu_id&quot;`</span><br>Age  <span class="hljs-keyword">int</span>    <span class="hljs-string">`json:&quot;-&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>buf, _ := json.Marshal(Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;t001&quot;</span>, <span class="hljs-number">18</span>&#125;)<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, buf)<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子使用 tag 定义了结构体字段与 json 字段的转换关系，Name -&gt; <code>stu_name</code>, ID -&gt; <code>stu_id</code>，忽略 Age 字段。很方便地实现了 Go 结构体与不同规范的 json 文本之间的转换。</p>    </div></div><p>Q13 如何判断 2 个字符串切片（slice) 是相等的？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>go 语言中可以使用反射 <code>reflect.DeepEqual(a, b)</code> 判断 a、b 两个切片是否相等，但是通常不推荐这么做，使用反射非常影响性能。</p><p>通常采用的方式如下，遍历比较切片中的每一个元素（注意处理越界的情况）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StringSliceEqualBCE</span><span class="hljs-params">(a, b []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) != <span class="hljs-built_in">len</span>(b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">nil</span>) != (b == <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    b = b[:<span class="hljs-built_in">len</span>(a)]<br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br>        <span class="hljs-keyword">if</span> v != b[i] &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>Q14 字符串打印时，<code>%v</code> 和 <code>%+v</code> 的区别</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p><code>%v</code> 和 <code>%+v</code> 都可以用来打印 struct 的值，区别在于 <code>%v</code> 仅打印各个字段的值，<code>%+v</code> 还会打印各个字段的名称。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stu <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>&#125;) <span class="hljs-comment">// &#123;Tom&#125;</span><br>fmt.Printf(<span class="hljs-string">&quot;%+v\n&quot;</span>, Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>&#125;) <span class="hljs-comment">// &#123;Name:Tom&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但如果结构体定义了 <code>String()</code> 方法，<code>%v</code> 和 <code>%+v</code> 都会调用 <code>String()</code> 覆盖默认值。</p>    </div></div><p>Q15 Go 语言中如何表示枚举值(enums)</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>通常使用常量(const) 来表示枚举值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> StuType <span class="hljs-keyword">int32</span><br><br><span class="hljs-keyword">const</span> (<br>Type1 StuType = <span class="hljs-literal">iota</span><br>Type2<br>Type3<br>Type4<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(Type1, Type2, Type3, Type4) <span class="hljs-comment">// 0, 1, 2, 3</span><br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>Q16 空 struct{} 的用途</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>使用空结构体 struct{} 可以节省内存，一般作为占位符使用，表明这里并不需要一个值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(unsafe.Sizeof(<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;)) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p>比如使用 map 表示集合时，只关注 key，value 可以使用 struct{} 作为占位符。如果使用其他类型作为占位符，例如 int，bool，不仅浪费了内存，而且容易引起歧义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Set <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>set := <span class="hljs-built_in">make</span>(Set)<br><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>&#125; &#123;<br>set[item] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>fmt.Println(<span class="hljs-built_in">len</span>(set)) <span class="hljs-comment">// 3</span><br><span class="hljs-keyword">if</span> _, ok := set[<span class="hljs-string">&quot;A&quot;</span>]; ok &#123;<br>fmt.Println(<span class="hljs-string">&quot;A exists&quot;</span>) <span class="hljs-comment">// A exists</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再比如，使用信道(channel)控制并发时，我们只是需要一个信号，但并不需要传递值，这个时候，也可以使用 struct{} 代替。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>&lt;-ch<br><span class="hljs-comment">// do something</span><br>&#125;()<br>ch &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再比如，声明只包含方法的结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Lamp <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l Lamp)</span> <span class="hljs-title">On</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;On&quot;</span>)<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l Lamp)</span> <span class="hljs-title">Off</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Off&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><h4 id="实现原理">实现原理</h4><p>Q1 init() 函数是什么时候执行的？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p><code>init()</code> 函数是 Go 程序初始化的一部分。Go 程序初始化先于 main 函数，由 runtime 初始化每个导入的包，初始化顺序不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。</p><p>每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的 <code>init()</code> 函数。同一个包，甚至是同一个源文件可以有多个 <code>init()</code> 函数。<code>init()</code> 函数没有入参和返回值，不能被其他函数调用，同一个包内多个 <code>init()</code> 函数的执行顺序不作保证。</p><p>一句话总结： import –&gt; const –&gt; var –&gt; <code>init()</code> –&gt; <code>main()</code></p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;init1:&quot;</span>, a)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;init2:&quot;</span>, a)<br>&#125;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">const</span> b = <span class="hljs-number">100</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;main:&quot;</span>, a)<br>&#125;<br><span class="hljs-comment">// 执行结果</span><br><span class="hljs-comment">// init1: 10</span><br><span class="hljs-comment">// init2: 10</span><br><span class="hljs-comment">// main: 10</span><br></code></pre></td></tr></table></figure>    </div></div><p>Q2 Go 语言的局部变量分配在栈上还是堆上？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>由编译器决定。Go 语言编译器会自动决定把一个变量放在栈还是放在堆，编译器会做逃逸分析(escape analysis)，当发现变量的作用域没有超出函数范围，就可以在栈上，反之则必须分配在堆上。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> *<span class="hljs-title">int</span></span> &#123;<br>v := <span class="hljs-number">11</span><br><span class="hljs-keyword">return</span> &amp;v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := foo()<br><span class="hljs-built_in">println</span>(*m) <span class="hljs-comment">// 11</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>foo()</code> 函数中，如果 v 分配在栈上，foo 函数返回时，<code>&amp;v</code> 就不存在了，但是这段函数是能够正常运行的。Go 编译器发现 v 的引用脱离了 foo 的作用域，会将其分配在堆上。因此，main 函数中仍能够正常访问该值。</p>    </div></div><p>Q3 2 个 interface 可以比较吗？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>Go 语言中，interface 的内部实现包含了 2 个字段，类型 <code>T</code> 和 值 <code>V</code>，interface 可以使用 <code>==</code> 或 <code>!=</code> 比较。2 个 interface 相等有以下 2 种情况</p><ol type="1"><li>两个 interface 均等于 nil（此时 V 和 T 都处于 unset 状态）</li><li>类型 T 相同，且对应的值 V 相等。</li></ol><p>看下面的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stu <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-keyword">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> StuInt <span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> stu1, stu2 StuInt = &amp;Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>&#125;, &amp;Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>&#125;<br><span class="hljs-keyword">var</span> stu3, stu4 StuInt = Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>&#125;, Stu&#123;<span class="hljs-string">&quot;Tom&quot;</span>&#125;<br>fmt.Println(stu1 == stu2) <span class="hljs-comment">// false</span><br>fmt.Println(stu3 == stu4) <span class="hljs-comment">// true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>stu1</code> 和 <code>stu2</code> 对应的类型是 <code>*Stu</code>，值是 Stu 结构体的地址，两个地址不同，因此结果为 false。 <code>stu3</code> 和 <code>stu4</code> 对应的类型是 <code>Stu</code>，值是 Stu 结构体，且各字段相等，因此结果为 true。</p>    </div></div><p>Q4 两个 nil 可能不相等吗？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>可能。</p><p>接口(interface) 是对非接口值(例如指针，struct等)的封装，内部实现包含 2 个字段，类型 <code>T</code> 和 值 <code>V</code>。一个接口等于 nil，当且仅当 T 和 V 处于 unset 状态（T=nil，V is unset）。</p><ul><li>两个接口值比较时，会先比较 T，再比较 V。</li><li>接口值与非接口值比较时，会先将非接口值尝试转换为接口值，再比较。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> p *<span class="hljs-keyword">int</span> = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = p<br>fmt.Println(i == p) <span class="hljs-comment">// true</span><br>fmt.Println(p == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// true</span><br>fmt.Println(i == <span class="hljs-literal">nil</span>) <span class="hljs-comment">// false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个例子中，将一个 nil 非接口值 p 赋值给接口 i，此时，i 的内部字段为<code>(T=*int, V=nil)</code>，i 与 p 作比较时，将 p 转换为接口后再比较，因此 <code>i == p</code>，p 与 nil 比较，直接比较值，所以 <code>p == nil</code>。</p><p>但是当 i 与 nil 比较时，会将 nil 转换为接口 <code>(T=nil, V=nil)</code>，与i <code>(T=*int, V=nil)</code> 不相等，因此 <code>i != nil</code>。因此 V 为 nil ，但 T 不为 nil 的接口不等于 nil。</p>    </div></div><p>Q5 简述 Go 语言GC(垃圾回收)的工作原理</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>最常见的垃圾回收算法有标记清除(Mark-Sweep) 和引用计数(Reference Count)，Go 语言采用的是标记清除算法。并在此基础上使用了三色标记法和写屏障技术，提高了效率。</p><p>标记清除收集器是跟踪式垃圾收集器，其执行过程可以分成标记（Mark）和清除（Sweep）两个阶段：</p><ul><li>标记阶段 — 从根对象出发查找并标记堆中所有存活的对象；</li><li>清除阶段 — 遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表。</li></ul><p>标记清除算法的一大问题是在标记期间，需要暂停程序（Stop the world，STW），标记结束之后，用户程序才可以继续执行。为了能够异步执行，减少 STW 的时间，Go 语言采用了三色标记法。</p><p>三色标记算法将程序中的对象分成白色、黑色和灰色三类。</p><ul><li>白色：不确定对象。</li><li>灰色：存活对象，子对象待处理。</li><li>黑色：存活对象。</li></ul><p>标记开始时，所有对象加入白色集合（这一步需 STW ）。首先将根对象标记为灰色，加入灰色集合，垃圾搜集器取出一个灰色对象，将其标记为黑色，并将其指向的对象标记为灰色，加入灰色集合。重复这个过程，直到灰色集合为空为止，标记阶段结束。那么白色对象即可需要清理的对象，而黑色对象均为根可达的对象，不能被清理。</p><p>三色标记法因为多了一个白色的状态来存放不确定对象，所以后续的标记阶段可以并发地执行。当然并发执行的代价是可能会造成一些遗漏，因为那些早先被标记为黑色的对象可能目前已经是不可达的了。所以三色标记法是一个 false negative（假阴性）的算法。</p><p>三色标记法并发执行仍存在一个问题，即在 GC 过程中，对象指针发生了改变。比如下面的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">A (黑) -&gt; B (灰) -&gt; C (白) -&gt; D (白)<br></code></pre></td></tr></table></figure><p>正常情况下，D 对象最终会被标记为黑色，不应被回收。但在标记和用户程序并发执行过程中，用户程序删除了 C 对 D 的引用，而 A 获得了 D 的引用。标记继续进行，D 就没有机会被标记为黑色了（A 已经处理过，这一轮不会再被处理）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">A (黑) -&gt; B (灰) -&gt; C (白) <br>  ↓<br> D (白)<br></code></pre></td></tr></table></figure><p>为了解决这个问题，Go 使用了内存屏障技术，它是在用户程序读取对象、创建新对象以及更新对象指针时执行的一段代码，类似于一个钩子。垃圾收集器使用了写屏障（Write Barrier）技术，当对象新增或更新时，会将其着色为灰色。这样即使与用户程序并发执行，对象的引用发生改变时，垃圾收集器也能正确处理了。</p><p>一次完整的 GC 分为四个阶段：</p><ul><li>1）标记准备(Mark Setup，需 STW)，打开写屏障(Write Barrier)</li><li>2）使用三色标记法标记（Marking, 并发）</li><li>3）标记结束(Mark Termination，需 STW)，关闭写屏障。</li><li>4）清理(Sweeping, 并发)</li></ul>    </div></div><p>Q6 函数返回局部变量的指针是否安全？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>这在 Go 中是安全的，Go 编译器将会对每个局部变量进行逃逸分析。如果发现局部变量的作用域超出该函数，则不会将内存分配在栈上，而是分配在堆上。</p>    </div></div><p>Q7 非接口非接口的任意类型 T() 都能够调用 <code>*T</code> 的方法吗？反过来呢？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <ul><li>一个T类型的值可以调用为<code>*T</code>类型声明的方法，但是仅当此T的值是可寻址(addressable) 的情况下。编译器在调用指针属主方法前，会自动取此T值的地址。因为不是任何T值都是可寻址的，所以并非任何T值都能够调用为类型<code>*T</code>声明的方法。</li><li>反过来，一个<code>*T</code>类型的值可以调用为类型T声明的方法，这是因为解引用指针总是合法的。事实上，你可以认为对于每一个为类型 T 声明的方法，编译器都会为类型<code>*T</code>自动隐式声明一个同名和同签名的方法。</li></ul><p>哪些值是不可寻址的呢？</p><ul><li>字符串中的字节；</li><li>map 对象中的元素（slice 对象中的元素是可寻址的，slice的底层是数组）；</li><li>常量；</li><li>包级别的函数等。</li></ul><p>举一个例子，定义类型 T，并为类型 <code>*T</code> 声明一个方法 <code>hello()</code>，变量 t1 可以调用该方法，但是常量 t2 调用该方法时，会产生编译错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> T <span class="hljs-keyword">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> t1 T = <span class="hljs-string">&quot;ABC&quot;</span><br>t1.hello() <span class="hljs-comment">// hello</span><br><span class="hljs-keyword">const</span> t2 T = <span class="hljs-string">&quot;ABC&quot;</span><br>t2.hello() <span class="hljs-comment">// error: cannot call pointer method on t</span><br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><h4 id="并发编程">并发编程</h4><p>Q1 无缓冲的 channel 和 有缓冲的 channel 的区别？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>对于无缓冲的 channel，发送方将阻塞该信道，直到接收方从该信道接收到数据为止，而接收方也将阻塞该信道，直到发送方将数据发送到该信道中为止。</p><p>对于有缓存的 channel，发送方在没有空插槽（缓冲区使用完）的情况下阻塞，而接收方在信道为空的情况下阻塞。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>st := time.Now()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">()</span></span>  &#123;<br>time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>&lt;-ch<br>&#125;()<br>ch &lt;- <span class="hljs-literal">true</span>  <span class="hljs-comment">// 无缓冲，发送方阻塞直到接收方接收到数据。</span><br>fmt.Printf(<span class="hljs-string">&quot;cost %.1f s\n&quot;</span>, time.Now().Sub(st).Seconds())<br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>st := time.Now()<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">()</span></span>  &#123;<br>time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>&lt;-ch<br>&#125;()<br>ch &lt;- <span class="hljs-literal">true</span><br>ch &lt;- <span class="hljs-literal">true</span> <span class="hljs-comment">// 缓冲区为 2，发送方不阻塞，继续往下执行</span><br>fmt.Printf(<span class="hljs-string">&quot;cost %.1f s\n&quot;</span>, time.Now().Sub(st).Seconds()) <span class="hljs-comment">// cost 0.0 s</span><br>ch &lt;- <span class="hljs-literal">true</span> <span class="hljs-comment">// 缓冲区使用完，发送方阻塞，2s 后接收方接收到数据，释放一个插槽，继续往下执行</span><br>fmt.Printf(<span class="hljs-string">&quot;cost %.1f s\n&quot;</span>, time.Now().Sub(st).Seconds()) <span class="hljs-comment">// cost 2.0 s</span><br>time.Sleep(time.Second * <span class="hljs-number">5</span>)<br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>Q2 什么是协程泄露(Goroutine Leak)？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>协程泄露是指协程创建后，长时间得不到释放，并且还在不断地创建新的协程，最终导致内存耗尽，程序崩溃。常见的导致协程泄露的场景有以下几种：</p><ul><li>缺少接收器，导致发送阻塞</li></ul><p>这个例子中，每执行一次 query，则启动1000个协程向信道 ch 发送数字 0，但只接收了一次，导致 999 个协程被阻塞，不能退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; ch &lt;- <span class="hljs-number">0</span> &#125;()<br>&#125;<br><span class="hljs-keyword">return</span> &lt;-ch<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>query()<br>fmt.Printf(<span class="hljs-string">&quot;goroutines: %d\n&quot;</span>, runtime.NumGoroutine())<br>&#125;<br>&#125;<br><span class="hljs-comment">// goroutines: 1001</span><br><span class="hljs-comment">// goroutines: 2000</span><br><span class="hljs-comment">// goroutines: 2999</span><br><span class="hljs-comment">// goroutines: 3998</span><br></code></pre></td></tr></table></figure><ul><li>缺少发送器，导致接收阻塞</li></ul><p>那同样的，如果启动 1000 个协程接收信道的信息，但信道并不会发送那么多次的信息，也会导致接收协程被阻塞，不能退出。</p><ul><li>死锁(dead lock)</li></ul><p>两个或两个以上的协程在执行过程中，由于竞争资源或者由于彼此通信而造成阻塞，这种情况下，也会导致协程被阻塞，不能退出。</p><ul><li>无限循环(infinite loops)</li></ul><p>这个例子中，为了避免网络等问题，采用了无限重试的方式，发送 HTTP 请求，直到获取到数据。那如果 HTTP 服务宕机，永远不可达，导致协程不能退出，发生泄漏。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">request</span><span class="hljs-params">(url <span class="hljs-keyword">string</span>, wg *sync.WaitGroup)</span></span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> _, err := http.Get(url); err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// write to db</span><br><span class="hljs-keyword">break</span><br>&#125;<br>i++<br><span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">3</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>time.Sleep(time.Second)<br>&#125;<br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> request(fmt.Sprintf(<span class="hljs-string">&quot;https://127.0.0.1:8080/%d&quot;</span>, i), &amp;wg)<br>&#125;<br>wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>Q3 Go 可以限制运行时操作系统线程的数量吗？</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <blockquote><p>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit.</p></blockquote><p>可以使用环境变量 <code>GOMAXPROCS</code> 或 <code>runtime.GOMAXPROCS(num int)</code> 设置，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">runtime.GOMAXPROCS(1) // 限制同时执行Go代码的操作系统线程数为 1<br></code></pre></td></tr></table></figure><p>从官方文档的解释可以看到，<code>GOMAXPROCS</code> 限制的是同时执行用户态 Go 代码的操作系统线程的数量，但是对于被系统调用阻塞的线程数量是没有限制的。<code>GOMAXPROCS</code> 的默认值等于 CPU 的逻辑核数，同一时间，一个核只能绑定一个线程，然后运行被调度的协程。因此对于 CPU 密集型的任务，若该值过大，例如设置为 CPU 逻辑核数的 2 倍，会增加线程切换的开销，降低性能。对于 I/O 密集型应用，适当地调大该值，可以提高 I/O 吞吐率。</p>    </div></div><h4 id="代码输出">代码输出</h4><h5 id="常量与变量">常量与变量</h5><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a, b = <span class="hljs-string">&quot;golang&quot;</span>, <span class="hljs-number">100</span><br>d, e<br>f <span class="hljs-keyword">bool</span> = <span class="hljs-literal">true</span><br>g<br>)<br>fmt.Println(d, e, g)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>golang 100 true</p><p>在同一个 const group 中，如果常量定义与前一行的定义一致，则可以省略类型和值。编译时，会按照前一行的定义自动补全。即等价于</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> (<br>a, b = <span class="hljs-string">&quot;golang&quot;</span>, <span class="hljs-number">100</span><br>d, e = <span class="hljs-string">&quot;golang&quot;</span>, <span class="hljs-number">100</span><br>f <span class="hljs-keyword">bool</span> = <span class="hljs-literal">true</span><br>g <span class="hljs-keyword">bool</span> = <span class="hljs-literal">true</span><br>)<br>fmt.Println(d, e, g)<br>&#125;<br></code></pre></td></tr></table></figure>    </div></div><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> N = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> x <span class="hljs-keyword">int</span> = N<br><br><span class="hljs-keyword">const</span> M <span class="hljs-keyword">int32</span> = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> y <span class="hljs-keyword">int</span> = M<br>fmt.Println(x, y)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>编译失败：cannot use M (type int32) as type int in assignment</p><p>Go 语言中，常量分为无类型常量和有类型常量两种，<code>const N = 100</code>，属于无类型常量，赋值给其他变量时，如果字面量能够转换为对应类型的变量，则赋值成功，例如，<code>var x int = N</code>。但是对于有类型的常量 <code>const M int32 = 100</code>，赋值给其他变量时，需要类型匹配才能成功，所以显示地类型转换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> y <span class="hljs-keyword">int</span> = <span class="hljs-keyword">int</span>(M)<br></code></pre></td></tr></table></figure>    </div></div><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">int8</span> = <span class="hljs-number">-1</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">int8</span> = <span class="hljs-number">-128</span> / a<br>fmt.Println(b)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>-128</p><p>int8 能表示的数字的范围是 [-2^7, 2^7-1]，即 [-128, 127]。-128 是无类型常量，转换为 int8，再除以变量 -1，结果为 128，常量除以变量，结果是一个变量。变量转换时允许溢出，符号位变为1，转为补码后恰好等于 -128。</p><p>对于有符号整型，最高位是是符号位，计算机用补码表示负数。补码 = 原码取反加一。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">-1 :  11111111<br>00000001(原码)    11111110(取反)    11111111(加一)<br>-128：    <br>10000000(原码)    01111111(取反)    10000000(加一)<br><br>-1 + 1 = 0<br>11111111 + 00000001 = 00000000(最高位溢出省略)<br>-128 + 127 = -1<br>10000000 + 01111111 = 11111111<br></code></pre></td></tr></table></figure>    </div></div><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">const</span> a <span class="hljs-keyword">int8</span> = <span class="hljs-number">-1</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">int8</span> = <span class="hljs-number">-128</span> / a<br>fmt.Println(b)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>编译失败：constant 128 overflows int8</p><p>-128 和 a 都是常量，在编译时求值，-128 / a = 128，两个常量相除，结果也是一个常量，常量类型转换时不允许溢出，因而编译失败。</p>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>       i := <span class="hljs-number">1</span><br>       j := <span class="hljs-number">2</span><br>       i, j = j, i<br>       fmt.Printf(<span class="hljs-string">&quot;%d%d\n&quot;</span>, i, j)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>21</p>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">float64</span> = <span class="hljs-number">3</span> / <span class="hljs-number">2</span><br>    fmt.Print(i)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">1<br>关键在于 3/2 计算的结果，3、2 这是整型字面值常量。根据 Go 的规则，3/2 结果也是整型，因此是 1，最后会隐式转换为 float64。<br></code></pre></td></tr></table></figure>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">incr</span><span class="hljs-params">(p *<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>        *p++<br>        <span class="hljs-keyword">return</span> *p<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        v := <span class="hljs-number">1</span><br>        incr(&amp;v)<br>        fmt.Println(v)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">2<br></code></pre></td></tr></table></figure>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">incr</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>        v++<br>        <span class="hljs-keyword">return</span> v<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        v := <span class="hljs-number">1</span><br>        incr(v)<br>        fmt.Println(v)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">1<br></code></pre></td></tr></table></figure>    </div></div><h5 id="作用域">作用域</h5><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> err error<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>err := fmt.Errorf(<span class="hljs-string">&quot;err&quot;</span>)<br>fmt.Println(<span class="hljs-number">1</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-number">2</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>1 err</p><p><code>:=</code> 表示声明并赋值，<code>=</code> 表示仅赋值。</p><p>变量的作用域是大括号，因此在第一个 if 语句 <code>if err == nil</code> 内部重新声明且赋值了与外部变量同名的局部变量 err。对该局部变量的赋值不会影响到外部的 err。因此第二个 if 语句 <code>if err != nil</code> 不成立。所以只打印了 <code>1 err</code>。</p>    </div></div><p>下面的程序的运行结果是?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        x := <span class="hljs-number">1</span><br>        &#123;<br>            x := <span class="hljs-number">2</span><br>            fmt.Print(x)<br>        &#125;<br>        fmt.Println(x)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>21</p>    </div></div><h5 id="defer-延迟调用">defer 延迟调用</h5><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t T)</span> <span class="hljs-title">f</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">T</span></span> &#123;<br>fmt.Print(n)<br><span class="hljs-keyword">return</span> t<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> t T<br><span class="hljs-keyword">defer</span> t.f(<span class="hljs-number">1</span>).f(<span class="hljs-number">2</span>)<br>fmt.Print(<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>132</p><p>defer 延迟调用时，需要保存函数指针和参数，因此链式调用的情况下，除了最后一个函数/方法外的函数/方法都会在调用时直接执行。也就是说 <code>t.f(1)</code> 直接执行，然后执行 <code>fmt.Print(3)</code>，最后函数返回时再执行 <code>.f(2)</code>，因此输出是 132。</p>    </div></div><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(n)<br>n += <span class="hljs-number">100</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>f(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>1</p><p>打印 1 而不是 101。defer 语句执行时，会将需要延迟调用的函数和参数保存起来，也就是说，执行到 defer 时，参数 n(此时等于1) 已经被保存了。因此后面对 n 的改动并不会影响延迟函数调用的结果。</p>    </div></div><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>n := <span class="hljs-number">1</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(n)<br>&#125;()<br>n += <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>101</p><p>匿名函数没有通过传参的方式将 n 传入，因此匿名函数内的 n 和函数外部的 n 是同一个，延迟执行时，已经被改变为 101。</p>    </div></div><p>下列代码的输出是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>n := <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(n)<br>n += <span class="hljs-number">100</span><br>&#125;<br>fmt.Println(n)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">101</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>先打印 101，再打印 1。defer 的作用域是函数，而不是代码块，因此 if 语句退出时，defer 不会执行，而是等 101 打印后，整个函数返回时，才会执行。</p>    </div></div><p>下面的程序的运行结果是?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, i)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>    </div></div><h5 id="数组与切片">数组与切片</h5><p>下面的程序的运行结果是?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        x := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>        <span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> x &#123;<br>            fmt.Print(v)<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">012</span><br></code></pre></td></tr></table></figure>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        x := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>        <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> x &#123;<br>            fmt.Print(v)<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">abc<br></code></pre></td></tr></table></figure>    </div></div><p>下面的程序的运行结果是?</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    strs := []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>&#125;<br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> strs &#123;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>            fmt.Printf(<span class="hljs-string">&quot;%s &quot;</span>, s)<br>        &#125;()<br>    &#125;<br>    time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">three three three<br></code></pre></td></tr></table></figure>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    v := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>: <span class="hljs-number">4</span>&#125;<br>    fmt.Println(<span class="hljs-built_in">len</span>(v))<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">4</span><br>除了 <span class="hljs-keyword">map</span>，array(slice) 初始化时也是可以指定索引的。该题有一个索引 <span class="hljs-number">3</span>，根据数组的特点，必然有小于 <span class="hljs-number">3</span> 的所有也存在，上题中，v 的值是：[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure>    </div></div><p>下面的程序的运行结果是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Slice []<span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSlice</span><span class="hljs-params">()</span> <span class="hljs-title">Slice</span></span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">make</span>(Slice, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s* Slice)</span> <span class="hljs-title">Add</span><span class="hljs-params">(elem <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Slice</span></span> &#123;<br>         *s = <span class="hljs-built_in">append</span>(*s, elem)<br>         fmt.Print(elem)<br>         <span class="hljs-keyword">return</span> s<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>         s := NewSlice()<br>         <span class="hljs-keyword">defer</span> s.Add(<span class="hljs-number">1</span>).Add(<span class="hljs-number">2</span>)<br>         s.Add(<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">132</span><br></code></pre></td></tr></table></figure>    </div></div><h4 id="选择题">选择题</h4><p>1.下面属于关键字的是（） A. func B. def C. struct D. class​</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AC</p>    </div></div><p>2.定义一个包内全局字符串变量，下面语法正确的是 （） A. var str string B. str := “” C. str = “” D. var str = “”</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AD</p>    </div></div><p>3.通过指针变量 p 访问其成员变量 name，下面语法正确的是（） A. p.name B. (*p).name C. (&amp;p).name D. p-&gt;name</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AB</p>    </div></div><p>4.关于接口和类的说法，下面说法正确的是（） A. 一个类只需要实现了接口要求的所有函数，我们就说这个类实现了该接口 B. 实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理 C. 类实现接口时，需要导入接口所在的包 D. 接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABD</p>    </div></div><p>5.关于字符串连接，下面语法正确的是（） A. str := ‘abc’ + ‘123’ B. str := “abc” + “123” C. str ：= ‘123’ + “abc” D. fmt.Sprintf(“abc%d”, 123)</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BD</p>    </div></div><p>6.关于协程，下面说法正确是（） A. 协程和线程都可以实现程序的并发执行 B. 线程比协程更轻量级 C. 协程不存在死锁问题 D. 通过channel来进行协程间的通信</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AD</p>    </div></div><p>7.关于init函数，下面说法正确的是（） A. 一个包中，可以包含多个init函数 B. 程序编译时，先执行导入包的init函数，再执行本包内的init函数 C. main包中，不能有init函数 D. init函数可以被其他函数调用</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AB</p>    </div></div><p>8.关于循环语句，下面说法正确的有（） A. 循环语句既支持for关键字，也支持while和do-while B. 关键字for的基本使用方法与C/C++中没有任何差异 C. for循环支持continue和break来控制循环，但是它提供了一个更高级的break，可以选择中断哪一个循环 D. for循环不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>CD</p>    </div></div><p>9.对于函数定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(args ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>        sum := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> args &#123;<br>            sum += arg<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><p>下面对add函数调用正确的是（）</p><p>A. add(1, 2) B. add(1, 3, 7) C. add([]int{1, 2}) D. add([]int{1, 3, 7}...)</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABD</p>    </div></div><p>10.关于类型转化，下面语法正确的是（） A.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = i<br></code></pre></td></tr></table></figure><ol start="2" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = (MyInt)i<br></code></pre></td></tr></table></figure><ol start="3" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = MyInt(i)<br></code></pre></td></tr></table></figure><ol start="4" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyInt <span class="hljs-keyword">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = i.(MyInt)   <span class="hljs-comment">// Invalid type assertion: i.(MyInt) (non-interface type int on left)</span><br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>C</p>    </div></div><p>11.关于局部变量的初始化，下面正确的使用方式是（） A. var i int = 10 B. var i = 10 C. i := 10 D. i = 10</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABC</p>    </div></div><p>12.关于const常量定义，下面正确的使用方式是（） A.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> Pi <span class="hljs-keyword">float64</span> = <span class="hljs-number">3.14159265358979323846</span><br><span class="hljs-keyword">const</span> zero = <span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure><ol start="2" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>        size <span class="hljs-keyword">int64</span> = <span class="hljs-number">1024</span><br>        eof = <span class="hljs-number">-1</span><br>)<br></code></pre></td></tr></table></figure><ol start="3" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>        ERR_ELEM_EXIST error = errors.New(<span class="hljs-string">&quot;element already exists&quot;</span>)<br>        ERR_ELEM_NT_EXIST error = errors.New(<span class="hljs-string">&quot;element not exists&quot;</span>)<br>) <span class="hljs-comment">// Const initializer &#x27;errors.New(&quot;element already exists&quot;)&#x27; is not a constant</span><br></code></pre></td></tr></table></figure><ol start="4" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> u, v <span class="hljs-keyword">float32</span> = <span class="hljs-number">0</span>, <span class="hljs-number">3</span><br><span class="hljs-keyword">const</span> a, b, c = <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&quot;foo&quot;</span><br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABD</p>    </div></div><p>13.关于布尔变量b的赋值，下面错误的用法是（） A. <code>b = true</code> B. <code>b = 1     //  Cannot use '1' (type untyped int) as type bool in assignment</code> C. <code>b = bool(1)   //Cannot convert expression of type int to type bool</code> D. <code>b = (1 == 2)</code></p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BC</p>    </div></div><p>14.下面的程序的运行结果是（）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Printf(<span class="hljs-string">&quot;1&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">defer</span> fmt.Printf(<span class="hljs-string">&quot;2&quot;</span>)<br>        &#125;<br>        fmt.Printf(<span class="hljs-string">&quot;3&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>A. 321 B. 32 C. 31 D. 13</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>C</p>    </div></div><p>15.关于switch语句，下面说法正确的有（） A. 条件表达式必须为常量或者整数 B. 单个case中，可以出现多个结果选项 C. 需要用break来明确退出一个case D. 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BD</p>    </div></div><p>16.golang中没有隐藏的this指针，这句话的含义是（） A. 方法施加的对象显式传递，没有被隐藏起来 B. golang沿袭了传统面向对象编程中的诸多概念，比如继承、虚函数和构造函数 C. golang的面向对象表达更直观，对于面向过程只是换了一种语法形式来表达 D. 方法施加的对象不需要非得是指针，也不用非得叫this</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ACD</p>    </div></div><p>17.golang中的引用类型包括（） A. 数组切片 B. map C. channel D. interface</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABCD</p>    </div></div><p>18.golang中的指针运算包括（） A. 可以对指针进行自增或自减运算 B. 可以通过“&amp;”取指针的地址 C. 可以通过“*”取指针指向的数据 D. 可以对指针进行下标运算</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BC</p>    </div></div><p>19.关于main函数（可执行程序的执行起点），下面说法正确的是（） A. main函数不能带参数 B. main函数不能定义返回值 C. main函数所在的包必须为main包 D. main函数中可以使用flag包来获取和解析命令行参数</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABCD</p>    </div></div><p>20.下面赋值正确的是（） A. var x = nil B. var x interface{} = nil C. var x string = nil D. var x error = nil</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BD</p>    </div></div><p>21.关于整型切片的初始化，下面正确的是（） A. s := make([]int) B. s := make([]int, 0) C. s := make([]int, 5, 10) D. s := []int{1, 2, 3, 4, 5}</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BCD</p>    </div></div><p>22.从切片中删除一个元素，下面的算法实现正确的是（） A.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Slice)</span><span class="hljs-title">Remove</span><span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> *s &#123;<br>            <span class="hljs-keyword">if</span> isEqual(value, v) &#123;<br>                <span class="hljs-keyword">if</span> i== <span class="hljs-built_in">len</span>(*s) - <span class="hljs-number">1</span> &#123;<br>                    *s = (*s)[:i]<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    *s = <span class="hljs-built_in">append</span>((*s)[:i],(*s)[i + <span class="hljs-number">2</span>:]...)<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ERR_ELEM_NT_EXIST<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Slice)</span><span class="hljs-title">Remove</span><span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> *s &#123;<br>            <span class="hljs-keyword">if</span> isEqual(value, v) &#123;<br>                *s = <span class="hljs-built_in">append</span>((*s)[:i],(*s)[i + <span class="hljs-number">1</span>:])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ERR_ELEM_NT_EXIST<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Slice)</span><span class="hljs-title">Remove</span><span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> *s &#123;<br>            <span class="hljs-keyword">if</span> isEqual(value, v) &#123;<br>                <span class="hljs-built_in">delete</span>(*s, v)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ERR_ELEM_NT_EXIST<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Slice)</span><span class="hljs-title">Remove</span><span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> *s &#123;<br>            <span class="hljs-keyword">if</span> isEqual(value, v) &#123;<br>                *s = <span class="hljs-built_in">append</span>((*s)[:i],(*s)[i + <span class="hljs-number">1</span>:]...)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ERR_ELEM_NT_EXIST<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>D</p>    </div></div><p>23.关于变量的自增和自减操作，下面语句正确的是（） A.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">1</span><br>i++<br></code></pre></td></tr></table></figure><ol start="2" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">1</span><br>j = i++      <span class="hljs-comment">// &#x27;,&#x27;, &#x27;;&#x27;, new line or &#x27;&#125;&#x27; expected, got &#x27;++&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">1</span><br>++i<br></code></pre></td></tr></table></figure><ol start="4" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">1</span><br>i--<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BD</p>    </div></div><p>24.关于函数声明，下面语法错误的是（）</p><p>A. func f(a, b int) (value int, err error)</p><p>B. func f(a int, b int) (value int, err error)</p><p>C. func f(a, b int) (value int, error)</p><p>D. func f(a int, b int) (int, int, error)</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>C</p>    </div></div><p>25.如果Add函数的调用代码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> a Integer = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">var</span> b Integer = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = &amp;a<br>    sum := i.(*Integer).Add(b)<br>    fmt.Println(sum)<br>&#125;<br></code></pre></td></tr></table></figure><p>则Add函数定义正确的是（） A.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b *Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> a + *b<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> *a + b<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b *Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> *a + *b<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AC</p>    </div></div><p>26.如果Add函数的调用代码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">var</span> a Integer = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> b Integer = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = a<br>        sum := i.(Integer).Add(b)<br>        fmt.Println(sum)<br>&#125;<br></code></pre></td></tr></table></figure><p>则Add函数定义正确的是（） A.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b *Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> a + *b<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> *a + b<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="A"><li></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Integer)</span> <span class="hljs-title">Add</span><span class="hljs-params">(b *Integer)</span> <span class="hljs-title">Integer</span></span> &#123;<br>        <span class="hljs-keyword">return</span> *a + *b<br>&#125;<br></code></pre></td></tr></table></figure><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AC</p>    </div></div><p>27.关于GetPodAction定义，下面赋值正确的是（）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Fragment <span class="hljs-keyword">interface</span> &#123;<br>        Exec(transInfo *TransInfo) error<br>&#125;<br><span class="hljs-keyword">type</span> GetPodAction <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g GetPodAction)</span> <span class="hljs-title">Exec</span><span class="hljs-params">(transInfo *TransInfo)</span> <span class="hljs-title">error</span></span> &#123;<br>        ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>A. var fragment Fragment = new(GetPodAction)</p><p>B. var fragment Fragment = GetPodAction</p><p>C. var fragment Fragment = &amp;GetPodAction{}</p><p>D. var fragment Fragment = GetPodAction{}</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ACD</p>    </div></div><p>28.关于GoMock，下面说法正确的是（）</p><p>A. GoMock可以对interface打桩</p><p>B. GoMock可以对类的成员函数打桩</p><p>C. GoMock可以对函数打桩</p><p>D. GoMock打桩后的依赖注入可以通过GoStub完成</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AD</p>    </div></div><p>29.关于接口，下面说法正确的是（）</p><p>A. 只要两个接口拥有相同的方法列表（次序不同不要紧），那么它们就是等价的，可以相互赋值</p><p>B. 如果接口A的方法列表是接口B的方法列表的子集，那么接口B可以赋值给接口A</p><p>C. 接口查询是否成功，要在运行期才能够确定</p><p>D. 接口赋值是否可行，要在运行期才能够确定</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABC</p>    </div></div><p>30.关于channel，下面语法正确的是（）</p><p>A. var ch chan int</p><p>B. ch := make(chan int)</p><p>C. &lt;- ch</p><p>D. ch &lt;-</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABC</p>    </div></div><p>31.关于同步锁，下面说法正确的是（）</p><p>A. 当一个goroutine获得了Mutex后，其他goroutine就只能乖乖的等待，除非该goroutine释放这个Mutex</p><p>B. RWMutex在读锁占用的情况下，会阻止写，但不阻止读</p><p>C. RWMutex在写锁占用情况下，会阻止任何其他goroutine（无论读和写）进来，整个锁相当于由该goroutine独占</p><p>D. Lock()操作需要保证有Unlock()或RUnlock()调用与之对应</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABC</p>    </div></div><p>32.golang中大多数数据类型都可以转化为有效的JSON文本，下面几种类型除外（）</p><p>A. 指针</p><p>B. channel</p><p>C. complex</p><p>D. 函数</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BCD</p>    </div></div><p>33.关于go vendor，下面说法正确的是（）</p><p>A. 基本思路是将引用的外部包的源代码放在当前工程的vendor目录下面</p><p>B. 编译go代码会优先从vendor目录先寻找依赖包</p><p>C. 可以指定引用某个特定版本的外部包</p><p>D. 有了vendor目录后，打包当前的工程代码到其他机器的$GOPATH/src下都可以通过编译</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>ABD</p>    </div></div><p>34.flag是bool型变量，下面if表达式符合编码规范的是（）</p><p>A. if flag == 1</p><p>B. if flag</p><p>C. if flag == false</p><p>D. if !flag</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>BD</p>    </div></div><p>35.value是整型变量，下面if表达式符合编码规范的是（）</p><p>A. if value == 0</p><p>B. if value</p><p>C. if value != 0</p><p>D. if !value</p><div class="spoiler collapsed">    <div class="spoiler-title">        答案    </div>    <div class="spoiler-content">        <p>AC</p>    </div></div><a href="https://www.kancloud.cn/yanshandou/kam2/598850">流程图</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=>start: Startop1=>operation: 加入等待队列|pastop2=>operation: 被唤醒op3=>operation: 拿到锁e=>endcond1=>condition: 自旋?cond2=>condition: 能否继续自旋?cond3=>condition: 竞争锁?s->cond1cond1(no)->cond2cond1(yes)->op3cond2(yes,right)->cond1cond2(no)->op1op1->op2->cond3cond3(no,right)->op1cond3(yes,left)->op3op3->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>ADT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ML】机器学习概述与简单应用</title>
    <link href="/2021/01/11/ml/"/>
    <url>/2021/01/11/ml/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是机器学习"><span id="more"></span>什么是机器学习</h3><h4 id="直观视角下的机器学习">直观视角下的机器学习</h4><p>大众视角：</p><figure><img src="/images/ml/1.jpg" alt="1"><figcaption aria-hidden="true">1</figcaption></figure><p>程序员视角：</p><figure><img src="/images/ml/2.jpg" alt="2"><figcaption aria-hidden="true">2</figcaption></figure><figure><img src="/images/ml/2.png" alt="2"><figcaption aria-hidden="true">2</figcaption></figure><p>目前机器学习已经应用到了生活的各个方面。</p><p>百度搜索：其背后有这复杂的机器学习系统在努力地进行这个跟我们目标关键词相关的检索、排序工作；</p><p>美图、美拍这样的照相软件：使用了机器学习来识别面部并进行一定程度的美化；</p><p>垃圾箱里躺着的垃圾邮件：它们都不是我们主动拖拽移动进去的，而是机器学习帮我们自动地识别了垃圾邮件；</p><p>京东、天猫购物时，推荐的一些我们感兴趣的商品：促成我们更加便捷地购买，机器学习的推荐算法在其中发挥作用；</p><p>还有，新闻的推荐系统、语音识别、自然语言处理、无人驾驶、机器翻译等众多领域都有机器学习的影子。</p><p>维基百科：<a href="https://zh.wikipedia.org/wiki/机器学习">https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0</a></p><p>百度百科：<a href="https://baike.baidu.com/item/机器学习/217599">https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/217599</a></p><p>机器学习实际上是一门”教会”计算机学习而不需要明确地进行编程的科学。比如，扫地机器人，它应该怎样帮助我们清扫我们的房子呢？一种办法是让它学习我们如何清扫，让它看看我们都捡起了什么东西，然后把它们又放到什么地方，而不需要编写固定的程序让它们识别垃圾，并将它们移动到固定的垃圾桶。</p><p>机器学习——实际上在很多问题上都是一种通用解决方案。</p><p>它只需要通过大量的实例就可以以很高的精度逼近准确的解决方案。它带来的好处是不需要严格地去分析具体问题并构造精确解，它以一种通用的解决方案框架来对问题进行抽象建模，并通过大量的实例来纠正模型中的参数，并最终以该模型来逼近精确解，最终达到应用标准。</p><figure><img src="/images/ml/1-2.jpg" alt="1-2"><figcaption aria-hidden="true">1-2</figcaption></figure><h4 id="人工智能机器学习与深度学习">人工智能、机器学习与深度学习</h4><figure><img src="/images/ml/2-1.jpg" alt="2-1"><figcaption aria-hidden="true">2-1</figcaption></figure><figure><img src="/images/ml/2-2.jpg" alt="2-2"><figcaption aria-hidden="true">2-2</figcaption></figure><figure><img src="/images/ml/2-3.jpg" alt="2-3"><figcaption aria-hidden="true">2-3</figcaption></figure><figure><img src="/images/ml/2-4.jpg" alt="2-4"><figcaption aria-hidden="true">2-4</figcaption></figure><figure><img src="/images/ml/2-5.jpg" alt="2-5"><figcaption aria-hidden="true">2-5</figcaption></figure><h4 id="机器学习分类">机器学习分类</h4><p>机器学习根据训练方法大致可以分为3大类：</p><ol type="1"><li>监督学习</li><li>非监督学习</li><li>强化学习</li></ol><p>除此之外，大家可能还听过“半监督学习”之类的说法，但是那些都是基于上面3类的变种，本质没有改变。</p><h5 id="监督学习">监督学习</h5><p>监督学习是指我们给算法一个数据集，并且给定正确答案。机器通过数据来学习正确答案的计算方法。</p><figure><img src="/images/ml/1-31.png" alt="1-31"><figcaption aria-hidden="true">1-31</figcaption></figure><figure><img src="/images/ml/1-312.png" alt="1-312"><figcaption aria-hidden="true">1-312</figcaption></figure><p>监督式学习采用分类和回归技术开发预测模型。</p><p><strong>分类技术</strong>可预测离散的响应 — 例如，电子邮件是不是垃圾邮件，肿瘤是恶性还是良性的。分类模型可将输入数据划分成不同类别。典型的应用包括医学成像、语音识别和信用评估。</p><p>如果您的数据能进行标记、分类或分为特定的组或类，则使用分类。例如，笔迹识别的应用程序使用分类来识别字母和数字。在图像处理和计算机视觉中，<a href="https://ww2.mathworks.cn/discovery/pattern-recognition.html">无监督模式识别</a>技术用于对象检测和图像分割。</p><p><strong>回归技术</strong>可预测连续的响应 — 例如，温度的变化或电力需求中的波动。典型的应用包括电力系统负荷预测和算法交易。</p><p>如果您在处理一个数据范围，或您的响应性质是一个实数（比如温度，或一件设备发生故障前的运行时间），则使用回归方法。</p><h5 id="非监督学习">非监督学习</h5><p>非监督学习中，给定的数据集没有“正确答案”，所有的数据都是一样的。无监督学习的任务是从给定的数据集中，挖掘出潜在的结构。</p><figure><img src="/images/ml/1-32.png" alt="1-32"><figcaption aria-hidden="true">1-32</figcaption></figure><figure><img src="/images/ml/1-322.png" alt="1-322"><figcaption aria-hidden="true">1-322</figcaption></figure><p><strong>聚类</strong>是一种最常用的无监督学习技术。这种技术可通过探索性数据分析发现数据中隐藏的模式或分组。<a href="https://ww2.mathworks.cn/discovery/cluster-analysis.html">聚类分析</a>的应用包括基因序列分析、市场调查和对象识别。</p><p><strong>降维</strong>就是指采用某种映射方法，将原高维空间中的数据点映射到低维度的空间中。降维的本质是学习一个映射函数 f : x-&gt;y，其中x是原始数据点的表达，目前最多使用向量表达形式。</p><p>目前大部分降维算法处理向量表达的数据，也有一些降维算法处理高阶张量表达的数据。之所以使用降维后的数据表示是因为在原始的高维空间中，包含有冗余信息以及噪音信息，在实际应用例如图像识别中造成了误差，降低了准确率；而通过降维,我们希望减少 <a href="http://www.hudong.com/wiki/冗余信息">冗余信息</a> 所造成的误差,提高识别（或其他应用）的精度。又或者希望通过降维算法来寻找数据内部的本质结构特征。</p><h5 id="强化学习">强化学习</h5><p>强化学习更接近生物学习的本质，因此有望获得更高的智能。它关注的是智能体如何在环境中采取一系列行为，从而获得最大的累积回报。通过强化学习，一个智能体应该知道在什么状态下应该采取什么行为。</p><figure><img src="/images/ml/1-33.jpg" alt="1-33"><figcaption aria-hidden="true">1-33</figcaption></figure><h3 id="怎样由数据和答案得到规则">怎样由数据和答案得到规则？</h3><h4 id="数据收集">数据收集</h4><h5 id="公司历史数据积累">公司历史数据积累</h5><h5 id="常见公开数据集">常见公开数据集</h5><p>https://www.infoq.cn/article/zCGdpvyxJJl7*ja4RQAZ</p><p>https://zhuanlan.zhihu.com/p/34497496</p><h5 id="网络爬虫">网络爬虫</h5><h4 id="特征表达去噪特征提取与选择">特征表达（去噪、特征提取与选择）</h4><p>其实，说白了，就是我们人眼可见的特征转化为数字特征（可以用数学公式）的过程，并且这一过程是机器学习最重要的环节。</p><p><strong>去噪</strong>：去除影响机器学习结果的原始数据。</p><p><strong>分类变量特征提取</strong>：房价预测中房子的面积、朝向、位置、装修、楼层等等，它是标记的变量，不是连续的。</p><p><strong>文字特征提取</strong>：很多机器学习问题涉及自然语言处理（NLP），必然要处理文字信息。文字必须转换成可以量化的特征向量。例如咱们公司的研发部算法组做的垃圾广告屏蔽器。</p><p><strong>图片特征提取</strong>：做图像识别时，我们人眼看到的时图片，但是在机器中则是一个数字表示的二维矩阵。</p><p><strong>数据标准化</strong>：主要用于对提取后的数字特征进行处理，因为提取好的数字特征可能会差距比较大，那么训练模型时，得到的特征权重会比较大或者比较小，同时也影响计算速度。</p><h4 id="模型选择">模型选择</h4><p>选择正确的算法看似难以驾驭——需要从几十种监督式和非监督机器学习算法中选择，每种算法又包含不同的学习方法。</p><p>没有最佳方法或万全之策。找到正确的算法只是试错过程的一部分——即使是经验丰富的数据科学家，也无法说出某种算法是否无需试错即可使用。但算法的选择还取决于您要处理的数据的大小和类型、您要从数据中获得的洞察力以及如何运用这些洞察力。</p><figure><img src="/images/ml/3-31.png" alt="3-31"><figcaption aria-hidden="true">3-31</figcaption></figure><h4 id="模型训练">模型训练</h4><p>房价预测为例</p><figure><img src="/images/ml/3-4-1.png" alt="3-4-1"><figcaption aria-hidden="true">3-4-1</figcaption></figure><p>算法模型以简单多变量线性回归为例</p><table><thead><tr class="header"><th>面积(㎡)</th><th>卧室数</th><th>卫生间数</th><th>房龄</th><th>售价(百万元)</th></tr></thead><tbody><tr class="odd"><td>62.47</td><td>2</td><td>1</td><td>12</td><td>213</td></tr><tr class="even"><td>58.05</td><td>1</td><td>1</td><td>20</td><td>180</td></tr><tr class="odd"><td>55.87</td><td>1</td><td>1</td><td>16</td><td>152</td></tr><tr class="even"><td>68.04</td><td>2</td><td>2</td><td>18</td><td>198</td></tr></tbody></table><figure><img src="/images/ml/3-4-2.jpg" alt="3-4-2"><figcaption aria-hidden="true">3-4-2</figcaption></figure><p>那么，这里的假设函数</p><figure><img src="/images/ml/3-4-3.jpg" alt="3-4-3"><figcaption aria-hidden="true">3-4-3</figcaption></figure><p>假设值与真实值之间的差就是这个模型的误差（代价）</p><figure><img src="/images/ml/3-4-4.jpg" alt="3-4-4"><figcaption aria-hidden="true">3-4-4</figcaption></figure><p>当代价函数的值趋近于0时，模型就比较完美了</p><h4 id="参数调整">参数调整</h4><p>那怎样能是代价函数最小化？</p><p>梯度下降</p><p>共轭梯度</p><p>拟牛顿迭代法（BFGS）</p><p>L-BFGS</p><p>......</p><p>这里，我们已梯度下降法为例：</p><figure><img src="/images/ml/3-4-5.jpg" alt="3-4-5"><figcaption aria-hidden="true">3-4-5</figcaption></figure><h4 id="section"><img src="/images/ml/3-4-6.jpg" alt="3-4-6"></h4><h4 id="模型评估">模型评估</h4><p>对于分类问题：</p><p>正确率、召回率、F1值等等</p><figure><img src="/images/ml/3-4-8.jpg" alt="3-4-8"><figcaption aria-hidden="true">3-4-8</figcaption></figure><figure><img src="/images/ml/3-4-7.jpg" alt="3-4-7"><figcaption aria-hidden="true">3-4-7</figcaption></figure><p>对于回归问题：</p><figure><img src="/images/ml/3-4-9.jpg" alt="3-6-3"><figcaption aria-hidden="true">3-6-3</figcaption></figure><figure><img src="/images/ml/3-4-10.jpg" alt="3-6-4"><figcaption aria-hidden="true">3-6-4</figcaption></figure><p>与过拟合对应的，就有欠拟合</p><h4 id="实际预测">实际预测</h4><p>直接将样本参数带入h假设函数，便可以得到预测值</p><h3 id="简单线性回归实现">简单线性回归实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib<br>matplotlib.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]<br>matplotlib.rcParams[<span class="hljs-string">&#x27;font.family&#x27;</span>] = <span class="hljs-string">&#x27;sans-serif&#x27;</span><br>matplotlib.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> axes3d<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> cmimport matplotlib.ticker <span class="hljs-keyword">as</span> mtick<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loadDataSet</span>(<span class="hljs-params">filename</span>):</span><br>    X = []<br>    Y = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> idx, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f):<br>            line = line.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).strip()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line:<br>                <span class="hljs-keyword">continue</span><br><br>            eles = line.split()<br><br>            <span class="hljs-keyword">if</span> idx == <span class="hljs-number">0</span>:<br>                numFea = <span class="hljs-built_in">len</span>(eles)<br><br>            eles = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, eles))<br><br>            X.append(eles[:-<span class="hljs-number">1</span>])<br>            Y.append([eles[-<span class="hljs-number">1</span>]])<br>    <span class="hljs-keyword">return</span> np.array(X), np.array(Y)<br><br><br><span class="hljs-comment"># 假设函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">h</span>(<span class="hljs-params">theta, X</span>):</span><br>    <span class="hljs-keyword">return</span> np.dot(X, theta)<br><br><br><span class="hljs-comment"># 代价函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">J</span>(<span class="hljs-params">theta, X, Y</span>):</span><br>    m = <span class="hljs-built_in">len</span>(X)<br>    <span class="hljs-keyword">return</span> np.<span class="hljs-built_in">sum</span>(np.dot((h(theta, X) - Y).T, (h(theta, X) - Y)) / (<span class="hljs-number">2</span> * m))<br><br><br><span class="hljs-comment"># 梯度下降更新公式</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bgd</span>(<span class="hljs-params">alpha, maxloop, epsilon, X, Y</span>):</span><br>    m, n = X.shape  <span class="hljs-comment"># m是样本数，n是特征数(包括了全部是1的x0)，其实也就是参数theta的个数</span><br><br>    theta = np.zeros((n, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 参数theta全部初始化为0</span><br><br>    count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 记录迭代轮次</span><br>    converged = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否已经收敛的标志</span><br>    error = np.inf  <span class="hljs-comment"># 当前的代价函数值</span><br>    errors = [J(theta, X, Y), ]  <span class="hljs-comment"># 记录每一次迭代得代价函数值</span><br><br>    thetas = &#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        thetas[i] = [theta[i, <span class="hljs-number">0</span>], ]  <span class="hljs-comment"># 记录每一个theta j的历史更新</span><br><br>    <span class="hljs-keyword">while</span> count &lt;= maxloop:<br>        <span class="hljs-keyword">if</span> (converged):<br>            <span class="hljs-keyword">break</span><br>        count = count + <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 这里，我们的梯度计算统一了</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            deriv = np.dot(X[:, j].T, (h(theta, X) - Y)).<span class="hljs-built_in">sum</span>() / m<br>            thetas[j].append(theta[j, <span class="hljs-number">0</span>] - alpha * deriv)<br><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            theta[j, <span class="hljs-number">0</span>] = thetas[j][-<span class="hljs-number">1</span>]<br><br>        error = J(theta, X, Y)<br>        errors.append(error)<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(errors[-<span class="hljs-number">1</span>] - errors[-<span class="hljs-number">2</span>]) &lt; epsilon):<br>            converged = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> theta, errors, thetas<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">standarize</span>(<span class="hljs-params">X</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;特征标准化处理</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        X 样本集</span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">        标准后的样本集</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    m, n = X.shape<br>    <span class="hljs-comment"># 归一化每一个特征</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        features = X[:, j]<br>        meanVal = features.mean(axis=<span class="hljs-number">0</span>)<br>        std = features.std(axis=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> std != <span class="hljs-number">0</span>:<br>            X[:, j] = (features - meanVal) / std<br>        <span class="hljs-keyword">else</span>:<br>            X[:, j] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> X<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    data_set = os.path.dirname(os.path.abspath(__file__))+<span class="hljs-string">&#x27;/houses.txt&#x27;</span><br>    ori_X, Y = loadDataSet(data_set)  <span class="hljs-comment"># 从南京链家抓取的夫子庙附近的房屋数据</span><br>    <span class="hljs-built_in">print</span>(ori_X.shape)<br>    <span class="hljs-built_in">print</span>(Y.shape)<br><br>    m, n = ori_X.shape<br>    X = standarize(ori_X.copy())<br>    X = np.concatenate((np.ones((m, <span class="hljs-number">1</span>)), X), axis=<span class="hljs-number">1</span>)<br><br>    alpha = <span class="hljs-number">1</span>  <span class="hljs-comment"># 学习率</span><br>    maxloop = <span class="hljs-number">5000</span>  <span class="hljs-comment"># 最大迭代次数</span><br>    epsilon = <span class="hljs-number">0.000001</span>  <span class="hljs-comment"># 收敛判断条件</span><br><br>    result = bgd(alpha, maxloop, epsilon, X, Y)<br>    theta, errors, thetas = result<br><br>    <span class="hljs-comment"># 预测</span><br>    normalizedSize = (<span class="hljs-number">70</span> - ori_X[:, <span class="hljs-number">0</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">0</span>].std(<span class="hljs-number">0</span>)<br>    normalizedBr = (<span class="hljs-number">2</span> - ori_X[:, <span class="hljs-number">1</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">1</span>].std(<span class="hljs-number">0</span>)<br>    predicateX = np.matrix([[<span class="hljs-number">1</span>, normalizedSize, normalizedBr]])<br>    price = h(theta, predicateX)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;70㎡两居估价: ￥%.4f万元&#x27;</span> % price)<br><br>    <span class="hljs-comment"># %matplotlib</span><br>    <span class="hljs-comment"># 打印拟合平面</span><br>    fittingFig = plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">12</span>))<br>    title = <span class="hljs-string">&#x27;bgd: rate=%.3f, maxloop=%d, epsilon=%.3f \n&#x27;</span> % (alpha, maxloop, epsilon)<br>    ax = fittingFig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<br><br>    xx = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">25</span>)<br>    yy = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>)<br>    zz = np.zeros((<span class="hljs-number">25</span>, <span class="hljs-number">25</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):<br>            normalizedSize = (xx[i] - ori_X[:, <span class="hljs-number">0</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">0</span>].std(<span class="hljs-number">0</span>)<br>            normalizedSize = (xx[i] - ori_X[:, <span class="hljs-number">0</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">0</span>].std(<span class="hljs-number">0</span>)<br>            x = np.matrix([[<span class="hljs-number">1</span>, normalizedSize, normalizedBr]])<br>            zz[i, j] = h(theta, x)<br>    xx, yy = np.meshgrid(xx, yy)<br>    ax.zaxis.set_major_formatter(mtick.FormatStrFormatter(<span class="hljs-string">&#x27;%.2e&#x27;</span>))<br>    ax.plot_surface(xx, yy, zz, rstride=<span class="hljs-number">1</span>, cstride=<span class="hljs-number">1</span>, cmap=cm.rainbow, alpha=<span class="hljs-number">0.1</span>, antialiased=<span class="hljs-literal">True</span>)<br><br>    xs = ori_X[:, <span class="hljs-number">0</span>].flatten()<br>    ys = ori_X[:, <span class="hljs-number">1</span>].flatten()<br>    zs = Y[:, <span class="hljs-number">0</span>].flatten()<br>    ax.scatter(xs, ys, zs, c=<span class="hljs-string">&#x27;b&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br><br>    ax.set_xlabel(<span class="hljs-string">u&#x27;面积&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">u&#x27;卧室数&#x27;</span>)<br>    ax.set_zlabel(<span class="hljs-string">u&#x27;估价&#x27;</span>)<br><br>    plt.show()<br><br>    errorsFig = plt.figure()<br>    ax = errorsFig.add_subplot(<span class="hljs-number">111</span>)<br>    ax.yaxis.set_major_formatter(mtick.FormatStrFormatter(<span class="hljs-string">&#x27;%.2e&#x27;</span>))<br><br>    ax.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(errors)), errors)<br>    ax.set_xlabel(<span class="hljs-string">u&#x27;迭代次数&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">u&#x27;代价函数&#x27;</span>)<br>    plt.show()<br></code></pre></td></tr></table></figure><figure><img src="/images/ml/3-6-1.jpg" alt="3-6-1"><figcaption aria-hidden="true">3-6-1</figcaption></figure><figure><img src="/images/ml/3-6-2.jpg" alt="3-6-2"><figcaption aria-hidden="true">3-6-2</figcaption></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Machine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mac】vim环境设置</title>
    <link href="/2021/01/10/vim/"/>
    <url>/2021/01/10/vim/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="开发神器vim工具"><span id="more"></span>开发神器vim工具</h2><p><img src="/images/vim/index.gif"></p><h3 id="安装macvim来替代系统自带vim">安装MacVim来替代系统自带vim</h3><p>一般情况下，Mac 自带的Vim不能满足大多的需求，所以选择安装MacVim</p><p>通过一下命令可以查看预装vim的信息</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 查看预装vim版本</span><br>vim --version<br><br><span class="hljs-comment"># 查看预装vim路径</span><br><span class="hljs-built_in">where</span> vim<br></code></pre></td></tr></table></figure><h4 id="macvim安装">MacVim安装</h4><p>有两种方式来安装macvim:</p><ol type="1"><li>Github上下载<a href="https://macvim-dev.github.io/macvim"><code>macvim.dmg</code></a>安装包进行安装</li><li>使用<a href="https://brew.sh/">Homebrew</a>安装【推荐】</li></ol><p>brew安装macvim</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew install macvim<br></code></pre></td></tr></table></figure><p>为macvim中的vim创建别名，覆盖掉系统自带的vim，在~/.bash_profile中添加以下命令</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">alias</span> vi=vim<br><span class="hljs-built_in">alias</span> vim=mvim<br><span class="hljs-built_in">alias</span> mvim=<span class="hljs-string">&#x27;/usr/local/bin/mvim -v&#x27;</span><br><span class="hljs-comment"># 刷新配置文件</span><br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h4 id="macvim配置">MacVim配置</h4><p>在vim启动过程中，首先将查找配置文件并执行其中的命令，而这些初始化文件一般有vimrc、gvimrc和exrc三种。通过<code>:version</code>命令可以查看vim的配置文件信息。</p><p>vim的配置文件有全局和用户两种版本，分别存放于<code>$VIM</code>和<code>$HOME</code>目录中，用户配置文件默认是没有的，必要时由用户自己在<code>$HOME</code>目录下创建。可以使用<code>:echo</code>命令查看他们的路径，使用<code>:e</code>命令进入目录。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs zsh">:<span class="hljs-built_in">echo</span> <span class="hljs-variable">$VIM</span><br>/usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim<br><br>:<span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOME</span><br>/Users/wangpeng<br><br><span class="hljs-comment"># 可以通过:scriptname查看各脚本的加载顺序</span><br>:scriptname<br>/usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/vimrc<br>  2: ~/.vimrc<br>  3: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim<br>  4: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim<br>  5: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim<br>  6: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim<br>  7: ~/.vim/colors/solarized.vim<br>  8: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim<br>  9: ~/.vim/bundle/Vundle.vim/<span class="hljs-built_in">autoload</span>/vundle.vim<br> 10: ~/.vim/bundle/Vundle.vim/<span class="hljs-built_in">autoload</span>/vundle/config.vim<br> 11: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim<br> 12: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/indent.vim<br> 13: ~/.vim/bundle/nerdtree/plugin/NERD_tree.vim<br> 14: ~/.vim/bundle/nerdtree/<span class="hljs-built_in">autoload</span>/nerdtree.vim<br> 15: ~/.vim/bundle/nerdtree/lib/nerdtree/path.vim<br> 16: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_controller.vim<br> 17: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_item.vim<br> 18: ~/.vim/bundle/nerdtree/lib/nerdtree/key_map.vim<br> 19: ~/.vim/bundle/nerdtree/lib/nerdtree/bookmark.vim<br> 20: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_file_node.vim<br> 21: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_dir_node.vim<br> 22: ~/.vim/bundle/nerdtree/lib/nerdtree/opener.vim<br> 23: ~/.vim/bundle/nerdtree/lib/nerdtree/creator.vim<br> 24: ~/.vim/bundle/nerdtree/lib/nerdtree/flag_set.vim<br> 25: ~/.vim/bundle/nerdtree/lib/nerdtree/nerdtree.vim<br> 26: ~/.vim/bundle/nerdtree/lib/nerdtree/ui.vim<br> 27: ~/.vim/bundle/nerdtree/lib/nerdtree/event.vim<br> 28: ~/.vim/bundle/nerdtree/lib/nerdtree/notifier.vim<br> 29: ~/.vim/bundle/nerdtree/<span class="hljs-built_in">autoload</span>/nerdtree/ui_glue.vim<br> 30: ~/.vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim<br> 31: ~/.vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim<br> 32: ~/.vim/bundle/nerdtree/nerdtree_plugin/vcs.vim<br> 33: ~/.vim/bundle/nerdtree-git-plugin/nerdtree_plugin/git_status.vim<br> 34: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus.vim<br> 35: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/log.vim<br> 36: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/listener.vim<br> 37: ~/.vim/bundle/vim-autopep8/plugin/python_autopep8.vim<br> 38: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim<br> 39: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim<br> 40: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim<br> 41: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim<br> 42: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim<br> 43: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim<br> 44: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim<br> 45: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim<br> 46: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim<br> 47: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim<br> 48: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim<br> 49: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim<br> 50: ~/.vim/bundle/indentLine/after/plugin/indentLine.vim<br> 51: ~/.vim/bundle/nerdtree/syntax/nerdtree.vim<br> 52: ~/.vim/bundle/nerdtree-git-plugin/after/syntax/nerdtree.vim<br> 53: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/util.vim<br> 54: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/job.vim<br></code></pre></td></tr></table></figure><h5 id="用户配置文件">用户配置文件</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 切换至用户目录</span><br><span class="hljs-built_in">cd</span> ~<br><span class="hljs-comment"># 使用vim创建并打开.vimrc</span><br>vim .vimrc<br></code></pre></td></tr></table></figure><h5 id="设置主题">设置主题</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">colorscheme solarized<br></code></pre></td></tr></table></figure><h5 id="显示帮助为中文">显示帮助为中文</h5><p>下载<a href="https://sourceforge.net/projects/vimcdoc/?source=typ_redirect">vimdoc</a></p><p><img src="/images/vim/doc.png"></p><p>将文件解压到~/.vim/doc，若路径不存在则创建</p><p>打开vim执行:helptags ~/.vim/doc</p><p>在~/.vimrc中进行配置：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">set</span> helplang=cn <br><span class="hljs-keyword">if</span> version &gt;= 603<br>    <span class="hljs-built_in">set</span> helplang=cn<br>    <span class="hljs-built_in">set</span> encoding=utf-8<br>endif<br></code></pre></td></tr></table></figure><p>常见的vim快捷键可以看<a href="https://stackoverflow.com/questions/5400806/what-are-the-most-used-vim-commands-keypresses/5400978#5400978">这里</a></p><h5 id="字符编码">字符编码</h5><p>enc,fenc,fencs,tenc,一般乱码多是因这些参数设置不正确引起：</p><ol type="1"><li>enc，vim内部使用的编码，如buffer，寄存器中的字符串，windows一般是gbk，mac是utf-8</li><li>fenc，当前打开文件自身的编码，如果enc和fenc不一致，vim会做编码转换，转换成fenc编码保存文件</li><li>fencs，一个字符编码列表，编码的自动识别就是通过它实现的</li><li>tenc，终端使用的编码，或者说vim用于屏幕显示时的编码，显示时vim会把内部编码转换为屏幕编码进行输出，默认为enc</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-string">&quot; 将enc设置为utf-8</span><br><span class="hljs-string">set enc=utf-8</span><br></code></pre></td></tr></table></figure><h4 id="vim插件管理器vundle">vim插件管理器—Vundle</h4><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> is short for <em>Vim bundle</em> and is a <a href="http://www.vim.org/">Vim</a> plugin manager.</p><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> allows you to...</p><ul><li>keep track of and <a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L126-L233">configure</a> your plugins right in the <code>.vimrc</code></li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L234-L254">install</a> configured plugins (a.k.a. scripts/bundle)</li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L255-L265">update</a> configured plugins</li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L266-L295">search</a> by name all available <a href="http://vim-scripts.org/vim/scripts.html">Vim scripts</a></li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L303-L318">clean</a> unused plugins up</li><li>run the above actions in a <em>single keypress</em> with <a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L319-L360">interactive mode</a></li></ul><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> automatically...</p><ul><li>manages the <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#&#39;runtimepath&#39;">runtime path</a> of your installed scripts</li><li>regenerates <a href="http://vimdoc.sourceforge.net/htmldoc/helphelp.html#:helptags">help tags</a> after installing and updating</li></ul><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> is undergoing an <a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L372-L396">interface change</a>, please stay up to date to get latest changes.</p><h5 id="安装vundle">安装Vundle</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">git <span class="hljs-built_in">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim<br></code></pre></td></tr></table></figure><p>下载Vundle插件管理器，将其放置在Vim编辑器bundles文件夹中。现在，可以通过.vimrc配置文件来管理所有扩展了。</p><h5 id="配置vundle">配置Vundle</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-built_in">set</span> nocompatible              <span class="hljs-string">&quot; required</span><br><span class="hljs-string">filetype off                  &quot;</span> required<br><br><span class="hljs-string">&quot; set the runtime path to include Vundle and initialize</span><br><span class="hljs-string">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="hljs-string">call vundle#begin()</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> alternatively, pass a path <span class="hljs-built_in">where</span> Vundle should install plugins<br><span class="hljs-string">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> <span class="hljs-built_in">let</span> Vundle manage Vundle, required<br>Plugin <span class="hljs-string">&#x27;gmarik/Vundle.vim&#x27;</span><br><br><span class="hljs-string">&quot; Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> All of your Plugins must be added before the following line<br>call vundle<span class="hljs-comment">#end()            &quot; required</span><br>filetype plugin indent on    <span class="hljs-string">&quot; required</span><br></code></pre></td></tr></table></figure><h5 id="使用vundle">使用Vundle</h5><p>将想要安装的插件，按照地址填写方法，将地址填写在<strong>vundle#begin</strong>和<strong>vundle#end</strong>之间就可以</p><p>运行 :PluginInstall</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">:PluginInstall<br></code></pre></td></tr></table></figure><p>执行<code>:PluginInstall</code>后的截图</p><p><img src="/images/vim/vundle.png"></p><h5 id="移除不需要的插件">移除不需要的插件</h5><ol type="1"><li>编辑.vimrc文件移除的你要移除的插件所对应的plugin那一行</li><li>输入命令<code>:BundleClean</code></li></ol><h5 id="其他常用命令">其他常用命令</h5><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs zsh">:BundleList              -列举列表(也就是.vimrc)中配置的所有插件<br>:BundleInstall          -安装列表中的全部插件<br>:BundleInstall!         -更新列表中的全部插件<br>:BundleSearch foo   -查找foo插件<br>:BundleSearch! foo  -刷新foo插件缓存<br>:BundleClean           -清除列表中没有的插件<br>:BundleClean!          -清除列表中没有的插件<br></code></pre></td></tr></table></figure><h4 id="安装插件打造ide">安装插件—打造IDE</h4><h5 id="添加目录树nerdtree">添加目录树—NERDTree</h5><p>NERDTree的作用就是列出当前路径的目录树，一般IDE都是有的。可以方便的浏览项目的总体的目录结构和创建删除重命名文件或文件名</p><h6 id="安装nerdtree">安装NERDTree</h6><p>添加目录树：<a href="https://github.com/preservim/nerdtree">nerdtree</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span>  <br></code></pre></td></tr></table></figure><p>添加git状态图标：<a href="https://github.com/Xuyuanp/nerdtree-git-plugin">nerdtree-git</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span>  <br></code></pre></td></tr></table></figure><h6 id="配置nerdtree">配置NERDTree</h6><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-string">&quot;使用F3键快速调出和隐藏它</span><br><span class="hljs-string">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">let NERDTreeChDirMode=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>显示书签<span class="hljs-string">&quot;</span><br><span class="hljs-string">let NERDTreeShowBookmarks=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>设置忽略文件类型<span class="hljs-string">&quot;</span><br><span class="hljs-string">let NERDTreeIgnore=[&#x27;\~$&#x27;, &#x27;\.pyc$&#x27;, &#x27;\.swp$&#x27;]</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>窗口大小<span class="hljs-string">&quot;</span><br><span class="hljs-string">let NERDTreeWinSize=25</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 修改默认箭头<br><span class="hljs-built_in">let</span> g:NERDTreeDirArrowExpandable = <span class="hljs-string">&#x27;▸&#x27;</span><br><span class="hljs-built_in">let</span> g:NERDTreeDirArrowCollapsible = <span class="hljs-string">&#x27;▾&#x27;</span><br><br><span class="hljs-string">&quot;How can I open a NERDTree automatically when vim starts up if no files were specified?</span><br><span class="hljs-string">autocmd StdinReadPre * let s:std_in=1</span><br><span class="hljs-string">autocmd VimEnter * if argc() == 0 &amp;&amp; !exists(&quot;</span>s:std_in<span class="hljs-string">&quot;) | NERDTree | endif</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 打开vim时自动打开NERDTree<br>autocmd vimenter * NERDTree           <br><br><span class="hljs-string">&quot;How can I open NERDTree automatically when vim starts up on opening a directory?</span><br><span class="hljs-string">autocmd StdinReadPre * let s:std_in=1</span><br><span class="hljs-string">autocmd VimEnter * if argc() == 1 &amp;&amp; isdirectory(argv()[0]) &amp;&amp; !exists(&quot;</span>s:std_in<span class="hljs-string">&quot;) | exe &#x27;NERDTree&#x27; argv()[0] | wincmd p | ene | endif</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 关闭vim时，如果打开的文件除了NERDTree没有其他文件时，它自动关闭，减少多次按:q!<br>autocmd bufenter * <span class="hljs-keyword">if</span> (winnr(<span class="hljs-string">&quot;$&quot;</span>) == 1 &amp;&amp; exists(<span class="hljs-string">&quot;b:NERDTree&quot;</span>) &amp;&amp; b:NERDTree.isTabTree()) | q | endif<br><br><span class="hljs-string">&quot; 开发的过程中，我们希望git信息直接在NERDTree中显示出来， 和Eclipse一样，修改的文件和增加的文件都给出相应的标注， 这时需要安装的插件就是 nerdtree-git-plugin,配置信息如下</span><br><span class="hljs-string">let g:NERDTreeIndicatorMapCustom = &#123;</span><br><span class="hljs-string">    \ &quot;</span>Modified<span class="hljs-string">&quot;  : &quot;</span>✹<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Staged<span class="hljs-string">&quot;    : &quot;</span>✚<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Untracked<span class="hljs-string">&quot; : &quot;</span>✭<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Renamed<span class="hljs-string">&quot;   : &quot;</span>➜<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Unmerged<span class="hljs-string">&quot;  : &quot;</span>═<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Deleted<span class="hljs-string">&quot;   : &quot;</span>✖<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Dirty<span class="hljs-string">&quot;     : &quot;</span>✗<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Clean<span class="hljs-string">&quot;     : &quot;</span>✔︎<span class="hljs-string">&quot;,</span><br><span class="hljs-string">    \ &quot;</span>Unknown<span class="hljs-string">&quot;   : &quot;</span>?<span class="hljs-string">&quot;</span><br><span class="hljs-string">    \ &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 显示行号<br><span class="hljs-built_in">let</span> NERDTreeShowLineNumbers=1<br><span class="hljs-built_in">let</span> NERDTreeAutoCenter=1<br><br><span class="hljs-string">&quot; 在终端启动vim时，共享NERDTree</span><br><span class="hljs-string">let g:nerdtree_tabs_open_on_console_startup=1</span><br></code></pre></td></tr></table></figure><h5 id="分割布局">分割布局</h5><p>不用安装额外插件，只需要在.vimrc设置即可</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-string">&quot; 指定屏幕上可以进行分割布局的区域</span><br><span class="hljs-string">set splitbelow               &quot;</span> 允许在下部分割布局<br><span class="hljs-built_in">set</span> splitright               <span class="hljs-string">&quot; 允许在右侧分隔布局</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 组合快捷键：<br>nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;    <span class="hljs-string">&quot; 组合快捷键：- Ctrl-j 切换到下方的分割窗口</span><br><span class="hljs-string">nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;    &quot;</span> 组合快捷键：- Ctrl-k 切换到上方的分割窗口<br>nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;    <span class="hljs-string">&quot; 组合快捷键：- Ctrl-l 切换到右侧的分割窗口</span><br><span class="hljs-string">nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;    &quot;</span> 组合快捷键：- Ctrl-h 切换到左侧的分割窗口<br></code></pre></td></tr></table></figure><p>nnoremap将一个组合快捷键映射为另一个快捷键。no部分，指的是在Vim的正常模式（Normal Mode）下， 而不是可视模式下重新映射，更多信息请看<a href="https://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping">这里</a></p><h5 id="go开发插件vim-go">Go开发插件—vim-go</h5><p><a href="https://github.com/fatih/vim-go">vim-go</a> 包含了运行、调试、重命名、增加移除 tag、运行单元测试、静态检查、格式化等非常多的功能。</p><ul><li>编译使用命令 <code>:GoBuild</code>, 安装使用命令 <code>:GoInstall</code> or测试使用命令 <code>:GoTest</code>. 运行单元测试命令 <code>:GoTestFunc</code>).</li><li>运行当前文件 <code>:GoRun</code>.</li><li>改进了语法突出显示和折叠.</li><li>调试集成 <a href="https://github.com/go-delve/delve"><code>delve</code></a> 的程序 <code>:GoDebugStart</code>.</li><li>Completion and many other features support via <code>gopls</code>.</li><li>formatting on save keeps the cursor position and undo history.</li><li>Go to symbol/declaration with <code>:GoDef</code>.</li><li>Look up documentation with <code>:GoDoc</code> or <code>:GoDocBrowser</code>.</li><li>Easily import packages via <code>:GoImport</code>, remove them via <code>:GoDrop</code>.</li><li>Precise type-safe renaming of identifiers with <code>:GoRename</code>.</li><li>See which code is covered by tests with <code>:GoCoverage</code>.</li><li>Add or remove tags on struct fields with <code>:GoAddTags</code> and <code>:GoRemoveTags</code>.</li><li>Call <a href="https://staticcheck.io/"><code>staticcheck</code></a> with <code>:GoMetaLinter</code> to invoke all possible linters (<code>golint</code>, <code>vet</code>, <code>errcheck</code>, <code>deadcode</code>, etc.) and put the result in the quickfix or location list.</li><li>Lint your code with <code>:GoLint</code>, run your code through <code>:GoVet</code> to catch static errors, or make sure errors are checked with <code>:GoErrCheck</code>.</li><li>Advanced source analysis tools utilizing <code>guru</code>, such as <code>:GoImplements</code>, <code>:GoCallees</code>, and <code>:GoReferrers</code>.</li><li>... and many more! Please see <a href="https://github.com/fatih/vim-go/blob/master/doc/vim-go.txt">doc/vim-go.txt</a> for more information.</li><li>Integration with <a href="https://github.com/golang/tools/blob/master/gopls/README.md"><code>gopls</code></a>.</li><li>The <code>gopls</code> instance can be shared with other Vim plugins.</li><li>Vim-go's use of <code>gopls</code> can be disabled and alternative tools can be used when desired.</li><li>Integration with <a href="https://github.com/preservim/tagbar"><code>Tagbar</code></a> via <a href="https://github.com/jstemmer/gotags"><code>gotags</code></a>.</li><li>Integration with <a href="https://github.com/SirVer/ultisnips"><code>Ultisnips</code></a> and other snippet engines.</li></ul><h5 id="python代码缩进">python代码缩进</h5><p>代码的正确缩进是至关重要的，我们将从以下几个方面为vim配置代码缩进功能：</p><ol type="1"><li>python代码的自动缩进</li><li>遵从<a href="https://www.cnblogs.com/ajianbeyourself/p/4377933.html">PEP8</a>代码风格标准</li><li>自动格式化为PEP8代码</li></ol><h6 id="安装插件"><strong>安装插件</strong></h6><p>自动缩进有用，但是在某些情况下（比如函数定义有多行的时候），并不总是会达到你想要的效果，尤其是在符合PEP8标准方面。我们可以利用<a href="https://github.com/vim-scripts/indentpython.vim"><code>indentpython.vim</code></a>插件，来解决这个问题：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">Plugin <span class="hljs-string">&#x27;vim-scripts/indentpython.vim&#x27;</span><br></code></pre></td></tr></table></figure><p>将python代码自动格式化为符合pep8标准的代码用到<a href="https://github.com/tell-k/vim-autopep8"><code>tell-k/vim-autopep8</code></a>插件：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">Plugin <span class="hljs-string">&#x27;tell-k/vim-autopep8&#x27;</span><br></code></pre></td></tr></table></figure><p>要使用<code>tell-k/vim-autopep8</code>插件必须先在电脑上安装python的第三方包<a href="https://pypi.org/project/autopep8/"><code>autopep8</code></a>。但奇怪的是用pip安装时找不到这个包，我们使用<code>easy-install</code>来安装，只需要在m某个python环境下安装一次即可，实测在其他环境下也可用：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">easy_install autopep8<br></code></pre></td></tr></table></figure><h6 id="配置插件">配置插件</h6><p>.vimrc文件中添加下面的配置。这些设置将让Vim中的Tab键就相当于4个标准的空格符，确保每行代码长度不超过80个字符，并且会以unix格式储存文件，避免在推送到Github或分享给其他用户时出现文件转换问题。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-string">&quot; 按照PEP8标准来配置vim</span><br><span class="hljs-string">au BufNewFile,BufRead *.py set tabstop=4 |set softtabstop=4|set shiftwidth=4|set textwidth=79|set expandtab|set autoindent|set fileformat=unix</span><br></code></pre></td></tr></table></figure><p>对于全栈开发，你可以设置针对每种文件类型设置au命令：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">au BufNewFile,BufRead *.js, *.html, *.css <span class="hljs-built_in">set</span> tabstop=2|<span class="hljs-built_in">set</span> softtabstop=2|<span class="hljs-built_in">set</span> shiftwidth=2<br></code></pre></td></tr></table></figure><p>下面来配置vim-autopep8</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-string">&quot; Disable show diff window</span><br><span class="hljs-string">let g:autopep8_disable_show_diff=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> vim-autopep8自1.11版本之后取消了F8快捷键，需要用户自己为:Autopep8设置快捷键：<br>autocmd FileType python noremap &lt;buffer&gt; &lt;F8&gt; :call Autopep8()&lt;CR&gt;<br></code></pre></td></tr></table></figure><h6 id="使用插件">使用插件</h6><p>在使用macvim编辑<code>*.py</code>文件时：</p><ul><li>代码自动按照PEP8规则进行缩进；</li><li>tap键相当于4个标准空格，每行代码不超过80字符；</li><li>使用<code>:Autopep8</code>命令或者<code>F8</code>快捷键自动按照PEP8标准格式化python代码</li></ul><p>在使用macvim编辑<code>*.js</code>, <code>*.html</code>, <code>*.css</code>文件时,tap键相当于2个标准空格</p><h5 id="添加代码缩进指示线">添加代码缩进指示线</h5><h6 id="安装indentline">安装indentline</h6><p>indentLine是一款缩进指示线，由纯字符实现，效果比较完美</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;Yggdroot/indentLine&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="配置indentline">配置indentline</h6><p><a href="https://github.com/Yggdroot/indentLine"><code>indentLine</code></a>默认是关闭的，因此需要在.vimrc中配置才能看到效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; 支持任意ASCII码，也可以使用特殊字符：¦, ┆, or │ ，但只在utf-8编码下有效</span><br><span class="hljs-string">let g:indentLine_char=&#x27;¦&#x27;   </span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 使indentline生效<br><span class="hljs-built_in">let</span> g:indentLine_enabled = 1    <br></code></pre></td></tr></table></figure><h6 id="使用indentline">使用indentline</h6><p>在代码缩进处，自动生成缩进指示线</p><h5 id="代码折叠">代码折叠</h5><p>大多数“现代”集成开发环境（IDE）都提供对方法（methods）或类（classes）进行折叠的手段，只显示类或方法的定义部分，而不是全部的代码。</p><h6 id="安装插件-1">安装插件</h6><p>本身不用安装额外插件，但为避免出现超过你所希望的折叠数目，我们推荐<a href="https://github.com/tmhedberg/SimpylFold"><code>SimplyFold</code></a>来解决这个问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;tmhedberg/SimpylFold&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="配置插件-1">配置插件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; 必须手动输入za来折叠（和取消折叠）</span><br><span class="hljs-string">set foldmethod=indent                &quot;</span> 根据每行的缩进开启折叠<br><span class="hljs-built_in">set</span> foldlevel=99<br><br><span class="hljs-string">&quot; 使用空格键会是更好的选择,所以在你的配置文件中加上这一行命令吧：</span><br><span class="hljs-string">nnoremap &lt;space&gt; za</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 希望看到折叠代码的文档字符串？<br><span class="hljs-built_in">let</span> g:SimpylFold_docstring_preview=1<br></code></pre></td></tr></table></figure><h6 id="使用插件-1">使用插件</h6><p>在程序块处会显示折叠线，当光标放于折叠线时，按空格键可以切换在该折叠线处是否折叠。</p><h5 id="括号自动补全">括号自动补全</h5><p><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a>主要功能是括号和引号自动补全，输入左引号和左括号自动补全另外一半,安装好就可以无需额外配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;jiangmiao/auto-pairs&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="多行注释">多行注释</h5><h6 id="安装插件-2">安装插件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;scrooloose/nerdcommenter&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="配置插件-2">配置插件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot; nerdcommenter默认热键<span class="hljs-tag">&lt;<span class="hljs-name">leader</span>&gt;</span>为&#x27;\&#x27;，这里将热键设置为&#x27;,&#x27;<br>let mapleader=&#x27;,&#x27;<br><br>&quot; 设置注释快捷键<br>map <span class="hljs-tag">&lt;<span class="hljs-name">F4</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">leader</span>&gt;</span>ci<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="使用插件-2">使用插件</h6><p>在normal模式下按v并移动光标选择需要注释的行，再按F4就可以为所有选中的行添加注释</p><h3 id="vim日常">Vim日常</h3><h5 id="中文乱码">中文乱码</h5><p>简单粗暴的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim ~/.vimrc<br><br>set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<br>set termencoding=utf-8<br>set encoding=utf-8<br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CAP】分布式一致性</title>
    <link href="/2020/11/25/cap/"/>
    <url>/2020/11/25/cap/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="section"><span id="more"></span></h3><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Paxos</tag>
      
      <tag>Raft</tag>
      
      <tag>ZAB</tag>
      
      <tag>Zookeeper</tag>
      
      <tag>Etcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Hadoop】MR&amp;Yarn:计算框架与资源调度框架</title>
    <link href="/2020/11/25/hadoop-MR/"/>
    <url>/2020/11/25/hadoop-MR/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="section"><span id="more"></span></h3><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】设计模式</title>
    <link href="/2020/11/20/python-design/"/>
    <url>/2020/11/20/python-design/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>Patterns mean “I have run out of language.” - Rich Hickey</p><p><strong>Design patterns</strong> are typical solutions to common problemsin software design. Each pattern is like a blueprintthat you can customize to solve a particulardesign problem in your code.<span id="more"></span></p></blockquote><h3 id="创建型">创建型</h3><h4 id="method工厂方法">Method(工厂方法)</h4><p>执行单独的函数，通过传参提供需要的对象的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 工厂方法</span><br><span class="hljs-string">Problem:在工厂方法模式中，我们执行函数，传入一个参数，但不需要知道任何关于对象如何实现以及对象来自哪里的细节</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/1/8 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> etree<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connector</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span><br>        factory = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">try</span>:<br>            factory = self.connector_factory(filepath)<br>        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>        self.factory = factory<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connector_factory</span>(<span class="hljs-params">self, filepath</span>):</span><br>        <span class="hljs-keyword">if</span> filepath.endswith(<span class="hljs-string">&#x27;json&#x27;</span>):<br>            connector = self.JSONConnector<br>        <span class="hljs-keyword">elif</span> filepath.endswith(<span class="hljs-string">&#x27;xml&#x27;</span>):<br>            connector = self.XMLConnector<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Cannot connect to &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(filepath))<br>        <span class="hljs-keyword">return</span> connector(filepath)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JSONConnector</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        JSON工厂</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span><br>            self.data = <span class="hljs-built_in">dict</span>()<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath, mode=<span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                self.data = json.load(f)<br><br><span class="hljs-meta">        @property</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parsed_data</span>(<span class="hljs-params">self</span>):</span><br>            <span class="hljs-keyword">return</span> self.data<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XMLConnector</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        XML工厂</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span><br>            self.tree = etree.parse(filepath)<br><br><span class="hljs-meta">        @property</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parsed_date</span>(<span class="hljs-params">self</span>):</span><br>            <span class="hljs-keyword">return</span> self.tree<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    xml_factory = Connector(<span class="hljs-string">&#x27;data/person.xml&#x27;</span>)<br>    xml_data = xml_factory.factory.parsed_date<br>    smiths = xml_data.findall(<span class="hljs-string">&quot;.//&#123;&#125;[&#123;&#125;=&#x27;&#123;&#125;&#x27;]&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;person&#x27;</span>, <span class="hljs-string">&#x27;lastName&#x27;</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;found: &#123;&#125; persons&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(smiths)))<br>    <span class="hljs-keyword">for</span> smith <span class="hljs-keyword">in</span> smiths:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;first name:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(smith.find(<span class="hljs-string">&#x27;firstName&#x27;</span>).text))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;last name:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(smith.find(<span class="hljs-string">&#x27;lastName&#x27;</span>).text))<br>    <span class="hljs-built_in">print</span>()<br>    json_factory = Connector(<span class="hljs-string">&#x27;data/donut.json&#x27;</span>)<br>    json_data = json_factory.factory.parsed_data<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;find: &#123;&#125; donuts. &#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(json_data)))<br>    <span class="hljs-keyword">for</span> donut <span class="hljs-keyword">in</span> json_data:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;name:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(donut[<span class="hljs-string">&#x27;name&#x27;</span>]))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ppu:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(donut[<span class="hljs-string">&#x27;ppu&#x27;</span>]))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="abstract-factory抽象工厂-解决复杂对象创建问题">Abstract Factory(抽象工厂: 解决复杂对象创建问题)</h4><p>工厂方法适合对象种类较少的情况，如果有多种不同类型对象需要创建，使用抽象工厂模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 抽象工厂（实际上一个抽象工厂其实是一组工厂方法，每个工厂方法负责生产不同类型的对象）</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/1/8 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Frog</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    游戏角色对象-青蛙</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">interact_with</span>(<span class="hljs-params">self, obstacle</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; the Frog encounters &#123;&#125; and &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(self, obstacle, obstacle.action()))<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bug</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    障碍物对象-虫子</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;a bug&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">action</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;eats it&#x27;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrogWorld</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    抽象工厂，负责创建游戏角色与障碍物对象</span><br><span class="hljs-string">    make_character()和make_obstacle()动态改变当前激活的工厂</span><br><span class="hljs-string">    在静态语言中，抽象工厂是抽象类/接口，具有一些空方法，Python中无须如此</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-built_in">print</span>(self)<br>        self.player_name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n\n\t------- Frog Word -------&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_character</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Frog(self.player_name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_obstacle</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Bug()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wizard</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    游戏角色对象-男巫</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">interact_with</span>(<span class="hljs-params">self, obstacle</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125; the Wizard battles against &#123;&#125; and &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(self, obstacle, obstacle.action()))<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ork</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    障碍物对象-怪兽</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;an evil ork&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">action</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;kills it&#x27;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WizardWorld</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    抽象工厂，负责创建游戏角色与障碍物对象</span><br><span class="hljs-string">    make_character()和make_obstacle()动态改变当前激活的工厂</span><br><span class="hljs-string">    在静态语言中，抽象工厂是抽象类/接口，具有一些空方法，Python中无须如此</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-built_in">print</span>(self)<br>        self.player_name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n\n\t------- Wizard Word -------&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_character</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Wizard(self.player_name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_obstacle</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Ork()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GameEnvironment</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    游戏的主入口，接收factory为输入</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, factory</span>):</span><br>        self.hero = factory.make_character()<br>        self.obstacle = factory.make_obstacle()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span>(<span class="hljs-params">self</span>):</span><br>        self.hero.interact_with(self.obstacle)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate_age</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Welcome &#123;&#125;. How old are you? &quot;</span>.<span class="hljs-built_in">format</span>(name))<br>        age = <span class="hljs-built_in">int</span>(age)<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Age &#123;&#125; is invalid, please try again...&quot;</span>.<span class="hljs-built_in">format</span>(age))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, age<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, age<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Hello. What&#x27;s your name?&quot;</span>)<br>    valid_input = <span class="hljs-literal">False</span><br>    age = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> valid_input:<br>        valid_input, age = validate_age(name)<br>    game = FrogWorld <span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span> <span class="hljs-keyword">else</span> WizardWorld<br>    environment = GameEnvironment(game(name))<br>    environment.play()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="the-builder-pattern构造模式-控制复杂对象的构造">The Builder Pattern(构造模式: 控制复杂对象的构造)</h4><p>当对象需要多个部分组合起来一步步创建，并且创建和表示分离的时候。可以这么理解，你要买电脑，工厂模式直接返回一个你需要型号的电脑，但是构造模式允许你自定义电脑各种配置类型，组装完成后给你。这个过程可以传入builder从而自定义创建的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description:建造者设计模式demo</span><br><span class="hljs-string">Problem:当需要创建一个由多个部分构成的对象，而且它的构造需要一步接一步的完成；只有当各个部分都创建好，这个对象才算完整</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Extension:工厂模式与创建者的区别为（1）工厂模式一但个步骤创建对象；创建者以多个步骤创建对象，并且几乎始终会使用一个指挥者。</span><br><span class="hljs-string">                              （2）工厂模式下会立即返回一个创建好的对象，建造者仅在客户端代码才显式请求指挥者返回的最终对象</span><br><span class="hljs-string">                               例如：假设你想买个电脑，如果决定买一台特定配置的电脑，则使用工厂模式；如果你要购买一台定制的PC，</span><br><span class="hljs-string">                               你式指挥者，会向制造商提供指令说明心中理想的电脑规格。</span><br><span class="hljs-string">Date: 2020/1/8</span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>MINI14 = <span class="hljs-string">&#x27;1.4GHz Mac Mini&#x27;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleFactory</span>:</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MacMini14</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>            self.memory = <span class="hljs-number">4</span><br>            self.hdd = <span class="hljs-number">500</span><br>            self.gpu = <span class="hljs-string">&#x27;Intel HD Graphics 5000&#x27;</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>            info = (<span class="hljs-string">&#x27;Model: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(MINI14),<br>                    <span class="hljs-string">&#x27;Memory: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.memory),<br>                    <span class="hljs-string">&#x27;Hard Disk: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.hdd),<br>                    <span class="hljs-string">&#x27;Graphics Card: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.gpu))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(info)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_computer</span>(<span class="hljs-params">self, model</span>):</span><br>        <span class="hljs-keyword">if</span> model == MINI14:<br>            <span class="hljs-keyword">return</span> self.MacMini14()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I dont&#x27;t know how to build &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(model)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">apple_computer_use_factory</span>():</span><br>    afac = AppleFactory()<br>    mac_mini = afac.build_computer(MINI14)<br>    <span class="hljs-built_in">print</span>(mac_mini)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, serial_number</span>):</span><br>        self.serial_number = serial_number<br>        self.memory = <span class="hljs-literal">None</span><br>        self.hdd = <span class="hljs-literal">None</span><br>        self.gpu = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        info = (<span class="hljs-string">&#x27;Serial: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.serial_number),<br>                <span class="hljs-string">&#x27;Memory: &#123;&#125;GB&#x27;</span>.<span class="hljs-built_in">format</span>(self.memory),<br>                <span class="hljs-string">&#x27;Hard Disk: &#123;&#125;GB&#x27;</span>.<span class="hljs-built_in">format</span>(self.hdd),<br>                <span class="hljs-string">&#x27;Graphics Card: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.gpu))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(info)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComputerBuilder</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.computer = Computer(<span class="hljs-string">&#x27;AI563924&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conf_memory</span>(<span class="hljs-params">self, amount</span>):</span><br>        self.computer.memory = amount<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conf_hdd</span>(<span class="hljs-params">self, amount</span>):</span><br>        self.computer.hdd = amount<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conf_gpu</span>(<span class="hljs-params">self, model</span>):</span><br>        self.computer.gpu = model<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HardwareEngineer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.builder = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">construct_computer</span>(<span class="hljs-params">self, memory, hdd, gpu</span>):</span><br>        self.builder = ComputerBuilder()<br>        self.builder.conf_memory(memory)<br>        self.builder.conf_hdd(hdd)<br>        self.builder.conf_gpu(gpu)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">computer</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.builder.computer<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">apple_computer_use_builder</span>():</span><br>    engineer = HardwareEngineer()<br>    engineer.construct_computer(memory=<span class="hljs-number">8</span>, hdd=<span class="hljs-number">500</span>, gpu=<span class="hljs-string">&#x27;GeForce GTX 650 Ti&#x27;</span>)<br>    computer = engineer.computer<br>    <span class="hljs-built_in">print</span>(computer)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    apple_computer_use_builder()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)<br>    apple_computer_use_factory()<br></code></pre></td></tr></table></figure><h4 id="单例模式-使得一个类最多生成一个实例">单例模式: 使得一个类最多生成一个实例</h4><p>(基于元类)单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description:(基于元类)单例模式</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution:</span><br><span class="hljs-string">Date: 2020/1/6 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__init__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.__name__))<br>        cls.__instance = <span class="hljs-literal">None</span><br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> cls.__instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__call__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.__name__))<br>            cls.__instance = <span class="hljs-built_in">super</span>(Singleton, cls).__call__(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls.__instance<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Instance</span>(<span class="hljs-params">metaclass=Singleton</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    i1 = Instance(<span class="hljs-string">&#x27;zhang san&#x27;</span>)<br>    i2 = Instance(<span class="hljs-string">&#x27;li si&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(i1 <span class="hljs-keyword">is</span> i2)<br></code></pre></td></tr></table></figure><p>通过new函数实现简单的单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 通过new函数实现简单的单例模式</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/1/20 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">&#x27;_instance&#x27;</span>):<br>            cls._instance = <span class="hljs-built_in">super</span>().__new__(cls, *args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__call__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.__class__))<br>        <span class="hljs-keyword">return</span> cls._instance<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__init__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.__str__()))<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.name = name<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ins1 = Singleton(<span class="hljs-string">&#x27;zhang san&#x27;</span>)<br>    ins2 = Singleton(<span class="hljs-string">&#x27;li si&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ins1), <span class="hljs-built_in">id</span>(ins2))<br>    <span class="hljs-built_in">print</span>(ins1.name)<br>    <span class="hljs-built_in">print</span>(ins2.name)<br><br></code></pre></td></tr></table></figure><p>装饰器实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 通过装饰器方式实现单例模式</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/20 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 装饰器实现</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">singleton</span>(<span class="hljs-params">class_</span>):</span><br>    instances = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getinstance</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> class_ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances:<br>            instances[class_] = class_(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> instances[class_]<br><br>    <span class="hljs-keyword">return</span> getinstance<br><br><br><span class="hljs-meta">@singleton</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>:</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    i1 = MyClass()<br>    i2 = MyClass()<br>    <span class="hljs-built_in">print</span>(i1 <span class="hljs-keyword">is</span> i2)<br></code></pre></td></tr></table></figure><h4 id="the-prototype-pattern原型模式解决对象拷贝问题">The Prototype Pattern(原型模式:解决对象拷贝问题)</h4><h3 id="行为型">行为型</h3><h4 id="the-observer-pattern观察者模式用来处理多个对象之间的发布订阅问题">The Observer Pattern(观察者模式：用来处理多个对象之间的发布订阅问题)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: </span><br><span class="hljs-string">Date: 2019/12/13 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WaterHeater</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    热水器：战胜寒冬的有利武器</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.__observers = []<br>        self.__temperature = <span class="hljs-number">25</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTemperature</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__temperature<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setTemperature</span>(<span class="hljs-params">self, temperature</span>):</span><br>        self.__temperature = temperature<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current temperature is:&quot;</span>, self.__temperature)<br>        self.notifies()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addObserver</span>(<span class="hljs-params">self, observer</span>):</span><br>        self.__observers.append(observer)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">notifies</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> self.__observers:<br>            o.update(self)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    洗澡模式和饮用模式的父类</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, waterHeater</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WashingMode</span>(<span class="hljs-params">Observer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;该模式用于洗澡用&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, waterHeater</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">50</span> &lt;= waterHeater.getTemperature() &lt; <span class="hljs-number">70</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;水已烧好，温度正好！可以用来洗澡了。&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrinkingMode</span>(<span class="hljs-params">Observer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;该模式用于饮用&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, waterHeater</span>):</span><br>        <span class="hljs-keyword">if</span> waterHeater.getTemperature() &gt;= <span class="hljs-number">100</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;水已烧开！可以用来饮用了。&quot;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_water_heater</span>():</span><br>    heater = WaterHeater()<br>    washing_obser = WashingMode()<br>    drinking_obser = DrinkingMode()<br>    heater.addObserver(washing_obser)<br>    heater.addObserver(drinking_obser)<br>    heater.setTemperature(<span class="hljs-number">40</span>)<br>    heater.setTemperature(<span class="hljs-number">60</span>)<br>    heater.setTemperature(<span class="hljs-number">100</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    test_water_heater()<br></code></pre></td></tr></table></figure><h4 id="the-state-pattern状态模式实现有限状态机">The State Pattern(状态模式：实现有限状态机)</h4><h4 id="the-strategy-pattern策略模式动态选择算法策略">The Strategy Pattern(策略模式：动态选择算法策略)</h4><h4 id="the-chain-of-responsibility-pattern-责任链模式创建链式对象用来接收广播消息">The Chain of Responsibility Pattern (责任链模式:创建链式对象用来接收广播消息)</h4><h4 id="the-command-pattern命令模式用来给应用添加undo操作">The Command Pattern(命令模式：用来给应用添加Undo操作)</h4><h4 id="the-interpreter-pattern解释器模式用来实现domain-specific-languagedsl">The Interpreter Pattern(解释器模式：用来实现Domain Specific Language(DSL))</h4><h4 id="the-template-pattern模板模式抽象出算法公共部分从而实现代码复用">The Template Pattern(模板模式：抽象出算法公共部分从而实现代码复用)</h4><h3 id="结构性">结构性</h3><h4 id="the-adapter-pattern适配器模式-解决接口不兼容问题">The Adapter Pattern(适配器模式: 解决接口不兼容问题)</h4><h4 id="the-decorator-pattern装饰器模式-无需子类化实现扩展对象功能问题">The Decorator Pattern(装饰器模式： 无需子类化实现扩展对象功能问题)</h4><h4 id="the-facade-pattern外观模式-简化复杂对象的访问问题">The Facade Pattern(外观模式: 简化复杂对象的访问问题)</h4><h4 id="the-flyweight-pattern享元模式-实现对象复用从而改善资源使用">The Flyweight Pattern(享元模式: 实现对象复用从而改善资源使用)</h4><h4 id="the-model-view-controller-patternmvc模式解耦展示逻辑和业务逻辑">The Model-View-Controller Pattern(mvc模式：解耦展示逻辑和业务逻辑)</h4><h4 id="the-proxy-pattern代理模式通过一层间接保护层实现更安全的接口访问">The Proxy Pattern(代理模式：通过一层间接保护层实现更安全的接口访问）</h4><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】基本数据结构和算法</title>
    <link href="/2020/11/20/python/"/>
    <url>/2020/11/20/python/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>How to select datastructures for ADT</p><ol type="1"><li>Dose the data structure provide for the storage requirements as specified by the domain of the ADT?</li><li>Does the data structure provide the data access and manipulation functionality to fully implement the ADT?</li><li>Effcient implemention? based on complexity analysis.<span id="more"></span></li></ol><h3 id="strings">Strings</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 字符串相关</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/18 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseString</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    字符数组反转</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_string</span>(<span class="hljs-params">self, x, reverse=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :param x: 字符数组</span><br><span class="hljs-string">        :param reverse: 是否之用内置库</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> reverse:<br>            x.reverse()<br>            <span class="hljs-keyword">return</span> x<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:<br>                <span class="hljs-keyword">return</span><br>            beg, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> beg &lt; end:<br>                x[beg], x[end] = x[end], x[beg]<br>                beg += <span class="hljs-number">1</span><br>                end -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Palindrome</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断字符串是否是回文</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_palindrome</span>(<span class="hljs-params">self, x</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">and</span> x &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        xx = <span class="hljs-built_in">str</span>(x)<br>        beg, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(xx)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> beg &lt; end:<br>            <span class="hljs-keyword">if</span> xx[beg] == xx[end]:<br>                beg += <span class="hljs-number">1</span><br>                end -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    r = ReverseString()<br>    <span class="hljs-built_in">print</span>(r.reverse_string([<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/strings.py</p><h3 id="array-and-list">Array and List</h3><h4 id="array">array</h4><p>定长，操作有限，但是节省内存；貌似我的生涯中还没用过，不过python3.5中我试了确实有array类，可以用import array直接导入。</p><h4 id="list">list</h4><p>会预先分配内存，操作丰富，但是耗费内存。用sys.getsizeof做实验可以发现该结构非常类似C++ STL里的vector，是使用最频繁的数据结构。</p><ul><li>list.append: 如果之前没有分配够内存，会重新开辟新区域，然后复制之前的数据，复杂度退化</li><li>list.insert: 会移动被插入区域后所有元素,O(n)</li><li>list.pop: pop不同位置需要的复杂度不同pop(0)是O(1)复杂度,pop()首位O(n)复杂度</li><li>list[]: slice操作copy数据（预留空间）到另一个list</li></ul><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/array_and_list.py</p><h3 id="sets-and-maps">Sets and Maps</h3><h4 id="sets-adt">sets ADT</h4><p>A set is a container that stores a collection of unique values over a given comparable domain in which the stored values have no particular ordering.</p><h4 id="maps-or-dict-adt">Maps or Dict ADT</h4><p>python内部采用hash实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 基于collections.OrderedDict实现LRU_cache(最近最少使用缓存算法)</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/13 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LURCache</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, capacity=<span class="hljs-number">128</span></span>):</span><br>        self._od = OrderedDict()<br>        self._capacity = capacity<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, key</span>):</span><br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self._od:<br>            val = self._od[key]<br>            self._od.move_to_end(key)<br>            <span class="hljs-keyword">return</span> val<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, key, value</span>):</span><br>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self._od:<br>            <span class="hljs-keyword">del</span> self._od[key]<br>            self._od[key] = value<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># insert</span><br>            self._od[key] = value<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self._od) &gt; self._capacity:<br>                self._od.popitem(last=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._od.items()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    lru_cache = LURCache(<span class="hljs-number">3</span>)<br>    lru_cache.push(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>)<br>    lru_cache.push(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">2</span>)<br>    lru_cache.push(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">3</span>)<br>    lru_cache.push(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">4</span>)<br>    lru_cache.get(<span class="hljs-string">&quot;2&quot;</span>)<br>    <span class="hljs-built_in">print</span>(lru_cache.items())<br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/collections_examples/lru_cache.py</p><h3 id="algorithm-analysis">Algorithm Analysis</h3><p>一般使用大O标记法来衡量算法的平均时间复杂度, 1 &lt; log(n) &lt; n &lt; nlog(n) &lt; n^2 &lt; n^3 &lt; a^n。 了解常用数据结构操作的平均时间复杂度有利于使用更高效的数据结构，当然有时候需要在时间和空间上进行衡量，有些操作甚至还会退化，比如list的append操作，如果list空间不够，会去开辟新的空间，操作复杂度退化到O(n)，有时候还需要使用均摊分析(amortized)。</p><h3 id="searching">Searching</h3><p>python内置了in操作符和bisect二分操作模块实现查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 二分查找算法</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/1/20 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span>(<span class="hljs-params">arr, target</span>):</span><br>    n = <span class="hljs-built_in">len</span>(arr)<br>    left = <span class="hljs-number">0</span><br>    right = n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> left &lt;= right:<br>        mid = (left + right) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> arr[mid] &lt; target:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> arr[mid] &gt; target:<br>            right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;index: <span class="hljs-subst">&#123;mid&#125;</span>, value:<span class="hljs-subst">&#123;arr[mid]&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    l = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br>    binary_search(l, <span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/search/binary_search.py</p><h3 id="sorting">Sorting</h3><p>python内置了sorted方法来实现排序操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 冒泡排序</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/3/23 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">self, arr</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        冒泡排序</span><br><span class="hljs-string">        :param arr:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        n = <span class="hljs-built_in">len</span>(arr)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-i-<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:<br>                    arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    list_a = [random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>    <span class="hljs-built_in">print</span>(list_a)<br>    bs = BubbleSort()<br>    bs.bubble_sort(list_a)<br>    <span class="hljs-built_in">print</span>(list_a)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 归并排序算法-分治法</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/15 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span>(<span class="hljs-params">self, arr</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        分治法分三步走，要注意出口</span><br><span class="hljs-string">        :param arr:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 递归出口</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> arr<br>        <span class="hljs-keyword">else</span>:<br>            mid = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(arr)/<span class="hljs-number">2</span>)<br>            left_half = self.merge_sort(arr[:mid])<br>            right_half = self.merge_sort(arr[mid:])<br>            <span class="hljs-keyword">return</span> self.merge_sorted_list(left_half, right_half)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sorted_list</span>(<span class="hljs-params">self, list_a, list_b</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        合并两个有序序列</span><br><span class="hljs-string">        :param list_a:</span><br><span class="hljs-string">        :param list_b:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        length_a = <span class="hljs-built_in">len</span>(list_a)<br>        length_b = <span class="hljs-built_in">len</span>(list_b)<br>        a = b = <span class="hljs-number">0</span><br>        new_list = []<br>        <span class="hljs-keyword">while</span> a &lt; length_a <span class="hljs-keyword">and</span> b &lt; length_b:<br>            <span class="hljs-keyword">if</span> list_a[a] &lt; list_b[b]:<br>                new_list.append(list_a[a])<br>                a += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                new_list.append(list_b[b])<br>                b += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> a &lt; length_a:<br>            new_list.extend(list_a[a:])<br>        <span class="hljs-keyword">if</span> b &lt; length_b:<br>            new_list.extend(list_b[b:])<br>        <span class="hljs-keyword">return</span> new_list<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">import</span> random<br>    ms = MergeSort()<br>    ll = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>    random.shuffle(ll)<br>    <span class="hljs-built_in">print</span>(ll)<br>    ll = ms.merge_sort(ll)<br>    <span class="hljs-built_in">print</span>(ll)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 快速排序算法-分治法</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：Partition:选择基准分割数组为两个字数组，小于基准和大于基准</span><br><span class="hljs-string">         对两个字数组分别快排</span><br><span class="hljs-string">         合并结果</span><br><span class="hljs-string">Date: 2020/2/15 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> pysnooper  <span class="hljs-comment"># 调试神器</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span>:</span><br><br><span class="hljs-meta">    @pysnooper.snoop()</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">self, arr</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt; <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> arr<br>        pivot_index = <span class="hljs-number">0</span>  <span class="hljs-comment"># 第一个数作为pivot</span><br>        pivot = arr[pivot_index]<br>        less_part = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr[pivot_index+<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &lt; pivot]<br>        great_part = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr[pivot_index+<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt;= pivot]<br>        <span class="hljs-keyword">return</span> self.quick_sort(less_part) + [pivot] + self.quick_sort(great_part)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    qs = QuickSort()<br>    ll = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))<br>    random.shuffle(ll)<br>    <span class="hljs-built_in">print</span>(ll)<br>    ll = qs.quick_sort(ll)<br>    <span class="hljs-built_in">print</span>(ll)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 拓扑排序</span><br><span class="hljs-string">Problem: 对应于该图的拓扑排序,每一个有向无环图都至少存在一种拓扑排序</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/3/23 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> pysnooper<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopologicalSort</span>:</span><br><br><span class="hljs-meta">    @pysnooper.snoop()  </span><span class="hljs-comment"># pysnooper 调试神器</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">topological_sort</span>(<span class="hljs-params">self, graph: Mapping</span>):</span><br>        <span class="hljs-comment"># in_degrees = &#123;&#x27;a&#x27;： 0, &#x27;b&#x27;： 0, &#x27;c&#x27;： 0, &#x27;d&#x27;： 0, &#x27;e&#x27;： 0, &#x27;f&#x27;： 0&#125;</span><br>        in_degrees = <span class="hljs-built_in">dict</span>((u, <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph)<br>        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph:<br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[u]:  <span class="hljs-comment"># 根据键找出值也就是下级节点</span><br>                in_degrees[v] += <span class="hljs-number">1</span>  <span class="hljs-comment"># 对获取到的下级节点的入度加 1</span><br>        <span class="hljs-comment"># 循环结束之后的结果： &#123;&#x27;a&#x27;： 0, &#x27;b&#x27;： 1, &#x27;c&#x27;： 1, &#x27;d&#x27;： 2, &#x27;e&#x27;： 1, &#x27;f&#x27;： 4&#125;</span><br>        Q = [u <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph <span class="hljs-keyword">if</span> in_degrees[u] == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 入度为 0 的节点</span><br>        in_degrees_zero = []<br>        <span class="hljs-keyword">while</span> Q:<br>            u = Q.pop()  <span class="hljs-comment"># 默认从最后一个移除</span><br>            in_degrees_zero.append(u)  <span class="hljs-comment"># 存储入度为 0 的节点</span><br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[u]:<br>                in_degrees[v] -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 删除入度为 0 的节点，以及移除其指向</span><br>                <span class="hljs-keyword">if</span> in_degrees[v] == <span class="hljs-number">0</span>:<br>                    Q.append(v)<br>        <span class="hljs-keyword">return</span> in_degrees_zero<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 用字典的键值表示图的节点之间的关系，键当前节点。值是后续节点。</span><br>    graph_dict = &#123;<br>        <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;bf&#x27;</span>,  <span class="hljs-comment"># 表示 a 指向 b 和 f</span><br>        <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;cdf&#x27;</span>,<br>        <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;d&#x27;</span>,<br>        <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-string">&#x27;ef&#x27;</span>,<br>        <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-string">&#x27;f&#x27;</span>,<br>        <span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    ts = TopologicalSort()<br>    t = ts.topological_sort(graph_dict)<br>    <span class="hljs-built_in">print</span>(t)<br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/tree/master/python/algorithm/sort</p><h3 id="linked-structure">Linked Structure</h3><p>list是最常用的数据结构，但是list在中间增减元素的时候效率会很低，这时候linked list会更适合，缺点就是获取元素的平均时间复杂度变成了O(n)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 链表 </span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/16 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val</span>):</span><br>        self.val = val<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteNode</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    链表中删除一个节点（已知要删除的节点，不知链表的head）</span><br><span class="hljs-string">    思路：将要删除的链表节点node的值修改为node.next的值</span><br><span class="hljs-string">         node.next指向node.next.next</span><br><span class="hljs-string">         这样相当于删除了node节点</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, node_list=<span class="hljs-literal">None</span>, node=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> node_list <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(node_list, <span class="hljs-built_in">list</span>):<br>            self._head = ListNode(node_list[<span class="hljs-number">0</span>])<br>            cur_index = self._head<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(node_list)):<br>                <span class="hljs-keyword">if</span> cur_index.val == node:<br>                    self._node = cur_index<br>                cur_index.<span class="hljs-built_in">next</span> = ListNode(node_list[i])<br>                cur_index = cur_index.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">else</span>:<br>            self._head = <span class="hljs-literal">None</span><br>            self._node = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_node_in_a_linked_list</span>(<span class="hljs-params">node</span>):</span><br>        next_node = node.<span class="hljs-built_in">next</span><br>        next_next_node = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        node.val = next_node.val<br>        node.<span class="hljs-built_in">next</span> = next_next_node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span>(<span class="hljs-params">self</span>):</span><br>        cur = self._head<br>        link_list = []<br>        <span class="hljs-keyword">while</span> cur:<br>            link_list.append(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-built_in">print</span>(link_list)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeLinkedList</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    合并两个有序链表</span><br><span class="hljs-string">    思路：新建一个链表root，将list_one, list_two遍历，按大小放入root</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, list_one=<span class="hljs-literal">None</span>, list_two=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> list_one <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(list_one, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> list_two <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(list_two, <span class="hljs-built_in">list</span>):<br>            self.list_one = ListNode(list_one[<span class="hljs-number">0</span>])<br>            cur_index = self.list_one<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(list_one)):<br>                cur_index.<span class="hljs-built_in">next</span> = ListNode(list_one[i])<br>                cur_index = cur_index.<span class="hljs-built_in">next</span><br>            self.list_two = ListNode(list_two[<span class="hljs-number">0</span>])<br>            cur_index = self.list_two<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(list_two)):<br>                cur_index.<span class="hljs-built_in">next</span> = ListNode(list_two[i])<br>                cur_index = cur_index.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">else</span>:<br>            self.list_one = <span class="hljs-literal">None</span><br>            self.list_two = <span class="hljs-literal">None</span><br>        self._head = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_linked_list</span>(<span class="hljs-params">self</span>):</span><br>        one_cur_val = self.list_one<br>        two_cur_val = self.list_two<br>        self._head = ListNode(<span class="hljs-literal">None</span>)<br>        cur = self._head<br>        <span class="hljs-keyword">while</span> one_cur_val <span class="hljs-keyword">and</span> two_cur_val:<br>            <span class="hljs-keyword">if</span> one_cur_val.val &lt; two_cur_val.val:<br>                node = ListNode(one_cur_val.val)<br>                one_cur_val = one_cur_val.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                node = ListNode(two_cur_val.val)<br>                two_cur_val = two_cur_val.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = node<br>            cur = node<br>        cur.<span class="hljs-built_in">next</span> = one_cur_val <span class="hljs-keyword">or</span> two_cur_val<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span>(<span class="hljs-params">self</span>):</span><br>        cur = self._head.<span class="hljs-built_in">next</span><br>        link_list = []<br>        <span class="hljs-keyword">while</span> cur:<br>            link_list.append(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-built_in">print</span>(link_list)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseLinkList</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    单链表反转</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, head=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;链表的头部&quot;&quot;&quot;</span><br>        self._head = head<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        给链表添加元素</span><br><span class="hljs-string">        ：param val： 传过来的数字</span><br><span class="hljs-string">        ：return：</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 创建一个节点</span><br>        node = ListNode(val)<br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self._head = node<br>        <span class="hljs-keyword">else</span>:<br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                cur = cur.<span class="hljs-built_in">next</span>  <span class="hljs-comment"># 移动游标</span><br>            cur.<span class="hljs-built_in">next</span> = node  <span class="hljs-comment"># 如果 next 后面没了证明以及到最后一个节点了</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._head:<br>            <span class="hljs-keyword">return</span><br>        cur = self._head<br>        link_list = []<br>        <span class="hljs-keyword">while</span> cur:<br>            link_list.append(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-built_in">print</span>(link_list)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">size</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取链表的大小</span><br><span class="hljs-string">        ：return：</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> count<br>        <span class="hljs-keyword">else</span>:<br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                count += <span class="hljs-number">1</span><br>                cur = cur.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_link</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        单链表反转</span><br><span class="hljs-string">        思路：</span><br><span class="hljs-string">        让 cur.next 先断开即指向 none，指向设定 pre 游标指向断开的元素，然后</span><br><span class="hljs-string">        cur.next 指向断开的元素，再把开始 self._head 再最后一个元素的时候.</span><br><span class="hljs-string">        ：return：</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> self.size() == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            pre = <span class="hljs-literal">None</span><br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                post = cur.<span class="hljs-built_in">next</span><br>                cur.<span class="hljs-built_in">next</span> = pre<br>                pre = cur<br>                cur = post<br>            self._head = pre  <span class="hljs-comment"># 逆向后的头节点</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkListIntersectionNode</span>:</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">两个链表的的交叉节点</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_intersection_node</span>(<span class="hljs-params">self, headA, headB</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        cur1、cur2，2 个指针的初始位置是链表 headA、headB 头结点，cur1、cur2 两个指针一直往后遍历。</span><br><span class="hljs-string">        直到 cur1 指针走到链表的末尾，然后 cur1 指向 headB；</span><br><span class="hljs-string">        直到 cur2 指针走到链表的末尾，然后 cur2 指向 headA；</span><br><span class="hljs-string">        然后再继续遍历；</span><br><span class="hljs-string">        每次 cur1、cur2 指向 None，则将 cur1、cur2 分别指向 headB、headA。</span><br><span class="hljs-string">        循环的次数越多，cur1、cur2 的距离越接近，直到 cur1 等于 cur2。则是两个链表的相交点。</span><br><span class="hljs-string">        ：tye head1, head1： ListNode</span><br><span class="hljs-string">        ：rtye： ListNode</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> headA <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> headB <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            cur1, cur2 = headA, headB<br><br>            <span class="hljs-keyword">while</span> cur1 != cur2:<br>                cur1 = cur1.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> headA<br>                cur2 = cur2.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> headB<br><br>            <span class="hljs-keyword">return</span> cur1<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    dn = DeleteNode([<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>], <span class="hljs-number">3</span>)<br>    dn.traversal()<br>    dn.delete_node_in_a_linked_list(dn._node)<br>    dn.traversal()<br><br>    mn = MergeLinkedList([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>])<br>    mn.merge_linked_list()<br>    mn.traversal()<br><br>    r_link = ReverseLinkList()<br>    r_link.add(<span class="hljs-number">3</span>)<br>    r_link.add(<span class="hljs-number">5</span>)<br>    r_link.add(<span class="hljs-number">6</span>)<br>    r_link.add(<span class="hljs-number">7</span>)<br>    r_link.add(<span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对链表进行遍历&quot;</span>)<br>    r_link.traversal()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;size：<span class="hljs-subst">&#123;r_link.size()&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对链表进行逆向操作之后&quot;</span>)<br>    r_link.reverse_link()<br>    r_link.traversal()<br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/link_list_cases.py</p><h3 id="advanced-linked-lists">Advanced Linked Lists</h3><h4 id="doubly-linked-list">Doubly Linked List</h4><p>双链表，每个节点多了个prev指向前一个节点。双链表可以用来编写文本编辑器的buffer。</p><h4 id="循环链表">循环链表</h4><p>利用循环双端链表我们可以实现一个经典的缓存失效算法，lru：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, prev=<span class="hljs-literal">None</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span>, key=<span class="hljs-literal">None</span>, value=<span class="hljs-literal">None</span></span>):</span><br>        self.prev, self.<span class="hljs-built_in">next</span>, self.key, self.value = prev, <span class="hljs-built_in">next</span>, key, value<br>        <br>       <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularDoubleLinkedList</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        node = Node()<br>        node.prev, node.<span class="hljs-built_in">next</span> = node, node<br>        self.rootnode = node<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">headnode</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.rootnode.<span class="hljs-built_in">next</span><br>      <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tailnode</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.rootnode.prev<br>      <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span>(<span class="hljs-params">self, node</span>):</span><br>        <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> self.rootnode:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">else</span>:<br>            node.prev.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span><br>            node.<span class="hljs-built_in">next</span>.prev = node.prev<br>            <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append</span>(<span class="hljs-params">self, node</span>):</span><br>        tailnode = self.tailnode()<br>        tailnode.<span class="hljs-built_in">next</span> = node<br>        node.<span class="hljs-built_in">next</span> = self.rootnode<br>        self.rootnode.prev = node<br>        <br>        <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, maxsize=<span class="hljs-number">16</span></span>):</span><br>        self.maxsize = maxsize<br>        self.cache = &#123;&#125;<br>        self.access = CircularDoubleLinkedList()<br>        self.isfull = <span class="hljs-built_in">len</span>(self.cache) &gt;= self.maxsize<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, func</span>):</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">n</span>):</span><br>            cachenode = self.cache.get(n)<br>            <span class="hljs-keyword">if</span> cachenode <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:  <span class="hljs-comment"># hit</span><br>                self.access.remove(cachenode)<br>                self.access.append(cachenode)<br>                <span class="hljs-keyword">return</span> cachenode.value<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># miss</span><br>                value = func(n)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.isfull:<br>                    tailnode = self.access.tailnode()<br>                    newnode = Node(tailnode, self.access.rootnode, n, value)<br>                    self.access.append(newnode)<br>                    self.cache[n] = newnode<br>                    self.isfull = <span class="hljs-built_in">len</span>(self.cache) &gt;= self.maxsize<br>                    <span class="hljs-keyword">return</span> value<br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># full</span><br>                    lru_node = self.access.headnode()<br>                    <span class="hljs-keyword">del</span> self.cache[lru_node.key]<br>                    self.access.remove(lru_node)<br>                    tailnode = self.access.tailnode()<br>                    newnode = Node(tailnode, self.access.rootnode, n, value)<br>                    self.access.append(newnode)<br>                    self.cache[n] = newnode<br>                <span class="hljs-keyword">return</span> value<br>        <span class="hljs-keyword">return</span> wrapper<br>      <br>      <br><span class="hljs-meta">@LRUCache()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)<br>      <br>      <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(fib(i))<br>    <br>    <br><span class="hljs-comment"># 输出</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">5</span><br><span class="hljs-number">8</span><br><span class="hljs-number">13</span><br><span class="hljs-number">21</span><br><span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><h3 id="stacks">Stacks</h3><p>栈，一种后进先出的数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 基队列实现栈</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：基于collections.deque实现栈</span><br><span class="hljs-string">          基于 2 个队列实现</span><br><span class="hljs-string">          基于 1 个队列实现</span><br><span class="hljs-string">Date: 2020/2/15 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.items = deque()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span><br>        self.items.append(val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.items[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.items.pop()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items) == <span class="hljs-number">0</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用 2 个队列实现</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># q1 作为进栈出栈，q2 作为中转站</span><br>        self.q1 = Queue()<br>        self.q2 = Queue()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, x</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        入栈</span><br><span class="hljs-string">        ：type x： int</span><br><span class="hljs-string">        ：rtype： void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.q1.put(x)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        出栈</span><br><span class="hljs-string">        ：rtype： int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> self.q1.qsize() &gt; <span class="hljs-number">1</span>:<br>            self.q2.put(self.q1.get())  <span class="hljs-comment"># 将 q1 中除尾元素外的所有元素转到 q2 中</span><br>        <span class="hljs-keyword">if</span> self.q1.qsize() == <span class="hljs-number">1</span>:<br>            res = self.q1.get()  <span class="hljs-comment"># 弹出 q1 的最后一个元素</span><br>            self.q1, self.q2 = self.q2, self.q1  <span class="hljs-comment"># 交换 q1,q2</span><br>            <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        栈顶</span><br><span class="hljs-string">        ：rtype： int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> self.q1.qsize() &gt; <span class="hljs-number">1</span>:<br>            self.q2.put(self.q1.get())  <span class="hljs-comment"># 将 q1 中除尾元素外的所有元素转到 q2 中</span><br>        <span class="hljs-keyword">if</span> self.q1.qsize() == <span class="hljs-number">1</span>:<br>            res = self.q1.get()  <span class="hljs-comment"># 弹出 q1 的最后一个元素</span><br>            self.q2.put(res)  <span class="hljs-comment"># 与 pop 唯一不同的是需要将 q1 最后一个元素保存到 q2 中</span><br>            self.q1, self.q2 = self.q2, self.q1  <span class="hljs-comment"># 交换 q1,q2</span><br>            <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        判断是否为空</span><br><span class="hljs-string">        ：rtype： bool</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">bool</span>(self.q1.qsize() + self.q2.qsize())  <span class="hljs-comment"># 为空返回 True，不为空返回 False</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack2</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用 1 个队列实现</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.sq1 = Queue()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, x</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        入栈</span><br><span class="hljs-string">        ：type x： int</span><br><span class="hljs-string">        ：rtype： void</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.sq1.put(x)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        出栈</span><br><span class="hljs-string">        ：rtype： int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        count = self.sq1.qsize()<br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">1</span>:<br>            x = self.sq1.get()<br>            self.sq1.put(x)<br>            count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self.sq1.get()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get the top element.</span><br><span class="hljs-string">        ：rtype： int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        count = self.sq1.qsize()<br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">while</span> count:<br>            x = self.sq1.get()<br>            self.sq1.put(x)<br>            count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns whether the stack is empty.</span><br><span class="hljs-string">        ：rtype： bool</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.sq1.empty()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    obj = MyStack2()<br>    obj.push(<span class="hljs-number">1</span>)<br>    obj.push(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(obj.pop())<br>    obj.push(<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(obj.pop())<br>    <span class="hljs-built_in">print</span>(obj.pop())<br>    <span class="hljs-built_in">print</span>(obj.empty())<br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/stack_cases.py</p><h3 id="queues">Queues</h3><p>队列也是经常使用的数据结构，比如发送消息等，celery可以使用redis提供的list实现消息队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 基于collections.deque实现队列</span><br><span class="hljs-string">                    基于栈实现队列</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/15 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> examples.example_0x_cases.algorithm.data_structure.stack_cases <span class="hljs-keyword">import</span> Stack<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.items = deque()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span><br>        self.items.append(val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.items.popleft()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items) == <span class="hljs-number">0</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueByStack</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.stack_one = Stack()<br>        self.stack_two = Stack()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span><br>        self.stack_one.push(val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.stack_two.empty():<br>            <span class="hljs-keyword">if</span> self.stack_one.empty():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nil&#x27;</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.stack_one.empty():<br>                self.stack_two.push(self.stack_one.pop())<br>        <span class="hljs-keyword">return</span> self.stack_two.pop()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">peek</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.stack_two.empty():<br>            <span class="hljs-keyword">if</span> self.stack_one.empty():<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nil&#x27;</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.stack_one.empty():<br>                self.stack_two.push(self.stack_one.pop())<br>        <span class="hljs-keyword">return</span> self.stack_two.top()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.stack_two<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    qu = QueueByStack()<br>    qu.push(<span class="hljs-number">1</span>)<br>    qu.push(<span class="hljs-number">2</span>)<br>    qu.push(<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(qu.pop())<br>    <span class="hljs-built_in">print</span>(qu.peek())<br>    <span class="hljs-built_in">print</span>(qu.pop())<br>    <span class="hljs-built_in">print</span>(qu.pop())<br>    <span class="hljs-built_in">print</span>(qu.pop())<br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/queue_cases.py</p><h2 id="binary-tree">Binary Tree</h2><p>二叉树，每个节点做多只有两个子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 二叉树的遍历：前序、中序、后序、层次遍历</span><br><span class="hljs-string">                    二叉树的反转</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/16 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val, left, right</span>):</span><br>        self.val, self.left, self.right = val, left, right<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinTreeTravel</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, node_list=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> node_list <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(node_list, <span class="hljs-built_in">list</span>):<br>            tree_node_list = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(node_list)):<br>                tree_node_list.append(TreeNode(node_list[i], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>))<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(node_list)):<br>                <span class="hljs-keyword">if</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span>:<br>                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>                    tree_node_list[i].right = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]<br>                <span class="hljs-keyword">elif</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> &lt; i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>:<br>                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">break</span><br>            self.root = tree_node_list[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_order_travel</span>(<span class="hljs-params">self, sub_tree</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        先序遍历</span><br><span class="hljs-string">        :param sub_tree:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> sub_tree:<br>            <span class="hljs-built_in">print</span>(sub_tree.val)<br>            self.pre_order_travel(sub_tree.left)<br>            self.pre_order_travel(sub_tree.right)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">in_order_travel</span>(<span class="hljs-params">self, sub_tree</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        中序遍历</span><br><span class="hljs-string">        :param sub_tree:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> sub_tree:<br>            self.in_order_travel(sub_tree.left)<br>            <span class="hljs-built_in">print</span>(sub_tree.val)<br>            self.in_order_travel(sub_tree.right)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post_order_travel</span>(<span class="hljs-params">self, sub_tree</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        后序遍历</span><br><span class="hljs-string">        :param sub_tree:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> sub_tree:<br>            self.post_order_travel(sub_tree.left)<br>            self.post_order_travel(sub_tree.right)<br>            <span class="hljs-built_in">print</span>(sub_tree.val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">level_order_travel</span>(<span class="hljs-params">self, root</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        层次遍历</span><br><span class="hljs-string">        :param root:</span><br><span class="hljs-string">        :return: list[list[int]]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-built_in">print</span>([])<br>            <span class="hljs-keyword">return</span><br>        cur_nodes = [root]<br>        next_nodes = []<br>        <span class="hljs-built_in">print</span>([i.val <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur_nodes])<br>        <span class="hljs-keyword">while</span> cur_nodes <span class="hljs-keyword">or</span> next_nodes:<br>            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> cur_nodes:<br>                <span class="hljs-keyword">if</span> node.left:<br>                    next_nodes.append(node.left)<br>                <span class="hljs-keyword">if</span> node.right:<br>                    next_nodes.append(node.right)<br>            <span class="hljs-keyword">if</span> next_nodes:<br>                <span class="hljs-built_in">print</span>([i.val <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> next_nodes])<br>            cur_nodes = next_nodes<br>            next_nodes = []<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseBinaryTree</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    反转二叉树</span><br><span class="hljs-string">               1                         1</span><br><span class="hljs-string">            3     4                   4     3</span><br><span class="hljs-string">         5   7  8   9      =&gt;       9  8  7   5</span><br><span class="hljs-string">      10                                        10</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, node_list=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> node_list <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(node_list, <span class="hljs-built_in">list</span>):<br>            tree_node_list = []<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(node_list)):<br>                tree_node_list.append(TreeNode(node_list[i], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>))<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(node_list)):<br>                <span class="hljs-keyword">if</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span>:<br>                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>                    tree_node_list[i].right = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]<br>                <span class="hljs-keyword">elif</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> &lt; i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>:<br>                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">break</span><br>            self.root = tree_node_list[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_tree</span>(<span class="hljs-params">self, root</span>):</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">and</span> root.left <span class="hljs-keyword">and</span> root.right:<br>            root.left, root.right = root.right, root.left<br>            self.reverse_tree(root.left)<br>            self.reverse_tree(root.right)<br>        self.root = root<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindTreeKthSmallest</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    二叉搜索树中第 K 小的元素</span><br><span class="hljs-string">    二叉搜索树按照中序遍历的顺序打印出来正好就是排序好的顺序。所以对其遍历一个节点就进行计数，计数达到 k 的时候就结束。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    count = <span class="hljs-number">0</span><br>    node_val = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kth_smallest</span>(<span class="hljs-params">self, root: TreeNode, k</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        ：type root： TreeNode</span><br><span class="hljs-string">        ：type k： int</span><br><span class="hljs-string">        ：rtype： int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.dfs(root, k)<br>        <span class="hljs-keyword">return</span> self.node_val<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">self, node: TreeNode, k</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>            <span class="hljs-keyword">return</span><br>        self.dfs(node.left, k)<br>        self.count = self.count + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self.count == k:<br>            self.node_val = node.val<br>            <span class="hljs-comment"># 将该节点的左右子树置为 None,来结束递归，减少时间复杂度</span><br>            node.left = <span class="hljs-literal">None</span><br>            node.right = <span class="hljs-literal">None</span><br>        self.dfs(node.right, k)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    bt = BinTreeTravel([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>])<br>    bt.pre_order_travel(bt.root)<br>    bt.in_order_travel(bt.root)<br>    bt.post_order_travel(bt.root)<br>    bt.level_order_travel(bt.root)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;#################################################&quot;</span>)<br>    it = ReverseBinaryTree()<br>    it.reverse_tree(bt.root)<br>    bt.pre_order_travel(bt.root)<br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/tree_cases.py</p><h3 id="heap">Heap</h3><p>二叉树最直接的一个应用就是实现堆。堆就是一颗完全二叉树，最大堆的非叶子节点的值都比孩子大，最小堆的非叶子结点的值都比孩子小。 python内置了heapq模块帮助我们实现堆操作，比如用内置的heapq模块实现个堆排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Module Description: 获取大量元素中 top-n 大个元素，固定内存</span><br><span class="hljs-string">Problem:</span><br><span class="hljs-string">Solution：</span><br><span class="hljs-string">Date: 2020/2/16 </span><br><span class="hljs-string">Author: Wang P</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> heapq<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopN</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    先放入元素前n个建立小顶堆</span><br><span class="hljs-string">    迭代剩余元素：</span><br><span class="hljs-string">        如果当前元素小于堆顶元素，跳过该元素</span><br><span class="hljs-string">        否则退换堆顶元素为当前元素，并重新调整堆</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, iterable, n</span>):</span><br>        self.min_heap = []<br>        self.capacity = n<br>        self.iterable = iterable<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.min_heap) &gt;= self.capacity:<br>            min_val = self.min_heap[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> val &lt; min_val:  <span class="hljs-comment"># 可以省略</span><br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                heapq.heapreplace(self.min_heap, val)  <span class="hljs-comment"># 返回并且pop堆顶最小值，推入心得val并调整堆</span><br>        <span class="hljs-keyword">else</span>:<br>            heapq.heapreplace(self.min_heap, val)  <span class="hljs-comment"># 前n个元素直接放入堆中</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_top_n</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> self.iterable:<br>            self.push(val)<br>        <span class="hljs-keyword">return</span> self.min_heap<br><br></code></pre></td></tr></table></figure><p>https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/heap_cases.py</p><h3 id="hash-tables">Hash Tables</h3><p>基于比较的搜索（线性搜索，有序数组的二分搜索）最好的时间复杂度只能达到O(logn)，利用hash可以实现O(1)查找，python内置dict的实现方式就是hash，你会发现dict的key必须要是实现了 <code>__hash__</code> 和 <code>__eq__</code> 方法的。</p><p>Hashing: hashing is the process of mapping a search a key to a limited range of array indeices with the goal of providing direct access to the keys.</p><p>hash方法有个hash函数用来给key计算一个hash值，作为数组下标，放到该下标对应的槽中。当不同key根据hash函数计算得到的下标相同时，就出现了冲突。解决冲突有很多方式，比如让每个槽成为链表，每次冲突以后放到该槽链表的尾部，但是查询时间就会退化，不再是O(1)。还有一种探查方式，当key的槽冲突时候，就会根据一种计算方式去寻找下一个空的槽存放，探查方式有线性探查，二次方探查法等，cpython解释器使用的是二次方探查法。还有一个问题就是当python使用的槽数量大于预分配的2/3时候，会重新分配内存并拷贝以前的数据，所以有时候dict的add操作代价还是比较高的，牺牲空间但是可以始终保证O(1)的查询效率。如果有大量的数据，建议还是使用bloomfilter或者redis提供的HyperLogLog。</p><p>如果感兴趣，可以看看这篇文章，介绍c解释器如何实现的python dict对象：<a href="http://www.laurentluce.com/posts/python-dictionary-implementation/">Python dictionary implementation</a>。我们使用Python来实现一个类似的hash结构。</p><h3 id="recursion">Recursion</h3><p>递归函数：Recursion is a process for solving problems by subdividing a larger problem into smaller cases of the problem itself and then solving the smaller, more trivial parts.</p><p>Properties of Recursion: 使用stack解决的问题都能用递归解决</p><ul><li>A recursive solution must contain a base case; 递归出口，代表最小子问题(n == 0退出打印)</li><li>A recursive solution must contain a recursive case; 可以分解的子问题</li><li>A recursive solution must make progress toward the base case. 递减n使得n像递归出口靠近</li></ul><p>Tail Recursion: occurs when a function includes a single recursive call as the last statement of the function. In this case, a stack is not needed to store values to te used upon the return of the recursive call and thus a solution can be implemented using a iterative loop instead.</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADT</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Hadoop】HDFS:分布式文件系统</title>
    <link href="/2020/11/09/Hadoop-HDFS/"/>
    <url>/2020/11/09/Hadoop-HDFS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>HDFS is the primary distributed storage used by Hadoop applications. A HDFS cluster primarily consists of a NameNode that manages the file system metadata and DataNodes that store the actual data. The HDFS Architecture Guide describes HDFS in detail. This user guide primarily deals with the interaction of users and administrators with HDFS clusters. The HDFS architecture diagram depicts basic interactions among NameNode, the DataNodes, and the clients. Clients contact NameNode for file metadata or file modifications and perform actual file I/O directly with the DataNodes.<span id="more"></span></p></blockquote><h3 id="大数据全链路架构">大数据全链路架构</h3><p>数据在生产环境中的流向及处理流程</p><p><img src="/images/bdata/hadoop-hdfs/image-20190629152840146.png"></p><h3 id="大数据主流框架">大数据主流框架</h3><p>1 第一代大数据框架: 各自为战</p><p><img src="/images/bdata/hadoop-hdfs/image-20190629153348534.png"></p><p>2 第二代大数据计算框架</p><p><img src="/images/bdata/hadoop-hdfs/image-20190629153652036.png"></p><p>3 第三代大数据计算框架 Flink</p><p><img src="/images/bdata/hadoop-hdfs/image-20190629153835100.png"></p><h3 id="hadoop的架构模块">Hadoop的架构模块</h3><div data-align="center"><p><img src="/images/bdata/hadoop-hdfs/image-20200414134203318.png" alt="image-20200414134203318" style="zoom:50%;align: center"></p></div><ul><li>Hadoop由三个模块组成：<strong><em>分布式</em></strong>存储HDFS、分布式计算MapReduce、资源调度引擎Yarn</li></ul><div data-align="center"><p><img src="/images/bdata/hadoop-hdfs/image-20200414134230170.png" alt="image-20200414134230170" style="zoom: 33%;align: center"></p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> HDFS模块：<br><span class="hljs-bullet">  -</span>  namenode：主节点，主要负责集群的管理以及元数据信息管理<br><span class="hljs-bullet">  -</span>  datanode：从节点，主要负责存储用户数据<br><span class="hljs-bullet">  -</span>  secondaryNameNode：辅助namenode管理元数据信息，以及元数据信息的冷备份<br><span class="hljs-bullet">-</span> Yarn模块：<br><span class="hljs-bullet">  -</span> ResourceManager：主节点，主要负责资源分配<br><span class="hljs-bullet">  -</span> NodeManager：从节点，主要负责执行任务<br></code></pre></td></tr></table></figure><h3 id="hdfs功能模块">HDFS功能模块</h3><h4 id="hdfs的架构">hdfs的架构</h4><h5 id="文件分块存储3副本">文件分块存储&amp;3副本</h5><p><img src="/images/bdata/hadoop-hdfs/block3.gif"></p><p><img src="/images/bdata/hadoop-hdfs/image-20200414151438737.png"></p><ul><li><p>保存文件到HDFS时，会先默认按<strong><em>128M</em></strong>的大小对文件进行切分；效果如上图</p><ul><li>数据以block块的形式进统一存储管理，每个block块默认最多可以存储128M的文件。</li><li>如果有一个文件大小为1KB，也是要占用一个block块，但是实际占用磁盘空间还是1KB大小，类似于有一个水桶可以装128斤的水，但是我只装了1斤的水，那么我的水桶里面水的重量就是1斤，而不是128斤</li></ul></li><li><p>每个block块的元数据大小大概为150字节</p></li><li><p>所有的文件都是以block块的方式存放在HDFS文件系统当中，在hadoop1当中，文件的block块默认大小是64M，hadoop2当中，文件的block块大小默认是128M，block块的大小可以通过hdfs-site.xml当中的配置文件进行指定</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.block.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>块大小 以字节为单位<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-comment">&lt;!-- 只写数值就可以 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>为了保证block块的安全性，也就是数据的安全性，在hadoop2当中，文件默认保存<strong><em>三个副本</em></strong>，我们可以更改副本数以提高数据的安全性</p></li><li><p>在hdfs-site.xml当中修改以下配置属性，即可更改文件的副本数</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="抽象成数据块的好处">抽象成数据块的好处</h5><ol type="1"><li><p>一个文件有可能大于集群中任意一个磁盘 10T*3/128 = xxx块 2T，2T，2T 文件方式存—–&gt;多个block块，这些block块属于一个文件</p></li><li><p>使用块抽象而不是文件可以简化存储子系统</p><p>hdfs将所有的文件全部抽象成为block块来进行存储，不管文件大小，全部一视同仁都是以block块的形式进行存储，方便我们的分布式文件系统对文件的管理</p></li><li><p>块非常适合用于数据备份进而提供数据容错能力和可用性</p></li></ol><h5 id="hdfs架构">HDFS架构</h5><p><img src="/images/bdata/hadoop-hdfs/image-20200416160250256.png"></p><ul><li>HDFS集群包括，NameNode和DataNode以及Secondary Namenode。<ul><li>NameNode负责管理整个文件系统的元数据，以及每一个路径（文件）所对应的数据块信息。</li><li>DataNode 负责管理用户的文件数据块，每一个数据块都可以在多个datanode上存储多个副本。</li><li>Secondary NameNode用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。最主要作用是辅助namenode管理元数据信息</li></ul></li><li>NameNode与Datanode的总结概述</li></ul><p><img src="/images/bdata/hadoop-hdfs/image-20200416160339310.png"></p><h5 id="扩展">扩展</h5><p>块缓存</p><ul><li><p>通常DataNode从磁盘中读取块，但对于访问频繁的文件，其对应的块可能被显示的缓存在DataNode的内存中，以堆外块缓存的形式存在。默认情况下，一个块仅缓存在一个DataNode的内存中，当然可以针对每个文件配置DataNode的数量。作业调度器通过在缓存块的DataNode上运行任务，可以利用块缓存的优势提高读操作的性能。</p><p>例如： 连接（join）操作中使用的一个小的查询表就是块缓存的一个很好的候选。 用户或应用通过在缓存池中增加一个cache directive来告诉namenode需要缓存哪些文件及存多久。缓存池（cache pool）是一个拥有管理缓存权限和资源使用的管理性分组</p></li></ul><p>hdfs的文件权限验证</p><ul><li><p>hdfs的文件权限机制与linux系统的文件权限机制类似</p><p>r:read w:write x:execute 权限x对于文件表示忽略，对于文件夹表示是否有权限访问其内容</p><p>如果linux系统用户zhangsan使用hadoop命令创建一个文件，那么这个文件在HDFS当中的owner就是zhangsan</p><p>HDFS文件权限的目的，防止好人做错事，而不是阻止坏人做坏事。HDFS相信你告诉我你是谁，你就是谁</p></li></ul><h4 id="hdfs的shell命令操作">HDFS的shell命令操作</h4><ul><li>HDFS命令有两种风格：<ul><li>hadoop fs开头的</li><li>hdfs dfs开头的</li><li>两种命令均可使用，效果相同</li></ul></li></ul><p>查看hdfs或hadoop子命令的帮助信息，如ls子命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -help ls<br>hadoop fs -help ls #两个命令等价<br></code></pre></td></tr></table></figure><p>查看hdfs文件系统中指定目录的文件列表。对比linux命令ls</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -ls /<br>hadoop fs -ls /<br>hdfs dfs -ls -R /<br></code></pre></td></tr></table></figure><p>在hdfs文件系统中创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -touchz /edits.txt<br></code></pre></td></tr></table></figure><p>向HDFS文件中追加内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -appendToFile edit1.xml /edits.txt #将本地磁盘当前目录的edit1.xml内容追加到HDFS根目录 的edits.txt文件<br></code></pre></td></tr></table></figure><p>查看HDFS文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -cat /edits.txt<br></code></pre></td></tr></table></figure><p>从本地路径上传文件至HDFS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">用法：hdfs dfs -put /本地路径 /hdfs路径</span><br>hdfs dfs -put /linux本地磁盘文件 /hdfs路径文件<br>hdfs dfs -copyFromLocal /linux本地磁盘文件 /hdfs路径文件  #跟put作用一样<br>hdfs dfs -moveFromLocal /linux本地磁盘文件 /hdfs路径文件  #跟put作用一样，只不过，源文件被拷贝成功后，会被删除<br></code></pre></td></tr></table></figure><p>在hdfs文件系统中下载文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -get /hdfs路径 /本地路径<br>hdfs dfs -copyToLocal /hdfs路径 /本地路径  #根get作用一样<br></code></pre></td></tr></table></figure><p>在hdfs文件系统中创建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -mkdir /shell<br></code></pre></td></tr></table></figure><p>在hdfs文件系统中删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -rm /edits.txt<br></code></pre></td></tr></table></figure><p>在hdfs文件系统中修改文件名称（也可以用来移动文件到目录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -mv /xcall.sh /call.sh<br>hdfs dfs -mv /call.sh /shell<br></code></pre></td></tr></table></figure><p>在hdfs中拷贝文件到目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -cp /xrsync.sh /shell<br></code></pre></td></tr></table></figure><p>递归删除目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -rm -r /shell<br></code></pre></td></tr></table></figure><p>列出本地文件的内容（默认是hdfs文件系统）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs dfs -ls file:///home/hadoop/<br></code></pre></td></tr></table></figure><p>查找文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> linux find命令</span><br>find . -name &#x27;edit*&#x27;<br><span class="hljs-meta">#</span><span class="bash"> HDFS find命令</span><br>hadoop fs -find / -name part-r-00000 # 在HDFS根目录中，查找part-r-00000文件<br></code></pre></td></tr></table></figure><h4 id="hdfs安全模式">HDFS安全模式</h4><ul><li>安全模式是HDFS所处的一种特殊状态，在这种状态下，文件系统只接受读数据请求，而不接受删除、修改等变更请求。在NameNode主节点启动时，HDFS首先进入安全模式，DataNode在启动的时候会向namenode汇报可用的block等状态，当整个系统达到安全标准时，HDFS自动离开安全模式。如果HDFS出于安全模式下，则文件block不能进行任何的副本复制操作，因此达到最小的副本数量要求是基于datanode启动时的状态来判定的，启动时不会再做任何复制（从而达到最小副本数量要求），hdfs集群刚启动的时候，默认30S钟的时间是出于安全期的，只有过了30S之后，集群脱离了安全期，然后才可以对集群进行操作</li><li>何时推出安全模式<ul><li>namenode知道集群共多少个block（不考虑副本），假设值是total；</li><li>namenode启动后，会上报block report，namenode开始累加统计满足最小副本数（默认1）的block个数，假设是num</li><li>当num/total &gt; 99.9%时，推出安全模式</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[hadoop@node01 hadoop]$ hdfs dfsadmin -safemode  <br>Usage: hdfs dfsadmin [-safemode enter | leave | get | wait]<br></code></pre></td></tr></table></figure><h4 id="namenode和secondarynamenode">NameNode和SecondaryNameNode</h4><h5 id="namenode与secondaryname">namenode与secondaryName</h5><ul><li><p>NameNode主要负责集群当中的元数据信息管理，而且元数据信息需要经常随机访问，因为元数据信息必须高效的检索，那么如何保证namenode快速检索呢？？元数据信息保存在哪里能够快速检索呢？？如何保证元数据的持久安全呢？？</p></li><li><p>为了保证元数据信息的快速检索，那么我们就必须将元数据存放在内存当中，因为在内存当中元数据信息能够最快速的检索，那么随着元数据信息的增多（每个block块大概占用150字节的元数据信息），内存的消耗也会越来越多。</p></li><li><p>如果所有的元数据信息都存放内存，服务器断电，内存当中所有数据都消失，为了保证元数据的安全持久，元数据信息必须做可靠的持久化，在hadoop当中为了持久化存储元数据信息，将所有的元数据信息保存在了FSImage文件当中，那么FSImage随着时间推移，必然越来越膨胀，FSImage的操作变得越来越难，为了解决元数据信息的增删改，hadoop当中还引入了元数据操作日志edits文件，edits文件记录了客户端操作元数据的信息，随着时间的推移，edits信息也会越来越大，为了解决edits文件膨胀的问题，hadoop当中引入了secondaryNamenode来专门做fsimage与edits文件的合并</p></li></ul><p><img src="/images/bdata/hadoop-hdfs/checkpoint.gif"></p><h5 id="namenode工作机制">namenode工作机制</h5><p>（1）第一次启动namenode格式化后，创建fsimage和edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</p><p>（2）客户端对元数据进行增删改的请求</p><p>（3）namenode记录操作日志，更新滚动日志。</p><p>（4）namenode在内存中对数据进行增删改查</p><h5 id="secondary-namenode工作">Secondary NameNode工作</h5><p>（1）Secondary NameNode询问namenode是否需要checkpoint。直接带回namenode是否检查结果。</p><p>（2）Secondary NameNode请求执行checkpoint。</p><p>（3）namenode滚动正在写的edits日志</p><p>（4）将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode</p><p>（5）Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</p><p>（6）生成新的镜像文件fsimage.chkpoint</p><p>（7） 拷贝fsimage.chkpoint到namenode</p><p>（8）namenode将fsimage.chkpoint重新命名成fsimage</p><h5 id="fsimage与edits详解">FSImage与edits详解</h5><ul><li>所有的元数据信息都保存在了FsImage与Eidts文件当中，这两个文件就记录了所有的数据的元数据信息，元数据信息的保存目录配置在了hdfs-site.xml当中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>客户端对hdfs进行写文件时会首先被记录在edits文件中。</p><p>edits修改时元数据也会更新。</p><p>每次hdfs更新时edits先更新后客户端才会看到最新信息。</p><p>fsimage:是namenode中关于元数据的镜像，一般称为检查点。</p><p>一般开始时对namenode的操作都放在edits中，为什么不放在fsimage中呢？</p><p>因为fsimage是namenode的完整的镜像，内容很大，如果每次都加载到内存的话生成树状拓扑结构，这是非常耗内存和CPU。</p><p>fsimage内容包含了namenode管理下的所有datanode中文件及文件block及block所在的datanode的元数据信息。随着edits内容增大，就需要在一定时间点和fsimage合并。</p></li></ul><h5 id="fsimage文件当中的文件信息查看">FSimage文件当中的文件信息查看</h5><ul><li><p>官方查看文档</p><p><a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.0/hadoop-project-dist/hadoop-hdfs/HdfsImageViewer.html">http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.2/hadoop-project-dist/hadoop-hdfs/HdfsImageViewer.html</a></p></li><li><p>使用命令 hdfs oiv</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd  /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas/current<br>hdfs oiv -i fsimage_0000000000000000864 -p XML -o hello.xml<br></code></pre></td></tr></table></figure><h5 id="edits当中的文件信息查看">edits当中的文件信息查看</h5><ul><li><p>官方查看文档</p><p><a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.0/hadoop-project-dist/hadoop-hdfs/HdfsEditsViewer.html">http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.2/hadoop-project-dist/hadoop-hdfs/HdfsEditsViewer.html</a></p></li><li><p>查看命令 hdfs oev</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<br>hdfs oev -i edits_0000000000000000865-0000000000000000866 -o myedit.xml -p XML<br></code></pre></td></tr></table></figure><h5 id="secondarynamenode如何辅助管理fsimage与edits文件">secondarynameNode如何辅助管理FSImage与Edits文件</h5><h5 id="namenode元数据信息多目录配置">namenode元数据信息多目录配置</h5><ul><li><p>为了保证元数据的安全性，我们一般都是先确定好我们的磁盘挂载目录，将元数据的磁盘做RAID1</p><p>namenode的本地目录可以配置成多个，且每个目录存放内容相同，增加了可靠性。</p></li><li><p>具体配置如下：</p><p>hdfs-site.xml</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux】Docker安装与使用</title>
    <link href="/2020/06/24/docker/"/>
    <url>/2020/06/24/docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>Developers bring their ideas to life with Docker<span id="more"></span></p></blockquote><h3 id="官方文档"><strong>官方文档</strong></h3><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.docker.com%2Finstall%2Flinux%2Fdocker-ce%2Fcentos%2F">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><h3 id="安装方式"><strong>安装方式</strong></h3><ul><li>设置docker源的方式来安装(简单， 官方推荐)</li><li>下载rpm包的方式安装(适用于离线环境)</li><li>使用脚本安装(适用于测试和开发环境)</li></ul><h4 id="docker源方式安装"><strong>docker源方式安装</strong></h4><p>（1）更新yum， 安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br>yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><p><img src="/images/docker/1.png"></p><p>（2）将docker源添加到系统中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><p><img src="/images/docker/1-1.png"></p><p>（3）Docker安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>此时，可能会报错：</p><p><img src="/images/docker/2.png"></p><p>该图中原因是</p><p>containerd.io此软件包已经安装，并且是较低版本，与要安装的docker-ce所依赖containerd.io的版本不符，因此最好安装较新版本的containerd.io</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下面网址可以看到一系列版本的containerd.io</span><br>https://download.docker.com/linux/centos/7/x86_64/edge/Packages/<br><span class="hljs-meta">#</span><span class="bash">wget 命令下载指定版本的containerd.io（如果未安装wget，需要yum -y install wget）</span><br>wget https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><p><img src="/images/docker/3.png"></p><p>重新执行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install docker-ce<br></code></pre></td></tr></table></figure><p><img src="/images/docker/4.png"></p><p>（4）Docker启动设置-—启动docker和添加开启自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable docker<br>systemctl start docker<br></code></pre></td></tr></table></figure><p><img src="/images/docker/5.png"></p><p>（5）查看Docker版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -v<br></code></pre></td></tr></table></figure><h3 id="docker使用"><strong>Docker使用</strong></h3><h4 id="docker命令"><strong>docker命令</strong></h4><p>（1）命令帮助（-h已被弃用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker --help<br></code></pre></td></tr></table></figure><p>（2）常用选项说明</p><ul><li><p>-d, --detach=false， 指定容器运行于前台还是后台，默认为false</p></li><li><p>-i, --interactive=false， 打开STDIN，用于控制台交互</p></li><li><p>-t, --tty=false， 分配tty设备，该可以支持终端登录，默认为false</p></li><li><p>-u, --user=""， 指定容器的用户</p></li><li><p>-a, --attach=[]， 登录容器（必须是以docker run -d启动的容器）</p></li><li><p>-w, --workdir=""， 指定容器的工作目录</p></li><li><p>-c, --cpu-shares=0， 设置容器CPU权重，在CPU共享场景使用</p></li><li><p>-e, --env=[]， 指定环境变量，容器中可以使用该环境变量</p></li><li><p>-m, --memory=""， 指定容器的内存上限</p></li><li><p>-P, --publish-all=false， 指定容器暴露的端口</p></li><li><p>-p, --publish=[]， 指定容器暴露的端口</p></li><li><p>-h, --hostname=""， 指定容器的主机名</p></li><li><p>-v, --volume=[]， 给容器挂载存储卷，挂载到容器的某个目录</p></li><li><p>--volumes-from=[]， 给容器挂载其他容器上的卷，挂载到容器的某个目录</p></li><li><p>--cap-add=[]， 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities</p></li><li><p>--cap-drop=[]， 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities</p></li><li><p>--cidfile=""， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</p></li><li><p>--cpuset=""， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</p></li><li><p>--device=[]， 添加主机设备给容器，相当于设备直通</p></li><li><p>--dns=[]， 指定容器的dns服务器</p></li><li><p>--dns-search=[]， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</p></li><li><p>--entrypoint=""， 覆盖image的入口点</p></li><li><p>--env-file=[]， 指定环境变量文件，文件格式为每行一个环境变量</p></li><li><p>--expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口</p></li><li><p>--link=[]， 指定容器间的关联，使用其他容器的IP、env等信息</p></li><li><p>--lxc-conf=[]， 指定容器的配置文件，只有在指定--exec-driver=lxc时使用</p></li><li><p>--name=""， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</p></li><li><p>--net="bridge"， 容器网络设置:</p></li><li><ul><li>bridge 使用docker daemon指定的网桥</li><li>host //容器使用主机的网络</li><li>container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源</li><li>none 容器使用自己的网络（类似--net=bridge），但是不进行配置</li></ul></li><li><p>--privileged=false， 指定容器是否为特权容器，特权容器拥有所有的capabilities</p></li><li><p>--restart="no"， 指定容器停止后的重启策略:</p></li><li><ul><li>no：容器退出时不重启</li><li>on-failure：容器故障退出（返回值非零）时重启</li><li>always：容器退出时总是重启</li></ul></li><li><p>--rm=false， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</p></li><li><p>--sig-proxy=true， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</p></li></ul><h4 id="部署运行镜像"><strong>部署/运行镜像</strong></h4><h5 id="pull方式"><strong>pull方式</strong></h5><p>（1）下载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull 镜像名<br></code></pre></td></tr></table></figure><p>（2）[例如]下载gitlab</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull gitlab/gitlab-ce<br></code></pre></td></tr></table></figure><p>下载的镜像所在位置（其中一个）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd var/lib/docker/containers<br></code></pre></td></tr></table></figure><p><img src="/images/docker/6.png"></p><p>（3）查看镜像详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker inspect gitlab/gitlab-ce<br></code></pre></td></tr></table></figure><p>（4）运行镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --detach \<br>  --hostname 127.0.0.1 \<br>  --publish 10443:443 --publish 1080:80 --publish 1022:22 \<br>  --name gitlab \<br>  --restart always \<br>  --volume /srv/gitlab/config:/etc/gitlab \<br>  --volume /srv/gitlab/logs:/var/log/gitlab \<br>  --volume /srv/gitlab/data:/var/opt/gitlab \<br>  gitlab/gitlab-ce:latest<br></code></pre></td></tr></table></figure><p>这里，</p><p>127.0.0.1为服务器IP地址；</p><p>--publish 10443:443 --publish 1080:80 --publish 1022:22 是指将443端口对外映射（暴露）成10443，22端口对外映射（暴露）成1022，80端口对外映射（暴露）成1080。</p><p>（5）访问gitlab</p><p><img src="/images/docker/7.png"></p><h5 id="容器化方式github.com上项目"><strong>容器化方式（github.com上项目）</strong></h5><blockquote><p>待更新</p></blockquote><h4 id="常用命令"><strong>常用命令</strong></h4><p>（1）查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a<br></code></pre></td></tr></table></figure><p>这里docker ps 的命令包括：</p><ul><li>-a 列出所有容器</li><li>-l 列出最新创建容器</li><li>-n=2 列出最近创建的2个容器</li><li>-q 仅列出容器ID</li><li>-s 显示容器大小</li></ul><p><img src="/images/docker/8.png"></p><p>其中，</p><p>CONTAINER ID：容器ID</p><p>IMAGE：镜像名</p><p><strong>注意</strong>：如果容器正在运行是无法删除，需要先停止</p><p>（2）stop容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop&lt;容器ID或容器名&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/docker/9.png"></p><p>（3）删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm &lt;容器ID或容器名&gt;<br></code></pre></td></tr></table></figure><p>（4）删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi &lt;镜像ID或镜像名&gt;<br></code></pre></td></tr></table></figure><p>镜像ID可以通过docker images</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure><p><img src="/images/docker/10.png"></p><p>或docker image ls</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker image ls<br></code></pre></td></tr></table></figure><p><img src="/images/docker/11.png"></p><p>（5）进入容器Console</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入控制台</span><br>docker exec -it [container name] [/bin/sh|bash]<br><span class="hljs-meta">#</span><span class="bash"> 退出</span><br>exit<br></code></pre></td></tr></table></figure><h4 id="docker磁盘占用"><strong>docker磁盘占用</strong></h4><h5 id="查看系统磁盘占用情况">查看系统磁盘占用情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker-app ~]# df -h<br></code></pre></td></tr></table></figure><h5 id="查看docker工作目录占用磁盘情况">查看docker工作目录占用磁盘情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker-app ~]# du -hs /var/lib/docker<br></code></pre></td></tr></table></figure><h5 id="docker-system-df">docker system df</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker-app ~]# docker system df<br>TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE<br>Images              3                   3                   2.422GB             0B (0%)<br>Containers          3                   3                   1.676MB             0B (0%)<br>Local Volumes       2                   2                   251.4kB             0B (0%)<br>Build Cache         0                   0                   0B                  0B<br></code></pre></td></tr></table></figure><h5 id="自动清理磁盘">自动清理磁盘</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker-app ~]# docker system prune<br>WARNING! This will remove:<br>  - all stopped containers<br>  - all networks not used by at least one container<br>  - all dangling images<br>  - all dangling build cache<br> <br><br>该指令默认会清除所有如下资源：<br>已停止的容器（container）<br>未被任何容器所使用的卷（volume）<br>未被任何容器所关联的网络（network）<br>所有悬空镜像（image）<br>该指令默认只会清除悬空镜像，未被使用的镜像不会被删除。<br>添加 -a 或 --all 参数后，可以一并清除所有未使用的镜像和悬空镜像。<br>可以添加 -f 或 --force 参数用以忽略相关告警确认信息<br><br>注意:docker system prune -a命令清理得更加彻底，可以将没有容器使用Docker镜像都删掉。<br>这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了…所以使用之前一定要想清楚。<br></code></pre></td></tr></table></figure><h5 id="手动清理">手动清理</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查找<span class="hljs-string">&quot;/&quot;</span>目录下所有大于100M的所有文件</span><br>[root@docker-app ~]# find / -type f -size +100M -print0 | xargs -0 du -h | sort -nr<br>find: ‘/proc/7572/task/7572/fdinfo/6’: 没有那个文件或目录<br>find: ‘/proc/7572/fdinfo/5’: 没有那个文件或目录<br>find: ‘/proc/7687’: 没有那个文件或目录<br>184M/srv/gitlab/data/prometheus/data/01F4Q52GBKGYAXCQE37V2GMS70.tmp/chunks/000001<br>138M/var/lib/rpm/Packages<br>102M/usr/lib/locale/locale-archive<br>32G   /var/lib/docker/containers/&#123;container_id&#125;/&#123;container_id&#125;-json.log<br>0/proc/kcore<br></code></pre></td></tr></table></figure><p>发现<code>/var/lib/docker/containers/&#123;container_id&#125;/</code>下存在数据较大的<code>*-json.log</code>日志文件，百度发现这是docker容器运行的<code>标准输入日志</code>，遂删除之。项目中已使用<code>-v</code>的方式挂载项目输出日志文件，因此对容器运行日志没有了需求，研究后发现在构建参数的时候可以对标准输入日志<code>大小</code>与<code>数量</code>进行限制，以减少日志文件对存储空间的占用，以下配置分别为日志文件最大容量、最大日志文件数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run ...... --log-opt max-size=10m --log-opt max-file=1<br></code></pre></td></tr></table></figure><p>新建或修改/etc/docker/daemon.json，添加log-dirver和log-opts参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;<br>   &quot;log-driver&quot;:&quot;json-file&quot;,<br>   &quot;log-opts&quot;: &#123;&quot;max-size&quot;:&quot;10m&quot;, &quot;max-file&quot;:&quot;1&quot;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改映射端口"><strong>修改映射端口</strong></h4><h5 id="重新部署镜像"><strong>重新部署镜像</strong></h5><h5 id="修改部署容器配置文件"><strong>修改部署容器配置文件</strong></h5><p>（1）停止需要修改的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a docker stop &lt;容器ID或容器名&gt;<br></code></pre></td></tr></table></figure><p>（2）找到hostconfig.json文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /var/lib/docker/containers/&lt;容器ID目录,例如651dcd904c5eec9617ea006f2ac3e59a9a015de237cae891fc5ef46a17bd3033&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/docker/12.png"></p><p>（3）修改hostconfig.json文件中"PortBindings"配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim hostconfig.json<br></code></pre></td></tr></table></figure><p><img src="/images/docker/13.png"></p><p>（4）重启docker[非常重要]，否则修改会失效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><p>（5）启动修改后的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start &lt;容器ID或容器名&gt;<br></code></pre></td></tr></table></figure><p>（6）查看是否修改成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps -a<br></code></pre></td></tr></table></figure><p><img src="/images/docker/14.png"></p><h3 id="docker镜像部署容器"><strong>Docker镜像部署容器</strong></h3><h4 id="拉取远端镜像方式"><strong>拉取远端镜像方式</strong></h4><h5 id="部署portainerdocker可视化管理工具"><strong>部署portainer（docker可视化管理工具）</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull docker.io/portainer/portainer<br>docker run --detach \<br>    --hostname 127.0.0.1 \<br>    --publish 9000:9000 \<br>    --name portainer\<br>    --restart=always \<br>    --volume /var/run/docker.sock:/var/run/docker.sock \<br>    docker.io/portainer/portainer<br></code></pre></td></tr></table></figure><h5 id="部署gitlab私有代码库"><strong>部署gitlab（私有代码库）</strong></h5><blockquote><p>注意:<a href="https://www.huaweicloud.com/notice/2021/20211101163340195.html">Gitlab远程命令执行漏洞在野利用预警</a>，<a href="https://docs.gitlab.com/ee/update/index.html#upgrade-paths">版本升级存在依赖关系，不能跳跃升级</a>。</p><p>最好是拉去最新镜像文件。</p></blockquote><h6 id="拉取镜像并启动">拉取镜像并启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull gitlab/gitlab-ce:13.8.8-ce.0<br>docker run --detach \<br>  --publish 443:443 --publish 80:80 --publish 1022:22 \<br>  --name gitlab \<br>  --restart unless-stopped \<br>  --volume /srv/gitlab/config:/etc/gitlab \<br>  --volume /srv/gitlab/logs:/var/log/gitlab \<br>  --volume /srv/gitlab/data:/var/opt/gitlab \<br>  --env GITLAB_SSH_PORT=1022 \<br>  --log-opt max-size=1g \<br>  --log-opt max-file=2 \<br>  gitlab/gitlab-ce:13.8.8-ce.0<br></code></pre></td></tr></table></figure><h6 id="修改配置文件">修改配置文件</h6><blockquote><p>等待docker运行gitlab一小段时间后在操作，否则可能出现文件找不到</p></blockquote><p><strong>gitlab.yml文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /srv/gitlab/data/gitlab-rails/etc/gitlab.yml<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 找到如下配置</span><br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-comment"># GitLab settings</span></span><br>  gitlab:<br>    ## Web server settings (note: host is the FQDN, do not include http://)<br>    host: xx.xx.xx.xx   # 此处替换为自己的ip<br>    port: 80<br>    https: false<br></code></pre></td></tr></table></figure><p><strong>gitlab.rb文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /srv/gitlab/config/gitlab.rb<br></code></pre></td></tr></table></figure><p>找到<code>external_url</code>，默认是被注释的。</p><p>如果打开，填写暴露出去的<code>http://ip:port</code>，<code>IP</code>一定要和<code>gitlab.yml</code>文件配置的相同，<code>port</code>为你启动时指定的，这里使用默认<code>80</code>作为端口。</p><p>最后加上ssh协议下使用的IP和端口(这里的端口是启动时指定的，这里是<code>1022</code>)，最后保存并退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">external_url &#x27;http://xx.xx.xx.xx:80&#x27;<br>gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;xx.xx.xx.xx&#x27;<br>gitlab_rails[&#x27;gitlab_shell_ssh_host&#x27;] = &#x27;1022&#x27;<br></code></pre></td></tr></table></figure><h6 id="停止并移除之前启动的gitlab">停止并移除之前启动的gitlab</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 停止并移除之前启动的GitLab容器</span><br>docker rm -f gitlab<br></code></pre></td></tr></table></figure><h6 id="重新启动gitlab">重新启动gitlab</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --detach \<br>  --publish 443:443 --publish 80:80 --publish 1022:22 \<br>  --name gitlab \<br>  --restart unless-stopped \<br>  --volume /srv/gitlab/config:/etc/gitlab \<br>  --volume /srv/gitlab/logs:/var/log/gitlab \<br>  --volume /srv/gitlab/data:/var/opt/gitlab \<br>  --env GITLAB_SSH_PORT=1022 \<br>  --log-opt max-size=1g \<br>  --log-opt max-file=2 \<br>  gitlab/gitlab-ce:13.8.8-ce.0<br></code></pre></td></tr></table></figure><p>等待一段时间，就可以访问了，首次需要更改<code>root</code>账户的密码</p><h5 id="部署gitlab-runner"><strong>部署gitlab-runner</strong></h5><h6 id="全局配置"><strong>全局配置</strong></h6><p>所有项目都可以一起使用</p><p><img src="/images/docker/runner-all.png"></p><h6 id="runner容器创建">Runner容器创建</h6><ul><li>拉取Runner镜像并启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>--name gitlab-runner \<br>--restart always \<br>    --volume /srv/gitlab-runner/config:/etc/gitlab-runner \<br>    --volume /srv/gitlab-runner/run/docker.sock:/var/run/docker.sock \<br>    gitlab/gitlab-runner:latest<br></code></pre></td></tr></table></figure><ul><li>自定义Runner并启动<ul><li><h6 id="拉取镜像">拉取镜像</h6></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull gitlab/gitlab-runner:latest<br></code></pre></td></tr></table></figure><ul><li>制作镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建一个目录用于存放制作镜像依赖包</span><br>mkdir -p environment<br>cd environment<br><span class="hljs-meta">#</span><span class="bash"> 下载搭建环境所需包</span><br><span class="hljs-meta">#</span><span class="bash"> 创建Dockerfile文件</span><br>vim Dockerfile<br><span class="hljs-meta">#</span><span class="bash"> 例如构建go和Java开发环境</span><br>----------------------------------------------------------------------------------------<br><span class="hljs-meta">#</span><span class="bash"> 安装go</span><br>RUN mkdir -p /usr/local/go<br>WORKDIR /usr/local/go<br>COPY go1.15.14.linux-amd64.tar.gz /usr/local/go<br>RUN tar -zxvf go1.15.14.linux-amd64.tar.gz &amp;&amp; rm -fr go1.15.14.linux-amd64.tar.gz<br>RUN mkdir -p /usr/local/go/works/&#123;bin,pkg,src&#125;<br><br>ENV GOROOT=/usr/local/go/go<br>ENV GOPATH=/usr/local/go/works<br>ENV PATH $PATH:$GOROOT/bin:$GOPATH<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装java</span><br>RUN mkdir -p /usr/local/java<br>WORKDIR /usr/local/java<br>COPY jdk-8u141-linux-x64.tar.gz /usr/local/java/<br>RUN tar -zxvf jdk-8u141-linux-x64.tar.gz &amp;&amp; rm -fr jdk-8u141-linux-x64.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装maven</span><br>RUN mkdir -p /usr/local/maven<br>WORKDIR /usr/local/maven<br>COPY apache-maven-3.8.1-bin.tar.gz /usr/local/maven<br>RUN tar -zxvf apache-maven-3.8.1-bin.tar.gz &amp;&amp; rm -fr apache-maven-3.8.1-bin.tar.gz<br><br>ENV JAVA_HOME=/usr/local/java/jdk1.8.0_141<br>ENV MAVEN_HOME=/usr/local/maven/apache-maven-3.8.1<br>ENV PATH $PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin<br>----------------------------------------------------------------------------------------<br><span class="hljs-meta">#</span><span class="bash"> 返回到environment上层目录，创建docker-compose.yml文件</span><br>cd ..<br>vim docker-compose.yml<br>----------------------------------------------------------------------------------------<br>version: &#x27;3.1&#x27;<br>services:<br>   gitlab-runner:<br>     build: enviroment<br>     restart: always<br>     container_name: gitlab-runner<br>     privileged: true<br>     volumes:<br>       - /srv/gitlab-runner/config:/etc/gitlab-runner<br>       - /srv/gitlab-runner/run/docker.sock:/var/run/docker.sock<br>----------------------------------------------------------------------------------------<br><span class="hljs-meta">#</span><span class="bash"> 制作镜像</span><br>docker-compose build<br><span class="hljs-meta">#</span><span class="bash"> 查看生成的镜像</span><br>[root@docker-app gitlab-runner]# docker images<br>REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE<br>gitlab-runner_gitlab-runner   latest              bdeb4ae85b83        23 hours ago        1.41GB<br>gitlab/gitlab-runner          latest              7d4768e27ed0        22 months ago       342MB<br></code></pre></td></tr></table></figure><ul><li>创建容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure></li></ul><h6 id="runner-注册">Runner 注册</h6><ul><li><p><strong>方式一</strong></p><p><strong>进入Runner容器内</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it gitlab-runner bash<br></code></pre></td></tr></table></figure><p><strong>运行命令进行注册</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-runner register<br></code></pre></td></tr></table></figure><p><strong>输入Gitlab实地址</strong></p><p>地址是手动设置Runner区域里面的URL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br>http://xxx<br></code></pre></td></tr></table></figure><p><strong>输入token</strong></p><p>token是手动设置Runner区域里面的令牌</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Please enter the gitlab-ci token <span class="hljs-keyword">for</span> this runner</span><br>xxx<br></code></pre></td></tr></table></figure><p><strong>输入Runner的描述</strong></p><p>Runner的描述，后面可以在GitLab中的UI中进行更改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Please enter the gitlab-ci description <span class="hljs-keyword">for</span> this runner</span><br>[hostname] test-runner<br></code></pre></td></tr></table></figure><p><strong>输入与Runner关联的标签</strong></p><p>标签是为了让后期在CI脚本中指定选择某个或者多个Runner，这里设置标签为<code>test</code>。当使用这个 Runner时，在<code>.gitlab-ci.yml</code>的 tag字段里也必须明确指明这些 tags)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Please enter the gitlab-ci tags <span class="hljs-keyword">for</span> this runner (comma separated):</span><br>test<br></code></pre></td></tr></table></figure><p><strong>输入Runner的执行器</strong></p><p>由于都是基于Docker，所以这里选择执行器为Docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br>docker<br></code></pre></td></tr></table></figure><p><strong>设置执行器的版本</strong></p><p>选择Docker作为Runner的executor，还需要指定一个默认的 基础镜像 来运行job (这会在<code>.gitlab-ci.yml</code>中未指明基础镜像时作为默认基础镜像使用)，网上很多人都选的 <code>alpine:latest</code>。如果运行java项目，可以选jdk的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> Please enter the Docker image (eg. ruby:2.1):</span><br>alpine:latest<br></code></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit<br></code></pre></td></tr></table></figure></li><li><p><strong>方式二</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">gitlab-runner register   --non-interactive \<br>--url &quot;&#123;url&#125;&quot; \<br>  --registration-token &quot;&#123;token&#125;&quot; \<br>  --executor  &quot;shell&quot; \<br>  --description &quot;docker-runner&quot; \<br>  --run-untagged=&quot;true&quot; \<br>  --locked=&quot;false&quot; \<br>  --access-level=&quot;not_protected&quot;<br></code></pre></td></tr></table></figure><p>通过以上命令后，就创建成功runner啦。这时候去GitLab中创建Runner的区域刷新就能看到了。</p><p><img src="/images/docker/runner-gitlab.png"></p><h6 id="修改配置文件-1">修改配置文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /srv/gitlab-runner/config/config.toml<br></code></pre></td></tr></table></figure><p>找到<code>volumes</code>配置，修改结果为如下，分别是挂载了宿主机docker的sock文件和Maven的缓存，减少拉取Jar包的时间消耗，其中<code>"/data/.m2/:/.m2/"</code>这块为Maven的Jar包存放地址，左边为宿主机目录，右边为容器内的Jar包存储路径，这个需要根据自己使用的Maven镜像而定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">volumes = [&quot;/cache&quot;,&quot;/var/run/docker.sock:/var/run/docker.sock&quot;,&quot;/data/.m2/:/.m2/&quot;]<br></code></pre></td></tr></table></figure><p>在<code>volumes</code>配置下方增加一行配置，防止Runner重复拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pull_policy = &quot;if-not-present&quot;<br></code></pre></td></tr></table></figure><p>最后重启Runner</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart gitlab-runner<br></code></pre></td></tr></table></figure><h5 id="部署harbor">部署harbor</h5><h6 id="安装最新的docker-compose">安装最新的docker-compose</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载</span><br>wget https://github.com/docker/compose/releases/download/1.28.6/docker-compose-Linux-x86_64<br><span class="hljs-meta">#</span><span class="bash"> 移动到/usr/<span class="hljs-built_in">local</span>/bin</span><br>mv docker-compose-Linux-x86_64 /usr/local/bin<br><span class="hljs-meta">#</span><span class="bash"> 改名</span><br>mv docker-compose-Linux-x86_64 docker-compose<br></code></pre></td></tr></table></figure><p>将可执行权限用于二进制文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h6 id="下载harbor">下载Harbor</h6><p><code>github地址：</code>https://github.com/vmware/harbor/releases/</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/goharbor/harbor/releases/download/v2.2.1/harbor-online-installer-v2.2.1.tgz<br></code></pre></td></tr></table></figure><h6 id="配置harbor">配置Harbor</h6><p>进入Harbor文件夹，找到<code>harbor.yml</code>文件，并配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">cd</span> <span class="hljs-string">/srv/harbor</span><br><span class="hljs-string">cp</span> <span class="hljs-string">harbor.yml.tmpl</span> <span class="hljs-string">harbor.yml</span><br><span class="hljs-string">vim</span> <span class="hljs-string">harbor.yml</span><br><br><br><span class="hljs-attr">hostname:</span> <span class="hljs-string">xx.xx.xx.xx</span>   <span class="hljs-comment"># 需要配置</span><br><span class="hljs-comment"># http related config</span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span>      <span class="hljs-comment"># 需要配置 确保未安装registry容器</span><br><br><span class="hljs-comment"># https需要注释掉</span><br><span class="hljs-comment"># https related config</span><br><span class="hljs-comment">#https:</span><br>  <span class="hljs-comment"># https port for harbor, default is 443</span><br>  <span class="hljs-comment"># port: 443</span><br>  <span class="hljs-comment"># The path of cert and key files for nginx</span><br>  <span class="hljs-comment"># certificate: /your/certificate/path</span><br>  <span class="hljs-comment"># private_key: /your/private/key/path</span><br></code></pre></td></tr></table></figure><h6 id="启动">启动</h6><p>在harbor文件夹执行以下命令启动harbor</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">./<span class="hljs-keyword">install</span>.sh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Step 0]: checking if docker is installed ...<br>Note: docker version: 19.03.2<br><br>[Step 1]: checking docker-compose is installed ...<br>Note: docker-compose version: 1.28.6<br><br>[Step 2]: preparing environment ...<br><br>[Step 3]: preparing harbor configs ...<br>prepare base dir is set to /srv/harbor<br>Unable to find image &#x27;goharbor/prepare:v2.2.1&#x27; locally<br>v2.2.1: Pulling from goharbor/prepare<br>84a8592c0fa5: Pull complete<br>6f36fbc8ef10: Pull complete<br>c865845f3add: Pull complete<br>9500bc39cfc3: Pull complete<br>8142a5c8d11c: Pull complete<br>f855906daa39: Pull complete<br>8a495f20b30f: Pull complete<br>b5cec4560407: Pull complete<br>Digest: sha256:ceee6b634baeeaac4d8c9344cf8daf548a1561733b1fdee1349da7523f4b297c<br>Status: Downloaded newer image for goharbor/prepare:v2.2.1<br>WARNING:root:WARNING: HTTP protocol is insecure. Harbor will deprecate http protocol in the future. Please make sure to upgrade to https<br>Clearing the configuration file: /config/registry/passwd<br>Clearing the configuration file: /config/registry/root.crt<br>Clearing the configuration file: /config/registry/config.yml<br>Clearing the configuration file: /config/db/env<br>Clearing the configuration file: /config/core/app.conf<br>Clearing the configuration file: /config/core/env<br>Clearing the configuration file: /config/log/rsyslog_docker.conf<br>Clearing the configuration file: /config/log/logrotate.conf<br>Clearing the configuration file: /config/registryctl/env<br>Clearing the configuration file: /config/registryctl/config.yml<br>Clearing the configuration file: /config/jobservice/env<br>Clearing the configuration file: /config/jobservice/config.yml<br>Clearing the configuration file: /config/portal/nginx.conf<br>Clearing the configuration file: /config/nginx/nginx.conf<br>Generated configuration file: /config/portal/nginx.conf<br>Generated configuration file: /config/log/logrotate.conf<br>Generated configuration file: /config/log/rsyslog_docker.conf<br>Generated configuration file: /config/nginx/nginx.conf<br>Generated configuration file: /config/core/env<br>Generated configuration file: /config/core/app.conf<br>Generated configuration file: /config/registry/config.yml<br>Generated configuration file: /config/registryctl/env<br>Generated configuration file: /config/registryctl/config.yml<br>Generated configuration file: /config/db/env<br>Generated configuration file: /config/jobservice/env<br>Generated configuration file: /config/jobservice/config.yml<br>loaded secret from file: /data/secret/keys/secretkey<br>Generated configuration file: /compose_location/docker-compose.yml<br>Clean up the input dir<br><br>[Step 4]: starting Harbor ...<br>Creating network &quot;harbor_harbor&quot; with the default driver<br>Pulling log (goharbor/harbor-log:v2.2.1)...<br>v2.2.1: Pulling from goharbor/harbor-log<br>84a8592c0fa5: Already exists<br>17adc82a5818: Pull complete<br>4e68f5622fec: Pull complete<br>bc28588a610a: Pull complete<br>156409f9ae72: Pull complete<br>92fbb332f3b2: Pull complete<br>6848792f2c6e: Pull complete<br>9fed2e290b3d: Pull complete<br>Digest: sha256:3d54f2ab71574658976daaa633504d975f8bf2ff0c5fa17ed1e7850e1a890d49<br>Status: Downloaded newer image for goharbor/harbor-log:v2.2.1<br>Pulling registry (goharbor/registry-photon:v2.2.1)...<br>v2.2.1: Pulling from goharbor/registry-photon<br>84a8592c0fa5: Already exists<br>9dedd751603f: Pull complete<br>90fc241c2fe4: Pull complete<br>6d1b59193906: Pull complete<br>ba079abed213: Pull complete<br>2b5d0f445c00: Pull complete<br>Digest: sha256:0ac1c3543c49bd7e12b01ea8cfb120f83b9f2c94e7ce5a7d1afaabbbc92befae<br>Status: Downloaded newer image for goharbor/registry-photon:v2.2.1<br>Pulling registryctl (goharbor/harbor-registryctl:v2.2.1)...<br>v2.2.1: Pulling from goharbor/harbor-registryctl<br>84a8592c0fa5: Already exists<br>76118a0eeecb: Pull complete<br>08ee31d5cbdd: Pull complete<br>66dfbfef7fd4: Pull complete<br>060ff5731a1a: Pull complete<br>f2bb1bcbb1e6: Pull complete<br>efa79e369997: Pull complete<br>Digest: sha256:32fc649e64459ce0db75f963b35d21bea680015a141edd1b6cf5bad4f8fb6ab9<br>Status: Downloaded newer image for goharbor/harbor-registryctl:v2.2.1<br>Pulling postgresql (goharbor/harbor-db:v2.2.1)...<br>v2.2.1: Pulling from goharbor/harbor-db<br>84a8592c0fa5: Already exists<br>0c0b756e7011: Pull complete<br>c1c77186d29d: Pull complete<br>8498cf7d0523: Pull complete<br>19ddfd344879: Pull complete<br>ae355fccaf59: Pull complete<br>b61a956e6543: Pull complete<br>c3c2a780e1ed: Pull complete<br>3047d1251884: Pull complete<br>Digest: sha256:376337a33efe5beda56c8024937f3cc5a7eda51ac50ff4fffecac0e72f910fd1<br>Status: Downloaded newer image for goharbor/harbor-db:v2.2.1<br>Pulling portal (goharbor/harbor-portal:v2.2.1)...<br>v2.2.1: Pulling from goharbor/harbor-portal<br>84a8592c0fa5: Already exists<br>9a38bbe2c59d: Pull complete<br>e48760534352: Pull complete<br>34a44eb25068: Pull complete<br>Digest: sha256:030b8285f5e3e5c1f5ee4e984111164ca0cd23f1ef892f81b4a2fd79584bfd9a<br>Status: Downloaded newer image for goharbor/harbor-portal:v2.2.1<br>Pulling redis (goharbor/redis-photon:v2.2.1)...<br>v2.2.1: Pulling from goharbor/redis-photon<br>84a8592c0fa5: Already exists<br>dd7b5d791088: Pull complete<br>2198b51de4ad: Pull complete<br>01053a39e952: Pull complete<br>2c17de361574: Pull complete<br>Digest: sha256:d7b4900ab786946e9857d45133639880d88b6f06b39e2e522e0185873ec7c500<br>Status: Downloaded newer image for goharbor/redis-photon:v2.2.1<br>Pulling core (goharbor/harbor-core:v2.2.1)...<br>v2.2.1: Pulling from goharbor/harbor-core<br>84a8592c0fa5: Already exists<br>bbc8d4f784ab: Pull complete<br>04c4d7fa11cd: Pull complete<br>4bf776cbb743: Pull complete<br>09b7f721edc2: Pull complete<br>aad1766cc86c: Pull complete<br>cf858f47d9c0: Pull complete<br>bc2e4210189d: Pull complete<br>3854ce3a6a61: Pull complete<br>e397bb5803d8: Pull complete<br>Digest: sha256:d8813789bd9a9dfc9bc8c439396a752a9753275b7130aad82a7e8b6cc95f5693<br>Status: Downloaded newer image for goharbor/harbor-core:v2.2.1<br>Pulling jobservice (goharbor/harbor-jobservice:v2.2.1)...<br>v2.2.1: Pulling from goharbor/harbor-jobservice<br>84a8592c0fa5: Already exists<br>6756e6fecf2f: Pull complete<br>114e327150fd: Pull complete<br>27542d866a20: Pull complete<br>9b70c73fbc90: Pull complete<br>f60c551036eb: Pull complete<br>Digest: sha256:8b617874fe5ac569172a8cb271763dd24333007bf5e040e6a3ae355ae23f7109<br>Status: Downloaded newer image for goharbor/harbor-jobservice:v2.2.1<br>Pulling proxy (goharbor/nginx-photon:v2.2.1)...<br>v2.2.1: Pulling from goharbor/nginx-photon<br>84a8592c0fa5: Already exists<br>5df0718a13f5: Pull complete<br>Digest: sha256:947b4eaabd4fd86b270bbad1e95a0e2051203cf46248ec4d7a30300e0ec57c95<br>Status: Downloaded newer image for goharbor/nginx-photon:v2.2.1<br>Creating harbor-log ... done<br>Creating registry      ... done<br>Creating redis         ... done<br>Creating harbor-db     ... done<br>Creating registryctl   ... done<br>Creating harbor-portal ... done<br>Creating harbor-core   ... done<br>Creating harbor-jobservice ... done<br>Creating nginx             ... done<br>✔ ----Harbor has been installed and started successfully.----<br></code></pre></td></tr></table></figure><p>启动完毕后浏览器访问<code>http://你设置的IP或者域名:你设置的端口</code>，账号默认为：admin，密码：Harbor12345，登录后就进入了主页</p><p><img src="/images/docker/habor-container.png"></p><p><img src="/images/docker/habor.png"></p><h6 id="push镜像"><strong>push镜像</strong></h6><p><strong>修改下配置</strong></p><p>由于docker的版本从13开始，register只能用https，这里配置的都是http的，所以要先在<code>/etc/docker/</code>目录创建<code>daemon.json</code>文件并加入如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123; &quot;insecure-registries&quot;:[&quot;xxx:5000&quot;] &#125;<br></code></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><p>重启harbor相关的容器，因为重启docker后这些都关闭了，所以我们通过<code>docker ps -a</code>找到所有与harbor相关的镜像，通过<code>docker restart xx xx xx</code>对应容器名重启即可</p><p><strong>创建项目</strong></p><p><img src="/images/docker/harbor-projects.png"></p><p><strong>打包镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker tag SOURCE_IMAGE[:TAG] [IP]:5000/test/REPOSITORY[:TAG]<br></code></pre></td></tr></table></figure><p><strong>登录habor</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@docker-app harbor]# docker login [IP]:5000<br>Username: username<br>Password: *******<br>WARNING! Your password will be stored unencrypted in /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br></code></pre></td></tr></table></figure><p><strong>推送</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker push [IP]:5000/test/REPOSITORY[:TAG]<br></code></pre></td></tr></table></figure><h6 id="报错云集"><strong>报错云集</strong></h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">遇到报错：prepare base dir is set to /usr/local/harbor<br>docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;process_linux.go:449: container init caused \&quot;write /proc/self/attr/keycreate: permission denied\&quot;&quot;: unknown. <br><span class="hljs-meta">#</span><span class="bash"> 解决办法</span><br>把/etc/selinux下的config文件中的<br>SELINUX=enforcing  改为 SELINUX=disabled<br> <br>遇到报错：ERROR:root:Please specify hostname， 那原因是启动harbor时没有修改harbor.yml里的内容。 <br><span class="hljs-meta">#</span><span class="bash"> 解决办法</span><br>把配置文件中默认的hostname: reg.mydomain.com， 改为本地的ip。<br> 比如： hostname：xx.xx.xx.xx<br> <br>遇到报错：ERROR:root:Error: The protocol is https but attribute ssl_cert is not set。 原因是harbor.yml中默认是配置https的端口及证书路径的。<br><span class="hljs-meta">#</span><span class="bash"> 解决办法</span><br>把这些配置都注释掉。<br><span class="hljs-meta">#</span><span class="bash"> https related config</span><br><span class="hljs-meta">#</span><span class="bash"> https:</span><br><span class="hljs-meta">  #</span><span class="bash"> https port <span class="hljs-keyword">for</span> harbor, default is 443</span><br><span class="hljs-meta">  #</span><span class="bash"> port: 443</span><br><span class="hljs-meta">  #</span><span class="bash"> The path of cert and key files <span class="hljs-keyword">for</span> nginx</span><br><span class="hljs-meta">  #</span><span class="bash"> certificate: /your/certificate/path</span><br><span class="hljs-meta">  #</span><span class="bash"> private_key: /your/private/key/path</span><br> <br>上述问题都解决，并且install.sh正确运行后， 信息如下：<br>✔ ----Harbor has been installed and started successfully.----<br></code></pre></td></tr></table></figure><h5 id="部署registry服务器">部署Registry服务器</h5><blockquote><p>如果需要安装habor，最好将Registry容器停掉或者 容器名不能为registry.</p></blockquote><p>Docker Registry服务器整合很多服务，配置的参数非常多，包括：存储，Redis，Auth，日志，中间件，监控，HTTP，通知，健康检查，代理，兼容性。</p><p>部署服务器非常简单，只需要一条命令，映射5000端口到容器，restart机制为总是，并分配当前目录下的data目录作为容器卷，存储镜像数据。可以配置HTTPS方式的访问，参考Docker官方文档，如果是在局域网内访问这个方式即可满足需求。</p><h6 id="部署">部署</h6><figure class="highlight sh"><figcaption><span>shell ell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d \<br>    -p 5000:5000 \<br>    --restart always \<br>    --name registry \<br>    -e  REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/srv/registry \<br>    -e REGISTRY_STORAGE_DELETE_ENABLED=<span class="hljs-literal">true</span> \<br>    -v /srv/registry/data:/var/lib/registry \<br>    registry:latest<br></code></pre></td></tr></table></figure><h6 id="测试">测试</h6><p>从Docker官方的hub拉取ubuntu镜像，这是简写的方式，完整的命令是这样的<code>docker pull docker.io/library/ubuntu</code>，并命名为<code>localhost:5000/ubuntu</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull ubuntu &amp;&amp; docker tag ubuntu localhost:5000/ubuntu<br></code></pre></td></tr></table></figure><p>推送镜像到本地的Registry服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker push localhost:5000/ubuntu<br></code></pre></td></tr></table></figure><p>删除宿主机的localhost:5000/ubuntu并拉取Registry服务器的ubuntu镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi -f localhost:5000/ubuntu<br>docker pull localhost:5000/ubuntu<br></code></pre></td></tr></table></figure><h6 id="配置">配置</h6><p>配置Registry服务器的方式有两种，一种是在运行容器指定环境变量重写配置文件，另一种是直接映射yaml配置文件。</p><p>使用配置文件的方式，迁移方便。</p><p><strong>环境变量重写配置选项</strong></p><p>比如重写配置文件存储选项，文件配置如下所示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">storage:</span><br>  <span class="hljs-attr">filesystem:</span><br>    <span class="hljs-attr">rootdirectory:</span> <span class="hljs-string">/var/lib/registry</span><br></code></pre></td></tr></table></figure><p>那么运行Registery容器时就需要指定环境变量<code>REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/somewhere</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 5000:5000 --restart=always --name registry \<br>  -v /srv/registry/data:/var/lib/registry \<br>  -e  REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/srv/registry \<br>  registry:2<br></code></pre></td></tr></table></figure><p><strong>覆盖配置文件</strong></p><p>可以使用挂载卷的方式覆盖配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 5000:5000 --restart=always --name registry \<br>             -v /srv/registry:/etc/docker/registry \<br>             registry:latest<br></code></pre></td></tr></table></figure><p>挂载当前目录下config.yml覆盖容器的/etc/docker/registry/config.yml文件，下面是整个配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><br><span class="hljs-attr">log:</span> <span class="hljs-comment">## 日志选项</span><br>  <span class="hljs-attr">level:</span> <span class="hljs-string">debug</span><br>  <span class="hljs-attr">formatter:</span> <span class="hljs-string">text</span><br>  <span class="hljs-attr">fields:</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">registry</span><br>    <span class="hljs-attr">environment:</span> <span class="hljs-string">staging</span><br>  <span class="hljs-attr">hooks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">mail</span><br>      <span class="hljs-attr">disabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">levels:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">panic</span><br>      <span class="hljs-attr">options:</span><br>        <span class="hljs-attr">smtp:</span> <span class="hljs-comment">## 邮件通知配置</span><br>          <span class="hljs-attr">addr:</span> <span class="hljs-string">mail.example.com:25</span><br>          <span class="hljs-attr">username:</span> <span class="hljs-string">mailuser</span><br>          <span class="hljs-attr">password:</span> <span class="hljs-string">password</span><br>          <span class="hljs-attr">insecure:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">from:</span> <span class="hljs-string">sender@example.com</span><br>        <span class="hljs-attr">to:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">errors@example.com</span><br><span class="hljs-attr">loglevel:</span> <span class="hljs-string">debug</span> <span class="hljs-comment"># 即将弃用: 使用Log替代</span><br><span class="hljs-attr">storage:</span> <span class="hljs-comment">##存储选项，</span><br>  <span class="hljs-attr">filesystem:</span> <span class="hljs-comment">## 本地文件系统，也可以是云分布式存储，比如微软Azure，亚马逊S3，swift，OSS</span><br>    <span class="hljs-attr">rootdirectory:</span> <span class="hljs-string">/var/lib/registry</span><br>    <span class="hljs-attr">maxthreads:</span> <span class="hljs-number">100</span> <span class="hljs-comment">##最大线程数</span><br><span class="hljs-attr">auth:</span> <span class="hljs-comment">#用户验证</span><br>  <span class="hljs-attr">silly:</span><br>    <span class="hljs-attr">realm:</span> <span class="hljs-string">silly-realm</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">silly-service</span><br>  <span class="hljs-attr">token:</span><br>    <span class="hljs-attr">realm:</span> <span class="hljs-string">token-realm</span><br>    <span class="hljs-attr">service:</span> <span class="hljs-string">token-service</span><br>    <span class="hljs-attr">issuer:</span> <span class="hljs-string">registry-token-issuer</span><br>    <span class="hljs-attr">rootcertbundle:</span> <span class="hljs-string">/root/certs/bundle</span><br>  <span class="hljs-attr">htpasswd:</span><br>    <span class="hljs-attr">realm:</span> <span class="hljs-string">basic-realm</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/path/to/htpasswd</span><br><span class="hljs-attr">middleware:</span> <span class="hljs-comment">##中间件类型有registry，repository，storage三种，每种中间件可以像下面的方式使用</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ARegistryMiddleware</span><br>      <span class="hljs-attr">options:</span><br>        <span class="hljs-attr">foo:</span> <span class="hljs-string">bar</span><br>  <span class="hljs-attr">storage:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ARegistryMiddleware</span><br><span class="hljs-attr">reporting:</span> <span class="hljs-comment">##监控，可以使用一些在线的监控工具包括bugsnag，newrelic</span><br>  <span class="hljs-attr">newrelic:</span><br>    <span class="hljs-attr">licensekey:</span> <span class="hljs-string">newreliclicensekey</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">newrelicname</span><br>    <span class="hljs-attr">verbose:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http:</span> <span class="hljs-comment">## 由Nginx提供的HTTP服务，可以把它理解成配置Nginx</span><br>  <span class="hljs-attr">addr:</span> <span class="hljs-string">localhost:5000</span><br>  <span class="hljs-attr">prefix:</span> <span class="hljs-string">/my/nested/registry/</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">https://myregistryaddress.org:5000</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">asecretforlocaldevelopment</span><br>  <span class="hljs-attr">relativeurls:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tls:</span><br>    <span class="hljs-attr">certificate:</span> <span class="hljs-string">/path/to/x509/public</span><br>    <span class="hljs-attr">key:</span> <span class="hljs-string">/path/to/x509/private</span><br>    <span class="hljs-attr">clientcas:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/path/to/ca.pem</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/path/to/another/ca.pem</span><br>    <span class="hljs-attr">letsencrypt:</span><br>      <span class="hljs-attr">cachefile:</span> <span class="hljs-string">/path/to/cache-file</span><br>      <span class="hljs-attr">email:</span> <span class="hljs-string">emailused@letsencrypt.com</span><br>  <span class="hljs-attr">debug:</span><br>    <span class="hljs-attr">addr:</span> <span class="hljs-string">localhost:5001</span><br>  <span class="hljs-attr">headers:</span><br>    <span class="hljs-attr">X-Content-Type-Options:</span> [<span class="hljs-string">nosniff</span>]<br><span class="hljs-attr">notifications:</span> <span class="hljs-comment">## 事件通知，当Registry服务器发生拉取，推送等时发送事件到endpoints</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">alistener</span><br>      <span class="hljs-attr">disabled:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">https://my.listener.com/event</span><br>      <span class="hljs-attr">headers:</span> <span class="hljs-string">&lt;http.Header&gt;</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-number">500</span><br>      <span class="hljs-attr">threshold:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">backoff:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">redis:</span> <span class="hljs-comment">##这个用过的都懂</span><br>  <span class="hljs-attr">addr:</span> <span class="hljs-string">localhost:6379</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">asecret</span><br>  <span class="hljs-attr">db:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">dialtimeout:</span> <span class="hljs-string">10ms</span><br>  <span class="hljs-attr">readtimeout:</span> <span class="hljs-string">10ms</span><br>  <span class="hljs-attr">writetimeout:</span> <span class="hljs-string">10ms</span><br>  <span class="hljs-attr">pool:</span><br>    <span class="hljs-attr">maxidle:</span> <span class="hljs-number">16</span><br>    <span class="hljs-attr">maxactive:</span> <span class="hljs-number">64</span><br>    <span class="hljs-attr">idletimeout:</span> <span class="hljs-string">300s</span><br><span class="hljs-attr">health:</span> <span class="hljs-comment">## 健康检查包括存储驱动，file，http服务，tcp的可用性检查</span><br>  <span class="hljs-attr">storagedriver:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span><br>    <span class="hljs-attr">threshold:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">/path/to/checked/file</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">http:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span> <span class="hljs-string">http://server.to.check/must/return/200</span><br>      <span class="hljs-attr">headers:</span><br>        <span class="hljs-attr">Authorization:</span> [<span class="hljs-string">Basic</span> <span class="hljs-string">QWxhZGRpbjpvcGVuIHNlc2FtZQ==</span>]<br>      <span class="hljs-attr">statuscode:</span> <span class="hljs-number">200</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">3s</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">threshold:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">tcp:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">addr:</span> <span class="hljs-string">redis-server.domain.com:6379</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">3s</span><br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">threshold:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">proxy:</span> <span class="hljs-comment">## 可以镜像Docker Hub的仓库</span><br>  <span class="hljs-attr">remoteurl:</span> <span class="hljs-string">https://registry-1.docker.io</span><br>  <span class="hljs-attr">username:</span> [<span class="hljs-string">username</span>]<br>  <span class="hljs-attr">password:</span> [<span class="hljs-string">password</span>]<br><span class="hljs-attr">compatibility:</span> <br>  <span class="hljs-attr">schema1:</span><br>    <span class="hljs-attr">signingkeyfile:</span> <span class="hljs-string">/etc/registry/key.json</span><br></code></pre></td></tr></table></figure><h5 id="gitlab-ci.yml">Gitlab-ci.yml</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 定义全局变量</span><br><span class="hljs-attr">variables:</span><br>  <span class="hljs-attr">PROJECT:</span> <span class="hljs-string">&quot;offer&quot;</span><br>  <span class="hljs-comment"># 这里定义了Maven的jar包存放地址，与我们构建maven私服的时候设置的存放地址一致</span><br>  <span class="hljs-attr">MAVEN_REPO:</span> <span class="hljs-string">&quot;/.m2&quot;</span><br>  <span class="hljs-attr">CI_REGISTRY_USER:</span> <span class="hljs-string">&quot;xxx&quot;</span><br>  <span class="hljs-attr">CI_REGISTRY_PASSWORD:</span> <span class="hljs-string">&quot;xxx&quot;</span><br>  <span class="hljs-comment"># 仓库地址</span><br>  <span class="hljs-attr">CI_REGISTRY:</span> <span class="hljs-string">&quot;xx.xx.xx.xx:5000/&quot;</span><br>  <span class="hljs-comment"># 镜像全称</span><br>  <span class="hljs-attr">CI_REGISTRY_IMAGE:</span> <span class="hljs-string">&quot;mlja/offer&quot;</span><br>  <span class="hljs-attr">CI_COMMIT_REF_SLUG:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">CI_COMMIT_SHA:</span> <span class="hljs-string">&quot;&quot;</span><br>  <br><br><span class="hljs-comment"># 全局脚本，会运行在各个阶段的script前，如果某个阶段里面存在before_script，那么以那个阶段里的为主</span><br><span class="hljs-attr">before_script:</span><br>  <span class="hljs-comment"># 这里定义了打包成功后的Docker镜像名称，每一次提交代码后构建成功的镜像名称都是唯一的</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">export</span> <span class="hljs-string">IMAGE_FULL_NAME=$&#123;CI_REGISTRY_IMAGE&#125;:$&#123;CI_COMMIT_REF_SLUG&#125;-$&#123;CI_COMMIT_SHA&#125;</span><br><br><span class="hljs-comment"># 定义CI执行的阶段，这里可以自己根据情况定义多少个阶段</span><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">compile</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">run</span><br><br><span class="hljs-comment"># 编译:</span><br><span class="hljs-attr">compile:</span><br>  <span class="hljs-comment"># 当前阶段的执行镜像，这是自己构建的镜像</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">xx.xx.xx.xx:5000/root/maven:latest</span><br>  <span class="hljs-comment"># 属于上面定义的哪一个阶段</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">compile</span><br>  <span class="hljs-comment"># 是否允许失败，允许的话如果当前阶段运行失败还会继续执行下一个阶段</span><br>  <span class="hljs-attr">allow_failure:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 只在哪个分支生效</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-comment"># 这里就是要选择哪个runner来执行了，填写创建runner时候指定的标签</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>  <span class="hljs-comment"># 运行脚本</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">-Dmaven.repo.local=$MAVEN_REPO</span> <span class="hljs-string">clean</span> <span class="hljs-string">package</span> <span class="hljs-string">-Dmaven.test.skip=true</span><br>  <span class="hljs-comment"># 因为是Maven编译，所以会有Jar包产物，这里定义产物的过期时间</span><br>  <span class="hljs-attr">artifacts:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">$PROJECT</span><br>    <span class="hljs-attr">expire_in:</span> <span class="hljs-number">7</span> <span class="hljs-string">days</span><br>    <span class="hljs-attr">paths:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">target/*.jar</span><br><br><span class="hljs-comment"># 构建镜像:</span><br><span class="hljs-attr">build:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">docker:stable</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">build</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-comment"># 这里的变量会自动获取你当前推送代码的gitlab用户和密码以及仓库地址</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">login</span> <span class="hljs-string">--username</span> <span class="hljs-string">$CI_REGISTRY_USER</span> <span class="hljs-string">--password</span> <span class="hljs-string">$CI_REGISTRY_PASSWORD</span> <span class="hljs-string">$CI_REGISTRY</span><br>    <span class="hljs-comment"># 这里的变量就是我们全局配置定义的了</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">build</span> <span class="hljs-string">-t</span> <span class="hljs-string">$IMAGE_FULL_NAME</span> <span class="hljs-string">.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">push</span> <span class="hljs-string">$IMAGE_FULL_NAME</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">target</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">rmi</span> <span class="hljs-string">$IMAGE_FULL_NAME</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br><span class="hljs-comment"># 运行:</span><br><span class="hljs-attr">run:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">docker:stable</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">run</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">-d</span> <span class="hljs-string">--name</span> <span class="hljs-string">$PROJECT</span> <span class="hljs-string">-p</span> <span class="hljs-number">7777</span><span class="hljs-string">:7777</span> <span class="hljs-string">$IMAGE_FULL_NAME</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">test</span><br>    <br></code></pre></td></tr></table></figure><h5 id="部署jenkins"><strong>部署jenkins</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /srv/jenkins<br>chown -R 1000:1000 /srv/jenkins/<br>docker pull jenkins/jenkins:alpine<br>docker inspect jenkins/jenkins:alpine<br>docker run --detach \<br>    --publish 8080:8080 --publish 50000:50000 \<br>    --restart unless-stopped \<br>    --name jenkins \<br>    --volume /srv/jenkins:/var/jenkins_home \<br>    jenkins/jenkins:alpine<br></code></pre></td></tr></table></figure><h5 id="部署rabbitmq"><strong>部署RabbitMQ</strong></h5><p>获取查询的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search rabbitmq:management<br></code></pre></td></tr></table></figure><p><img src="/images/docker/15.png"></p><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull rabbitmq:management<br></code></pre></td></tr></table></figure><p><img src="/images/docker/16.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 运行镜像</span>    <br>docker run -d \<br>    -p 5672:5672 -p 15672:15672 \<br>    --restart=always \<br>    --name rabbitmq \<br>    -v `pwd`/data:/var/lib/rabbitmq \<br>    -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=2018251 \<br>     rabbitmq:management<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run \<br>-p 6379:6379 \<br>--name myredis \<br>-v /weitrue/install/redis/redis.conf:/etc/redis/redis.conf  \<br>-v /weitrue/install/redis/data:/data \<br>-d redis redis-server /etc/redis/redis.conf \<br>--appendonly yes<br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
      <tag>Center OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mac】Mac使用</title>
    <link href="/2020/06/22/mac/"/>
    <url>/2020/06/22/mac/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>基于XNU<a href="https://baike.baidu.com/item/混合内核/4239577">混合内核</a>的首个在商用领域成功的<a href="https://baike.baidu.com/item/图形用户界面/3352324">图形用户界面</a>操作系统，并且很少受到电脑病毒的袭击。<span id="more"></span></p></blockquote><h3 id="homebrew">Homebrew</h3><h4 id="官网">官网:</h4><p>https://docs.brew.sh/Installation.html</p><h4 id="gihub源">gihub源</h4><p>https://github.com/Homebrew/install</p><h4 id="homebrew安装">homebrew安装</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/</span>Homebrew<span class="hljs-regexp">/install/m</span>aster/install)<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>可能会出现报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">curl: (<span class="hljs-number">7</span>) Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> raw.githubusercontent.com port <span class="hljs-number">443</span>: <span class="hljs-keyword">Connection</span> refused <br></code></pre></td></tr></table></figure><p>根据提示可以知道被raw.githubusercontent.com拒绝访问，打开浏览器访问https://raw.githubusercontent.com也是失败的，所以此时是电脑与https://raw.githubusercontent.com的连接问题：可以考虑ruby的更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">查看当前更新源<br>gem sources -l                // 默认情况下会显示https://rubygems.org/ 该ruby源在墙内，很多内容无法访问到<br>gem source -a https://gems.ruby-china.com    // 更新更新源为https://gems.ruby-china.com<br>gem sources --remove https://rubygems.org/   // 删除原更新源<br>gem sources -l      　　　　　　               // 检测是否成功<br></code></pre></td></tr></table></figure><p>继续安装</p><figure><img src="/images/mac/clipboard.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p><code>brew -v</code>检查是否已安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Homebrew 2.4.0 <br><br>Homebrew/homebrew-core (git revision c948b; last commit 2020-06-13)<br></code></pre></td></tr></table></figure><h4 id="基本用法">基本用法</h4><p>基于brew安装的所有软件及其依赖均会安装到目录<code>/usr/local/Cellar</code></p><h5 id="brew-帮助信息">Brew 帮助信息</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ brew <span class="hljs-keyword">help</span><br>Example usage:<br>  brew search [TEXT|<span class="hljs-string">/REGEX/</span>]<br>  brew info [FORMULA.<span class="hljs-string">..</span>]<br>  brew install FORMULA.<span class="hljs-string">..</span><br>  brew update<br>  brew upgrade [FORMULA.<span class="hljs-string">..</span>]<br>  brew uninstall FORMULA.<span class="hljs-string">..</span><br>  brew list [FORMULA.<span class="hljs-string">..</span>]<br><br>Troubleshooting:<br>  brew config<br>  brew doctor<br>  brew install <span class="hljs-params">--verbose</span> <span class="hljs-params">--debug</span> FORMULA<br><br>Contributing:<br>  brew create [URL [<span class="hljs-params">--no-fetch</span>]]<br>  brew edit [FORMULA.<span class="hljs-string">..</span>]<br><br>Further <span class="hljs-keyword">help</span>:<br>  brew commands<br>  brew <span class="hljs-keyword">help</span> [COMMAND]<br>  man brew<br>  https:<span class="hljs-string">//docs.brew.sh</span><br></code></pre></td></tr></table></figure><h5 id="子命令帮助信息">子命令帮助信息</h5><p><code>brew help [COMMAND]或brew [COMMAND] -h</code> 用于查看具体某个子命令的帮助信息。</p><p>例如，查看<code>install</code>命令的帮助详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew install -h</span><br>Usage: brew install [options] formula<br><br>Install formula. Additional options specific to formula may be appended to<br>the command.<br><br>Unless HOMEBREW_NO_INSTALL_CLEANUP is set, brew cleanup will then be run for<br>the installed formulae or, every 30 days, for all formulae.<br><br>    -d, --debug                      If brewing fails, open an interactive<br>                                     debugging session with access to IRB or a<br>                                     shell inside the temporary build directory.<br>        --env                        If std is passed, use the standard build<br>                                     environment instead of superenv. If super<br>                                     is passed, use superenv even if the formula<br>                                     specifies the standard build environment.<br>        --ignore-dependencies        An unsupported Homebrew development flag to<br>                                     skip installing any dependencies of any<br>                                     kind. If the dependencies are not already<br>                                     present, the formula will have issues. If<br>                                     you&#x27;re not developing Homebrew, consider<br>                                     adjusting your PATH rather than using this<br>                                     flag.<br>        --only-dependencies          Install the dependencies with specified<br>                                     options but do not install the formula<br>                                     itself.<br>        --cc                         Attempt to compile using the specified<br>                                     compiler, which should be the name of the<br>                                     compiler&#x27;s executable, e.g. gcc-7 for GCC<br>                                     7. In order to use LLVM&#x27;s clang, specify<br>                                     llvm_clang. To use the Apple-provided<br>                                     clang, specify clang. This option will<br>                                     only accept compilers that are provided by<br>                                     Homebrew or bundled with macOS. Please do<br>                                     not file issues if you encounter errors<br>                                     while using this option.<br>    -s, --build-from-source          Compile formula from source even if a<br>                                     bottle is provided. Dependencies will still<br>                                     be installed from bottles if they are<br>                                     available.<br>        --force-bottle               Install from a bottle if it exists for the<br>                                     current or newest version of macOS, even if<br>                                     it would not normally be used for<br>                                     installation.<br>        --include-test               Install testing dependencies required to<br>                                     run brew test formula.<br>        --devel                      If formula defines it, install the<br>                                     development version.<br>        --HEAD                       If formula defines it, install the HEAD<br>                                     version, aka. master, trunk, unstable.<br>        --fetch-HEAD                 Fetch the upstream repository to detect if<br>                                     the HEAD installation of the formula is<br>                                     outdated. Otherwise, the repository&#x27;s HEAD<br>                                     will only be checked for updates when a new<br>                                     stable or development version has been<br>                                     released.<br>        --keep-tmp                   Retain the temporary files created during<br>                                     installation.<br>        --build-bottle               Prepare the formula for eventual bottling<br>                                     during installation, skipping any<br>                                     post-install steps.<br>        --bottle-arch                Optimise bottles for the specified<br>                                     architecture rather than the oldest<br>                                     architecture supported by the version of<br>                                     macOS the bottles are built on.<br>    -f, --force                      Install without checking for previously<br>                                     installed keg-only or non-migrated<br>                                     versions.<br>    -v, --verbose                    Print the verification and postinstall<br>                                     steps.<br>        --display-times              Print install times for each formula at the<br>                                     end of the run.<br>    -i, --interactive                Download and patch formula, then open a<br>                                     shell. This allows the user to run<br>                                     ./configure --help and otherwise<br>                                     determine how to turn the software package<br>                                     into a Homebrew package.<br>    -g, --git                        Create a Git repository, useful for<br>                                     creating patches to the software.<br>    -h, --help                       Show this message.<br></code></pre></td></tr></table></figure><h5 id="搜索软件">搜索软件</h5><p><code>brew search [TEXT|/REGEX/]</code> 用于搜索软件，支持使用正则表达式进行复杂的搜索。</p><p>例如，查询静态博客生成工具hugo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew search hugo</span><br>==&gt; Formulae<br>hugo<br></code></pre></td></tr></table></figure><h5 id="查看软件信息">查看软件信息</h5><p><code>brew info [FORMULA...]</code> 用于查询软件的详细信息。</p><p>例如，查看软件hugo的详细信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew search hugo</span><br>==&gt; Formulae<br>hugo<br><span class="hljs-meta">$</span><span class="bash"> brew info hugo</span><br>hugo: stable 0.72.0 (bottled), HEAD<br>Configurable static site generator<br>https://gohugo.io/<br>Not installed<br>From: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git/Formula/hugo.rb<br>==&gt; Dependencies<br>Build: go ✘<br>==&gt; Options<br>--HEAD<br>Install HEAD version<br>==&gt; Analytics<br>install: 26,782 (30 days), 84,656 (90 days), 287,304 (365 days)<br>install-on-request: 26,266 (30 days), 82,887 (90 days), 279,634 (365 days)<br>build-error: 0 (30 days)<br></code></pre></td></tr></table></figure><p>以上查询所得信息，包含了软件的最新可用版本，本机是否已安装，本机已安装的版本，安装的路径、大小、时间、Tap 源，所依赖的包，以及安装的可选项等详细信息。而这些信息可以帮助我们很方便快捷的了解如何对该软件进行相应的操作。</p><h5 id="安装软件包">安装软件包</h5><p><code>brew install FORMULA...</code>用于安装一个或多个软件。</p><p>例如，安装软件hugo：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>hugo<br></code></pre></td></tr></table></figure><p>安装软件命令执行之前，brew 一般会先检查更新 Homebrew 自身及 Tap 源。</p><h5 id="更新软件包">更新软件包</h5><p><code>brew upgrade [FORMULA...]</code> 用于更新一个或多个软件，不指定软件名则更新所有软件。</p><h5 id="卸载软件包">卸载软件包</h5><p><code>brew uninstall FORMULA...</code> 用于卸载指定的一个或多个软件</p><p><code>brew uninstall --force FORMULA...</code> 彻底卸载指定软件，包括旧版本</p><h5 id="已安装的软件列表">已安装的软件列表</h5><p><code>brew list</code> 用于查询本机已安装的软件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew list</span><br>aprgettextlz4pcre2pythonsqliteutf8proc<br>apr-utilgomysql-clientperlpython@2subversionxz<br>gdbmlibzipopenssl@1.1pkg-configreadlinetldr<br></code></pre></td></tr></table></figure><h5 id="服务管理">服务管理</h5><p><code>brew services</code> 用于方便的管理 brew 安装的软件软件，类似于 Linux 下的 service 命令。</p><h5 id="检查可更新的软件列表">检查可更新的软件列表</h5><p><code>brew outdated</code> 可查询有更新版本的软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew outdated</span> <br>gettext (0.20.1) &lt; 0.20.2_1<br>go (1.13.8) &lt; 1.14.3<br>libzip (1.6.1) &lt; 1.7.1<br>mysql-client (8.0.18) &lt; 8.0.19<br>openssl@1.1 (1.1.1d) &lt; 1.1.1g<br>pcre2 (10.34) &lt; 10.35<br>perl (5.30.1) &lt; 5.30.3<br>pkg-config (0.29.2) &lt; 0.29.2_3<br>python (3.7.6_1) &lt; 3.7.7<br>readline (8.0.1) &lt; 8.0.4<br>sqlite (3.30.1) &lt; 3.32.1<br>subversion (1.13.0_1) &lt; 1.14.0_1<br>utf8proc (2.4.0) &lt; 2.5.0<br>xz (5.2.4) &lt; 5.2.5<br></code></pre></td></tr></table></figure><h5 id="清理软件">清理软件</h5><p><code>brew cleanup -n</code> 列出需要清理的内容</p><p><code>brew cleanup</code> 清理所有的过时软件</p><p><code>brew cleanup [FORMULA]</code> 清理指定软件的过时包</p><h5 id="查看配置信息">查看配置信息</h5><p><code>brew config</code> 用于查看 brew 所在环境及相关的配置情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew config</span><br>HOMEBREW_VERSION: 2.4.0<br>ORIGIN: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git<br>HEAD: 28ed0801ed5807e176e62a3ba66e47ec867ec17d<br>Last commit: 3 days ago<br>Core tap ORIGIN: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<br>Core tap HEAD: c948bc65d13a2bdd43e5ef2ed4196930c731283c<br>Core tap last commit: 11 hours ago<br>HOMEBREW_PREFIX: /usr/local<br>HOMEBREW_BOTTLE_DOMAIN: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles<br>HOMEBREW_MAKE_JOBS: 8<br>CPU: octa-core 64-bit kabylake<br>Homebrew Ruby: 2.6.3 =&gt; /usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/2.6.3_1/bin/ruby<br>Clang: 11.0 build 1103<br>Git: 2.24.1 =&gt; /Library/Developer/CommandLineTools/usr/bin/git<br>Curl: 7.64.1 =&gt; /usr/bin/curl<br>Java: 1.8.0_212<br>macOS: 10.15.4-x86_64<br>CLT: 1103.0.32.29<br>Xcode: N/A<br></code></pre></td></tr></table></figure><h5 id="诊断问题">诊断问题</h5><p><code>brew doctor</code> 诊断当前 brew 存在哪些问题，并给出解决方案</p><h5 id="仓库管理">仓库管理</h5><p><code>brew tap</code> 已安装的仓库列表</p><p><code>brew tap [--full] user/repo [URL]</code> 添加仓库</p><p><code>brew untap tap</code> 移除仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew tap</span><br>homebrew/cask<br>homebrew/cask-drivers<br>homebrew/cask-fonts<br>homebrew/core<br>homebrew/services<br>tldr-pages/tldr<br></code></pre></td></tr></table></figure><h4 id="镜像源">镜像源</h4><p>清华大学开源软件镜像站</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew 镜像使用帮助</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看 brew.git 当前源</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> &amp;&amp; git remote -v</span><br>origin    https://github.com/Homebrew/brew.git (fetch)<br>origin    https://github.com/Homebrew/brew.git (push)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看 homebrew-core.git 当前源</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/core)</span>&quot;</span> &amp;&amp; git remote -v</span><br>origin    https://github.com/Homebrew/homebrew-core.git (fetch)<br>origin    https://github.com/Homebrew/homebrew-core.git (push)<br><span class="hljs-meta">#</span><span class="bash"> 更新</span><br>git fetch --unshallow <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看 homebrew-core.git 当前源</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/cask)</span>&quot;</span> &amp;&amp; git remote -v</span><br>origin  https://github.com/homebrew/homebrew-cask.git (fetch)<br>origin  https://github.com/homebrew/homebrew-cask.git (push)<br><span class="hljs-meta">#</span><span class="bash"> 更新</span><br>git fetch --unshallow <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 替换现有上游</span><br><span class="hljs-meta">#</span><span class="bash"> 以下针对 mac OS 系统上的 Homebrew</span><br>git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<br>git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<br>git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git<br>git -C &quot;$(brew --repo homebrew/cask-fonts)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git<br>git -C &quot;$(brew --repo homebrew/cask-drivers)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git<br><span class="hljs-meta">#</span><span class="bash"> 更换后测试工作是否正常</span><br>brew update<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 替换为阿里源</span><br><span class="hljs-meta">#</span><span class="bash"> 修改 brew.git 为阿里源</span><br>git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><span class="hljs-meta">#</span><span class="bash"> 修改 homebrew-core.git 为阿里源</span><br>git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br>git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-cask.git<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 替换为中科大源</span><br><span class="hljs-meta">#</span><span class="bash"> 替换各个源</span><br>git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git<br>git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<br>git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 复原</span><br><span class="hljs-meta">#</span><span class="bash"> 以下针对 mac OS 系统上的 Homebrew</span><br>git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://github.com/Homebrew/homebrew-core.git<br>git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.git<br>git -C &quot;$(brew --repo homebrew/cask-fonts)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask-fonts.git<br>git -C &quot;$(brew --repo homebrew/cask-drivers)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask-drivers.git<br><span class="hljs-meta">#</span><span class="bash"> 更换后测试工作是否正常</span><br>brew update<br></code></pre></td></tr></table></figure><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew-bottles/">Homebrew-bottles 镜像使用帮助</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 临时替换</span><br>export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 长期替换</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 阿里源</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 中科大</span><br>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile<br>source ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="python环境">Python环境</h3><h4 id="virtualenv">virtualenv</h4><h5 id="安装virtualenv环境">安装virtualenv环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install virtualenv<br><span class="hljs-meta">#</span><span class="bash">检查是否安装成功</span><br>virtualenv --version<br></code></pre></td></tr></table></figure><h5 id="创建以及使用虚拟环境">创建以及使用虚拟环境</h5><h6 id="创建时指定位置方式">创建时指定位置方式</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建python3环境</span><br>virtualenv -p python3 ~/Projects/PythonEnv/py3_normal/<br><span class="hljs-meta">#</span><span class="bash"> 进入虚拟环境</span><br>cd ~/Projects/PythonEnv/py3_normal/bin<br>source activate<br><span class="hljs-meta">#</span><span class="bash"> 退出环境</span><br>deactivate<br></code></pre></td></tr></table></figure><h6 id="虚拟环境管理器方式">虚拟环境管理器方式</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装虚拟环境管理器</span><br>pip install virtualenvwrapper<br><span class="hljs-meta">#</span><span class="bash"> 配置虚拟环境管理器环境-添加配置</span><br>vim ~/.bash_profile<br><br>WORKON_HOME=~/Projects/PythonEnv<br>PROJECT_HOME=~/Projects/MyPython<br>export WORKON_HOME<br>export PROJECT_HOME<br>VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3<br>source /usr/local/bin/virtualenvwrapper.sh<br><span class="hljs-meta">#</span><span class="bash">保存-生效配置</span><br>source ~/.bash_profile<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 创建虚拟环境</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 创建python2的虚拟环境</span></span><br>mkvirtualenv &lt;虚拟环境名&gt;<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 创建python3的虚拟环境</span></span><br>mkvirtualenv -p python3 &lt;虚拟环境名&gt;<br><span class="hljs-meta">#</span><span class="bash"> 进入/切换虚拟环境</span><br>workon &lt;虚拟环境名&gt;<br><span class="hljs-meta">#</span><span class="bash"> 退出虚拟环境</span><br>deactivate<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 其他命令</span><br>lsvirtualenv   # 查看虚拟环境列表<br>lssitepackages # 查看当前环境中安装的那些包（启动虚拟环境后）<br>rmvirtualenv   # 虚拟环境名 删除虚拟环境<br></code></pre></td></tr></table></figure><h4 id="anaconda-or-miniconda">Anaconda or Miniconda</h4><h5 id="安装">安装</h5><p>清华大学开源软件镜像站 https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Download</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda-3.4.2-MacOSX-x86_64.sh<br><span class="hljs-meta">#</span><span class="bash"> Install</span><br>bash Miniconda-3.4.2-MacOSX-x86_64.sh<br><span class="hljs-meta">#</span><span class="bash"> Activate</span><br>source .bashrc<br></code></pre></td></tr></table></figure><h5 id="创建以及使用虚拟环境-1">创建以及使用虚拟环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">- Create a new environment, installing named packages into it:<br>    conda create --name environment_name python=2.7 matplotlib<br><br>- List all environments:<br>    conda info --envs<br><br>- Load or unload an environment:<br>    conda activate|deactivate environment_name<br><br>- Delete an environment (remove all packages):<br>    conda remove --name environment_name --all<br><br>- Search conda channels for a package by name:<br>    conda search package_name<br><br>- Install packages into the current environment:<br>    conda install python=3.4 numpy<br><br>- List currently installed packages in current environment:<br>    conda list<br><br>- Delete unused packages and caches:<br>    conda clean --all<br></code></pre></td></tr></table></figure><h4 id="python-pip-配置国内源pip-install-read-timed-out">Python pip 配置国内源[pip install Read timed out]</h4><h5 id="方式一临时生效"><strong>【方式一】临时生效</strong></h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 在安装时加上镜像源</span><br>pip install &lt;库名&gt; -i https:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span> --trusted-host pypi.douban.compyth<br></code></pre></td></tr></table></figure><h5 id="方式二永久指定"><strong>【方式二】永久指定</strong></h5><h6 id="国内源列表推荐用阿里云的">国内源列表（推荐用阿里云的）</h6><p>阿里云<code>http://mirrors.aliyun.com/pypi/simple/</code></p><p>中国科技大学 <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p><p>豆瓣 (douban) <code>https://pypi.douban.com/simple/</code></p><p>清华大学 <code>https://pypi.tuna.tsinghua.edu.cn/simple/</code></p><p>中国科学技术大学 <code>http://pypi.mirrors.ustc.edu.cn/simple/</code></p><h6 id="home目录下创建文件">home目录下创建文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir .pip# 在家目录下创建一个.pip目录<br>~ cd pip<br>~ touch pip.conf # 创建一个pip配置文件<br><span class="hljs-meta">#</span><span class="bash"> 写入配置</span><br>[global]<br>index-url = http://mirrors.aliyun.com/pypi/simple/<br>[install]<br>trusted-host = mirrors.aliyun.com<br></code></pre></td></tr></table></figure><h4 id="更新python版本后命令行下pip-命令报错">更新Python版本后,命令行下pip 命令报错</h4><p>电脑中Python3由3.7更新到3.9后，在命令行下使用<code>pip list</code>报以下错误</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">zsh: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>pip: bad interpreter: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/opt/</span>python<span class="hljs-regexp">/bin/</span>python3.<span class="hljs-number">7</span>: no such <span class="hljs-keyword">file</span> or directory<br></code></pre></td></tr></table></figure><p>但是命令<code>pip3 list</code>可以正常使用，这是需要考虑<code>pip</code>指向的python设置是否正确</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs zsh"><span class="hljs-comment"># 查看pip命令配置文件</span><br><span class="hljs-built_in">which</span> pip<br>/usr/<span class="hljs-built_in">local</span>/bin/pip<br><span class="hljs-comment"># 查看pip3命令配置文件</span><br>/usr/<span class="hljs-built_in">local</span>/bin/pip3<br></code></pre></td></tr></table></figure><p>对比发现/usr/local/bin/pip指向的python版本时3.7，/usr/local/bin/pip3指向的是正确的。因此，将/usr/local/bin/pip指向python版本的配置修改成/usr/local/bin/pip3指向的配置。</p><h3 id="go开发">Go开发</h3><h4 id="brew安装">brew安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">~ brew install go<br><span class="hljs-meta">#</span><span class="bash"> 安装指定 go 版本</span><br>~ brew install go@&lt;version&gt;<br></code></pre></td></tr></table></figure><p>默认安装一个 go 的最新版本，也可安装指定版本。</p><h5 id="brew-切换-go-版本">Brew 切换 Go 版本</h5><h6 id="方式一brew-link">【方式一】brew link</h6><p>安装新的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~ brew install go@&lt;version&gt;<br></code></pre></td></tr></table></figure><p>移除原有的 go 版本软链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~ brew unlink go<br></code></pre></td></tr></table></figure><p>指定新的版本软链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">~ brew link go@&lt;version&gt;<br></code></pre></td></tr></table></figure><h6 id="方式二brew-switch">【方式二】brew switch</h6><p>使用 <code>brew info go</code> 命令你可以看到当前的 go 可以切换的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">~ brew switch go &lt;version1&gt;<br>Cleaning /usr/<span class="hljs-built_in">local</span>/Cellar/go/&lt;version1&gt;<br>Cleaning /usr/<span class="hljs-built_in">local</span>/Cellar/go/&lt;version2&gt;<br>0 links created <span class="hljs-keyword">for</span> /usr/<span class="hljs-built_in">local</span>/Cellar/go/&lt;version1&gt;<br></code></pre></td></tr></table></figure><p>创建了零个连接，就代表着没有成功的将 go 版本指向你所需要的版本下，问题是什么呢？现将 go 版本切回 go <version2>，你会发现可以切换并正常使用：</version2></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">~ brew switch go &lt;version2&gt;<br>Cleaning /usr/<span class="hljs-built_in">local</span>/Cellar/go/&lt;version1&gt;<br>Cleaning /usr/<span class="hljs-built_in">local</span>/Cellar/go/&lt;version2&gt;<br>3 links created <span class="hljs-keyword">for</span> /usr/<span class="hljs-built_in">local</span>/Cellar/go/&lt;version2&gt;<br><br>~ go version<br>go version go&lt;version2&gt; darwin/amd64<br></code></pre></td></tr></table></figure><p>定位这个原因你需要看看为什么没有未给 go <version1> 版本创建软连接，首先要找一下 go 默认安装的位置，使用 <code>go env</code> 查看安装目录：</version1></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/Cellar/go/<br></code></pre></td></tr></table></figure><p>进入到目录之后在 go 目录下只有刚才默认安装的 <version2> 版本，并没有自己安装的版本，退出父级目录看到了下载的 go@<version1>版本，由于软连接连接的是上方的路径，需要将这个目录移动至 go 目录下：</version1></version2></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 打开默认目录<br><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/go/<br>// 退出目录<br><span class="hljs-built_in">cd</span> ..<br>// 移动目录至 go 目录下<br>mv go@&lt;version1&gt; go/<br>// 重要！！！ 重命名文件夹<br>mv go@&lt;version1&gt; &lt;version1&gt;<br></code></pre></td></tr></table></figure><p>接下来使用切换命令 <code>brew switch go &lt;version&gt;</code> 就可以切换环境了。</p><h5 id="brew-报错-fatal-could-not-resolve-head-to-a-revision">brew 报错 "fatal: Could not resolve HEAD to a revision"</h5><p><a href="https://www.jianshu.com/p/b2de788c3c6d">解决方法</a></p><h3 id="开发配置">开发配置</h3><h4 id="iterm2">Iterm2</h4><h4 id="oh-my-zsh">oh-my-zsh</h4><h4 id="tldr">tldr</h4><h3 id="catalina升级sur-big遇到的坑">Catalina升级Sur Big遇到的坑</h3><h4 id="homebrew-1">Homebrew</h4><h5 id="brew报错initialize-version-value-must-be-a-string-got-a-nilclass-typeerror">brew报错：`initialize': Version value must be a string; got a NilClass () (TypeError)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">brew <span class="hljs-built_in">list</span><br>Traceback (most recent call last):<br>    <span class="hljs-number">11</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/brew.rb:<span class="hljs-number">23</span>:<span class="hljs-keyword">in</span> `&lt;main&gt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    10: from /usr/local/Homebrew/Library/Homebrew/brew.rb:23:in `require_relative&#x27;</span><br>     <span class="hljs-number">9</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/<span class="hljs-keyword">global</span>.rb:<span class="hljs-number">29</span>:<span class="hljs-keyword">in</span> `&lt;top (required)&gt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">     8: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require&#x27;</span><br>     <span class="hljs-number">7</span>: <span class="hljs-keyword">from</span> /System/Library/Frameworks/Ruby.framework/Versions/<span class="hljs-number">2.6</span>/usr/lib/ruby/<span class="hljs-number">2.6</span><span class="hljs-number">.0</span>/rubygems/core_ext/kernel_require.rb:<span class="hljs-number">54</span>:<span class="hljs-keyword">in</span> `require<span class="hljs-string">&#x27;</span><br><span class="hljs-string">     6: from /usr/local/Homebrew/Library/Homebrew/os.rb:3:in `&lt;top (required)&gt;&#x27;</span><br>     <span class="hljs-number">5</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/os.rb:<span class="hljs-number">21</span>:<span class="hljs-keyword">in</span> `&lt;module:OS&gt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">     4: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:58:in `prerelease?&#x27;</span><br>     <span class="hljs-number">3</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/os/mac.rb:<span class="hljs-number">24</span>:<span class="hljs-keyword">in</span> `version<span class="hljs-string">&#x27;</span><br><span class="hljs-string">     2: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:24:in `new&#x27;</span><br>     <span class="hljs-number">1</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/os/mac/version.rb:<span class="hljs-number">26</span>:<span class="hljs-keyword">in</span> `initialize<span class="hljs-string">&#x27;</span><br><span class="hljs-string">/usr/local/Homebrew/Library/Homebrew/version.rb:368:in `initialize&#x27;</span>: Version value must be a string; got a NilClass () (TypeError)<br></code></pre></td></tr></table></figure><p>根据Traceback信息可以发现/usr/local/Homebrew/Library/Homebrew/os/mac/version.rb中报错,vim打开该文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python">vim /usr/local/Homebrew/Library/Homebrew/os/mac/version.rb<br><span class="hljs-comment"># typed: true</span><br><span class="hljs-comment"># frozen_string_literal: true</span><br><br>require <span class="hljs-string">&quot;hardware&quot;</span><br>require <span class="hljs-string">&quot;version&quot;</span><br><br>module OS<br>  module Mac<br>    <span class="hljs-comment"># A macOS version.</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># @api private</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Version</span> &lt; :</span>:Version<br>      SYMBOLS = <br>        catalina:    <span class="hljs-string">&quot;10.15&quot;</span>,<br>        mojave:      <span class="hljs-string">&quot;10.14&quot;</span>,<br>        high_sierra: <span class="hljs-string">&quot;10.13&quot;</span>,<br>        sierra:      <span class="hljs-string">&quot;10.12&quot;</span>,<br>        el_capitan:  <span class="hljs-string">&quot;10.11&quot;</span>,<br>        yosemite:    <span class="hljs-string">&quot;10.10&quot;</span>,<br>      &#125;.freeze<br><br>      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">self</span>.<span class="hljs-title">from_symbol</span>(<span class="hljs-params">sym</span>)</span><br><span class="hljs-function">        <span class="hljs-title">str</span> = <span class="hljs-title">SYMBOLS</span>.<span class="hljs-title">fetch</span>(<span class="hljs-params">sym</span>) &#123; <span class="hljs-title">raise</span> <span class="hljs-title">MacOSVersionError</span>, <span class="hljs-title">sym</span> &#125;</span><br><span class="hljs-function">        <span class="hljs-title">new</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>)</span><br><span class="hljs-function">      <span class="hljs-title">end</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">      <span class="hljs-title">def</span> <span class="hljs-title">initialize</span>(<span class="hljs-params">value</span>)</span><br><span class="hljs-function">        <span class="hljs-title">super</span>(<span class="hljs-params">value</span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">raise</span> <span class="hljs-title">MacOSVersionError</span>, <span class="hljs-title">value</span> <span class="hljs-title">unless</span> <span class="hljs-title">value</span>.<span class="hljs-title">match</span>?(<span class="hljs-params">/\A1\d+(<span class="hljs-params">?:\.\d+</span>)&#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>&#125;\Z/</span>)</span><br></code></pre></td></tr></table></figure><p>从代码中可以看出,该版本的Homebrew不支持Sur Big系统,于是解决方案是更新Homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew update-reset<br></code></pre></td></tr></table></figure><p>结果,brew没了,命令输入brew报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zsh:brew: <span class="hljs-built_in">command</span> not found<br></code></pre></td></tr></table></figure><p>无奈只能重新安装</p><p>但是这次就没有那么幸运,ruby源已更换成国内的</p><p>使用科学上网,也无法访问https://raw.githubusercontent.com</p><p>于是只能另寻方法,Google上找到.bash脚本</p><p>桌面创建.bash文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/Desktop/</span>brew_install.sh<br></code></pre></td></tr></table></figure><p>脚本内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -u<br><br><span class="hljs-comment"># First check if the OS is Linux.</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> = <span class="hljs-string">&quot;Linux&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  HOMEBREW_ON_LINUX=1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Check if macOS is ARM</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname -m)</span>&quot;</span> = <span class="hljs-string">&quot;arm64&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> = <span class="hljs-string">&quot;Darwin&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  HOMEBREW_APPLE_SILICON=1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># On macOS, this script installs to /usr/local only.</span><br><span class="hljs-comment"># On Linux, it installs to /home/linuxbrew/.linuxbrew if you have sudo access</span><br><span class="hljs-comment"># and ~/.linuxbrew otherwise.</span><br><span class="hljs-comment"># To install elsewhere (which is unsupported)</span><br><span class="hljs-comment"># you can untar https://github.com/Homebrew/brew/tarball/master</span><br><span class="hljs-comment"># anywhere you like.</span><br><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  HOMEBREW_PREFIX=<span class="hljs-string">&quot;/usr/local&quot;</span><br>  HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;/usr/local/Homebrew&quot;</span><br>  HOMEBREW_CACHE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/Library/Caches/Homebrew&quot;</span><br><br>  STAT=<span class="hljs-string">&quot;stat -f&quot;</span><br>  CHOWN=<span class="hljs-string">&quot;/usr/sbin/chown&quot;</span><br>  CHGRP=<span class="hljs-string">&quot;/usr/bin/chgrp&quot;</span><br>  GROUP=<span class="hljs-string">&quot;admin&quot;</span><br>  TOUCH=<span class="hljs-string">&quot;/usr/bin/touch&quot;</span><br><span class="hljs-keyword">else</span><br>  HOMEBREW_PREFIX_DEFAULT=<span class="hljs-string">&quot;/home/linuxbrew/.linuxbrew&quot;</span><br>  HOMEBREW_CACHE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.cache/Homebrew&quot;</span><br><br>  STAT=<span class="hljs-string">&quot;stat --printf&quot;</span><br>  CHOWN=<span class="hljs-string">&quot;/bin/chown&quot;</span><br>  CHGRP=<span class="hljs-string">&quot;/bin/chgrp&quot;</span><br>  GROUP=<span class="hljs-string">&quot;<span class="hljs-subst">$(id -gn)</span>&quot;</span><br>  TOUCH=<span class="hljs-string">&quot;/bin/touch&quot;</span><br><span class="hljs-keyword">fi</span><br>BREW_REPO=<span class="hljs-string">&quot;https://github.com/Homebrew/brew&quot;</span><br><br><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> bump version when new macOS is released</span><br>MACOS_LATEST_SUPPORTED=<span class="hljs-string">&quot;10.15&quot;</span><br><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> bump version when new macOS is released</span><br>MACOS_OLDEST_SUPPORTED=<span class="hljs-string">&quot;10.13&quot;</span><br><br><span class="hljs-comment"># For Homebrew on Linux</span><br>REQUIRED_RUBY_VERSION=2.6  <span class="hljs-comment"># https://github.com/Homebrew/brew/pull/6556</span><br>REQUIRED_GLIBC_VERSION=2.13  <span class="hljs-comment"># https://docs.brew.sh/Homebrew-on-Linux#requirements</span><br><br><span class="hljs-comment"># no analytics during installation</span><br><span class="hljs-built_in">export</span> HOMEBREW_NO_ANALYTICS_THIS_RUN=1<br><span class="hljs-built_in">export</span> HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT=1<br><br><span class="hljs-comment"># string formatters</span><br><span class="hljs-keyword">if</span> [[ -t 1 ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-function"><span class="hljs-title">tty_escape</span></span>() &#123; <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[%sm&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>; &#125;<br><span class="hljs-keyword">else</span><br>  <span class="hljs-function"><span class="hljs-title">tty_escape</span></span>() &#123; :; &#125;<br><span class="hljs-keyword">fi</span><br><span class="hljs-function"><span class="hljs-title">tty_mkbold</span></span>() &#123; tty_escape <span class="hljs-string">&quot;1;<span class="hljs-variable">$1</span>&quot;</span>; &#125;<br>tty_underline=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_escape <span class="hljs-string">&quot;4;39&quot;</span>)</span>&quot;</span><br>tty_blue=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_mkbold 34)</span>&quot;</span><br>tty_red=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_mkbold 31)</span>&quot;</span><br>tty_bold=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_mkbold 39)</span>&quot;</span><br>tty_reset=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_escape 0)</span>&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">have_sudo_access</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> -a args<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SUDO_ASKPASS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    args=(<span class="hljs-string">&quot;-A&quot;</span>)<br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HAVE_SUDO_ACCESS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[*]-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>      /usr/bin/sudo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span> -l mkdir &amp;&gt;/dev/null<br>    <span class="hljs-keyword">else</span><br>      /usr/bin/sudo -l mkdir &amp;&gt;/dev/null<br>    <span class="hljs-keyword">fi</span><br>    HAVE_SUDO_ACCESS=<span class="hljs-string">&quot;$?&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-variable">$HAVE_SUDO_ACCESS</span>&quot;</span> -ne 0 ]]; <span class="hljs-keyword">then</span><br>    abort <span class="hljs-string">&quot;Need sudo access on macOS (e.g. the user <span class="hljs-variable">$USER</span> to be an Administrator)!&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HAVE_SUDO_ACCESS</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">shell_join</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> arg<br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>  <span class="hljs-built_in">shift</span><br>  <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot; &quot;</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arg// /\ &#125;</span>&quot;</span><br>  <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">chomp</span></span>() &#123;<br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1/&quot;$&#x27;\n&#x27;&quot;/&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">ohai</span></span>() &#123;<br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_blue&#125;</span>==&gt;<span class="hljs-variable">$&#123;tty_bold&#125;</span> %s<span class="hljs-variable">$&#123;tty_reset&#125;</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">warn</span></span>() &#123;<br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>Warning<span class="hljs-variable">$&#123;tty_reset&#125;</span>: %s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(chomp <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">abort</span></span>() &#123;<br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">execute</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> ! <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">then</span><br>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(printf <span class="hljs-string">&quot;Failed during: %s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)</span>&quot;</span>)</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">execute_sudo</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> -a args=(<span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SUDO_ASKPASS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    args=(<span class="hljs-string">&quot;-A&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> have_sudo_access; <span class="hljs-keyword">then</span><br>    ohai <span class="hljs-string">&quot;/usr/bin/sudo&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span><br>    execute <span class="hljs-string">&quot;/usr/bin/sudo&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    ohai <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span><br>    execute <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">getc</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> save_state<br>  save_state=$(/bin/stty -g)<br>  /bin/stty raw -<span class="hljs-built_in">echo</span><br>  IFS= <span class="hljs-built_in">read</span> -r -n 1 -d <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br>  /bin/stty <span class="hljs-string">&quot;<span class="hljs-variable">$save_state</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">wait_for_user</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> c<br>  <span class="hljs-built_in">echo</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Press RETURN to continue or any other key to abort&quot;</span><br>  getc c<br>  <span class="hljs-comment"># we test for \r and \n because some stuff does \r instead</span><br>  <span class="hljs-keyword">if</span> ! [[ <span class="hljs-string">&quot;<span class="hljs-variable">$c</span>&quot;</span> == $<span class="hljs-string">&#x27;\r&#x27;</span> || <span class="hljs-string">&quot;<span class="hljs-variable">$c</span>&quot;</span> == $<span class="hljs-string">&#x27;\n&#x27;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">major_minor</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%%.*&#125;</span>.<span class="hljs-subst">$(x=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span>; echo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;x%%.*&#125;</span>&quot;</span>)</span>&quot;</span><br>&#125;<br><br><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  macos_version=<span class="hljs-string">&quot;<span class="hljs-subst">$(major_minor <span class="hljs-string">&quot;<span class="hljs-subst">$(/usr/bin/sw_vers -productVersion)</span>&quot;</span>)</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-function"><span class="hljs-title">version_gt</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]<br>&#125;<br><span class="hljs-function"><span class="hljs-title">version_ge</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]<br>&#125;<br><span class="hljs-function"><span class="hljs-title">version_lt</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">should_install_git</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [[ $(<span class="hljs-built_in">command</span> -v git) ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">return</span> 1<br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">should_install_command_line_tools</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">return</span> 1<br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_APPLE_SILICON-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">return</span> 1;<br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">if</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.13&quot;</span>; <span class="hljs-keyword">then</span><br>    ! [[ -e <span class="hljs-string">&quot;/Library/Developer/CommandLineTools/usr/bin/git&quot;</span> ]]<br>  <span class="hljs-keyword">else</span><br>    ! [[ -e <span class="hljs-string">&quot;/Library/Developer/CommandLineTools/usr/bin/git&quot;</span> ]] ||<br>      ! [[ -e <span class="hljs-string">&quot;/usr/include/iconv.h&quot;</span> ]]<br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">get_permission</span></span>() &#123;<br>  <span class="hljs-variable">$STAT</span> <span class="hljs-string">&quot;%A&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">user_only_chmod</span></span>() &#123;<br>  [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(get_permission <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span> != <span class="hljs-string">&quot;755&quot;</span> ]]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">exists_but_not_writable</span></span>() &#123;<br>  [[ -e <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; ! [[ -r <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; -w <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; -x <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">get_owner</span></span>() &#123;<br>  <span class="hljs-variable">$STAT</span> <span class="hljs-string">&quot;%u&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">file_not_owned</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(get_owner <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-subst">$(id -u)</span>&quot;</span> ]]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">get_group</span></span>() &#123;<br>  <span class="hljs-variable">$STAT</span> <span class="hljs-string">&quot;%g&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">file_not_grpowned</span></span>() &#123;<br>  [[ <span class="hljs-string">&quot; <span class="hljs-subst">$(id -G <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>)</span> &quot;</span> != *<span class="hljs-string">&quot; <span class="hljs-subst">$(get_group <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span> &quot;</span>*  ]]<br>&#125;<br><br><span class="hljs-comment"># Please sync with &#x27;test_ruby()&#x27; in &#x27;Library/Homebrew/utils/ruby.sh&#x27; from Homebrew/brew repository.</span><br><span class="hljs-function"><span class="hljs-title">test_ruby</span></span> () &#123;<br>  <span class="hljs-keyword">if</span> [[ ! -x <span class="hljs-variable">$1</span> ]]<br>  <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">return</span> 1<br>  <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> --enable-frozen-string-literal --<span class="hljs-built_in">disable</span>=gems,did_you_mean,rubyopt -rrubygems -e \<br>    <span class="hljs-string">&quot;abort if Gem::Version.new(RUBY_VERSION.to_s.dup).to_s.split(&#x27;.&#x27;).first(2) != \</span><br><span class="hljs-string">              Gem::Version.new(&#x27;<span class="hljs-variable">$REQUIRED_RUBY_VERSION</span>&#x27;).to_s.split(&#x27;.&#x27;).first(2)&quot;</span> 2&gt;/dev/null<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">no_usable_ruby</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> ruby_exec<br>  IFS=$<span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-comment"># Do word splitting on new lines only</span><br>  <span class="hljs-keyword">for</span> ruby_exec <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">which</span> -a ruby); <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> test_ruby <span class="hljs-string">&quot;<span class="hljs-variable">$ruby_exec</span>&quot;</span>; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">return</span> 1<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br>  IFS=$<span class="hljs-string">&#x27; \t\n&#x27;</span> <span class="hljs-comment"># Restore IFS to its default value</span><br>  <span class="hljs-built_in">return</span> 0<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">outdated_glibc</span></span>() &#123;<br>  <span class="hljs-built_in">local</span> glibc_version<br>  glibc_version=$(ldd --version | head -n1 | grep -o <span class="hljs-string">&#x27;[0-9.]*$&#x27;</span> | grep -o <span class="hljs-string">&#x27;^[0-9]\+\.[0-9]\+&#x27;</span>)<br>  version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$glibc_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$REQUIRED_GLIBC_VERSION</span>&quot;</span><br>&#125;<br><br><span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]] &amp;&amp; no_usable_ruby &amp;&amp; outdated_glibc<br><span class="hljs-keyword">then</span><br>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;-EOFABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">    Homebrew requires Ruby $REQUIRED_RUBY_VERSION which was not found on your system.</span></span><br><span class="hljs-subst"><span class="hljs-string">    Homebrew portable Ruby requires Glibc version $REQUIRED_GLIBC_VERSION or newer,</span></span><br><span class="hljs-subst"><span class="hljs-string">    and your Glibc version is too old.</span></span><br><span class="hljs-subst"><span class="hljs-string">    See $&#123;tty_underline&#125;https://docs.brew.sh/Homebrew-on-Linux#requirements$&#123;tty_reset&#125;</span></span><br><span class="hljs-subst"><span class="hljs-string">    Install Ruby $REQUIRED_RUBY_VERSION and add its location to your PATH.</span></span><br><span class="hljs-subst"><span class="hljs-string">    EOFABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">    )</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># USER isn&#x27;t always set so provide a fall back for the installer and subprocesses.</span><br><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;USER-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  USER=<span class="hljs-string">&quot;<span class="hljs-subst">$(chomp <span class="hljs-string">&quot;<span class="hljs-subst">$(id -un)</span>&quot;</span>)</span>&quot;</span><br>  <span class="hljs-built_in">export</span> USER<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Invalidate sudo timestamp before exiting (if it wasn&#x27;t active before).</span><br><span class="hljs-keyword">if</span> ! /usr/bin/sudo -n -v 2&gt;/dev/null; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;/usr/bin/sudo -k&#x27;</span> EXIT<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Things can fail later if `pwd` doesn&#x27;t exist.</span><br><span class="hljs-comment"># Also sudo prints a warning message for no good reason</span><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;/usr&quot;</span> || <span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-comment">####################################################################### script</span><br><span class="hljs-keyword">if</span> should_install_git; <span class="hljs-keyword">then</span><br>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">You must install Git before installing Homebrew. See:</span></span><br><span class="hljs-subst"><span class="hljs-string">  $&#123;tty_underline&#125;https://docs.brew.sh/Installation$&#123;tty_reset&#125;</span></span><br><span class="hljs-subst"><span class="hljs-string">EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">)</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br> have_sudo_access<br><span class="hljs-keyword">else</span><br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CI-&#125;</span>&quot;</span> ]] || [[ -w <span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX_DEFAULT</span>&quot;</span> ]] || [[ -w <span class="hljs-string">&quot;/home/linuxbrew&quot;</span> ]] || [[ -w <span class="hljs-string">&quot;/home&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    HOMEBREW_PREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX_DEFAULT</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">trap</span> <span class="hljs-built_in">exit</span> SIGINT<br>    <span class="hljs-keyword">if</span> [[ $(/usr/bin/sudo -n -l mkdir 2&gt;&amp;1) != *<span class="hljs-string">&quot;mkdir&quot;</span>* ]]; <span class="hljs-keyword">then</span><br>      ohai <span class="hljs-string">&quot;Select the Homebrew installation directory&quot;</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- <span class="hljs-variable">$&#123;tty_bold&#125;</span>Enter your password<span class="hljs-variable">$&#123;tty_reset&#125;</span> to install to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$&#123;HOMEBREW_PREFIX_DEFAULT&#125;</span><span class="hljs-variable">$&#123;tty_reset&#125;</span> (<span class="hljs-variable">$&#123;tty_bold&#125;</span>recommended<span class="hljs-variable">$&#123;tty_reset&#125;</span>)&quot;</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- <span class="hljs-variable">$&#123;tty_bold&#125;</span>Press Control-D<span class="hljs-variable">$&#123;tty_reset&#125;</span> to install to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$HOME</span>/.linuxbrew<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- <span class="hljs-variable">$&#123;tty_bold&#125;</span>Press Control-C<span class="hljs-variable">$&#123;tty_reset&#125;</span> to cancel installation&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> have_sudo_access; <span class="hljs-keyword">then</span><br>      HOMEBREW_PREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX_DEFAULT</span>&quot;</span><br>    <span class="hljs-keyword">else</span><br>      HOMEBREW_PREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.linuxbrew&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">trap</span> - SIGINT<br>  <span class="hljs-keyword">fi</span><br>  HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$UID</span>&quot;</span> == <span class="hljs-string">&quot;0&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  abort <span class="hljs-string">&quot;Don&#x27;t run this as root!&quot;</span><br><span class="hljs-keyword">elif</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX</span>&quot;</span> &amp;&amp; ! -x <span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">The Homebrew prefix, $&#123;HOMEBREW_PREFIX&#125;, exists but is not searchable. If this is</span></span><br><span class="hljs-subst"><span class="hljs-string">not intentional, please restore the default permissions and try running the</span></span><br><span class="hljs-subst"><span class="hljs-string">installer again:</span></span><br><span class="hljs-subst"><span class="hljs-string">    sudo chmod 775 $&#123;HOMEBREW_PREFIX&#125;</span></span><br><span class="hljs-subst"><span class="hljs-string">EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">)</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.7&quot;</span>; <span class="hljs-keyword">then</span><br>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">Your Mac OS X version is too old. See:</span></span><br><span class="hljs-subst"><span class="hljs-string">  $&#123;tty_underline&#125;https://github.com/mistydemeo/tigerbrew$&#123;tty_reset&#125;</span></span><br><span class="hljs-subst"><span class="hljs-string">EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">)</span>&quot;</span><br>  <span class="hljs-keyword">elif</span> version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.9&quot;</span>; <span class="hljs-keyword">then</span><br>    abort <span class="hljs-string">&quot;Your OS X version is too old&quot;</span><br>  <span class="hljs-keyword">elif</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MACOS_LATEST_SUPPORTED</span>&quot;</span> || \<br>    version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MACOS_OLDEST_SUPPORTED</span>&quot;</span>; <span class="hljs-keyword">then</span><br>    who=<span class="hljs-string">&quot;We&quot;</span><br>    what=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MACOS_LATEST_SUPPORTED</span>&quot;</span>; <span class="hljs-keyword">then</span><br>      what=<span class="hljs-string">&quot;pre-release version&quot;</span><br>    <span class="hljs-keyword">else</span><br>      who+=<span class="hljs-string">&quot; (and Apple)&quot;</span><br>      what=<span class="hljs-string">&quot;old version&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    ohai <span class="hljs-string">&quot;You are using macOS <span class="hljs-variable">$&#123;macos_version&#125;</span>.&quot;</span><br>    ohai <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;who&#125;</span> do not provide support for this <span class="hljs-variable">$&#123;what&#125;</span>.&quot;</span><br><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOS</span></span><br><span class="hljs-subst"><span class="hljs-string">This installation may not succeed.</span></span><br><span class="hljs-subst"><span class="hljs-string">After installation, you will encounter build failures with some formulae.</span></span><br><span class="hljs-subst"><span class="hljs-string">Please create pull requests instead of asking for help on Homebrew\&#x27;s GitHub,</span></span><br><span class="hljs-subst"><span class="hljs-string">Discourse, Twitter or IRC. You are responsible for resolving any issues you</span></span><br><span class="hljs-subst"><span class="hljs-string">experience while you are running this $&#123;what&#125;.</span></span><br><span class="hljs-subst"><span class="hljs-string">EOS</span></span><br><span class="hljs-subst"><span class="hljs-string">)</span></span><br><span class="hljs-string">&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br>ohai <span class="hljs-string">&quot;This script will install:&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/share/doc/homebrew&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/share/man/man1/brew.1&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/share/zsh/site-functions/_brew&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/etc/bash_completion.d/brew&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span><br><br><span class="hljs-comment"># Keep relatively in sync with</span><br><span class="hljs-comment"># https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb</span><br>directories=(bin etc include lib sbin share opt var<br>             Frameworks<br>             etc/bash_completion.d lib/pkgconfig<br>             share/aclocal share/doc share/info share/locale share/man<br>             share/man/man1 share/man/man2 share/man/man3 share/man/man4<br>             share/man/man5 share/man/man6 share/man/man7 share/man/man8<br>             var/<span class="hljs-built_in">log</span> var/homebrew var/homebrew/linked<br>             bin/brew)<br>group_chmods=()<br><span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> exists_but_not_writable <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>    group_chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># zsh refuses to read from these directories if group writable</span><br>directories=(share/zsh share/zsh/site-functions)<br>zsh_dirs=()<br><span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>  zsh_dirs+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<br><span class="hljs-keyword">done</span><br><br>directories=(bin etc include lib sbin share var opt<br>             share/zsh share/zsh/site-functions<br>             var/homebrew var/homebrew/linked<br>             Cellar Caskroom Homebrew Frameworks)<br>mkdirs=()<br><span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    mkdirs+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br>user_chmods=()<br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#zsh_dirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;zsh_dirs[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> user_only_chmod <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>      user_chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br><br>chmods=()<br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span>)<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span>)<br><span class="hljs-keyword">fi</span><br><br>chowns=()<br>chgrps=()<br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chmods[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> file_not_owned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>      chowns+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">if</span> file_not_grpowned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>      chgrps+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;The following existing directories will be made group writable:&quot;</span><br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;The following existing directories will be made writable by user only:&quot;</span><br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chowns[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;The following existing directories will have their owner set to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$&#123;USER&#125;</span><span class="hljs-variable">$&#123;tty_reset&#125;</span>:&quot;</span><br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chowns[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chgrps[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;The following existing directories will have their group set to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$&#123;GROUP&#125;</span><span class="hljs-variable">$&#123;tty_reset&#125;</span>:&quot;</span><br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chgrps[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#mkdirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;The following new directories will be created:&quot;</span><br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> should_install_command_line_tools; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;The Xcode Command Line Tools will be installed.&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -t 0 &amp;&amp; -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CI-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  wait_for_user<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;u+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chmods[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;755&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chowns[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chowns[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chgrps[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chgrps[@]&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>  execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span><br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;root:wheel&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>:<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#mkdirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span><br>  execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><br>  execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><br>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><br>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    execute <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> exists_but_not_writable <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>  execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> file_not_owned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> file_not_grpowned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span><br>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  execute <span class="hljs-string">&quot;<span class="hljs-variable">$TOUCH</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>/.cleaned&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> should_install_command_line_tools &amp;&amp; version_ge <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.13&quot;</span>; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;Searching online for the Command Line Tools&quot;</span><br>  <span class="hljs-comment"># This temporary file prompts the &#x27;softwareupdate&#x27; utility to list the Command Line Tools</span><br>  clt_placeholder=<span class="hljs-string">&quot;/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress&quot;</span><br>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$TOUCH</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$clt_placeholder</span>&quot;</span><br><br>  clt_label_command=<span class="hljs-string">&quot;/usr/sbin/softwareupdate -l |</span><br><span class="hljs-string">                      grep -B 1 -E &#x27;Command Line Tools&#x27; |</span><br><span class="hljs-string">                      awk -F&#x27;*&#x27; &#x27;/^ *\\*/ &#123;print \$2&#125;&#x27; |</span><br><span class="hljs-string">                      sed -e &#x27;s/^ *Label: //&#x27; -e &#x27;s/^ *//&#x27; |</span><br><span class="hljs-string">                      sort -V |</span><br><span class="hljs-string">                      tail -n1&quot;</span><br>  clt_label=<span class="hljs-string">&quot;<span class="hljs-subst">$(chomp <span class="hljs-string">&quot;<span class="hljs-subst">$(/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-variable">$clt_label_command</span>&quot;</span>)</span>&quot;</span>)</span>&quot;</span><br><br>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$clt_label</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    ohai <span class="hljs-string">&quot;Installing <span class="hljs-variable">$clt_label</span>&quot;</span><br>    execute_sudo <span class="hljs-string">&quot;/usr/sbin/softwareupdate&quot;</span> <span class="hljs-string">&quot;-i&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$clt_label</span>&quot;</span><br>    execute_sudo <span class="hljs-string">&quot;/bin/rm&quot;</span> <span class="hljs-string">&quot;-f&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$clt_placeholder</span>&quot;</span><br>    execute_sudo <span class="hljs-string">&quot;/usr/bin/xcode-select&quot;</span> <span class="hljs-string">&quot;--switch&quot;</span> <span class="hljs-string">&quot;/Library/Developer/CommandLineTools&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Headless install may have failed, so fallback to original &#x27;xcode-select&#x27; method</span><br><span class="hljs-keyword">if</span> should_install_command_line_tools &amp;&amp; <span class="hljs-built_in">test</span> -t 0; <span class="hljs-keyword">then</span><br>  ohai <span class="hljs-string">&quot;Installing the Command Line Tools (expect a GUI popup):&quot;</span><br>  execute_sudo <span class="hljs-string">&quot;/usr/bin/xcode-select&quot;</span> <span class="hljs-string">&quot;--install&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Press any key when the installation has completed.&quot;</span><br>  getc<br>  execute_sudo <span class="hljs-string">&quot;/usr/bin/xcode-select&quot;</span> <span class="hljs-string">&quot;--switch&quot;</span> <span class="hljs-string">&quot;/Library/Developer/CommandLineTools&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]] &amp;&amp; ! output=<span class="hljs-string">&quot;<span class="hljs-subst">$(/usr/bin/xcrun clang 2&gt;&amp;1)</span>&quot;</span> &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-variable">$output</span>&quot;</span> == *<span class="hljs-string">&quot;license&quot;</span>* ]]; <span class="hljs-keyword">then</span><br>  abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">You have not agreed to the Xcode license.</span></span><br><span class="hljs-subst"><span class="hljs-string">Before running the installer again please agree to the license by opening</span></span><br><span class="hljs-subst"><span class="hljs-string">Xcode.app or running:</span></span><br><span class="hljs-subst"><span class="hljs-string">    sudo xcodebuild -license</span></span><br><span class="hljs-subst"><span class="hljs-string">EOABORT</span></span><br><span class="hljs-subst"><span class="hljs-string">)</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br>ohai <span class="hljs-string">&quot;Downloading and installing Homebrew...&quot;</span><br>(<br>  <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span> &gt;/dev/null || <span class="hljs-built_in">return</span><br><br>  <span class="hljs-comment"># we do it in four steps to avoid merge errors when reinstalling</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;init&quot;</span> <span class="hljs-string">&quot;-q&quot;</span><br><br>  <span class="hljs-comment"># &quot;git remote add&quot; will fail if the remote is defined in the global config</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;remote.origin.url&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BREW_REPO&#125;</span>&quot;</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;remote.origin.fetch&quot;</span> <span class="hljs-string">&quot;+refs/heads/*:refs/remotes/origin/*&quot;</span><br><br>  <span class="hljs-comment"># ensure we don&#x27;t munge line endings on checkout</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;core.autocrlf&quot;</span> <span class="hljs-string">&quot;false&quot;</span><br><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;fetch&quot;</span> <span class="hljs-string">&quot;origin&quot;</span> <span class="hljs-string">&quot;--force&quot;</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;fetch&quot;</span> <span class="hljs-string">&quot;origin&quot;</span> <span class="hljs-string">&quot;--tags&quot;</span> <span class="hljs-string">&quot;--force&quot;</span><br><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-string">&quot;--hard&quot;</span> <span class="hljs-string">&quot;origin/master&quot;</span><br><br>  execute <span class="hljs-string">&quot;ln&quot;</span> <span class="hljs-string">&quot;-sf&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span><br><br>  execute <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span> <span class="hljs-string">&quot;update&quot;</span> <span class="hljs-string">&quot;--force&quot;</span><br>) || <span class="hljs-built_in">exit</span> 1<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;:<span class="hljs-variable">$&#123;PATH&#125;</span>:&quot;</span> != *<span class="hljs-string">&quot;:<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin:&quot;</span>* ]]; <span class="hljs-keyword">then</span><br>  warn <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin is not in your PATH.&quot;</span><br><span class="hljs-keyword">fi</span><br><br>ohai <span class="hljs-string">&quot;Installation successful!&quot;</span><br><span class="hljs-built_in">echo</span><br><br><span class="hljs-comment"># Use the shell&#x27;s audible bell.</span><br><span class="hljs-keyword">if</span> [[ -t 1 ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\a&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Use an extra newline and bold to avoid this being missed.</span><br>ohai <span class="hljs-string">&quot;Homebrew has enabled anonymous aggregate formulae and cask analytics.&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOS</span></span><br><span class="hljs-subst"><span class="hljs-string">$&#123;tty_bold&#125;Read the analytics documentation (and how to opt-out)</span> here:</span><br><span class="hljs-string">  <span class="hljs-variable">$&#123;tty_underline&#125;</span>https://docs.brew.sh/Analytics<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><br><span class="hljs-string">No analytics data has been sent yet (or will be during this \`install\` run).</span><br><span class="hljs-string">EOS</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&quot;</span><br><br>ohai <span class="hljs-string">&quot;Homebrew is run entirely by unpaid volunteers. Please consider donating:&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOS</span></span><br><span class="hljs-subst"><span class="hljs-string">  $&#123;tty_underline&#125;https://github.com/Homebrew/brew#donations$&#123;tty_reset&#125;</span></span><br><span class="hljs-subst"><span class="hljs-string">EOS</span></span><br><span class="hljs-subst"><span class="hljs-string">)</span></span><br><span class="hljs-string">&quot;</span><br><br>(<br>  <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span> &gt;/dev/null || <span class="hljs-built_in">return</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;--replace-all&quot;</span> <span class="hljs-string">&quot;homebrew.analyticsmessage&quot;</span> <span class="hljs-string">&quot;true&quot;</span><br>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;--replace-all&quot;</span> <span class="hljs-string">&quot;homebrew.caskanalyticsmessage&quot;</span> <span class="hljs-string">&quot;true&quot;</span><br>) || <span class="hljs-built_in">exit</span> 1<br><br>ohai <span class="hljs-string">&quot;Next steps:&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- Run \`brew help\` to get started&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- Further documentation: &quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    <span class="hljs-variable">$&#123;tty_underline&#125;</span>https://docs.brew.sh<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SHELL</span>&quot;</span> <span class="hljs-keyword">in</span><br>    */bash*)<br>      <span class="hljs-keyword">if</span> [[ -r <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.bash_profile&quot;</span> ]]; <span class="hljs-keyword">then</span><br>        shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.bash_profile&quot;</span><br>      <span class="hljs-keyword">else</span><br>        shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.profile&quot;</span><br>      <span class="hljs-keyword">fi</span><br>      ;;<br>    */zsh*)<br>      shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.zprofile&quot;</span><br>      ;;<br>    *)<br>      shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.profile&quot;</span><br>      ;;<br>  <span class="hljs-keyword">esac</span><br><br>  cat &lt;&lt;<span class="hljs-string">EOS</span><br><span class="hljs-string">- Install the Homebrew dependencies if you have sudo access:</span><br><span class="hljs-string">  $&#123;tty_bold&#125;Debian, Ubuntu, etc.$&#123;tty_reset&#125;</span><br><span class="hljs-string">    sudo apt-get install build-essential</span><br><span class="hljs-string">  $&#123;tty_bold&#125;Fedora, Red Hat, CentOS, etc.$&#123;tty_reset&#125;</span><br><span class="hljs-string">    sudo yum groupinstall &#x27;Development Tools&#x27;</span><br><span class="hljs-string">  See $&#123;tty_underline&#125;https://docs.brew.sh/linux$&#123;tty_reset&#125; for more information.</span><br><span class="hljs-string">- Configure Homebrew in your $&#123;tty_underline&#125;$&#123;shell_profile&#125;$&#123;tty_reset&#125; by running</span><br><span class="hljs-string">    echo &#x27;eval \$($&#123;HOMEBREW_PREFIX&#125;/bin/brew shellenv)&#x27; &gt;&gt; $&#123;shell_profile&#125;</span><br><span class="hljs-string">- Add Homebrew to your $&#123;tty_bold&#125;PATH$&#123;tty_reset&#125;</span><br><span class="hljs-string">    eval \$($&#123;HOMEBREW_PREFIX&#125;/bin/brew shellenv)</span><br><span class="hljs-string">- We recommend that you install GCC by running:</span><br><span class="hljs-string">    brew install gcc</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOS</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行前,需要给改脚本赋权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chmod -R 777 brew_install.sh<br><br>./brew_install.sh<br></code></pre></td></tr></table></figure><p>等待安装成功(中间有过两次失败,主要原因是原来安装的Homebrew没有卸载干净)</p><h4 id="vmware-fusion">VMware Fusion</h4><h5 id="物理内存不足无法使用配置的设置开启虚拟机">物理内存不足，无法使用配置的设置开启虚拟机</h5><p>原来的VMware Fusion 版本是11</p><p><img src="/images/mac/vmfusion_11.png"></p><p>Google后发现12可以用,于是下载了VMware Fusion安装,亲测可用</p><h5 id="无法将ethernet0连接到虚拟网络devvmnet8">无法将“Ethernet0”连接到虚拟网络“/dev/vmnet8”。</h5><p>VMware Fusion升级到12后，过了几天打开虚拟机时，发现“Ethernet0”连接到虚拟网络“/dev/vmnet8”</p><p>谷歌了好久后发现</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">sudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist &amp;&amp; sudo killall -9 configd<br></code></pre></td></tr></table></figure><p>解决方式来源：</p><p>https://communities.vmware.com/t5/VMware-Fusion-Discussions/No-Ethernet-Connection-VMware-Fusion-12-macOS-Big-Sur-Beta-6/m-p/2303833#M140209</p><p>另外，当苹果电脑共享wifi时，也会造成这个结果。所以共享网络也需要关闭。</p><h3 id="命令行查看保存的密码">命令行查看保存的密码</h3><h4 id="security-find-generic-password--ga-wifi名称">security find-generic-password -ga "wifi名称"</h4><p><img src="/images/mac/wifi.png"></p><h3 id="mac使用wireshark抓包无法选择网卡">Mac使用wireshark抓包无法选择网卡</h3><p><a href="https://www.jianshu.com/p/23f54c8a6eff">解决方法</a></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Hadoop】Mac下开发环境配置</title>
    <link href="/2020/06/17/hadoop-dev-env/"/>
    <url>/2020/06/17/hadoop-dev-env/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><span id="more"></span></blockquote><h3 id="hdfs的java-api开发环境准备">hdfs的java API开发环境准备</h3><h4 id="修改hosts文件">修改hosts文件</h4><ul><li><p>mac下修改hosts文件</p><p>文件所在位置<code>/etc/hosts</code></p><p>将虚拟机中/etc/hosts文件一下内容，添加到以上hosts文件末尾</p></li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.51.100</span> node01.hadoop.com node01<br><span class="hljs-number">192.168.51.110</span> node02.hadoop.com node02<br><span class="hljs-number">192.168.51.120</span> node03.hadoop.com node03<br></code></pre></td></tr></table></figure><h4 id="安装jdk">安装jdk</h4><p>拷贝集群环境下的jdk到本地</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#添加以下配置内容，配置jdk环境变量</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/weitrue/install/jdk1.8.0_141<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JAVA_HOME/binCopy<br></code></pre></td></tr></table></figure><p>让修改马上生效</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h4 id="mac下hadoop环境配置">mac下hadoop环境配置</h4><p>拷贝集群环境下<code>hadoop-2.6.0-cdh5.14.2</code>目录文件到本地，配置环境变量</p><p><img src="/images/bdata/hadoop-dev-env/hadoop.png"></p><h4 id="安装maven">安装maven</h4><h5 id="maven是什么">maven是什么？</h5><p>Apache Maven是一个软件项目管理和理解工具。基于项目对象模型（POM）的概念，Maven可以从一个中心信息管理项目的构建，报告和文档。</p><h5 id="安装">安装</h5><p>解压安装包<code>apache-maven-3.6.1-bin.zip</code>到安装目录</p><p>编辑<code>.bash_profile</code>，新增maven环境配置</p><p><img src="/images/bdata/hadoop-dev-env/maven.png"></p><h6 id="maven的仓库">maven的仓库</h6><ul><li><p>创建maven工程后，maven会自动的去本地仓库查看时候有所需的jar包，如果没有的话，默认去中央仓库，将jar包下载到本地；以后如果再次使用此jar时，就直接使用本地仓库的jar即可</p></li><li><p>此过程是maven自动完成的</p></li><li><p>本地仓库：</p><p><img src="/images/bdata/hadoop-dev-env/repo.png"></p></li><li><p>私服仓库：就是我们自己搭建的一个远程仓库</p></li><li><p>中央仓库：是官方或者第三方提供的仓库</p></li></ul><h6 id="settings文件">settings文件</h6><ul><li>声明文件规范</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>本地仓库路径</li></ul><p><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></p><ul><li>Maven是否需要和用户交互以获得输入。如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true</li></ul><p><code>&lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</code></p><ul><li>表示Maven是否需要在离线模式下运行。如果构建系统需要在离线模式下运行，则为true，默认为false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用</li></ul><p><code>&lt;offline&gt;false&lt;/offline&gt;</code></p><ul><li>当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。</li></ul><p><code>pluginGroups</code></p><ul><li>为仓库列表配置的下载镜像列表</li></ul><p><code>mirrors</code></p><h6 id="pom文件">pom文件</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>     项目的模板版本<br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>         可以用这个来标识公司<br><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>TestFlume<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     可以标识工程的作用<br><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>             指定打包类型       <br><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        制定项目版本<br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>       项目的依赖关系<br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>                        构建项目的信息<br></code></pre></td></tr></table></figure><p>总项目/ pom.xml 总项目的pom配置文件</p><p>子项目1/ pom.xml 子项目1的pom文件</p><p>子项目2/ pom.xml 子项目2的pom文件</p><h6 id="maven简单的命令">maven简单的命令</h6><p>mvn clean</p><p>mvn clean package</p><p>mvn install:install-file -Dfile=junit-3.8.2.jar -DgroupId=junit -DartifactId=junit -Dversion=3.8.2 -Dpackaging=jar</p><p>如果依赖下载有问题，需要自己添加依赖包进仓库，不要复制粘贴，要用 mvn install这个命令将jar包打进仓库</p><h5 id="安装idea">安装idea</h5><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>mac</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Hadoop】集群环境（三台）</title>
    <link href="/2020/06/15/hadoop-env/"/>
    <url>/2020/06/15/hadoop-env/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>The Apache Hadoop software library is a framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. Rather than rely on hardware to deliver high-availability, the library itself is designed to detect and handle failures at the application layer, so delivering a highly-available service on top of a cluster of computers, each of which may be prone to failures.<span id="more"></span></p></blockquote><h3 id="三台linux服务器的安装">1. 三台linux服务器的安装</h3><h4 id="安装vmware-fusion">1. 安装VmWare Fusion</h4><p><img src="/images/bdata/hadoop-env/fusion.png"></p><h4 id="通过vmware安装三台linux机器">2.通过Vmware安装三台linux机器</h4><p><img src="/images/bdata/hadoop-env/linux.png"></p><h4 id="为linux虚拟机设置网络配置">3.为linux虚拟机设置网络配置</h4><p>安装VMWare Fusion成功后，Mac OS会新增两张网卡vmnet1以及vmnet8，其中vmnet1是Host-only模式，vmnet8是NAT模式，这里选择vmnet8使用NAT进行网络设置。</p><h5 id="修改fusion网络配置">1.修改Fusion网络配置</h5><p>修改配置文件:/Library/Preferences/VMware Fusion/networking</p><p><img src="/images/bdata/hadoop-env/fusion_net.png"></p><h5 id="修改网关">2.修改网关</h5><p>修改配置文件：/Library/Preferences/VMware Fusion/vmnet8/nat.conf</p><p><img src="/images/bdata/hadoop-env/net8.png"></p><h5 id="修改linux虚拟机网卡">3.修改linux虚拟机网卡</h5><p>修改配置文件(服务器版linux):/etc/sysconfig/network-scripts/ifcfg-ens33</p><p><img src="/images/bdata/hadoop-env/linux_net.png"></p><p>更改完成配置，重启网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart network<br></code></pre></td></tr></table></figure><p>安装一些常用的软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install vim<br>yum -y install net-tools<br></code></pre></td></tr></table></figure><p>关机</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">init</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="克隆第一台linux虚拟机">4.克隆第一台linux虚拟机</h5><p>现在已经有了种子机器了，我们可以通过种子机器进行复制或者克隆出三台机器</p><h6 id="更改克隆机器的ip地址">更改克隆机器的IP地址</h6><ul><li><p>三台机器的ip地址分别是<code>192.168.51.100、192.168.51.110、192.168.51.120</code></p></li><li><p>克隆出来的机器IP地址与种子的ip地址一样，我们将第二台机器的IP地址更改为192.168.51.110即可</p></li><li><p>启动虚拟机，并通过root用户，密码******来进行登录，然后来更改linux机器的IP地址</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">IPADDR=192.168.51.110<br>NETMASK=255.255.255.0<br>GATEWAY=192.168.51.1<br>DNS1=8.8.8.8<br></code></pre></td></tr></table></figure><ul><li><p>依照上面步骤，接着克隆第三台机器，并将第三台机器的IP地址设置为</p><p>192.168.51.120</p></li></ul><h3 id="安装大数据集群前环境准备">2.安装大数据集群前环境准备</h3><h4 id="三台虚拟机关闭防火墙">1. 三台虚拟机关闭防火墙</h4><p>三台机器执行以下命令（<font color="red">root</font>用户来执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop firewalld<br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><h4 id="三台机器关闭selinux">2. 三台机器关闭selinux</h4><p>三台机器执行以下命令关闭selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sysconfig/selinux<br>SELINUX=disabled<br></code></pre></td></tr></table></figure><h4 id="三台机器更改主机名">3. 三台机器更改主机名</h4><p>三台机器执行以下命令更改主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/hostname<br></code></pre></td></tr></table></figure><p>第一台机器更改内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">node01<span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span> <br></code></pre></td></tr></table></figure><p>第二台机器更改内容</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">node02</span>.hadoop.com<br></code></pre></td></tr></table></figure><p>第三台机器更改内容</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">node03</span>.hadoop.com<br></code></pre></td></tr></table></figure><h4 id="三台机器做主机名与ip地址的映射">4. 三台机器做主机名与IP地址的映射</h4><p>三台机器执行以下命令更改主机名与IP地址的映射/etc/hosts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.51.100 node01.hadoop.com node01<br>192.168.51.110 node02.hadoop.com node02<br>192.168.51.120 node03.hadoop.com node03<br></code></pre></td></tr></table></figure><h4 id="三台机器时钟同步">5. 三台机器时钟同步</h4><h5 id="第一种同步方式通过网络进行时钟同步">第一种同步方式：通过网络进行时钟同步</h5><p>通过网络连接外网进行时钟同步,必须保证虚拟机连上外网</p><p>三台机器都安装ntpdate</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install ntpdate<br></code></pre></td></tr></table></figure><p>阿里云时钟同步服务器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ntpdate</span> ntp<span class="hljs-number">4</span>.aliyun.com<br></code></pre></td></tr></table></figure><p>三台机器定时任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">crontab -e<br></code></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">*/1 * * * * /usr/sbin/ntpdate ntp4.aliyun.com;<br></code></pre></td></tr></table></figure><h4 id="三台机器添加普通用户">6. 三台机器添加普通用户</h4><p>三台linux服务器统一添加普通用户hadoop，并给以sudo权限，用于以后所有的大数据软件的安装</p><p>并统一设置普通用户的密码为 ==******==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd hadoop<br>passwd hadoop<br></code></pre></td></tr></table></figure><p>普通用户的密码设置为******</p><p>三台机器为普通用户添加sudo权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">visudo<br></code></pre></td></tr></table></figure><p>增加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop ALL=(ALL)    ALL<br></code></pre></td></tr></table></figure><h4 id="三台定义统一目录">7. 三台定义统一目录</h4><p>定义三台linux服务器软件压缩包存放目录，以及解压后安装目录，三台机器执行以下命令，创建两个文件夹，一个用于存放软件压缩包目录，一个用于存放解压后目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /weitrue/soft   # 软件压缩包存放目录<br>mkdir -p /weitrue/install # 软件解压后存放目录<br>chown -R hadoop:hadoop /weitrue  # 将文件夹权限更改为hadoop用户<br></code></pre></td></tr></table></figure><h4 id="三台机器hadoop用户免密码登录">8. 三台机器hadoop用户免密码登录</h4><p>切换用户为hadoop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su hadoop<br></code></pre></td></tr></table></figure><p>第一步：三台机器在<font color="red">hadoop</font>用户下执行以下命令生成公钥与私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p><font color="red">执行上述命令之后，按三次Enter键即可生成了</font></p><p>第二步：三台机器在hadoop用户下，执行命令拷贝公钥到node01服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id node01<br></code></pre></td></tr></table></figure><p>第三步：node01服务器将公钥拷贝给node02与node03</p><p>node01在hadoop用户下，执行以下命令，将authorized_keys拷贝到node02与node03服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/hadoop/.ssh/<br>scp authorized_keys node02:$PWD<br>scp authorized_keys node03:$PWD <br></code></pre></td></tr></table></figure><p>第四步：验证；从任意节点是否能免秘钥登陆其他节点；如node01免密登陆node02</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh node02<br></code></pre></td></tr></table></figure><h4 id="三台机器关机重启">9. 三台机器关机重启</h4><p>三台机器在hadoop用户下执行以下命令，实现关机重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo reboot -h now<br></code></pre></td></tr></table></figure><h4 id="三台机器安装jdk">10. 三台机器安装jdk</h4><ul><li><p>使用hadoop用户来重新连接三台机器，然后使用hadoop用户来安装jdk软件</p></li><li><p>上传压缩包到第一台服务器的/weitrue/soft下面，然后进行解压，配置环境变量即可，三台机器都依次安装即可</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/soft/<br>tar -xzvf jdk-8u141-linux-x64.tar.gz -C /weitrue/install/<br>sudo vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">添加以下配置内容，配置jdk环境变量</span><br>export JAVA_HOME=/weitrue/install/jdk1.8.0_141<br>export PATH=$PATH:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>让修改马上生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><h3 id="hadoop集群的安装">3. hadoop集群的安装</h3><p>注意：这里使用打包好的包“hadoop-2.6.0-cdh5.14.2_after_compile.tar.gz”安装部署集群</p><p>编译没有什么技巧，主要跟网络好坏有关</p><h4 id="cdh软件版本重新进行编译">1. CDH软件版本重新进行编译</h4><h4 id="hadoop集群的安装-1">2. hadoop集群的安装</h4><p>安装环境服务部署规划</p><table><thead><tr class="header"><th>服务器IP</th><th>192.168.51.100</th><th>192.168.51.110</th><th>192.168.51.120</th></tr></thead><tbody><tr class="odd"><td>HDFS</td><td>NameNode</td><td></td><td></td></tr><tr class="even"><td>HDFS</td><td>SecondaryNameNode</td><td></td><td></td></tr><tr class="odd"><td>HDFS</td><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr class="even"><td>YARN</td><td>ResourceManager</td><td></td><td></td></tr><tr class="odd"><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr><tr class="even"><td>历史日志服务器</td><td>JobHistoryServer</td><td></td><td></td></tr></tbody></table><h5 id="第一步上传压缩包并解压">第一步：上传压缩包并解压</h5><ul><li>将我们重新编译之后支持snappy压缩的hadoop包上传到第一台服务器并解压；第一台机器执行以下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/soft/<br>tar -xzvf hadoop-2.6.0-cdh5.14.2_after_compile.tar.gz -C /weitrue/install/<br></code></pre></td></tr></table></figure><h5 id="第二步查看hadoop支持的压缩方式以及本地库">第二步：查看hadoop支持的压缩方式以及本地库</h5><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2<br>bin/hadoop checknative<br></code></pre></td></tr></table></figure><p>如果出现openssl为false，那么所有机器在线安装openssl即可，执行以下命令，虚拟机联网之后就可以在线进行安装了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum -y install openssl-devel<br></code></pre></td></tr></table></figure><h5 id="第三步修改配置文件">第三步：修改配置文件</h5><h6 id="修改hadoop-env.sh">修改hadoop-env.sh</h6><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop<br>vim hadoop-env.sh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/weitrue/install/jdk1.8.0_141<br></code></pre></td></tr></table></figure><h6 id="修改core-site.xml">修改core-site.xml</h6><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop<br>vim core-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://node01:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/tempDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 缓冲区大小，实际工作中根据服务器性能动态调整 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4096<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开启hdfs的垃圾桶机制，删除掉的数据可以从垃圾桶中回收，单位分钟 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.trash.interval<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10080<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="修改hdfs-site.xml">修改hdfs-site.xml</h6><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop<br>vim hdfs-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- NameNode存储元数据信息的路径，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割   --&gt;</span> <br><span class="hljs-comment">&lt;!--   集群动态上下线 </span><br><span class="hljs-comment">&lt;property&gt;</span><br><span class="hljs-comment">&lt;name&gt;dfs.hosts&lt;/name&gt;</span><br><span class="hljs-comment">&lt;value&gt;/weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop/accept_host&lt;/value&gt;</span><br><span class="hljs-comment">&lt;/property&gt;</span><br><span class="hljs-comment">&lt;property&gt;</span><br><span class="hljs-comment">&lt;name&gt;dfs.hosts.exclude&lt;/name&gt;</span><br><span class="hljs-comment">&lt;value&gt;/weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop/deny_host&lt;/value&gt;</span><br><span class="hljs-comment">&lt;/property&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 定义dataNode数据存储的节点位置，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/datanodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/snn/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/snn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>134217728<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="修改mapred-site.xml">修改mapred-site.xml</h6><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop<br>mv mapred-site.xml.template mapred-site.xml <br>vim mapred-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.job.ubertask.enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="修改yarn-site.xml">修改yarn-site.xml</h6><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop<br>vim yarn-site.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="修改slaves文件">修改slaves文件</h6><p>第一台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop<br>vim slaves<br></code></pre></td></tr></table></figure><p>原内容替换为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">node01</span><br><span class="hljs-symbol">node02</span><br><span class="hljs-symbol">node03</span><br></code></pre></td></tr></table></figure><h5 id="第四步创建文件存放目录">第四步：创建文件存放目录</h5><p>第一台机器执行以下命令</p><p>node01机器上面创建以下目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/tempDatas<br>mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<br>mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/datanodeDatas <br>mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<br>mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/snn/name<br>mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/snn/edits<br></code></pre></td></tr></table></figure><h5 id="第五步安装包的分发scp与rsync">第五步：安装包的分发scp与rsync</h5><p>在linux当中，用于向远程服务器拷贝文件或者文件夹可以使用scp或者rsync，这两个命令功能类似都是向远程服务器进行拷贝，只不过scp是全量拷贝，rsync可以做到增量拷贝，rsync的效率比scp更高一些</p><h6 id="通过scp直接拷贝">通过scp直接拷贝</h6><p>scp（secure copy）安全拷贝</p><p>可以通过scp进行不同服务器之间的文件或者文件夹的复制</p><p>使用语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r sourceFile  username@host:destpath<br></code></pre></td></tr></table></figure><p>用法示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r hadoop-lzo-0.4.20.jar hadoop@node01:/weitrue/<br></code></pre></td></tr></table></figure><p>node01执行以下命令进行拷贝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /weitrue/install/<br>scp -r hadoop-2.6.0-cdh5.14.2/ node02:$PWD<br>scp -r hadoop-2.6.0-cdh5.14.2/ node03:$PWD<br></code></pre></td></tr></table></figure><h5 id="第六步配置hadoop的环境变量">第六步：配置hadoop的环境变量</h5><p>三台机器都要进行配置hadoop的环境变量</p><p>三台机器执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/profile<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export HADOOP_HOME=/weitrue/install/hadoop-2.6.0-cdh5.14.2<br>export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin<br></code></pre></td></tr></table></figure><p>配置完成之后生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><h5 id="第七步集群启动">第七步：集群启动</h5><h6 id="格式化集群">1. 格式化集群</h6><p>要启动 Hadoop 集群，需要启动 HDFS 和 YARN 两个集群。</p><p>注意：首次启动HDFS时，必须对其进行格式化操作。本质上是一些清理和准备工作，因为此时的 HDFS 在物理上还是不存在的。<font color="red">格式化操作只有在首次启动的时候需要，以后再也不需要了</font></p><p><font color="red">node01执行一遍即可</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hdfs namenode -format<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop namenode –format<br></code></pre></td></tr></table></figure><p><img src="/images/bdata/hadoop-env/hadoop.png"></p><p>启动集群有两种方式：①脚本一键启动；②单个进程逐个启动</p><h6 id="脚本一键启动">2. 脚本一键启动</h6><p>如果配置了 etc/hadoop/slaves 和 ssh 免密登录，则可以使用程序脚本启动所有Hadoop 两个集群的相关进程，在主节点所设定的机器上执行。</p><p>启动集群</p><p>node01节点上执行以下命令</p><p>第一台机器执行以下命令(hadoop/sbin目录下)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">start-dfs.sh<br>start-yarn.sh<br>mr-jobhistory-daemon.sh start historyserver<br></code></pre></td></tr></table></figure><p>停止集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">stop-dfs.sh<br>stop-yarn.sh <br></code></pre></td></tr></table></figure><h6 id="单个进程逐个启动">3. 单个进程逐个启动</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">在主节点上使用以下命令启动 HDFS NameNode： <br>hadoop-daemon.sh start namenode <br><br>在每个从节点上使用以下命令启动 HDFS DataNode： <br>hadoop-daemon.sh start datanode<br><br>在主节点上使用以下命令启动 YARN ResourceManager： <br>yarn-daemon.sh start resourcemanager <br><br>在每个从节点上使用以下命令启动 YARN nodemanager： <br>yarn-daemon.sh start nodemanager <br><br>以上脚本位于$HADOOP_HOME/sbin/目录下。如果想要停止某个节点上某个角色，只需要把命令中的start 改为stop 即可。<br></code></pre></td></tr></table></figure><h6 id="一键启动hadoop集群的脚本">4.一键启动hadoop集群的脚本</h6><p>我们也可以创建一键启动hadoop的脚本，以后启动hadoop都可以通过一个脚本即可</p><p>在node01服务器的/home/hadoop/bin目录下创建脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[hadoop@node01 bin]$ cd /home/hadoop/bin/<br>[hadoop@node01 bin]$ vim hadoop.sh<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>case $1 in<br>&quot;start&quot; )&#123;<br> source /etc/profile;<br> /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/start-dfs.sh<br> /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/start-yarn.sh<br> /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/mr-jobhistory-daemon.sh start historyserver<br><br>&#125;;;<br>&quot;stop&quot;)&#123;<br><br> /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/stop-dfs.sh<br> /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/stop-yarn.sh<br> /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/mr-jobhistory-daemon.sh stop  historyserver<br>&#125;;;<br>esac<br></code></pre></td></tr></table></figure><p>修改脚本权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[hadoop@node01 bin]$ chmod 777 hadoop.sh<br>[hadoop@node01 bin]$ ./hadoop.sh start  # 启动hadoop集群<br>[hadoop@node01 bin]$ ./hadoop.sh stop   # 停止hadoop集群<br></code></pre></td></tr></table></figure><h5 id="第八步浏览器查看启动页面">第八步：浏览器查看启动页面</h5><p>hdfs集群访问地址</p><p>http://192.168.51.100:50070/</p><p>yarn集群访问地址</p><p>http://192.168.51.100:8088</p><p>jobhistory访问地址：</p><p>http://192.168.51.100:19888</p><p>==如果要关闭电脑时，清一定要按照以下顺序操作，否则集群可能会出问题==</p><ul><li><p>关闭hadoop集群</p></li><li><p>关闭虚拟机</p></li><li><p>关闭电脑</p></li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CAP】Git学习笔记</title>
    <link href="/2020/06/14/git/"/>
    <url>/2020/06/14/git/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>a <a href="http://git-scm.com/about/free-and-open-source">free and open source</a> distributed version control system designed to handle everything from small to very large projects with speed and efficiency.<span id="more"></span></p></blockquote><h3 id="常用命令">常用命令</h3><h5 id="git-config"><code>git config</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --list                               # 查看git所有配置<br>git config --global --unset user.name           # 删除用户<br>git config --global --edit                      # 编辑配置文件<br>git config --system --list                      # 查看系统配置<br>git config --global --list                      # 查看当前用户（global）配置<br>git config --local --list                       # 查看当前仓库配置信息<br></code></pre></td></tr></table></figure><h5 id="git-branch"><code>git branch</code></h5><p>创建、重命名、查看、删除项目分支，通过 Git 做项目开发时，一般都是在开发分支中进行，开发完成后合并分支到主干。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch &lt;some_branch&gt;                        # 创建分支<br>git branch -m &lt;old_branch&gt; &lt;new_branch&gt;         # 重命名分支<br>git branch -D &lt;some_branch&gt;                     # 删除分支<br>git branch                                      # 查看本地所有分支<br>git branch -a                                   # 查看所有分支（本地和远程）<br>git branch -r                                   # 查看远程版本库上的分支列表，加上 -d 参数可以删除远程版本库上的分支<br>git branch -vv                                  # 查看带有最后提交id、最近提交原因等信息的本地版本库分支列表<br></code></pre></td></tr></table></figure><h5 id="git-tag"><code>git tag</code></h5><p>为项目标记里程碑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git tag publish/xxx<br>git push origin publish/xxx<br></code></pre></td></tr></table></figure><p>当我们完成某个功能需求准备发布上线时，应该将此次完整的项目代码做个标记，并将这个标记好的版本发布到线上，这里我们以 publish/xxx 为标记名并发布，当看到命令行返回如下内容则表示发布成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Total 0 (delta 0), reused 0 (delta 0)<br>To https://github.com/xxx/xxx.github.com.git<br> * [new tag]         publish/xxx -&gt; publish/xxx<br>.gitignore<br></code></pre></td></tr></table></figure><h5 id="git-merge"><code>git merge</code></h5><p>将其它分支合并到当前分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge --squash<br><span class="hljs-meta">#</span><span class="bash">将待合并分支上的 commit 合并成一个新的 commit 放入当前分支，适用于待合并分支的提交记录不需要保留的情况</span><br><br>git merge --no-ff<br><span class="hljs-meta">#</span><span class="bash">默认情况下，Git 执行<span class="hljs-string">&quot;快进式合并&quot;</span>（fast-farward merge），会直接将 Master 分支指向 Develop 分支，使用 --no-ff 参数后，会执行正常合并，在 Master 分支上生成一个新节点，保证版本演进更清晰。</span><br><br>git merge --no-edit<br><span class="hljs-meta">#</span><span class="bash">在没有冲突的情况下合并，不想手动编辑提交原因，而是用 Git 自动生成的类似 Merge branch <span class="hljs-string">&#x27;test&#x27;</span>的文字直接提交</span><br></code></pre></td></tr></table></figure><h5 id="git-stash"><code>git stash</code></h5><p>在Git的栈中保存当前修改或删除的工作进度，当你在一个分支里做某项功能开发时，接到通知把昨天已经测试完没问题的代码发布到线上，但这时你已经在这个分支里加入了其它未提交的代码，这个时候就可以把这些未提交的代码存到栈里。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">git stash<br><span class="hljs-meta">#</span><span class="bash">将未提交的文件保存到Git栈中</span><br><br>git stash list<br><span class="hljs-meta">#</span><span class="bash">查看栈中保存的列表</span><br><br>git stash show stash@&#123;0&#125;<br><span class="hljs-meta">#</span><span class="bash">显示栈中其中一条记录</span><br><br>git stash drop stash@&#123;0&#125;<br><span class="hljs-meta">#</span><span class="bash">移除栈中其中一条记录</span><br><br>git stash pop<br><span class="hljs-meta">#</span><span class="bash">从Git栈中检出最新保存的一条记录，并将它从栈中移除</span><br><br>git stash apply stash@&#123;0&#125;<br><span class="hljs-meta">#</span><span class="bash">从Git栈中检出其中一条记录，但不从栈中移除</span><br><br>git stash branch new_banch<br><span class="hljs-meta">#</span><span class="bash">把当前栈中最近一次记录检出并创建一个新分支</span><br><br>git stash clear<br><span class="hljs-meta">#</span><span class="bash">清空栈里的所有记录</span><br><br>git stash create<br><span class="hljs-meta">#</span><span class="bash">为当前修改或删除的文件创建一个自定义的栈并返回一个ID，此时并未真正存储到栈里</span><br><br>git stash store xxxxxx<br><span class="hljs-meta">#</span><span class="bash">将 create 方法里返回的ID放到 store 后面，此时在栈里真正创建了一个记录，但当前修改或删除的文件并未从工作区移除</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> git stash create</span><br>09eb9a97ad632d0825be1ece361936d1d0bdb5c7<br><span class="hljs-meta">$</span><span class="bash"> git stash store 09eb9a97ad632d0825be1ece361936d1d0bdb5c7</span><br><span class="hljs-meta">$</span><span class="bash"> git stash list</span><br>stash@&#123;0&#125;: Created via &quot;git stash store&quot;<br></code></pre></td></tr></table></figure><h5 id="git-merge和git-rebase"><code>git merge</code>和<code>git rebase</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">* 33facc8  (master) Commit 3<br>|<br>| * 3b36f32  (second_branch) Detached commit<br>| |<br>|/<br>* 29af11f  Commit 2<br>|<br>* 1439f8e  Commit 1<br></code></pre></td></tr></table></figure><p>当在 <code>Commit 2</code> 创建分支 <code>second_branch</code> 写代码，并提交了一个 <code>commit</code>: <code>3b36f32</code>，在这之后，主干有人也提交了代码 <code>Commit 3</code></p><p>此时，如何把 <code>Commit 3</code> 拉到我们的分支继续开发？</p><p>这时候用 <code>git merge master</code> 或 <code>git rebase master</code> 都能更新 <code>second_branch</code>，也许有时候还要处理下冲突。但他们的结果却不相同。</p><p><img src="/images/git/git-merge-vs-rebase.jpg"></p><table><thead><tr class="header"><th style="text-align: center;"><strong>git merge master</strong></th><th><strong>git rebase master</strong></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">合并 <code>master</code> 的记录到分支，合并之后的所有 <code>commit</code> 会按提交时间从新到旧排列。</td><td>当前分支的 <code>HEAD</code> 会移动到 master 的结尾，但会变成一个新的 <code>commit</code>。</td></tr><tr class="even"><td style="text-align: center;">用 <code>git log --graph</code> 查看的话，会有一条<strong>丑陋的</strong>边！</td><td><code>git log --graph</code> 是一条漂亮的直线</td></tr><tr class="odd"><td style="text-align: center;">保持了所有 <code>commit</code> 的连贯性</td><td>commit<code>历史被修改了，</code>3b36f32<code>被修改成了</code>a018520</td></tr></tbody></table><h6 id="什么时候用-rebase什么时候用-merge">什么时候用 rebase，什么时候用 merge？</h6><ul><li>用 <code>merge</code> 来把分支合并到主干。</li><li>如果你的分支要跟别人共享，则<strong>不建议</strong>用 <code>rebase</code>，因为 <code>rebase</code> 会创建不一致的提交历史。</li><li>如果只有你个人开发推荐使用 <code>rebase</code>。</li><li>如果你想保留完整的提交历史，推荐使用 <code>merge</code>，<code>merge</code> 保留历史 而 <code>rebase</code> 重写历史。</li><li><code>rebase</code> 还可以压缩、简化历史，通过 <code>git rebase -i</code> 可以在分支合并到主干前，整理自己分支的提交历史，把很多细碎的 <code>commit</code> 整理成一条详细的 <code>commit</code>。</li><li><code>rebase</code> 一次只处理一个冲突，<code>merge</code> 则一次处理全部冲突。处理冲突 <code>rebase</code> 更方便，但如果有很多冲突的话，撤销一个 <code>rebase</code> 会比 <code>merge</code> 更复杂，<code>merge</code> 只需要撤销一次。</li></ul><h5 id="git-log"><code>git log</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git log -p                                      # 显示带提交差异对比的历史记录<br>git log demo.html                               # 显示 demo.html 文件的历史记录<br>git log --since=&quot;2 weeks ago&quot;                   # 显示2周前开始到现在的历史记录，其它时间可以类推<br>git log --before=&quot;2 weeks ago&quot;                  # 显示截止到2周前的历史记录，其它时间可以类推<br>git log -10                                     # 显示最近10条历史记录<br>git log f5f630a..HEAD                           # 显示从提交ID f5f630a 到 HEAD 之间的记录，HEAD 可以为空或其它提交ID<br>git log --pretty=oneline                        # 在一行中输出简短的历史记录<br>git log --pretty=format:&quot;%h&quot;                    # 格式化输出历史记录<br></code></pre></td></tr></table></figure><p>Git 用各种 placeholder 来决定各种显示内容，常用的显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash">H:                                             <span class="hljs-comment"># commit hash</span></span><br><span class="hljs-meta">%</span><span class="bash">h:                                             <span class="hljs-comment"># 缩短的commit hash</span></span><br><span class="hljs-meta">%</span><span class="bash">T:                                             <span class="hljs-comment"># tree hash</span></span><br><span class="hljs-meta">%</span><span class="bash">t:                                             <span class="hljs-comment"># 缩短的 tree hash</span></span><br><span class="hljs-meta">%</span><span class="bash">P:                                             <span class="hljs-comment"># parent hashes</span></span><br><span class="hljs-meta">%</span><span class="bash">p:                                             <span class="hljs-comment"># 缩短的 parent hashes</span></span><br><span class="hljs-meta">%</span><span class="bash">an:                                            <span class="hljs-comment"># 作者名字</span></span><br><span class="hljs-meta">%</span><span class="bash">aN:                                            <span class="hljs-comment"># mailmap的作者名</span></span><br><span class="hljs-meta">%</span><span class="bash">ae:                                            <span class="hljs-comment"># 作者邮箱</span></span><br><span class="hljs-meta">%</span><span class="bash">ad:                                            <span class="hljs-comment"># 日期 (--date= 制定的格式)</span></span><br><span class="hljs-meta">%</span><span class="bash">ar:                                            <span class="hljs-comment"># 日期, 相对格式(1 day ago)</span></span><br><span class="hljs-meta">%</span><span class="bash">cn:                                            <span class="hljs-comment"># 提交者名字</span></span><br><span class="hljs-meta">%</span><span class="bash">ce:                                            <span class="hljs-comment"># 提交者 email</span></span><br><span class="hljs-meta">%</span><span class="bash"><span class="hljs-built_in">cd</span>:                                            <span class="hljs-comment"># 提交日期 (--date= 制定的格式)</span></span><br><span class="hljs-meta">%</span><span class="bash">cr:                                            <span class="hljs-comment"># 提交日期, 相对格式(1 day ago)</span></span><br><span class="hljs-meta">%</span><span class="bash">d:                                             <span class="hljs-comment"># ref名称</span></span><br><span class="hljs-meta">%</span><span class="bash">s:                                             <span class="hljs-comment"># commit信息标题</span></span><br><span class="hljs-meta">%</span><span class="bash">b:                                             <span class="hljs-comment"># commit信息内容</span></span><br><span class="hljs-meta">%</span><span class="bash">n:                                             <span class="hljs-comment"># 换行</span></span><br></code></pre></td></tr></table></figure><h4 id="如果远端仓库没有与本地仓库关联">如果远端仓库没有与本地仓库关联</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 本地执行（远端需要创建于本地相同名称的项目）</span><br><span class="hljs-meta">$</span><span class="bash"> git init</span><br><span class="hljs-meta">$</span><span class="bash"> git remote add origin https://github.com/xxx/xxx.git</span><br><span class="hljs-meta">$</span><span class="bash"> git add -A</span><br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;first commit&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git push -u origin master</span><br></code></pre></td></tr></table></figure><h4 id="切换分支">切换分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status                                      # 查看git状态  <br>git branch                                      # 查看git分支  <br>git checkout feature/new_branch                 # 切换到feature/new_branch分支 <br></code></pre></td></tr></table></figure><h4 id="提交代码">提交代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .                                       # 添加数据到镜像仓库                                             <br>                                                # 提交单个文件，进入你要提交的文件目录          <br>                                                # git add &lt;你要提交的文件&gt; <br>git commit -m &#x27;你要写的注释&#x27;                      # 提交到本地镜像仓库<br>git push -u origin feature/new_branch           # 提交到远程镜像仓库<br></code></pre></td></tr></table></figure><h4 id="远程分支拉取到本地">远程分支拉取到本地</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -a                                   # 查询所有分支,包括远程分支 <br>git checkout -b release remotes/origin/release  # 将远程release分支拉取到本地，并在本地创建release分支<br></code></pre></td></tr></table></figure><p>绿色是当前所在本地分支，白色是本地分支，红色是远程分支 <img src="/images/git/git-a.png"></p><h4 id="分支代码拉取提交流程">分支代码拉取提交流程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 获取主干最新代码</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> &lt;repo&gt;</span> <br><span class="hljs-meta">$</span><span class="bash"> git checkout develop                        <span class="hljs-comment"># 切换到develop分支</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git pull                                    <span class="hljs-comment"># 同步分支</span></span> <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 新建一个开发分支my_feature</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git checkout -b feature/my_feature</span>  <br><span class="hljs-meta">$</span><span class="bash"> git branch                                  <span class="hljs-comment"># 确认已切换到当前分支</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 提交代码</span></span><br><span class="hljs-meta">$</span><span class="bash"> git add --all 或者 git add .                 <span class="hljs-comment"># 保存所有的修改变化</span></span>  <br><span class="hljs-meta">$</span><span class="bash"> git status                                  <span class="hljs-comment"># 查看发生变动的文件</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;implement api architecture&quot;</span>  <span class="hljs-comment"># 编辑备注</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git push origin -u feature/my_feature       <span class="hljs-comment"># 将分支代码push到服务器</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 合并分支feature/my_feature到develop</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git checkout develop</span> <br><span class="hljs-meta">$</span><span class="bash"> git pull                                    <span class="hljs-comment"># 确保develop分支是最新的</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff feature/my_feature</span>  <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 分支开发过程中，为了减少冲突，尽量要多与主干同步</span> <br><span class="hljs-meta">$</span><span class="bash"> git fetch origin</span> <br><span class="hljs-meta">$</span><span class="bash"> git rebase origin/develop</span> <br><span class="hljs-meta">$</span><span class="bash"> git add .                                   <span class="hljs-comment"># 解决冲突后add</span></span> <br><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">删除分支</span> <br><span class="hljs-meta">$</span><span class="bash"> git branch -d feature/my_feature</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">取消commit</span> <br><span class="hljs-meta">$</span><span class="bash"> git reset --hard &lt;commit <span class="hljs-built_in">log</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动图图解">动图图解</h3><h4 id="合并">合并</h4><p>拥有多个分支是很方便的，这样可以将不同的新修改互相隔离开，而且还能确保你不会意外地向生产代码推送未经许可或破损的代码修改。但一旦这些修改得到了批准许可，我们就需要将其部署到我们的生产分支中！</p><p>可将一个分支的修改融入到另一个分支的一种方式是执行 git merge。Git 可执行两种类型的合并：fast-forward 和 no-fast-forward。现在你可能分不清，但我们马上就来看看它们的差异所在。</p><h5 id="fast-forward----ff">Fast-forward (---ff)</h5><p>在当前分支相比于我们要合并的分支没有额外的提交（commit）时，可以执行 fast-forward 合并。Git 很懒，首先会尝试执行最简单的选项：fast-forward！这类合并不会创建新的提交，而是会将我们正在合并的分支上的提交直接合并到当前分支。</p><p><img src="/images/git/image1.gif"></p><p>完美！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。那么 no-fast-forward 又是什么意思呢？</p><h5 id="no-fast-foward----no-ff">No-fast-foward (---no-ff)</h5><p>如果你的当前分支相比于你想要合并的分支没有任何提交，那当然很好，但很遗憾现实情况很少如此！如果我们在当前分支上提交我们想要合并的分支不具备的改变，那么 git 将会执行 no-fast-forward 合并。</p><p>使用 no-fast-forward 合并时，Git 会在当前活动分支上创建新的 merging commit。这个提交的父提交（parent commit）即指向这个活动分支，也指向我们想要合并的分支！</p><p><img src="/images/git/image2.gif"></p><p>没什么大不了的，完美的合并！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。</p><h5 id="合并冲突">合并冲突</h5><p>尽管 Git 能够很好地决定如何合并分支以及如何向文件添加修改，但它并不总是能完全自己做决定。当我们想要合并的两个分支的同一文件中的同一行代码上有不同的修改，或者一个分支删除了一个文件而另一个分支修改了这个文件时，Git 就不知道如何取舍了。</p><p>在这样的情况下，Git 会询问你想要保留哪种选择？假设在这两个分支中，我们都编辑了 README.md 的第一行。</p><p><img src="/images/git/image3.png"></p><p>如果我们想把 dev 合并到 master，就会出现一个合并冲突：你想要标题是 Hello! 还是 Hey!？</p><p>当尝试合并这些分支时，Git 会向你展示冲突出现的位置。我们可以手动移除我们不想保留的修改，保存这些修改，再次添加这个已修改的文件，然后提交这些修改。</p><p><img src="/images/git/image4.gif"></p><p>完成！尽管合并冲突往往很让人厌烦，但这是合理的：Git 不应该瞎猜我们想要保留哪些修改。</p><h4 id="变基rebasing">变基（Rebasing）</h4><p>我们刚看到可通过执行 git merge 将一个分支的修改应用到另一个分支。另一种可将一个分支的修改融入到另一个分支的方式是执行 git rebase。</p><p>git rebase 会将当前分支的提交复制到指定的分支之上。</p><p><img src="/images/git/image5.gif"></p><p>完美，现在我们在 dev 分支上获取了 master 分支上的所有修改。</p><p>变基与合并有一个重大的区别：Git 不会尝试确定要保留或不保留哪些文件。我们执行 rebase 的分支总是含有我们想要保留的最新近的修改！这样我们不会遇到任何合并冲突，而且可以保留一个漂亮的、线性的 Git 历史记录。</p><p>上面这个例子展示了在 master 分支上的变基。但是，在更大型的项目中，你通常不需要这样的操作。git rebase 在为复制的提交创建新的 hash 时会修改项目的历史记录。</p><p>如果你在开发一个 feature 分支并且 master 分支已经更新过，那么变基就很好用。你可以在你的分支上获取所有更新，这能防止未来出现合并冲突。</p><h4 id="交互式变基interactive-rebase">交互式变基（Interactive Rebase）</h4><p>在为提交执行变基之前，我们可以修改它们！我们可以使用交互式变基来完成这一任务。交互式变基在你当前开发的分支上以及想要修改某些提交时会很有用。</p><p>在我们正在 rebase 的提交上，我们可以执行以下 6 个动作：</p><p>reword：修改提交信息；</p><p>edit：修改此提交；</p><p>squash：将提交融合到前一个提交中；</p><p>fixup：将提交融合到前一个提交中，不保留该提交的日志消息；</p><p>exec：在每个提交上运行我们想要 rebase 的命令；</p><p>drop：移除该提交。</p><p>很棒！这样我们就能完全控制我们的提交了。如果你想要移除一个提交，只需 drop 即可。</p><p><img src="/images/git/image6.gif"></p><p>如果你想把多个提交融合到一起以便得到清晰的提交历史，那也没有问题！</p><p><img src="/images/git/image7.gif"></p><p>交互式变基能为你在 rebase 时提供大量控制，甚至可以控制当前的活动分支。</p><h4 id="重置resetting">重置（Resetting）</h4><p>当我们不想要之前提交的修改时，就会用到这个命令。也许这是一个 WIP 提交或者可能是引入了 bug 的提交，这时候就要执行 git reset。</p><p>git reset 能让我们不再使用当前台面上的文件，让我们可以控制 HEAD 应该指向的位置。</p><h5 id="软重置">软重置</h5><p>软重置会将 HEAD 移至指定的提交（或与 HEAD 相比的提交的索引），而不会移除该提交之后加入的修改！</p><p>假设我们不想保留添加了一个 style.css 文件的提交 9e78i，而且我们也不想保留添加了一个 index.js 文件的提交 035cc。但是，我们确实又想要保留新添加的 style.css 和 index.js 文件！这是软重置的一个完美用例。</p><p><img src="/images/git/image8.gif"></p><p>输入 git status 后，你会看到我们仍然可以访问在之前的提交上做过的所有修改。这很好，这意味着我们可以修复这些文件的内容，之后再重新提交它们！</p><h5 id="硬重置">硬重置</h5><p>有时候我们并不想保留特定提交引入的修改。不同于软重置，我们应该再也无需访问它们。Git 应该直接将整体状态直接重置到特定提交之前的状态：这甚至包括你在工作目录中和暂存文件上的修改。</p><p><img src="/images/git/image9.gif"></p><p>Git 丢弃了 9e78i 和 035cc 引入的修改，并将状态重置到了 ec5be 的状态。</p><h4 id="还原reverting">还原（Reverting）</h4><p>另一种撤销修改的方法是执行 git revert。通过对特定的提交执行还原操作，我们会创建一个包含已还原修改的新提交。</p><p>假设 ec5be 添加了一个 index.js 文件。但之后我们发现其实我们再也不需要由这个提交引入的修改了。那就还原 ec5be 提交吧！</p><p><img src="/images/git/image10.gif"></p><p>完美！提交 9e78i 还原了由提交 ec5be 引入的修改。在撤销特定的提交时，git revert 非常有用，同时也不会修改分支的历史。</p><h4 id="拣选cherry-picking">拣选（Cherry-picking）</h4><p>当一个特定分支包含我们的活动分支需要的某个提交时，我们对那个提交执行 cherry-pick！对一个提交执行 cherry-pick 时，我们会在活动分支上创建一个新的提交，其中包含由拣选出来的提交所引入的修改。</p><p>假设 dev 分支上的提交 76d12 为 index.js 文件添加了一项修改，而我们希望将其整合到 master 分支中。我们并不想要整个 dev 分支，而只需要这个提交！</p><p><img src="/images/git/image11.gif"></p><p>现在 master 分支包含 76d12 引入的修改了。</p><h4 id="取回fetching">取回（Fetching）</h4><p>如果你有一个远程 Git 分支，比如在 GitHub 上的分支，当远程分支上包含当前分支没有的提交时，可以使用取回。比如当合并了另一个分支或你的同事推送了一个快速修复时。</p><p>通过在这个远程分支上执行 git fetch，我们就可在本地获取这些修改。这不会以任何方式影响你的本地分支：fetch 只是单纯地下载新的数据而已。</p><p><img src="/images/git/image12.gif"></p><p>现在我们可以看到自上次推送以来的所有修改了。这些新数据也已经在本地了，我们可以决定用这些新数据做什么了。</p><h4 id="拉取pulling">拉取（Pulling）</h4><p>尽管 git fetch 可用于获取某个分支的远程信息，但我们也可以执行 git pull。git pull 实际上是两个命令合成了一个：git fetch 和 git merge。当我们从来源拉取修改时，我们首先是像 git fetch 那样取回所有数据，然后最新的修改会自动合并到本地分支中。</p><p><img src="/images/git/image13.gif"></p><p>很好，我们现在与远程分支完美同步了，并且也有了所有最新的修改！</p><h4 id="reflog">Reflog</h4><p>每个人都会犯错，但犯错其实没啥！有时候你可能感觉你把 git repo 完全搞坏了，让你想完全删了了事。</p><p>git reflog 是一个非常有用的命令，可以展示已经执行过的所有动作的日志。包括合并、重置、还原，基本上包含你对你的分支所做的任何修改。</p><p><img src="/images/git/image14.gif"></p><p>如果你犯了错，你可以根据 reflog 提供的信息通过重置 HEAD 来轻松地重做！</p><p>假设我们实际上并不需要合并原有分支。当我们执行 git reflog 命令时，我们可以看到这个 repo 的状态在合并前位于 HEAD@{1}。那我们就执行一次 git reset，将 HEAD 重新指向在 HEAD@{1} 的位置。</p><p><img src="/images/git/image15.gif"></p><p>我们可以看到最新的动作已被推送给 reflog。</p><h3 id="octotree-chrome-github-浏览插件">Octotree: Chrome github 浏览插件</h3><p>可以把 github 项目的目录树结构展示出来</p><p><img src="/images/git/octotree_1.jpg"></p><p><img src="/images/git/octotree_2.jpg"></p><h4 id="github搜索">GitHub搜索</h4><p>假如，正在做一个python项目，正好要用到一个爬虫处理的框架，关键词就是 <strong>Spider</strong> ，那就可以先试试搜索项目名称里面包含 <strong>Spider</strong> 的项目：</p><h5 id="inname-spider">in:name Spider</h5><p><img src="/images/git/git_hub_1.jpg"></p><h5 id="inname-spider-stars3000">in:name Spider stars:&gt;3000</h5><p>如果 需要约束搜索结果的star数大于3000+</p><p><img src="/images/git/github_2.jpg"></p><h5 id="inname-spider-stars3000-forks1000">in:name Spider stars:&gt;3000 forks:&gt;1000</h5><p>如果需要更小范围, 可以约束fork数</p><p><img src="/images/git/github_3.jpg"></p><h5 id="inname-spider-stars3000-forks1000-languagepython">in:name Spider stars:&gt;3000 forks:&gt;1000 language:python</h5><p>当然，也可以约束语言</p><p><img src="/images/git/github_4.jpg"></p><h5 id="inreadme-spider-stars3000-forks1000-languagepython">in:readme Spider stars:&gt;3000 forks:&gt;1000 language:python</h5><p>如果不确定关键词是否会命中项目名称，那可以通过 <strong>readme</strong> 来搜索 。此时，就需要重新调整 star和fork数 了。</p><p><img src="/images/git/github_5.jpg"></p><h5 id="indescription-spider-stars3000-forks1000-languagepython">in:description Spider stars:&gt;3000 forks:&gt;1000 language:python</h5><p>如果，我们想要找的项目，想不到一个英文关键词去描述，怎么办？</p><p>这种情况下，我们直接用一种简单粗暴的方式，按照 <strong>description</strong> 的方式来搜索：</p><p><img src="/images/git/github_6.jpg"></p><h5 id="solution">Solution</h5><p>根据开源项目的主要组成部分：</p><p>​ ◆ name: 项目名</p><p>​ ◆ description: 项目的简要描述</p><p>​ ◆ 项目的源码</p><p>​ ◆ README.md: 项目的详细情况的介绍</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|      筛选条件       |            备注            |<br>| ------------------ | ------------------------- |<br>| in:name xxx        | 按照项目名搜索              ｜<br>| in:readme xxx      | 按照README搜索             ｜<br>| in:description xxx | 按照description搜索        ｜<br>| stars:&gt;xxx         | stars数大于xxx             ｜<br>| forks:&gt;xxx         | forks数大于xxx             ｜<br>| language:xxx       | 编程语言是xxx              ｜<br>| pushed:&gt;YYYY-MM-DD | 最后更新时间大于YYYY-MM-DD  ｜<br></code></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Algorithm】布隆过滤器</title>
    <link href="/2020/06/14/bloom/"/>
    <url>/2020/06/14/bloom/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>A <strong>Bloom filter</strong> is a space-efficient <a href="https://en.wikipedia.org/wiki/Probabilistic">probabilistic</a> <a href="https://en.wikipedia.org/wiki/Data_structure">data structure</a>, conceived by <a href="https://en.wikipedia.org/w/index.php?title=Burton_Howard_Bloom&amp;action=edit&amp;redlink=1">Burton Howard Bloom</a> in 1970, that is used to test whether an element is a member of a set.<span id="more"></span></p></blockquote><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bloom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】Windows下基于Django构建与开发在线学习项目</title>
    <link href="/2020/06/14/python-django-win/"/>
    <url>/2020/06/14/python-django-win/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>基于<code>Django2.2.6</code> <code>Python3.7</code>开发的入门级Web服务《supe-wa慕课小站》 <span id="more"></span></p><h3 id="项目创建">项目创建</h3><p><strong>1.安装第三方库Django</strong></p><p><img src="/images/python/django-web/1.png"></p><p><strong>2.pycharm创建Django项目</strong></p><p><img src="/images/python/django-web/2.png"></p><h3 id="数据库环境与资源层设置">数据库环境与资源层设置</h3><p><strong>3.安装mysql第三方库</strong></p><p><img src="/images/python/django-web/3.png"></p><p><strong>4.配置mysql数据库环境</strong></p><p><img src="/images/python/django-web/4.png"></p><p><strong>5.生成django默认数据表</strong></p><p>tool --&gt;Run manage.py task</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations </span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">migrate</span><br></code></pre></td></tr></table></figure><p><img src="/images/python/django-web/5.png"></p><p>查看数据表，会发现生成了django的数据表</p><p><img src="/images/python/django-web/5-1.png"></p><p><strong>6.创建一个app</strong></p><p>startapp user</p><p><img src="/images/python/django-web/6-1.png"></p><p>项目目录下会生成</p><p><img src="/images/python/django-web/6-2.png"></p><p><strong>7.自定义user表</strong></p><p>Django生成的user表</p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱,</li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><p>这些往往不能满足我们自身的需求，因此需要自定义user表，在user下的models.py文件添加代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TbUser</span>(<span class="hljs-params">AbstractUser</span>):</span><br>    nickname = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">50</span>, verbose_name=<span class="hljs-string">&#x27;昵称&#x27;</span>,)<br>    birthday = models.DateField(null=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;生日&#x27;</span>)<br>    gender = models.IntegerField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;男&#x27;</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;女&#x27;</span>)), verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>, default=<span class="hljs-number">1</span>)<br>    address = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">200</span>, verbose_name=<span class="hljs-string">&#x27;地址&#x27;</span>)<br>    phone = models.CharField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">11</span>, verbose_name=<span class="hljs-string">&#x27;手机&#x27;</span>)<br>    head = models.ImageField(upload_to=<span class="hljs-string">&#x27;image/%Y/%m&#x27;</span>, max_length=<span class="hljs-number">100</span>, verbose_name=<span class="hljs-string">&#x27;头像&#x27;</span>, default=<span class="hljs-string">&#x27;image/default_m.png&#x27;</span>) <span class="hljs-comment"># 注意这里的head使用ImageField，需要安装依赖库pip install pillow</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        db_table = <span class="hljs-string">&#x27;tb_user&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;用户信息&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.username<br></code></pre></td></tr></table></figure><p>修改settings.py文件</p><p><img src="/images/python/django-web/7-1.png"></p><p>在这里，def <strong>str</strong>(self)：方法在python3.x版本使用，用于后台展示样式是显示的是用户名。保存后，使用django敏玲重新生成表</p><p>tool --&gt;Run manage.py task</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">makemigrations <span class="hljs-keyword">user</span> <br><span class="hljs-title">migrate</span> user<br></code></pre></td></tr></table></figure><p>创建后台管理用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">createsuperuser</span><br></code></pre></td></tr></table></figure><p>填写用户名、邮箱和密码</p><p><img src="/images/python/django-web/7-2.png"></p><p>可以查看到数据库中新增一条数据</p><p><img src="/images/python/django-web/7-3.png"></p><p>这样就可以登录后台管理页面了</p><h3 id="后台集成">后台集成</h3><p><strong>8.集成xadmin组件</strong></p><p>python3.x无法直接使用安装包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install git+git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sshwsfc/</span>xadmin.git@django2<br></code></pre></td></tr></table></figure><p>或者访问<code>https://github.com/sshwsfc/xadmin/tree/django2</code>，</p><p>或<code>git clone -b django2  https://github.com/sshwsfc/xadmin.git</code>将xadmin目录下文件拷贝到项目下</p><p><img src="/images/python/django-web/8-1.png"></p><p>在settings.py文件下添加相应配置</p><p><img src="/images/python/django-web/8-2.png"></p><p>把urls中默认admin指向Xadmin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入 xadmin，替换admin</span><br><span class="hljs-keyword">import</span> xadmin<br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;xadmin/&#x27;</span>, xadmin.site.urls),, <span class="hljs-comment"># django2中也可以是 url(r&#x27;^xadmin/&#x27;, xadmin.site.urls)</span><br>]<br></code></pre></td></tr></table></figure><p>点击Tools 菜单下 Run manage.py Task</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations </span><br><span class="hljs-attribute">migrate</span><br></code></pre></td></tr></table></figure><p>访问http://127.0.0.1/admin/</p><p><img src="/images/python/django-web/8-3.png"></p><p>新建user/adminx.py，进行app model注册：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建xadmin的全局管理器并与view绑定。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseSetting</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># 开启主题功能</span><br>    enable_themes = <span class="hljs-literal">True</span><br>    use_bootswatch = <span class="hljs-literal">True</span><br><br><br><span class="hljs-comment"># xadmin 全局配置参数信息设置</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalSettings</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    site_title = <span class="hljs-string">&quot;supe-wa慕课小站&quot;</span><br>    site_footer = <span class="hljs-string">&quot;supe-wa慕课小站|后台管理系统&quot;</span><br>    <span class="hljs-comment"># 收起菜单</span><br>    menu_style = <span class="hljs-string">&quot;accordion&quot;</span><br>    <span class="hljs-comment"># 自定义导航楼目录</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_site_menu</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<br>            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourse, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;章节信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseLesson, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;视频信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseVideo, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程资源管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseResource, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程评论管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseComment, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>            )&#125;,<br>            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;机构信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;城市信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TcCityDict, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;机构信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbOrg, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;机构讲师管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbOrgTeacher, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>            )&#125;,<br>            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUser, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户验证管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbEmailVerifyRecord, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户课程管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserCourse, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户收藏管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserFavorite, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户消息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserMessage, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>            )&#125;,<br><br>            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;系统信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户咨询&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserAsk, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;首页轮播&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TcBanner, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户分组&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(Group, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户权限&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(Permission, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;日志记录&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(Log, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,<br>            )&#125;,)<br>            <br><span class="hljs-comment"># 将全局配置管理与view绑定注册</span><br>xadmin.site.register(views.CommAdminView, GlobalSettings)<br>xadmin.site.register(views.BaseAdminView, BaseSetting)<br></code></pre></td></tr></table></figure><p>登录后</p><p><img src="/images/python/django-web/8-4.png"></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css"><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
