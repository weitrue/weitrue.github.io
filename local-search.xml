<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Go】学习笔记</title>
    <link href="/2021/02/07/Golang/"/>
    <url>/2021/02/07/Golang/</url>
    
    <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量<a id="more"></a></h3><h4 id="var与"><a href="#var与" class="headerlink" title="var与:="></a>var与:=</h4><ul><li>:=方式较为简洁，但只能在函数内使用该方式，var方式没有这个限制，var方式定义在汉书外的变量属于包内部的变量</li><li>函数中以:=方式定义变量为主</li></ul><h4 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h4><ul><li>bool,string</li><li>(u)int, (u)int8, (u)int16, (u)int32, (u)int, uintptr</li><li>byte, rune</li><li>float32, float64, complex64, complex128</li><li>变量类型写在变量名之后</li><li>编译器可推测变量类型</li><li>没有char, 只有rune</li><li>原生支持复数类型</li></ul><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;math&quot;</span><span class="hljs-string">&quot;math/cmplx&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">euler</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 欧拉公式 e^(i*Pi) + 1 = 0</span>fmt.Println(cmplx.Exp(<span class="hljs-number">1i</span> * math.Pi) + <span class="hljs-number">1</span>)  fmt.Println(cmplx.Pow(math.E, <span class="hljs-number">1i</span> * math.Pi) + <span class="hljs-number">1</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;euler()&#125;<span class="hljs-comment">// 打印内容</span>(<span class="hljs-number">0</span>+<span class="hljs-number">1.2246467991473515e-16i</span>)(<span class="hljs-number">0</span>+<span class="hljs-number">1.2246467991473515e-16i</span>)</code></pre><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>go语言需要开发时强制类型转换，不会自动隐式转换</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangle</span><span class="hljs-params">()</span></span>  &#123;a, b := <span class="hljs-number">3</span>, <span class="hljs-number">4</span><span class="hljs-keyword">var</span> c <span class="hljs-keyword">int</span> c = math.Sqrt(a*a + b*b)                    <span class="hljs-comment">// 会在编译前idea便提示报错</span>  c = <span class="hljs-keyword">int</span>(math.Sqrt(<span class="hljs-keyword">float64</span>(a * a + b * b)))  <span class="hljs-comment">// 正确写法</span>fmt.Println(c)&#125;</code></pre><p>常量未声明类型，其类型是不确定的（数值可以作各种类型使用）</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">consts</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 强制类型转换</span><span class="hljs-keyword">const</span> a, b = <span class="hljs-number">3</span>, <span class="hljs-number">4</span><span class="hljs-keyword">var</span> c <span class="hljs-keyword">int</span>c = <span class="hljs-keyword">int</span>(math.Sqrt(a * a + b * b))    <span class="hljs-comment">// a * a + b * b 部分可以不用加上强制类型转换</span>fmt.Println(c)&#125;</code></pre><p>可以利用常量申明枚举类型</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">enums</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-keyword">const</span> (golang = <span class="hljs-literal">iota</span>_javapython)fmt.Println(golang, java, python)&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span></code></pre><p>可以以<code>iota</code>为基础，生成一系列枚举数</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">enums</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-keyword">const</span> (b = <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">10</span> * <span class="hljs-literal">iota</span>)kbmbgbtb)fmt.Println(b, kb, mb, gb, tb)&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">1</span> <span class="hljs-number">1024</span> <span class="hljs-number">1048576</span> <span class="hljs-number">1073741824</span> <span class="hljs-number">1099511627776</span></code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/variable.go">https://github.com/weitrue/note/blob/master/go/variable.go</a></p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针不能运算</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> a <span class="hljs-keyword">int</span> = <span class="hljs-number">2</span><span class="hljs-keyword">var</span> pa *<span class="hljs-keyword">int</span> = &amp;a*pa = <span class="hljs-number">3</span>fmt.Println(a)&#125;<span class="hljs-comment">// 运行结果</span><span class="hljs-number">3</span></code></pre><p>参数传递—只有<em>值传递</em>一种方式</p><pre><code class="hljs go"><span class="hljs-comment">// 内建类型值传递</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapV</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span></span> &#123;b, a = a, b&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;a, b := <span class="hljs-number">3</span>, <span class="hljs-number">4</span>swapV(a, b)fmt.Println(a, b)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapR</span><span class="hljs-params">(a, b *<span class="hljs-keyword">int</span>)</span></span> &#123;  <span class="hljs-comment">// 这种方式为交换变量地址</span>b, a = a, b&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;a, b := <span class="hljs-number">3</span>, <span class="hljs-number">4</span>swapR(&amp;a, &amp;b)fmt.Println(a, b)&#125;<span class="hljs-comment">// 通过交换变量地址达到址传递</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapR</span><span class="hljs-params">(a, b *<span class="hljs-keyword">int</span>)</span></span> &#123;*b, *a = *a, *b&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;a, b := <span class="hljs-number">3</span>, <span class="hljs-number">4</span>swapR(&amp;a, &amp;b)fmt.Println(a, b)&#125;</code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/pointer.go">https://github.com/weitrue/note/blob/master/go/pointer.go</a></p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组定义</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">define</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span>arr2 := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;arr3 := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;<span class="hljs-keyword">var</span> grid [<span class="hljs-number">4</span>][<span class="hljs-number">5</span>]<span class="hljs-keyword">bool</span>fmt.Println(arr1, arr2, arr3)fmt.Println(grid)&#125;<span class="hljs-comment">// 输出</span>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>] [<span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span>][[<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>] [<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>] [<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>] [<span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span> <span class="hljs-literal">false</span>]]</code></pre><p>[5]int和[10]int是不同类型</p><p>调用func f(arr [10]int)会<em>拷贝</em>数组</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printArr</span><span class="hljs-params">(arr [5]<span class="hljs-keyword">int</span>)</span></span>  &#123;arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr &#123;fmt.Println(i, v)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">arrTest</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span>arr2 := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;fmt.Println()printArr(arr2)fmt.Println()<span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr1 &#123;fmt.Println(i, v)&#125;&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">0</span> <span class="hljs-number">100</span><span class="hljs-number">1</span> <span class="hljs-number">0</span><span class="hljs-number">2</span> <span class="hljs-number">0</span><span class="hljs-number">3</span> <span class="hljs-number">0</span><span class="hljs-number">4</span> <span class="hljs-number">0</span><span class="hljs-number">0</span> <span class="hljs-number">100</span><span class="hljs-number">1</span> <span class="hljs-number">4</span><span class="hljs-number">2</span> <span class="hljs-number">6</span><span class="hljs-number">3</span> <span class="hljs-number">8</span><span class="hljs-number">4</span> <span class="hljs-number">10</span><span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-number">1</span> <span class="hljs-number">0</span><span class="hljs-number">2</span> <span class="hljs-number">0</span><span class="hljs-number">3</span> <span class="hljs-number">0</span><span class="hljs-number">4</span> <span class="hljs-number">0</span></code></pre><p>若要改变数组的值 需要传入数组的地址，因此go语言一般不使用数组</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printArrR</span><span class="hljs-params">(arr *[5]<span class="hljs-keyword">int</span>)</span></span>  &#123;arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> arr &#123;fmt.Println(i, v)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">arrTest</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-keyword">int</span>printArrR(&amp;arr1)fmt.Println()fmt.Println(arr1)&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">0</span> <span class="hljs-number">100</span><span class="hljs-number">1</span> <span class="hljs-number">0</span><span class="hljs-number">2</span> <span class="hljs-number">0</span><span class="hljs-number">3</span> <span class="hljs-number">0</span><span class="hljs-number">4</span> <span class="hljs-number">0</span>[<span class="hljs-number">100</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]</code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/collections/array.go">https://github.com/weitrue/note/blob/master/go/collections/array.go</a></p><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><ul><li><p>slice可以向后扩展，但不能向前扩展</p></li><li><p>s[i]不可超越len(s)，向后扩展不可以超越底层数组cap(s)</p></li></ul><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slice</span><span class="hljs-params">()</span></span> &#123;arr := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;s1 := arr[<span class="hljs-number">2</span>: <span class="hljs-number">6</span>]fmt.Println(s1)s2 := s1[<span class="hljs-number">3</span>: <span class="hljs-number">5</span>]fmt.Println(s2)  s3 := s1[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>]fmt.Println(s3)&#125;<span class="hljs-comment">//输出</span>[<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>][<span class="hljs-number">6</span> <span class="hljs-number">7</span>]<span class="hljs-built_in">panic</span>: runtime error: slice bounds out of <span class="hljs-keyword">range</span> [:<span class="hljs-number">6</span>] with capacity <span class="hljs-number">5</span>goroutine <span class="hljs-number">1</span> [running]:main.sliceDefine()        ~/Projects/golang/src/offer/note/slices.<span class="hljs-keyword">go</span>:<span class="hljs-number">20</span> +<span class="hljs-number">0x164</span>main.main()        ~/Projects/golang/src/offer/note/ab_test_func.<span class="hljs-keyword">go</span>:<span class="hljs-number">28</span> +<span class="hljs-number">0x20</span></code></pre><p><img src="/images/Golang/slice.png"></p><ul><li><p>向slice添加元素，如果超越cap，系统会自动分配更大的底层数组</p></li><li><p>由于值传递的原因，必须接收append的返回值<code>s=append(s, val)</code></p></li></ul><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sliceAppend</span><span class="hljs-params">()</span></span> &#123;arr := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;s1 := arr[<span class="hljs-number">2</span>: <span class="hljs-number">6</span>]fmt.Println(s1, <span class="hljs-built_in">cap</span>(s1), <span class="hljs-built_in">len</span>(s1))s2 := s1[<span class="hljs-number">3</span>: <span class="hljs-number">5</span>]fmt.Println(s2)s3 := <span class="hljs-built_in">append</span>(s2, <span class="hljs-number">10</span>)s4 := <span class="hljs-built_in">append</span>(s3, <span class="hljs-number">11</span>)s5 := <span class="hljs-built_in">append</span>(s4, <span class="hljs-number">12</span>)fmt.Println(<span class="hljs-string">&quot;s3, s4, s5=&quot;</span>, s3, s4, s5)fmt.Println(arr)    s6 := <span class="hljs-built_in">append</span>(s1, <span class="hljs-number">10</span>)s7 := <span class="hljs-built_in">append</span>(s6, <span class="hljs-number">11</span>)s8 := <span class="hljs-built_in">append</span>(s7, <span class="hljs-number">12</span>)fmt.Println(<span class="hljs-string">&quot;s6, s7, s8=&quot;</span>, s6, s7, s8)fmt.Println(<span class="hljs-string">&quot;cap(s6), cap(s7), cap(s8) =&quot;</span>, <span class="hljs-built_in">cap</span>(s6), <span class="hljs-built_in">cap</span>(s7), <span class="hljs-built_in">cap</span>(s8))fmt.Println(arr)&#125;<span class="hljs-comment">// 输出</span>[<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] <span class="hljs-number">6</span> <span class="hljs-number">4</span>[<span class="hljs-number">6</span> <span class="hljs-number">7</span>]s3, s4, s5= [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span>] [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]<span class="hljs-built_in">cap</span>(s3), <span class="hljs-built_in">cap</span>(s4), <span class="hljs-built_in">cap</span>(s5) = <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span>]s6, s7, s8= [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>] [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span>]<span class="hljs-built_in">cap</span>(s6), <span class="hljs-built_in">cap</span>(s7), <span class="hljs-built_in">cap</span>(s8) = <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">12</span>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]</code></pre><ul><li>Zero value for slice is nil</li></ul><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sliceDefine</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> s []<span class="hljs-keyword">int</span><span class="hljs-keyword">for</span> i :=<span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10</span>; i++ &#123;fmt.Printf(<span class="hljs-string">&quot;%v, cap(s) = %d, len(s) = %d\n&quot;</span>, s, <span class="hljs-built_in">cap</span>(s), <span class="hljs-built_in">len</span>(s))s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">2</span>*i + <span class="hljs-number">1</span>)&#125;s1 := []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;fmt.Printf(<span class="hljs-string">&quot;%v, cap(s1) = %d, len(s1) = %d\n&quot;</span>, s1, <span class="hljs-built_in">cap</span>(s1), <span class="hljs-built_in">len</span>(s1))s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">8</span>)fmt.Printf(<span class="hljs-string">&quot;%v, cap(s2) = %d, len(s2) = %d\n&quot;</span>, s2, <span class="hljs-built_in">cap</span>(s2), <span class="hljs-built_in">len</span>(s2))s3 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>)fmt.Printf(<span class="hljs-string">&quot;%v, cap(s3) = %d, len(s3) = %d\n&quot;</span>, s3, <span class="hljs-built_in">cap</span>(s3), <span class="hljs-built_in">len</span>(s3))<span class="hljs-comment">// 拷贝</span><span class="hljs-built_in">copy</span>(s2, s1)fmt.Printf(<span class="hljs-string">&quot;%v, cap(s2) = %d, len(s2) = %d\n&quot;</span>, s2, <span class="hljs-built_in">cap</span>(s2), <span class="hljs-built_in">len</span>(s2))<span class="hljs-comment">// 删除 没有内建函数，只能通过截取+append</span>s4 := <span class="hljs-built_in">append</span>(s2[:<span class="hljs-number">2</span>], s2[<span class="hljs-number">3</span>:]...)fmt.Printf(<span class="hljs-string">&quot;%v, cap(s4) = %d, len(s4) = %d\n&quot;</span>, s4, <span class="hljs-built_in">cap</span>(s4), <span class="hljs-built_in">len</span>(s4))&#125;<span class="hljs-comment">//输出</span>[], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">0</span>[<span class="hljs-number">1</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">1</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">2</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">3</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">4</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">4</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">5</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">6</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">7</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">8</span>[<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span> <span class="hljs-number">13</span> <span class="hljs-number">15</span> <span class="hljs-number">17</span>], <span class="hljs-built_in">cap</span>(s) = <span class="hljs-number">16</span>, <span class="hljs-built_in">len</span>(s) = <span class="hljs-number">9</span>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>], <span class="hljs-built_in">cap</span>(s1) = <span class="hljs-number">3</span>, <span class="hljs-built_in">len</span>(s1) = <span class="hljs-number">3</span>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s2) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s2) = <span class="hljs-number">8</span>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s3) = <span class="hljs-number">32</span>, <span class="hljs-built_in">len</span>(s3) = <span class="hljs-number">8</span>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s2) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s2) = <span class="hljs-number">8</span>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>], <span class="hljs-built_in">cap</span>(s4) = <span class="hljs-number">8</span>, <span class="hljs-built_in">len</span>(s4) = <span class="hljs-number">7</span></code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/collections/slices.go">https://github.com/weitrue/note/blob/master/go/collections/slices.go</a></p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ul><li><p>创建<code>make(map[type]type)</code></p></li><li><p>key不存在时，获取value类型的初始值，需要<code>if value, ok := m[key]; ok &#123;...&#125;</code> 判断是否存在key</p></li><li><p>map使用哈希表，必须可以比较相等</p></li><li><p>除了slice, map,function的内建类型都可以作为map的key,Struct类型不包含上述字段时，也可作为key</p></li></ul><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mapDefine</span><span class="hljs-params">()</span></span>  &#123;m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">2</span>: <span class="hljs-string">&quot;bb&quot;</span>,&#125;<span class="hljs-keyword">if</span> v, ok := m[<span class="hljs-number">3</span>]; ok &#123;fmt.Println(v)&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;key not exists&quot;</span>)&#125;&#125;<span class="hljs-comment">//输出</span><span class="hljs-built_in">panic</span>: key not existsgoroutine <span class="hljs-number">1</span> [running]:main.mapDefine()        /Users/wangpeng/Projects/golang/src/offer/note/maps.<span class="hljs-keyword">go</span>:<span class="hljs-number">20</span> +<span class="hljs-number">0x1f6</span>main.main()        /Users/wangpeng/Projects/golang/src/offer/note/ab_test_func.<span class="hljs-keyword">go</span>:<span class="hljs-number">32</span> +<span class="hljs-number">0x20</span></code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/collections/maps.go">https://github.com/weitrue/note/blob/master/go/collections/maps.go</a></p><h4 id="Rune"><a href="#Rune" class="headerlink" title="Rune"></a>Rune</h4><p>字符串在UTF-8编码中，一个中文占三个字节，</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strByte</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span></span>  &#123;<span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> &#123;s = <span class="hljs-string">&quot;yes,我喜欢你！&quot;</span>&#125;<span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">byte</span>(s) &#123;fmt.Printf(<span class="hljs-string">&quot;(%d, %X)&quot;</span>, i, ch)&#125;fmt.Println()  <span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> s &#123; <span class="hljs-comment">// ch is a rune 其实是将s进行utf-8解码，解码后的字符会转成unicode,然后放入rune中</span>fmt.Printf(<span class="hljs-string">&quot;(%d, %X)&quot;</span>, i, ch)&#125;fmt.Println()  bytes := []<span class="hljs-keyword">byte</span>(s)<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(bytes) &gt;<span class="hljs-number">0</span> &#123;ch, size := utf8.DecodeRune(bytes)bytes = bytes[size:]fmt.Printf(<span class="hljs-string">&quot;%c &quot;</span>, ch)&#125;fmt.Println()<span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">rune</span>(s) &#123;fmt.Printf(<span class="hljs-string">&quot;(%d, %X)&quot;</span>, i, ch)&#125;&#125;<span class="hljs-comment">// 输出</span>(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">73</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>C)(<span class="hljs-number">4</span>, E6)(<span class="hljs-number">5</span>, <span class="hljs-number">88</span>)(<span class="hljs-number">6</span>, <span class="hljs-number">91</span>)(<span class="hljs-number">7</span>, E5)(<span class="hljs-number">8</span>, <span class="hljs-number">96</span>)(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>C)(<span class="hljs-number">10</span>, E6)(<span class="hljs-number">11</span>, AC)(<span class="hljs-number">12</span>, A2)(<span class="hljs-number">13</span>, E4)(<span class="hljs-number">14</span>, BD)(<span class="hljs-number">15</span>, A0)(<span class="hljs-number">16</span>, EF)(<span class="hljs-number">17</span>, BC)(<span class="hljs-number">18</span>, <span class="hljs-number">81</span>)(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">73</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>C)(<span class="hljs-number">4</span>, <span class="hljs-number">6211</span>)(<span class="hljs-number">7</span>, <span class="hljs-number">559</span>C)(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>B22)(<span class="hljs-number">13</span>, <span class="hljs-number">4</span>F60)(<span class="hljs-number">16</span>, FF01)y e s , 我 喜 欢 你 ！(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">65</span>)(<span class="hljs-number">2</span>, <span class="hljs-number">73</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>C)(<span class="hljs-number">4</span>, <span class="hljs-number">6211</span>)(<span class="hljs-number">5</span>, <span class="hljs-number">559</span>C)(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>B22)(<span class="hljs-number">7</span>, <span class="hljs-number">4</span>F60)(<span class="hljs-number">8</span>, FF01)</code></pre><p>因此在需要使用rune</p><pre><code class="hljs go"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Version: 1.0.0</span><span class="hljs-comment"> * Description: 获取字符串中不重复字串最大长度</span><span class="hljs-comment"> **/</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNoRepeated</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;  <span class="hljs-comment">// 仅支持英文字符</span><span class="hljs-comment">// 字符下标映射</span>  chNotRepeatIndex := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">byte</span>] <span class="hljs-keyword">int</span>)<span class="hljs-comment">// 最长串起始位置</span>  start := <span class="hljs-number">0</span>  <span class="hljs-comment">// 最长串长度</span>maxLength := <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">byte</span>(s) &#123; <span class="hljs-keyword">if</span> lastI, ok := chNotRepeatIndex[ch]; ok &amp;&amp; lastI &gt;= start &#123; start = lastI + <span class="hljs-number">1</span>&#125;<span class="hljs-keyword">if</span> i - start + <span class="hljs-number">1</span> &gt; maxLength &#123;maxLength = i - start + <span class="hljs-number">1</span>&#125;chNotRepeatIndex[ch] = i &#125; <span class="hljs-keyword">return</span> maxLength&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxNoRepeatedChn</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;  <span class="hljs-comment">// 通过rune</span>chNotRepeatIndex := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">rune</span>] <span class="hljs-keyword">int</span>)start := <span class="hljs-number">0</span>maxLength := <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i, ch := <span class="hljs-keyword">range</span> []<span class="hljs-keyword">rune</span>(s) &#123;<span class="hljs-keyword">if</span> lastI, ok := chNotRepeatIndex[ch]; ok &amp;&amp; lastI &gt;= start &#123;start = lastI + <span class="hljs-number">1</span>&#125;<span class="hljs-keyword">if</span> i - start + <span class="hljs-number">1</span> &gt; maxLength &#123;maxLength = i - start + <span class="hljs-number">1</span>&#125;chNotRepeatIndex[ch] = i&#125;<span class="hljs-keyword">return</span> maxLength&#125;</code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/collections/strings.go">https://github.com/weitrue/note/blob/master/go/collections/strings.go</a></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>仅<em>支持封装</em>，不支持继承和多态</p><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;Value       <span class="hljs-keyword">int</span>Left, Right *Node&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node Node)</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span> &#123;fmt.Print(node.Value, <span class="hljs-string">&quot; &quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span> <span class="hljs-title">SetValue</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;  <span class="hljs-comment">// 接收者使用指针才可以改变结构内容</span><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;fmt.Println(<span class="hljs-string">&quot;Setting Value to nil node. Ignored.&quot;</span>)<span class="hljs-keyword">return</span>&#125;node.Value = value&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node Node)</span> <span class="hljs-title">SetValueNotUpdate</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;  <span class="hljs-comment">// 值传递 node内容无法改变</span><span class="hljs-keyword">if</span> &amp;node == <span class="hljs-literal">nil</span> &#123;fmt.Println(<span class="hljs-string">&quot;Setting Value to nil node. Ignored.&quot;</span>)<span class="hljs-keyword">return</span>&#125;node.Value = value&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CreateNode</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Node</span></span> &#123;  <span class="hljs-comment">// 返回局部变量地址，这样变量会在堆中声明，可以传到外部</span><span class="hljs-keyword">return</span> &amp;Node&#123;Value: value&#125;&#125;</code></pre><p>方法有接收者（值/指针接收者），需要改变内容必须使用指针接收者，结构体过大考虑用指针接收者</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  node := Node&#123;&#125;node.Print()node.SetValueNotUpdate(<span class="hljs-number">10</span>)node.Print()node.SetValue(<span class="hljs-number">10</span>)node.Print()&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span></code></pre><p>nil也可以调用方法</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <span class="hljs-keyword">var</span> pNode *NodepNode.SetValue(<span class="hljs-number">30</span>)&#125;<span class="hljs-comment">// 输出</span>Setting Value to <span class="hljs-literal">nil</span> node. Ignored.</code></pre><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  <span class="hljs-keyword">var</span> pNode *NodepNode.SetValueNotUpdate(<span class="hljs-number">20</span>)&#125;<span class="hljs-comment">// 输出</span><span class="hljs-built_in">panic</span>: runtime error: invalid memory address or <span class="hljs-literal">nil</span> pointer dereference[signal SIGSEGV: segmentation violation code=<span class="hljs-number">0x1</span> addr=<span class="hljs-number">0x0</span> pc=<span class="hljs-number">0x109d0af</span>]goroutine <span class="hljs-number">1</span> [running]:main.main()        ～/Projects/golang/src/offer/note/ab_test_func.<span class="hljs-keyword">go</span>:<span class="hljs-number">50</span> +<span class="hljs-number">0x1f</span></code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/object/tree.go">https://github.com/weitrue/note/blob/master/go/object/tree.go</a></p><h4 id="封装与包"><a href="#封装与包" class="headerlink" title="封装与包"></a>封装与包</h4><p>首字母大写:public，首字母小写:private</p><p>为结构体定义的方法需要放在一个包下（可以是不同的文件）</p><p>扩充系统类型或者自定义类型方式：定义别名和使用组合</p><pre><code class="hljs go"><span class="hljs-keyword">type</span> Queue []<span class="hljs-keyword">int</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Push</span><span class="hljs-params">(val <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">error</span></span> &#123;*q = <span class="hljs-built_in">append</span>(*q, val)<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">bool</span>)</span></span> &#123;<span class="hljs-keyword">if</span> q.IsEmpty() &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>&#125;head := (*q)[<span class="hljs-number">0</span>]*q = (*q)[<span class="hljs-number">1</span>:]<span class="hljs-keyword">return</span> head, <span class="hljs-literal">true</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q) == <span class="hljs-number">0</span>&#125;</code></pre><pre><code class="hljs go"><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;Value       <span class="hljs-keyword">int</span>Left, Right *Node&#125;<span class="hljs-keyword">type</span> MyNode <span class="hljs-keyword">struct</span> &#123;node *Node&#125;</code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/object/queue.go">https://github.com/weitrue/note/blob/master/go/object/queue.go</a></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h4><p>接口由使用者定义</p><p>​    Python的在运行时才能知道被调用的对象是否实现某个方法</p><p>​    Java中编译前，调用的对象就必须实现接口所有方法</p><p>接口变量自带指针（参数传递也是值传递），因此几乎不需要使用接口指针    </p><p><img src="/images/Golang/interface.png"></p><pre><code class="hljs go"><span class="hljs-comment">// offer/note/interfaces/mock/duck.go</span><span class="hljs-keyword">package</span> mock<span class="hljs-keyword">type</span> Duck <span class="hljs-keyword">struct</span> &#123;Name <span class="hljs-keyword">string</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;  <span class="hljs-comment">// 实现者没有指明实现了哪个接口</span><span class="hljs-keyword">if</span> d.Name != <span class="hljs-string">&quot;&quot;</span> &#123;<span class="hljs-keyword">return</span> d.Name&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是一个鸭子！&quot;</span>&#125;&#125;<span class="hljs-comment">// offer/note/interfaces/duckI.go</span><span class="hljs-keyword">package</span> interfaces<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-keyword">type</span> DuckI <span class="hljs-keyword">interface</span> &#123;  <span class="hljs-comment">// 使用接口者 定义方法</span>GetName() <span class="hljs-keyword">string</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FindDuck</span><span class="hljs-params">(d DuckI)</span></span>  &#123; <span class="hljs-comment">// 接口变量自带指针</span>name := d.GetName()fmt.Println(name)&#125;<span class="hljs-comment">// offer/note/main.go</span><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;offer/note/interfaces&quot;</span><span class="hljs-string">&quot;offer/note/interfaces/mock&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  interfaces.FindDuck(&amp;mock.Duck&#123;&#125;)  interfaces.FindDuck(&amp;mock.Duck&#123;Name:<span class="hljs-string">&quot;这是一只假鸭子&quot;</span>&#125;)&#125;<span class="hljs-comment">// 输出</span>这是一个鸭子！这是一只假鸭子</code></pre><h4 id="任何类型"><a href="#任何类型" class="headerlink" title="任何类型"></a>任何类型</h4><p><code>interface&#123;&#125;</code></p><pre><code class="hljs go"><span class="hljs-keyword">type</span> Queue []<span class="hljs-keyword">interface</span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Push</span><span class="hljs-params">(val <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;*q = <span class="hljs-built_in">append</span>(*q, val)<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">Pop</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;,<span class="hljs-keyword">bool</span>)</span></span> &#123;<span class="hljs-keyword">if</span> q.IsEmpty() &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>&#125;head := (*q)[<span class="hljs-number">0</span>]*q = (*q)[<span class="hljs-number">1</span>:]<span class="hljs-keyword">return</span> head, <span class="hljs-literal">true</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queue)</span><span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q) == <span class="hljs-number">0</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  q := interfaces.Queue&#123;&#125;_ = q.Push(<span class="hljs-string">&quot;asd&quot;</span>)_ = q.Push(<span class="hljs-number">123</span>)<span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;fmt.Println(v)&#125;<span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;fmt.Println(v)&#125;&#125;<span class="hljs-comment">// 输出</span>asd<span class="hljs-number">123</span></code></pre><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><pre><code class="hljs go"><span class="hljs-comment">// offer/note/interfaces/animals.go</span><span class="hljs-keyword">package</span> animal<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-keyword">type</span> AnimalsI <span class="hljs-keyword">interface</span> &#123;DuckIBehaviorI&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DuckBehavior</span><span class="hljs-params">(a AnimalsI)</span></span>  &#123;name := a.GetName()dark := a.Shout(<span class="hljs-string">&quot;呱呱乱叫&quot;</span>)fmt.Println(name, dark)  fmt.Println(a.String())&#125;<span class="hljs-comment">// offer/note/interfaces/behaviorI.go</span><span class="hljs-keyword">package</span> animal<span class="hljs-keyword">type</span> BehaviorI <span class="hljs-keyword">interface</span> &#123;Shout(dark <span class="hljs-keyword">string</span>) <span class="hljs-keyword">string</span>&#125;<span class="hljs-comment">// offer/note/interfaces/duckI.go</span><span class="hljs-keyword">package</span> animal<span class="hljs-keyword">type</span> DuckI <span class="hljs-keyword">interface</span> &#123;GetName() <span class="hljs-keyword">string</span>&#125;<span class="hljs-comment">// offer/note/interfaces/mock/duck.go</span><span class="hljs-keyword">package</span> mock<span class="hljs-keyword">type</span> Duck <span class="hljs-keyword">struct</span> &#123;name <span class="hljs-keyword">string</span>bark <span class="hljs-keyword">string</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">GetName</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">if</span> d.name != <span class="hljs-string">&quot;&quot;</span> &#123;<span class="hljs-keyword">return</span> d.name&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是一个鸭子&quot;</span>&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">Shout</span><span class="hljs-params">(dark <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">if</span> d.bark == <span class="hljs-string">&quot;&quot;</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;呱呱呱呱的叫&quot;</span>&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> dark&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Duck)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;<span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Duck: &#123; name = %s, bark = %s &#125;&quot;</span>, d.name, d.bark)&#125;<span class="hljs-comment">// 输出</span>这是一个鸭子 呱呱呱呱的叫Duck: &#123; name = , bark =  &#125;</code></pre><p><a href="https://github.com/weitrue/note/tree/master/go/interfaces">https://github.com/weitrue/note/tree/master/go/interfaces</a></p><h4 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h4><ul><li><code>Stringer</code>相当于toString()</li></ul><pre><code class="hljs go"><span class="hljs-keyword">type</span> Stringer <span class="hljs-keyword">interface</span> &#123;String() <span class="hljs-keyword">string</span>&#125;</code></pre><ul><li><code>Reader</code></li><li><code>Writer</code></li></ul><pre><code class="hljs go"><span class="hljs-comment">// io/io.go</span><span class="hljs-comment">// Reader is the interface that wraps the basic Read method.</span><span class="hljs-comment">//</span><span class="hljs-comment">// Read reads up to len(p) bytes into p. It returns the number of bytes</span><span class="hljs-comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span><span class="hljs-comment">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span><span class="hljs-comment">// If some data is available but not len(p) bytes, Read conventionally</span><span class="hljs-comment">// returns what is available instead of waiting for more.</span><span class="hljs-comment">//</span><span class="hljs-comment">// When Read encounters an error or end-of-file condition after</span><span class="hljs-comment">// successfully reading n &gt; 0 bytes, it returns the number of</span><span class="hljs-comment">// bytes read. It may return the (non-nil) error from the same call</span><span class="hljs-comment">// or return the error (and n == 0) from a subsequent call.</span><span class="hljs-comment">// An instance of this general case is that a Reader returning</span><span class="hljs-comment">// a non-zero number of bytes at the end of the input stream may</span><span class="hljs-comment">// return either err == EOF or err == nil. The next Read should</span><span class="hljs-comment">// return 0, EOF.</span><span class="hljs-comment">//</span><span class="hljs-comment">// Callers should always process the n &gt; 0 bytes returned before</span><span class="hljs-comment">// considering the error err. Doing so correctly handles I/O errors</span><span class="hljs-comment">// that happen after reading some bytes and also both of the</span><span class="hljs-comment">// allowed EOF behaviors.</span><span class="hljs-comment">//</span><span class="hljs-comment">// Implementations of Read are discouraged from returning a</span><span class="hljs-comment">// zero byte count with a nil error, except when len(p) == 0.</span><span class="hljs-comment">// Callers should treat a return of 0 and nil as indicating that</span><span class="hljs-comment">// nothing happened; in particular it does not indicate EOF.</span><span class="hljs-comment">//</span><span class="hljs-comment">// Implementations must not retain p.</span><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;Read(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)&#125;<span class="hljs-comment">// Writer is the interface that wraps the basic Write method.</span><span class="hljs-comment">//</span><span class="hljs-comment">// Write writes len(p) bytes from p to the underlying data stream.</span><span class="hljs-comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span><span class="hljs-comment">// and any error encountered that caused the write to stop early.</span><span class="hljs-comment">// Write must return a non-nil error if it returns n &lt; len(p).</span><span class="hljs-comment">// Write must not modify the slice data, even temporarily.</span><span class="hljs-comment">//</span><span class="hljs-comment">// Implementations must not retain p.</span><span class="hljs-keyword">type</span> Writer <span class="hljs-keyword">interface</span> &#123;Write(p []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)&#125;<span class="hljs-comment">// ReadWriter is the interface that groups the basic Read and Write methods.</span><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;ReaderWriter&#125;</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>函数可以有多个返回值，并且这些返回值可以起别名（别名多用于简单函数），别名与调用者的申明变量并无关联</li></ul><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">eval</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>, op <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;<span class="hljs-keyword">switch</span> op &#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<span class="hljs-keyword">return</span>  a + b, <span class="hljs-literal">nil</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<span class="hljs-keyword">return</span> a - b, <span class="hljs-literal">nil</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<span class="hljs-keyword">return</span> a * b, <span class="hljs-literal">nil</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:r, _ := div(a, b)<span class="hljs-keyword">return</span> r, <span class="hljs-literal">nil</span><span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, fmt.Errorf(<span class="hljs-string">&quot;unsupported operation&quot;</span>)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">div</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(q, r <span class="hljs-keyword">int</span>)</span></span> &#123;<span class="hljs-keyword">return</span> a/b, a%b&#125;</code></pre><ul><li><em>一等公民</em> :变量、参数、返回值均可以是函数</li></ul><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;math&quot;</span><span class="hljs-string">&quot;reflect&quot;</span><span class="hljs-string">&quot;runtime&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">apply</span><span class="hljs-params">(op <span class="hljs-keyword">func</span>(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span>, <span class="hljs-title">a</span>, <span class="hljs-title">b</span> <span class="hljs-title">int</span>) <span class="hljs-title">float64</span></span> &#123;<span class="hljs-comment">//</span>p := reflect.ValueOf(op).Pointer()opName := runtime.FuncForPC(p).Name()fmt.Printf(<span class="hljs-string">&quot;Calling function %s with params (%d, %d)\n&quot;</span>, opName, a, b)<span class="hljs-keyword">return</span> op(<span class="hljs-keyword">int</span>(a), <span class="hljs-keyword">int</span>(b))&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pow</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span></span> &#123;<span class="hljs-keyword">return</span> math.Pow(<span class="hljs-keyword">float64</span>(a), <span class="hljs-keyword">float64</span>(b))&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;fmt.Println(apply(pow, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<span class="hljs-comment">// 匿名函数方式</span>fmt.Println(apply(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f, f2 <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">float64</span></span> &#123;<span class="hljs-keyword">return</span> math.Pow(<span class="hljs-keyword">float64</span>(f), <span class="hljs-keyword">float64</span>(f2))&#125;, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))&#125;<span class="hljs-comment">// 打印结果</span>Calling function main.pow with params (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<span class="hljs-number">81</span>Calling function main.main.func1 with params (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<span class="hljs-number">81</span></code></pre><ul><li>可变参数列表，类似于Python中的*args</li></ul><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<span class="hljs-comment">// 函数可变参数列表</span>sum := <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> nums &#123;sum += nums[i]&#125;<span class="hljs-keyword">return</span> sum&#125;</code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/functions/func.go">https://github.com/weitrue/note/blob/master/go/functions/func.go</a></p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><img src="/images/Golang/func.png"></p><p>其中，<code>func(i int)</code>中<code>i</code>为局部变量，<code>sum</code>为自由变量</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">()</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;sum := <span class="hljs-number">0</span><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;sum += i<span class="hljs-keyword">return</span> sum&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAdder</span><span class="hljs-params">()</span></span>  &#123;a := adder()<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i++ &#123;fmt.Printf(<span class="hljs-string">&quot;0 + ... + %d = %d \n&quot;</span>, i, a(i))&#125;&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">0</span> + ... + <span class="hljs-number">0</span> = <span class="hljs-number">0</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">1</span> = <span class="hljs-number">1</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">2</span> = <span class="hljs-number">3</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">3</span> = <span class="hljs-number">6</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">4</span> = <span class="hljs-number">10</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">5</span> = <span class="hljs-number">15</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">6</span> = <span class="hljs-number">21</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">7</span> = <span class="hljs-number">28</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">8</span> = <span class="hljs-number">36</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">9</span> = <span class="hljs-number">45</span> <span class="hljs-comment">// 正统函数式编程</span><span class="hljs-keyword">type</span> iAdder <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, iAdder)</span></span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">iAdd</span><span class="hljs-params">(base <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">iAdder</span></span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(v <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, iAdder)</span></span> &#123;<span class="hljs-keyword">return</span> base +v, iAdd(base+v)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAdder</span><span class="hljs-params">()</span></span> &#123;a2 := iAdd(<span class="hljs-number">0</span>)<span class="hljs-keyword">var</span> s <span class="hljs-keyword">int</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;<span class="hljs-number">10</span>; i++ &#123;s, a2 = a2(i)fmt.Printf(<span class="hljs-string">&quot;0 + ... + %d = %d \n&quot;</span>, i, s)&#125;&#125;<span class="hljs-comment">// 输出</span><span class="hljs-number">0</span> + ... + <span class="hljs-number">1</span> = <span class="hljs-number">1</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">2</span> = <span class="hljs-number">3</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">3</span> = <span class="hljs-number">6</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">4</span> = <span class="hljs-number">10</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">5</span> = <span class="hljs-number">15</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">6</span> = <span class="hljs-number">21</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">7</span> = <span class="hljs-number">28</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">8</span> = <span class="hljs-number">36</span> <span class="hljs-number">0</span> + ... + <span class="hljs-number">9</span> = <span class="hljs-number">45</span></code></pre><p><a href="https://github.com/weitrue/note/blob/master/go/functions/closure.go">https://github.com/weitrue/note/blob/master/go/functions/closure.go</a></p><h5 id="Python中的闭包"><a href="#Python中的闭包" class="headerlink" title="Python中的闭包"></a>Python中的闭包</h5><p>Python原生支持闭包</p><p><code>__closure__</code>可以查看闭包内容</p><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">adder</span>():</span>    s = <span class="hljs-number">0</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">v: <span class="hljs-built_in">int</span></span>):</span>        <span class="hljs-keyword">nonlocal</span> s        s += v        <span class="hljs-keyword">return</span> s    <span class="hljs-keyword">return</span> f<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    a = adder()    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):        print(i, a(i), a.__closure__)        <span class="hljs-comment"># 输出</span><span class="hljs-number">0</span> <span class="hljs-number">0</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6290</span>&gt;,)<span class="hljs-number">1</span> <span class="hljs-number">1</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb62b0</span>&gt;,)<span class="hljs-number">2</span> <span class="hljs-number">3</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb62f0</span>&gt;,)<span class="hljs-number">3</span> <span class="hljs-number">6</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6350</span>&gt;,)<span class="hljs-number">4</span> <span class="hljs-number">10</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb63d0</span>&gt;,)<span class="hljs-number">5</span> <span class="hljs-number">15</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6470</span>&gt;,)<span class="hljs-number">6</span> <span class="hljs-number">21</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6530</span>&gt;,)<span class="hljs-number">7</span> <span class="hljs-number">28</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6610</span>&gt;,)<span class="hljs-number">8</span> <span class="hljs-number">36</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6710</span>&gt;,)<span class="hljs-number">9</span> <span class="hljs-number">45</span> (&lt;cell at <span class="hljs-number">0x7f9048e7d3d0</span>: <span class="hljs-built_in">int</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x106eb6830</span>&gt;,)</code></pre><h5 id="Java中的闭包"><a href="#Java中的闭包" class="headerlink" title="Java中的闭包"></a>Java中的闭包</h5><p>1.8以后，可以使用Function接口和Lambda表达式可以创建函数对象；</p><p>1.8之前，可以使用Lambda表达式或者匿名内部类也可以实现闭包；</p><pre><code class="hljs Java"><span class="hljs-keyword">import</span> javax.xml.ws.Holder;<span class="hljs-keyword">import</span> java.util.function.Function;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-keyword">final</span> Holder&lt;Integer&gt; sum = <span class="hljs-keyword">new</span> Holder&lt;&gt;(<span class="hljs-number">0</span>);    <span class="hljs-keyword">public</span>  Function&lt;Integer, Integer&gt;testClosure()&#123;        <span class="hljs-comment">// 闭包  使用Function接口和Lambda表达式可以创建函数对象</span>        <span class="hljs-keyword">return</span> (Integer value) -&gt; &#123;            sum.value += value;            <span class="hljs-keyword">return</span> sum.value;        &#125;;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        MyTest mt = <span class="hljs-keyword">new</span> MyTest();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(i +<span class="hljs-string">&quot;, &quot;</span>+ mt.testClosure().apply(<span class="hljs-keyword">new</span> Integer(i)));        &#125;    &#125;&#125;</code></pre><h4 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h4><h6 id="为函数实现接口"><a href="#为函数实现接口" class="headerlink" title="为函数实现接口"></a>为函数实现接口</h6><h6 id="实现函数遍历二叉树"><a href="#实现函数遍历二叉树" class="headerlink" title="实现函数遍历二叉树"></a>实现函数遍历二叉树</h6><h3 id="defer-recover在简单web服务应用"><a href="#defer-recover在简单web服务应用" class="headerlink" title="defer/recover在简单web服务应用"></a>defer/recover在简单web服务应用</h3><p>代码结构<img src="/images/Golang/web.jpg"></p><p><a href="https://github.com/weitrue/note/tree/master/go/web/">https://github.com/weitrue/note/tree/master/go/web/</a></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><em>表格驱动</em>测试</p><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMaxNoRepeatedZhn</span><span class="hljs-params">(t *testing.T)</span></span> &#123;tests := []<span class="hljs-keyword">struct</span>&#123;s <span class="hljs-keyword">string</span>ans <span class="hljs-keyword">int</span>&#125;&#123;&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&quot;yes, 我爱gogogo&quot;</span>, <span class="hljs-number">9</span>&#125;,&#123;<span class="hljs-string">&quot;abcadcb&quot;</span>, <span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span>, <span class="hljs-number">8</span>&#125;,&#125;<span class="hljs-keyword">for</span> _, tt := <span class="hljs-keyword">range</span> tests &#123;act := MaxNoRepeatedZhn(tt.s)<span class="hljs-keyword">if</span> act != tt.ans &#123;t.Errorf(<span class="hljs-string">&quot;get %d for input %s , but expect %d&quot;</span>, act, tt.s, tt.ans)&#125;&#125;&#125;<span class="hljs-comment">// 输出</span>=== RUN   TestMaxNoRepeatedZhn--- PASS: TestMaxNoRepeatedZhn (<span class="hljs-number">0.00</span>s)PASS</code></pre><h4 id="覆盖测试"><a href="#覆盖测试" class="headerlink" title="覆盖测试"></a>覆盖测试</h4><p><code>go tool cover</code></p><pre><code class="hljs zsh">Usage of <span class="hljs-string">&#x27;go tool cover&#x27;</span>:Given a coverage profile produced by <span class="hljs-string">&#x27;go test&#x27;</span>:        go <span class="hljs-built_in">test</span> -coverprofile=c.outOpen a web browser displaying annotated <span class="hljs-built_in">source</span> code:        go tool cover -html=c.out    <span class="hljs-comment"># 常用</span>Write out an HTML file instead of launching a web browser:        go tool cover -html=c.out -o coverage.htmlDisplay coverage percentages to stdout <span class="hljs-keyword">for</span> each <span class="hljs-keyword">function</span>:        go tool cover -func=c.outFinally, to generate modified <span class="hljs-built_in">source</span> code with coverage annotations(what go <span class="hljs-built_in">test</span> -cover does):        go tool cover -mode=<span class="hljs-built_in">set</span> -var=CoverageVariableName program.goFlags:  -V    <span class="hljs-built_in">print</span> version and <span class="hljs-built_in">exit</span>  -func string        output coverage profile information <span class="hljs-keyword">for</span> each <span class="hljs-keyword">function</span>  -html string        generate HTML representation of coverage profile  -mode string        coverage mode: <span class="hljs-built_in">set</span>, count, atomic  -o string        file <span class="hljs-keyword">for</span> output; default: stdout  -var string        name of coverage variable to generate (default <span class="hljs-string">&quot;GoCover&quot;</span>)  Only one of -html, -func, or -mode may be <span class="hljs-built_in">set</span>.</code></pre><h4 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a><code>Benchmark</code></h4><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkMaxNoRepeatedZhn</span><span class="hljs-params">(b *testing.B)</span></span> &#123;s := <span class="hljs-string">&quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span>ans := <span class="hljs-number">8</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;act := MaxNoRepeatedZhn(s)<span class="hljs-keyword">if</span> act != ans &#123;b.Errorf(<span class="hljs-string">&quot;get %d for input %s , but expect %d&quot;</span>, act, s, ans)&#125;&#125;&#125;<span class="hljs-comment">// 输出</span>goos: darwingoarch: amd64pkg: offer/note/collectionsBenchmarkMaxNoRepeatedZhnBenchmarkMaxNoRepeatedZhn<span class="hljs-number">-8</span>    <span class="hljs-number">1097594</span>      <span class="hljs-number">1024</span> ns/opPASS</code></pre><p><a href="https://github.com/weitrue/note/collections/strings_test.go">https://github.com/weitrue/note/collections/strings_test.go</a></p><h4 id="pprof性能测试"><a href="#pprof性能测试" class="headerlink" title="pprof性能测试"></a>pprof性能测试</h4><pre><code class="hljs zsh">xxx@xxxdeMacBook-Pro  ~/Projects/golang/src/offer/note/collections master ±✚ go <span class="hljs-built_in">test</span> -bench . -cpuprofile cpu.outgoos: darwingoarch: amd64pkg: offer/note/collectionsBenchmarkMaxNoRepeatedZhn-8      1286594               934 ns/opPASSok      offer/note/collections  2.656sxxx@xxxdeMacBook-Pro  ~/Projects/golang/src/offer/note/collections master ±✚ go tool pprof cpu.out               Type: cpuTime: Mar 2, 2021 at 6:03pm (CST)Duration: 2.34s, Total samples = 2.05s (87.57%)Entering interactive mode (<span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> commands, <span class="hljs-string">&quot;o&quot;</span> <span class="hljs-keyword">for</span> options)(pprof) webfailed to execute dot. Is Graphviz installed? Error: <span class="hljs-built_in">exec</span>: <span class="hljs-string">&quot;dot&quot;</span>: executable file not found <span class="hljs-keyword">in</span> <span class="hljs-variable">$PATH</span>(pprof)</code></pre><p>☞<code>failed to execute dot. Is Graphviz installed? Error: exec: &quot;dot&quot;: executable file not found in $PATH</code>是因为电脑未安装生成.svg文件的工具<code>Graphviz</code></p><h5 id="安装Graphviz"><a href="#安装Graphviz" class="headerlink" title="安装Graphviz"></a>安装<code>Graphviz</code></h5><pre><code class="hljs zsh">brew install graphvizxxx@xxxdeMacBook-Pro  ~/Projects/golang/src/github.com  brew install graphvizError:  homebrew-core is a shallow <span class="hljs-built_in">clone</span>.  homebrew-cask is a shallow <span class="hljs-built_in">clone</span>.To `brew update`, first run:  git -C /usr/<span class="hljs-built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow  git -C /usr/<span class="hljs-built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallowThese commands may take a few minutes to run due to the large size of the repositories.This restriction has been made on GitHub<span class="hljs-string">&#x27;s request because updating shallow</span><span class="hljs-string">clones is an extremely expensive operation due to the tree layout and traffic of</span><span class="hljs-string">Homebrew/homebrew-core and Homebrew/homebrew-cask. We don&#x27;</span>t <span class="hljs-keyword">do</span> this <span class="hljs-keyword">for</span> youautomatically to avoid repeatedly performing an expensive unshallow operation <span class="hljs-keyword">in</span>CI systems (<span class="hljs-built_in">which</span> should instead be fixed to not use shallow clones). Sorry <span class="hljs-keyword">for</span>the inconvenience!==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libpng-1.6.37.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/freetype-2.10.4.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fontconfig-2.13.1.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jpeg-9d.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtiff-4.1.0_1.big_sur.bottle.tar.gz<span class="hljs-comment">#########################################                                 58.1%</span>curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54Error: Failed to download resource <span class="hljs-string">&quot;libtiff&quot;</span>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtiff-4.1.0_1.big_sur.bottle.tar.gzWarning: Bottle installation failed: building from <span class="hljs-built_in">source</span>.==&gt; Downloading https://download.osgeo.org/libtiff/tiff-4.1.0.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/webp-1.1.0.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gd-2.3.0.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libffi-3.3.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pcre-8.44.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/glib-2.66.2_1.big_sur.bottle.tar.gz<span class="hljs-comment">##########                                                                14.5%</span>curl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54Error: Failed to download resource <span class="hljs-string">&quot;glib&quot;</span>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/glib-2.66.2_1.big_sur.bottle.tar.gzWarning: Bottle installation failed: building from <span class="hljs-built_in">source</span>.==&gt; Downloading https://raw.githubusercontent.com/Homebrew/formula-patches/6164294a75541c278f3863b111791376caa3ad26/glib/hardcoded-paths.diff<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://download.gnome.org/sources/glib/2.66/glib-2.66.2.tar.xz==&gt; Downloading from https://mirrors.ustc.edu.cn/gnome/sources/glib/2.66/glib-2.66.2.tar.xz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jasper-2.0.22.big_sur.bottle.tar.gz==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/ad3715537b3001b9a8924896e5c4e7eb90b21bb37e7171d964de2008edb13910?response-content-disposition=attachment%3Bfilename%3D%22jasper-2.0.22.big_sur.bo<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/netpbm-10.86.17.big_sur.bottle.tar.gz==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/3540b31b88e9d8fc7288de5dac7b96be6f1c6652c604cfd167113bdf07738ca7?response-content-disposition=attachment%3Bfilename%3D%22netpbm-10.86.17.big_sur.<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gts-0.7.6_2.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/lzo-2.10.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pixman-0.40.0.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/cairo-1.16.0_3.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz==&gt; Downloading from https://d29vzk4ow07wi7.cloudfront.net/1819bb48f7487d522a69c564dca6fe5dff4da658269f067e47edccddfaab9440?response-content-disposition=attachment%3Bfilename%3D%22gdk-pixbuf-2.42.0.big_su<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fribidi-1.0.10.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pkg-config-0.29.2_3.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphite2-1.3.14.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/icu4c-67.1.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/harfbuzz-2.7.2.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pango-1.48.0.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gz<span class="hljs-comment">#####################                                                     29.6%</span>curl: (18) transfer closed with 28187304 bytes remaining to <span class="hljs-built_in">read</span>Error: Failed to download resource <span class="hljs-string">&quot;librsvg&quot;</span>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gzWarning: Bottle installation failed: building from <span class="hljs-built_in">source</span>.==&gt; Downloading https://download.gnome.org/sources/librsvg/2.50/librsvg-2.50.2.tar.xz==&gt; Downloading from https://mirrors.ustc.edu.cn/gnome/sources/librsvg/2.50/librsvg-2.50.2.tar.xz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtool-2.4.6_2.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphviz-2.44.1.big_sur.bottle.1.tar.gz<span class="hljs-comment">######################################                                    52.9%</span>curl: (18) transfer closed with 6363689 bytes remaining to <span class="hljs-built_in">read</span>Error: Failed to download resource <span class="hljs-string">&quot;graphviz&quot;</span>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphviz-2.44.1.big_sur.bottle.1.tar.gzWarning: Bottle installation failed: building from <span class="hljs-built_in">source</span>.==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/autoconf-2.69.big_sur.bottle.4.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/automake-1.16.3.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pkg-config-0.29.2_3.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/c393e3a39326eab27929f0f2ce40cb425e78bd8812166e6d835a08a8bf0c5f56--pkg-config-0.29.2_3.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libpng-1.6.37.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/3bd2e2a75fbfc893d9acc20eeafc5274e260ed2ca39483ccbb1450a734bc6775--libpng-1.6.37.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/freetype-2.10.4.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/1399fc577f7998623378e7bb01f8a716a43eff701304059936d592a76d5a4d31--freetype-2.10.4.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fontconfig-2.13.1.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/3790f4e94c8e7c868307933e3445a1244aadd794adaa6ed5f743533334489f93--fontconfig-2.13.1.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jpeg-9d.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/7ed5b41c2937740eca747a8077502454971fbbe02cfb5cfbd9b9e7379345d0cd--jpeg-9d.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtiff-4.1.0_1.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/webp-1.1.0.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/1ae441623b4c63d896b5566300b24c06d772ff9f2676d7c9bd692ff6b8e22edb--webp-1.1.0.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gd-2.3.0.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/d71eed744db212a24cc7f607842253aacf0e1d25cd7891c884ec7ffc969162ac--gd-2.3.0.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libffi-3.3.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/49892306006d42a1f69ae4b36ff44b37c8e7170f6cf73a20e97f10bf9fa10e72--libffi-3.3.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pcre-8.44.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/9998b74590fa558f4c346e9770a62495d4aca8e992d0e883435e3574303ee241--pcre-8.44.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/glib-2.66.2_1.big_sur.bottle.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/jasper-2.0.22.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/86ba13e63264cbcafb0dbec9e35960e2662f9e4bde0306bd52984bf487e6581a--jasper-2.0.22.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/netpbm-10.86.17.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/9f8fa63491038e9bb811b03f09660342641c7f8132169bdb3800631d8d2b189e--netpbm-10.86.17.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gts-0.7.6_2.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/eab94b3870ce0c63232e9a992963c8a32ea53a7efa8a09e639066b40ae0a132b--gts-0.7.6_2.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/lzo-2.10.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/0020e09d8a2c473efa8db2af4b402358f5184578c801c7a7650de6c8bedca06a--lzo-2.10.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pixman-0.40.0.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/ddf94c89d763f2c63c00ce2090ff16d5abd832ca0e1e9beb2245da3cc159ce41--pixman-0.40.0.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/cairo-1.16.0_3.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/8ad096f68fcc70615ff77f14b50eafbed94e4a261c7860dcda41ba25c7d12f52--cairo-1.16.0_3.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gdk-pixbuf-2.42.0.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/fb191d15b537de812241fe664f4149209c4d58ce3fbdd5e98a292fe495420f39--gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/fribidi-1.0.10.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/9013c8a0aeb1d2fee9a999ef14adfb2416fef4e8399d87a65d753d44a586427b--fribidi-1.0.10.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/gobject-introspection-1.66.1_1.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/a7f9a1bcb83a7d322e495d163f15b4b8f4d0c05649eeacfcef2681a23b3eb8dd--gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/graphite2-1.3.14.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/5ce053636ab73845d956142cfd518a21701d3ec972e73367d204b81619b8b845--graphite2-1.3.14.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/icu4c-67.1.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/ddca8d436054c0f9c8c333d2e8dd957ccd3902680baf619e4baed434c9806998--icu4c-67.1.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/harfbuzz-2.7.2.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/1aead0f1ab97b4307a9c487a3191213ff63fd200d5eb9be947a11e8ca78df24a--harfbuzz-2.7.2.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/pango-1.48.0.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/eded163bf136aa7a73e07f22c8b16f3a406bbd849b865246a95ee89ecd60aa4e--pango-1.48.0.big_sur.bottle.tar.gz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gz<span class="hljs-comment">###################################################                       71.3%</span>curl: (18) transfer closed with 11492026 bytes remaining to <span class="hljs-built_in">read</span>Error: Failed to download resource <span class="hljs-string">&quot;librsvg&quot;</span>Download failed: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/librsvg-2.50.2.big_sur.bottle.tar.gzWarning: Bottle installation failed: building from <span class="hljs-built_in">source</span>.==&gt; Downloading https://download.gnome.org/sources/librsvg/2.50/librsvg-2.50.2.tar.xzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/0388827e738392e3705cbb8800e43f279723caf5126ba50c7cd4e1ca5e2af872--librsvg-2.50.2.tar.xz==&gt; Downloading https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/bottles/libtool-2.4.6_2.big_sur.bottle.tar.gzAlready downloaded: /Users/wangpeng/Library/Caches/Homebrew/downloads/59a8e4e9bff6153b4cb25fda4de99648330e04fefdd7e9c98f92fa4d049a9f30--libtool-2.4.6_2.big_sur.bottle.tar.gz==&gt; Downloading https://www2.graphviz.org/Packages/stable/portable_source/graphviz-2.44.1.tar.gz<span class="hljs-comment">####################                                                      28.5%</span><span class="hljs-comment">######################################################################## 100.0%</span>==&gt; Installing dependencies <span class="hljs-keyword">for</span> graphviz: autoconf, automake, pkg-config, libpng, freetype, fontconfig, jpeg, libtiff, webp, gd, libffi, pcre, glib, jasper, netpbm, gts, lzo, pixman, cairo, gdk-pixbuf, fribidi, gobject-introspection, graphite2, icu4c, harfbuzz, pango, librsvg and libtool==&gt; Installing graphviz dependency: autoconf==&gt; Pouring autoconf-2.69.big_sur.bottle.4.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/autoconf/2.69: 68 files, 3.0MB==&gt; Installing graphviz dependency: automake==&gt; Pouring automake-1.16.3.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/automake/1.16.3: 131 files, 3.4MB==&gt; Installing graphviz dependency: pkg-config==&gt; Pouring pkg-config-0.29.2_3.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/pkg-config/0.29.2_3: 11 files, 656.6KB==&gt; Installing graphviz dependency: libpng==&gt; Pouring libpng-1.6.37.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/libpng/1.6.37: 27 files, 1.3MB==&gt; Installing graphviz dependency: freetype==&gt; Pouring freetype-2.10.4.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/freetype/2.10.4: 64 files, 2.3MB==&gt; Installing graphviz dependency: fontconfig==&gt; Pouring fontconfig-2.13.1.big_sur.bottle.tar.gz==&gt; Regenerating font cache, this may take a <span class="hljs-keyword">while</span>==&gt; /usr/<span class="hljs-built_in">local</span>/Cellar/fontconfig/2.13.1/bin/fc-cache -frv🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/fontconfig/2.13.1: 531 files, 3.6MB==&gt; Installing graphviz dependency: jpeg==&gt; Pouring jpeg-9d.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/jpeg/9d: 21 files, 953.8KB==&gt; Installing graphviz dependency: libtiff==&gt; Pouring libtiff-4.1.0_1.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/libtiff/4.1.0_1: 247 files, 4.2MB==&gt; Installing graphviz dependency: webp==&gt; Pouring webp-1.1.0.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/webp/1.1.0: 39 files, 2.4MB==&gt; Installing graphviz dependency: gd==&gt; Pouring gd-2.3.0.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/gd/2.3.0: 34 files, 1.4MB==&gt; Installing graphviz dependency: libffi==&gt; Pouring libffi-3.3.big_sur.bottle.tar.gz==&gt; Caveatslibffi is keg-only, <span class="hljs-built_in">which</span> means it was not symlinked into /usr/<span class="hljs-built_in">local</span>,because macOS already provides this software and installing another version <span class="hljs-keyword">in</span>parallel can cause all kinds of trouble.For compilers to find libffi you may need to <span class="hljs-built_in">set</span>:  <span class="hljs-built_in">export</span> LDFLAGS=<span class="hljs-string">&quot;-L/usr/local/opt/libffi/lib&quot;</span>  <span class="hljs-built_in">export</span> CPPFLAGS=<span class="hljs-string">&quot;-I/usr/local/opt/libffi/include&quot;</span>For pkg-config to find libffi you may need to <span class="hljs-built_in">set</span>:  <span class="hljs-built_in">export</span> PKG_CONFIG_PATH=<span class="hljs-string">&quot;/usr/local/opt/libffi/lib/pkgconfig&quot;</span>==&gt; Summary🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/libffi/3.3: 17 files, 540.2KB==&gt; Installing graphviz dependency: pcre==&gt; Pouring pcre-8.44.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/pcre/8.44: 204 files, 5.8MB==&gt; Installing graphviz dependency: glib==&gt; Pouring glib-2.66.2_1.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/glib/2.66.2_1: 436 files, 15.5MB==&gt; Installing graphviz dependency: jasper==&gt; Pouring jasper-2.0.22.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/jasper/2.0.22: 42 files, 1.5MB==&gt; Installing graphviz dependency: netpbm==&gt; Pouring netpbm-10.86.17.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/netpbm/10.86.17: 410 files, 17.7MB==&gt; Installing graphviz dependency: gts==&gt; Pouring gts-0.7.6_2.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/gts/0.7.6_2: 27 files, 1.4MB==&gt; Installing graphviz dependency: lzo==&gt; Pouring lzo-2.10.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/lzo/2.10: 31 files, 570.7KB==&gt; Installing graphviz dependency: pixman==&gt; Pouring pixman-0.40.0.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/pixman/0.40.0: 14 files, 1.3MB==&gt; Installing graphviz dependency: cairo==&gt; Pouring cairo-1.16.0_3.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/cairo/1.16.0_3: 119 files, 5.9MB==&gt; Installing graphviz dependency: gdk-pixbuf==&gt; Pouring gdk-pixbuf-2.42.0.big_sur.bottle.tar.gz==&gt; /usr/<span class="hljs-built_in">local</span>/Cellar/gdk-pixbuf/2.42.0/bin/gdk-pixbuf-query-loaders --update-cache🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/gdk-pixbuf/2.42.0: 149 files, 3.8MB==&gt; Installing graphviz dependency: fribidi==&gt; Pouring fribidi-1.0.10.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/fribidi/1.0.10: 67 files, 669.0KB==&gt; Installing graphviz dependency: gobject-introspection==&gt; Pouring gobject-introspection-1.66.1_1.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/gobject-introspection/1.66.1_1: 191 files, 12.7MB==&gt; Installing graphviz dependency: graphite2==&gt; Pouring graphite2-1.3.14.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/graphite2/1.3.14: 18 files, 291.7KB==&gt; Installing graphviz dependency: icu4c==&gt; Pouring icu4c-67.1.big_sur.bottle.tar.gz==&gt; Caveatsicu4c is keg-only, <span class="hljs-built_in">which</span> means it was not symlinked into /usr/<span class="hljs-built_in">local</span>,because macOS provides libicucore.dylib (but nothing <span class="hljs-keyword">else</span>).If you need to have icu4c first <span class="hljs-keyword">in</span> your PATH run:  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;/usr/local/opt/icu4c/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc  <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;/usr/local/opt/icu4c/sbin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrcFor compilers to find icu4c you may need to <span class="hljs-built_in">set</span>:  <span class="hljs-built_in">export</span> LDFLAGS=<span class="hljs-string">&quot;-L/usr/local/opt/icu4c/lib&quot;</span>  <span class="hljs-built_in">export</span> CPPFLAGS=<span class="hljs-string">&quot;-I/usr/local/opt/icu4c/include&quot;</span>For pkg-config to find icu4c you may need to <span class="hljs-built_in">set</span>:  <span class="hljs-built_in">export</span> PKG_CONFIG_PATH=<span class="hljs-string">&quot;/usr/local/opt/icu4c/lib/pkgconfig&quot;</span>==&gt; Summary🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/icu4c/67.1: 258 files, 71.8MB==&gt; Installing graphviz dependency: harfbuzz==&gt; Pouring harfbuzz-2.7.2.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/harfbuzz/2.7.2: 68 files, 6.4MB==&gt; Installing graphviz dependency: pango==&gt; Pouring pango-1.48.0.big_sur.bottle.tar.gz🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/pango/1.48.0: 64 files, 3MB==&gt; Installing graphviz dependency: librsvg==&gt; Pouring librsvg-2.50.2.big_sur.bottle.tar.gztar: Error opening archive: Failed to open <span class="hljs-string">&#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/3eb605900a29b02eb026199f14474efc43e313ee2b9de389706c795eebdc24f5--librsvg-2.50.2.big_sur.bottle.tar.gz&#x27;</span>Error: Failure <span class="hljs-keyword">while</span> executing; `tar xof /Users/wangpeng/Library/Caches/Homebrew/downloads/3eb605900a29b02eb026199f14474efc43e313ee2b9de389706c795eebdc24f5--librsvg-2.50.2.big_sur.bottle.tar.gz -C /var/folders/zs/2875szcx7jn6lbmqd0jfbprr0000gn/T/d20210302-22554-102pbtw` exited with 1. Here<span class="hljs-string">&#x27;s the output:</span><span class="hljs-string">tar: Error opening archive: Failed to open &#x27;</span>/Users/wangpeng/Library/Caches/Homebrew/downloads/3eb605900a29b02eb026199f14474efc43e313ee2b9de389706c795eebdc24f5--librsvg-2.50.2.big_sur.bottle.tar.gz<span class="hljs-string">&#x27;</span><span class="hljs-string"></span><span class="hljs-string">Warning: Bottle installation failed: building from source.</span><span class="hljs-string">==&gt; Installing dependencies for librsvg: libssh2 and rust</span><span class="hljs-string">==&gt; Installing librsvg dependency: libssh2</span><span class="hljs-string">==&gt; Pouring libssh2-1.9.0_1.big_sur.bottle.tar.gz</span><span class="hljs-string">tar: Error opening archive: Failed to open &#x27;</span>/Users/wangpeng/Library/Caches/Homebrew/downloads/45db0c196aa97bf6c0a9c6e7787ad2cd0d14d563c03d0f4e0d52392a0f3a1c81--libssh2-1.9.0_1.big_sur.bottle.tar.gz<span class="hljs-string">&#x27;</span><span class="hljs-string">Error: Failure while executing; `tar xof /Users/wangpeng/Library/Caches/Homebrew/downloads/45db0c196aa97bf6c0a9c6e7787ad2cd0d14d563c03d0f4e0d52392a0f3a1c81--libssh2-1.9.0_1.big_sur.bottle.tar.gz -C /var/folders/zs/2875szcx7jn6lbmqd0jfbprr0000gn/T/d20210302-22554-qzrgbb` exited with 1. Here&#x27;</span>s the output:tar: Error opening archive: Failed to open <span class="hljs-string">&#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/45db0c196aa97bf6c0a9c6e7787ad2cd0d14d563c03d0f4e0d52392a0f3a1c81--libssh2-1.9.0_1.big_sur.bottle.tar.gz&#x27;</span>Warning: Bottle installation failed: building from <span class="hljs-built_in">source</span>.==&gt; Downloading https://libssh2.org/download/libssh2-1.9.0.tar.gz<span class="hljs-comment">######################################################################## 100.0%</span>==&gt; ./configure --prefix=/usr/<span class="hljs-built_in">local</span>/Cellar/libssh2/1.9.0_1 --disable-examples-build --with-openssl --with-libz --with-libssl-prefix=/usr/<span class="hljs-built_in">local</span>/opt/openssl@1.1==&gt; make install🍺  /usr/<span class="hljs-built_in">local</span>/Cellar/libssh2/1.9.0_1: 184 files, 969.9KB, built <span class="hljs-keyword">in</span> 33 seconds==&gt; Installing librsvg dependency: rust==&gt; Pouring rust-1.47.0.big_sur.bottle.tar.gztar: Error opening archive: Failed to open <span class="hljs-string">&#x27;/Users/wangpeng/Library/Caches/Homebrew/downloads/f1482d118ddb120ff152e8f8aa88afa9bebc5674cc42aebca96249cffbdd8bdb--rust-1.47.0.big_sur.bottle.tar.gz&#x27;</span>Error: Failure <span class="hljs-keyword">while</span> executing; `tar xof /Users/wangpeng/Library/Caches/Homebrew/downloads/f1482d118ddb120ff152e8f8aa88afa9bebc5674cc42aebca96249cffbdd8bdb--rust-1.47.0.big_sur.bottle.tar.gz -C /var/folders/zs/2875szcx7jn6lbmqd0jfbprr0000gn/T/d20210302-22554-16tqegl` exited with 1. Here<span class="hljs-string">&#x27;s the output:</span><span class="hljs-string">tar: Error opening archive: Failed to open &#x27;</span>/Users/wangpeng/Library/Caches/Homebrew/downloads/f1482d118ddb120ff152e8f8aa88afa9bebc5674cc42aebca96249cffbdd8bdb--rust-1.47.0.big_sur.bottle.tar.gz<span class="hljs-string">&#x27;</span><span class="hljs-string"></span><span class="hljs-string">Warning: Bottle installation failed: building from source.</span><span class="hljs-string">==&gt; Downloading https://static.rust-lang.org/dist/rustc-1.47.0-src.tar.gz</span><span class="hljs-string">######################################################################## 100.0%</span><span class="hljs-string">==&gt; ./configure --prefix=/usr/local/Cellar/rust/1.47.0 --release-channel=stable</span><span class="hljs-string">==&gt; make</span><span class="hljs-string">Last 15 lines from /Users/wangpeng/Library/Logs/Homebrew/rust/02.make:</span><span class="hljs-string">error: failed to get `cc` as a dependency of package `bootstrap v0.0.0 (/private/tmp/rust-20210302-29879-dftrmf/rustc-1.47.0-src/src/bootstrap)`</span><span class="hljs-string"></span><span class="hljs-string">Caused by:</span><span class="hljs-string">  failed to fetch `https://github.com/rust-lang/crates.io-index`</span><span class="hljs-string"></span><span class="hljs-string">Caused by:</span><span class="hljs-string">  network failure seems to have happened</span><span class="hljs-string">  if a proxy or similar is necessary `net.git-fetch-with-cli` may help here</span><span class="hljs-string">  https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli</span><span class="hljs-string"></span><span class="hljs-string">Caused by:</span><span class="hljs-string">  http parser error: stream ended at an unexpected time; class=Http (34)</span><span class="hljs-string">failed to run: /private/tmp/rust-20210302-29879-dftrmf/rustc-1.47.0-src/build/x86_64-apple-darwin/stage0/bin/cargo build --manifest-path /private/tmp/rust-20210302-29879-dftrmf/rustc-1.47.0-src/src/bootstrap/Cargo.toml</span><span class="hljs-string">Build completed unsuccessfully in 0:33:17</span><span class="hljs-string">make: *** [all] Error 1</span><span class="hljs-string"></span><span class="hljs-string">READ THIS: https://docs.brew.sh/Troubleshooting</span><span class="hljs-string"></span><span class="hljs-string">These open issues may also help:</span><span class="hljs-string">rust 1.50.0 https://github.com/Homebrew/homebrew-core/pull/70922</span><span class="hljs-string">Rust-dependent formulae on Apple Silicon - upstream issue tracker https://github.com/Homebrew/homebrew-core/issues/68301</span></code></pre><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><code>godoc -http :6060</code>,生成网页文档</p><p><img src="/images/Golang/doc.jpg"></p><p><img src="/images/Golang/doc1.jpg"></p><p><code>go doc 方法名（包括包名）</code>,查看方法注释</p><p><img src="/images/Golang/doc2.jpg"></p><p><code>xxx_test.go</code>生成示例</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ExampleQueue_Pop</span><span class="hljs-params">()</span></span> &#123;q := Queue&#123;&#125;_ = q.Push(<span class="hljs-string">&quot;asd&quot;</span>)_ = q.Push(<span class="hljs-number">123</span>)<span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;fmt.Println(v)&#125;<span class="hljs-keyword">if</span> v, ok := q.Pop(); ok &#123;fmt.Println(v)&#125;<span class="hljs-comment">//Output:</span><span class="hljs-comment">//asd</span><span class="hljs-comment">//123</span>&#125;</code></pre><p><img src="/images/Golang/doc_output.jpg"></p><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a><code>goroutine</code></h3><p><img src="/images/Golang/goroutine.png"></p><h4 id="协程-Coroutine"><a href="#协程-Coroutine" class="headerlink" title="协程 Coroutine"></a>协程 <code>Coroutine</code></h4><ul><li><p><em>轻量级</em>线程</p></li><li><p><strong>非抢占式</strong>多任务处理，由协程主动交出控制权</p></li><li><p>编译器/解释器/虚拟机层的多任务</p></li><li><p>多个协程可以在一个或者多个线程上运行</p></li></ul><h5 id="其他语言对协程的支持"><a href="#其他语言对协程的支持" class="headerlink" title="其他语言对协程的支持"></a>其他语言对协程的支持</h5><p><code>Java</code>：标准库不支持</p><p><code>Python</code>：3.5版本前使用yield关键字</p><p>​                 3.5以后， <code>async def 方法名</code>实现协程的原生支持</p><h5 id="可能切换goroutine的事件"><a href="#可能切换goroutine的事件" class="headerlink" title="可能切换goroutine的事件"></a>可能切换<code>goroutine</code>的事件</h5><ul><li><p><code>I/O, Select</code></p></li><li><p><code>channel</code></p></li><li><p>等待锁</p></li><li><p>函数调用</p></li><li><p><code>runtime.Gosched()</code></p></li><li><p><code>.e.g</code></p></li></ul><pre><code class="hljs golang"><span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;time&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Run</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i ++ &#123;<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(j <span class="hljs-keyword">int</span>)</span></span> &#123;<span class="hljs-keyword">for</span>&#123;fmt.Println(<span class="hljs-string">&quot;go run from&quot;</span>, j)&#125;&#125;(i)&#125;time.Sleep(time.Minute)&#125;</code></pre><h4 id="channel"><a href="#channel" class="headerlink" title="channel"></a><code>channel</code></h4><p><img src="/images/Golang/channel.png"></p> <pre><code class="hljs golang"><span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;time&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">works</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<span class="hljs-comment">// 不断的从channel取</span><span class="hljs-keyword">for</span>  &#123;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, &lt;-c)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">workIfNotClose</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><span class="hljs-keyword">for</span>  &#123;n, ok := &lt;-c<span class="hljs-keyword">if</span> !ok&#123;<span class="hljs-keyword">break</span>&#125;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">workIfNotCloseSimple</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)</span></span>  &#123;<span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> c&#123;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorks</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">chan</span>&lt;- <span class="hljs-title">int</span></span> &#123;c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<span class="hljs-keyword">go</span> works(id, c)<span class="hljs-keyword">return</span> c&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">first</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 创建channel用例</span><span class="hljs-keyword">var</span> chans [<span class="hljs-number">10</span>]<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span><span class="hljs-keyword">for</span>  i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;chans[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<span class="hljs-keyword">go</span> works(i, chans[i])&#125;<span class="hljs-comment">// 往channel放</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;chans[i] &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i&#125;<span class="hljs-comment">// 往channel放</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;chans[i] &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">second</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><span class="hljs-keyword">var</span> chann [<span class="hljs-number">10</span>] <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">int</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;chann[i] = createWorks(i)&#125;<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;chann[i] &lt;- <span class="hljs-string">&#x27;k&#x27;</span> + i&#125;<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;chann[i] &lt;- <span class="hljs-string">&#x27;K&#x27;</span> + i&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">thirdBufferedChannel</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-comment">// channel缓冲区   可以放入不大于缓冲区的大小时，可以不用取</span>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">4</span>)<span class="hljs-keyword">go</span> works(<span class="hljs-number">0</span>, c)c &lt;- <span class="hljs-string">&#x27;u&#x27;</span>c &lt;- <span class="hljs-string">&#x27;v&#x27;</span>c &lt;- <span class="hljs-string">&#x27;w&#x27;</span>c &lt;- <span class="hljs-string">&#x27;x&#x27;</span>c &lt;- <span class="hljs-string">&#x27;y&#x27;</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">channelClose</span><span class="hljs-params">()</span></span>  &#123;c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>, <span class="hljs-number">4</span>)<span class="hljs-keyword">go</span> workIfNotCloseSimple(<span class="hljs-number">0</span>, c)c &lt;- <span class="hljs-string">&#x27;U&#x27;</span>c &lt;- <span class="hljs-string">&#x27;V&#x27;</span>c &lt;- <span class="hljs-string">&#x27;W&#x27;</span><span class="hljs-built_in">close</span>(c)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ChanDemo</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">//  channel也是一等公民</span>first()second()fmt.Println(<span class="hljs-string">&quot;-----------------&quot;</span>)thirdBufferedChannel()channelClose()time.Sleep(time.Second)&#125;<span class="hljs-comment">// 输出</span>channel <span class="hljs-number">7</span> receive hchannel <span class="hljs-number">9</span> receive jchannel <span class="hljs-number">8</span> receive ichannel <span class="hljs-number">5</span> receive fchannel <span class="hljs-number">3</span> receive dchannel <span class="hljs-number">6</span> receive gchannel <span class="hljs-number">4</span> receive echannel <span class="hljs-number">2</span> receive cchannel <span class="hljs-number">1</span> receive bchannel <span class="hljs-number">0</span> receive achannel <span class="hljs-number">0</span> receive A-----------------channel <span class="hljs-number">4</span> receive Echannel <span class="hljs-number">3</span> receive Dchannel <span class="hljs-number">1</span> receive Bchannel <span class="hljs-number">7</span> receive Hchannel <span class="hljs-number">2</span> receive Cchannel <span class="hljs-number">5</span> receive Fchannel <span class="hljs-number">6</span> receive Gchannel <span class="hljs-number">9</span> receive Jchannel <span class="hljs-number">8</span> receive Ichannel <span class="hljs-number">0</span> receive kchannel <span class="hljs-number">1</span> receive lchannel <span class="hljs-number">2</span> receive mchannel <span class="hljs-number">3</span> receive nchannel <span class="hljs-number">4</span> receive ochannel <span class="hljs-number">5</span> receive pchannel <span class="hljs-number">6</span> receive qchannel <span class="hljs-number">7</span> receive rchannel <span class="hljs-number">7</span> receive Rchannel <span class="hljs-number">8</span> receive schannel <span class="hljs-number">8</span> receive Schannel <span class="hljs-number">3</span> receive Nchannel <span class="hljs-number">5</span> receive Pchannel <span class="hljs-number">0</span> receive Kchannel <span class="hljs-number">6</span> receive Qchannel <span class="hljs-number">9</span> receive tchannel <span class="hljs-number">9</span> receive Tchannel <span class="hljs-number">2</span> receive Mchannel <span class="hljs-number">4</span> receive Ochannel <span class="hljs-number">1</span> receive L-----------------channel <span class="hljs-number">0</span> receive uchannel <span class="hljs-number">0</span> receive vchannel <span class="hljs-number">0</span> receive wchannel <span class="hljs-number">0</span> receive xchannel <span class="hljs-number">0</span> receive ychannel <span class="hljs-number">0</span> receive Uchannel <span class="hljs-number">0</span> receive Vchannel <span class="hljs-number">0</span> receive WExiting.</code></pre><h5 id="通过通信来共享内存"><a href="#通过通信来共享内存" class="headerlink" title="通过通信来共享内存"></a>通过通信来共享内存</h5><pre><code class="hljs golang"><span class="hljs-keyword">package</span> goroutines<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-keyword">type</span> Worker <span class="hljs-keyword">struct</span> &#123;in <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>done <span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWork</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w Worker)</span></span>  &#123;<span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)w.done &lt;- <span class="hljs-literal">true</span>&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorkers</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Worker</span></span> &#123;w := Worker&#123;in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),done: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>),&#125;<span class="hljs-keyword">go</span> doWork(id, w)<span class="hljs-keyword">return</span> w&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicate</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><span class="hljs-keyword">var</span> works [<span class="hljs-number">10</span>]Worker<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;works[i] = createWorkers(i)&#125;<span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;worker.in &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i&#125;<span class="hljs-keyword">for</span> _, worker := <span class="hljs-keyword">range</span> works&#123;&lt;- worker.done&#125;<span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;worker.in &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i&#125;<span class="hljs-keyword">for</span> _, worker := <span class="hljs-keyword">range</span> works&#123;&lt;- worker.done&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWork2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w Worker)</span></span>  &#123;<span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;w.done &lt;- <span class="hljs-literal">true</span>&#125;()&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWorkers2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">Worker</span></span> &#123;w := Worker&#123;in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),done: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>),&#125;<span class="hljs-keyword">go</span> doWork2(id, w)<span class="hljs-keyword">return</span> w&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">communicateDoneAll</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><span class="hljs-keyword">var</span> worksAll [<span class="hljs-number">10</span>]Worker<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;worksAll[i] = createWorkers2(i)&#125;<span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> worksAll &#123;worker.in &lt;- <span class="hljs-string">&#x27;j&#x27;</span> + i&#125;<span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> worksAll &#123;worker.in &lt;- <span class="hljs-string">&#x27;J&#x27;</span> + i&#125;<span class="hljs-comment">// 等所有任务都取完 再结束</span><span class="hljs-keyword">for</span> _, worker := <span class="hljs-keyword">range</span> worksAll &#123;&lt;- worker.done&lt;- worker.done&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CommunicateDemo</span><span class="hljs-params">()</span></span>  &#123;communicate()fmt.Println(<span class="hljs-string">&quot;----------------&quot;</span>)communicateDoneAll()&#125;<span class="hljs-comment">// 输出</span>channel <span class="hljs-number">7</span> receive hchannel <span class="hljs-number">5</span> receive fchannel <span class="hljs-number">8</span> receive ichannel <span class="hljs-number">9</span> receive jchannel <span class="hljs-number">2</span> receive cchannel <span class="hljs-number">3</span> receive dchannel <span class="hljs-number">1</span> receive bchannel <span class="hljs-number">0</span> receive achannel <span class="hljs-number">4</span> receive echannel <span class="hljs-number">6</span> receive gchannel <span class="hljs-number">6</span> receive Gchannel <span class="hljs-number">7</span> receive Hchannel <span class="hljs-number">8</span> receive Ichannel <span class="hljs-number">9</span> receive Jchannel <span class="hljs-number">0</span> receive Achannel <span class="hljs-number">1</span> receive Bchannel <span class="hljs-number">2</span> receive Cchannel <span class="hljs-number">3</span> receive Dchannel <span class="hljs-number">5</span> receive Fchannel <span class="hljs-number">4</span> receive E----------------channel <span class="hljs-number">0</span> receive jchannel <span class="hljs-number">1</span> receive kchannel <span class="hljs-number">4</span> receive nchannel <span class="hljs-number">2</span> receive lchannel <span class="hljs-number">3</span> receive mchannel <span class="hljs-number">2</span> receive Lchannel <span class="hljs-number">8</span> receive rchannel <span class="hljs-number">0</span> receive Jchannel <span class="hljs-number">1</span> receive Kchannel <span class="hljs-number">7</span> receive qchannel <span class="hljs-number">5</span> receive ochannel <span class="hljs-number">9</span> receive schannel <span class="hljs-number">3</span> receive Mchannel <span class="hljs-number">5</span> receive Ochannel <span class="hljs-number">6</span> receive pchannel <span class="hljs-number">4</span> receive Nchannel <span class="hljs-number">6</span> receive Pchannel <span class="hljs-number">9</span> receive Schannel <span class="hljs-number">7</span> receive Qchannel <span class="hljs-number">8</span> receive R</code></pre><pre><code class="hljs golang"><span class="hljs-keyword">package</span> goroutines<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;sync&quot;</span>)<span class="hljs-keyword">type</span> WorkerWG <span class="hljs-keyword">struct</span> &#123;in <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>wg *sync.WaitGroup&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWorkWaitDone</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w WorkerWG)</span></span>  &#123;<span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)w.wg.Done()&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWaitDoneWorkers</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, wg *sync.WaitGroup)</span> <span class="hljs-title">WorkerWG</span></span> &#123;w := WorkerWG&#123;in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),wg: wg,&#125;<span class="hljs-keyword">go</span> doWorkWaitDone(id, w)<span class="hljs-keyword">return</span> w&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CommunicateWaitDone</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><span class="hljs-keyword">var</span> works [<span class="hljs-number">10</span>]WorkerWG<span class="hljs-keyword">var</span> wg sync.WaitGroup<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;works[i] = createWaitDoneWorkers(i, &amp;wg)&#125;<span class="hljs-comment">//wg.Add(20) wg.Add(1)可以一次性</span><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;worker.in &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + iwg.Add(<span class="hljs-number">1</span>)&#125;<span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;worker.in &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + iwg.Add(<span class="hljs-number">1</span>)&#125;wg.Wait()&#125;<span class="hljs-keyword">type</span> WorkerWG2 <span class="hljs-keyword">struct</span> &#123;in <span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>done <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#125;<span class="hljs-comment">// WorkerWG封装</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWorkWaitDone2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, w WorkerWG2)</span></span>  &#123;<span class="hljs-comment">// 接收方判断channel中有数据就不断的从channel取</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> w.in&#123;fmt.Printf(<span class="hljs-string">&quot;channel %d receive %c\n&quot;</span>, id, n)w.done()&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createWaitDoneWorkers2</span><span class="hljs-params">(id <span class="hljs-keyword">int</span>, wg *sync.WaitGroup)</span> <span class="hljs-title">WorkerWG2</span></span> &#123;w := WorkerWG2&#123;in: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>),done: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;wg.Done()&#125;,&#125;<span class="hljs-keyword">go</span> doWorkWaitDone2(id, w)<span class="hljs-keyword">return</span> w&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CommunicateWaitDone2</span><span class="hljs-params">()</span></span>  &#123;<span class="hljs-comment">// 只能发数据  chan&lt;- int 将channel 作为函数返回参数  即 channel也是一等公民</span><span class="hljs-keyword">var</span> works [<span class="hljs-number">10</span>]WorkerWG2<span class="hljs-keyword">var</span> wg sync.WaitGroup<span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;works[i] = createWaitDoneWorkers2(i, &amp;wg)&#125;  wg.Add(<span class="hljs-number">20</span>)  <span class="hljs-comment">// 如果知道Add()数，最好一次性添加 否则会出现  panic: sync: negative WaitGroup counter</span><span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;worker.in &lt;- <span class="hljs-string">&#x27;a&#x27;</span> + i<span class="hljs-comment">//wg.Add(1)</span>&#125;<span class="hljs-keyword">for</span> i, worker := <span class="hljs-keyword">range</span> works&#123;worker.in &lt;- <span class="hljs-string">&#x27;A&#x27;</span> + i<span class="hljs-comment">//wg.Add(1)</span>&#125;wg.Wait()&#125;</code></pre><h5 id="利用channel遍历树"><a href="#利用channel遍历树" class="headerlink" title="利用channel遍历树"></a>利用channel遍历树</h5><pre><code class="hljs golang"><span class="hljs-keyword">package</span> goroutines<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-keyword">type</span> Node <span class="hljs-keyword">struct</span> &#123;Value       <span class="hljs-keyword">int</span>Left, Right *Node&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createNode</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Node</span></span> &#123;<span class="hljs-keyword">return</span> &amp;Node&#123;Value: value&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span> <span class="hljs-title">setValue</span><span class="hljs-params">(value <span class="hljs-keyword">int</span>)</span></span> &#123;<span class="hljs-comment">// 接收者使用指针才可以改变结构内容</span><span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;fmt.Println(<span class="hljs-string">&quot;Setting Value to nil node. Ignored.&quot;</span>)<span class="hljs-keyword">return</span>&#125;node.Value = value&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span>&#125;fmt.Print(node.Value, <span class="hljs-string">&quot; &quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span><span class="hljs-title">travelsWithFunc</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(*Node)</span>)</span> &#123;<span class="hljs-keyword">if</span> node == <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span>&#125;node.Left.travelsWithFunc(f)f(node)node.Right.travelsWithFunc(f)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(node *Node)</span><span class="hljs-title">travelWithChannel</span><span class="hljs-params">()</span> <span class="hljs-title">chan</span> *<span class="hljs-title">Node</span></span>&#123;c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *Node)<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;node.travelsWithFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(node *Node)</span></span> &#123;c &lt;- node&#125;)<span class="hljs-built_in">close</span>(c)&#125;()<span class="hljs-keyword">return</span> c&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initTree</span><span class="hljs-params">()</span> *<span class="hljs-title">Node</span></span> &#123;<span class="hljs-keyword">var</span> root Noderoot = Node&#123;Value: <span class="hljs-number">3</span>&#125;root.Left = &amp;Node&#123;&#125;root.Right = &amp;Node&#123;<span class="hljs-number">5</span>, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>&#125;root.Right.Left = <span class="hljs-built_in">new</span>(Node)root.Left.Right = createNode(<span class="hljs-number">2</span>)root.Right.Left.setValue(<span class="hljs-number">4</span>)<span class="hljs-keyword">return</span> &amp;root&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Demo</span><span class="hljs-params">()</span></span>  &#123;t := initTree()<span class="hljs-comment">// 计数</span>  nodeCount := <span class="hljs-number">0</span>t.travelsWithFunc(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(node *Node)</span></span> &#123;nodeCount++&#125;)fmt.Println(<span class="hljs-string">&quot;Node counts&quot;</span>, nodeCount)<span class="hljs-comment">// 树中最大值</span>  c := t.travelWithChannel()maxNode := <span class="hljs-number">0</span><span class="hljs-comment">// 从channel中取</span><span class="hljs-keyword">for</span> n := <span class="hljs-keyword">range</span> c &#123;<span class="hljs-keyword">if</span> maxNode &lt; n.Value &#123;maxNode = n.Value&#125;&#125;fmt.Println(<span class="hljs-string">&quot;Max node:&quot;</span>, maxNode)&#125;</code></pre><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><h4 id="gopm-获取无法下载的包"><a href="#gopm-获取无法下载的包" class="headerlink" title="gopm 获取无法下载的包"></a>gopm 获取无法下载的包</h4><p><code>go get -v github.com/gpmgo/gopm</code></p><p>安装踩坑：</p><pre><code class="hljs zsh">github.com/codegangsta/cli: github.com/codegangsta/cli@v1.22.5: parsing go.mod:module declares its path as: github.com/urfave/cli        but was required as: github.com/codegangsta/cli</code></pre><p>​    关闭go mod即可成功安装</p><p>github地址：<a href="https://github.com/gpmgo/gopm">https://github.com/gpmgo/gopm</a></p><p>文档路径：<a href="https://github.com/gpmgo/docs/tree/master/zh-CN">https://github.com/gpmgo/docs/tree/master/zh-CN</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ML】机器学习概述与简单应用</title>
    <link href="/2021/01/11/ml/"/>
    <url>/2021/01/11/ml/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习<a id="more"></a></h3><h4 id="直观视角下的机器学习"><a href="#直观视角下的机器学习" class="headerlink" title="直观视角下的机器学习"></a>直观视角下的机器学习</h4><p>大众视角：</p><p><img src="/images/ml/1.jpg" alt="1"></p><p>程序员视角：</p><p><img src="/images/ml/2.jpg" alt="2"></p><p><img src="/images/ml/2.png" alt="2"></p><p>目前机器学习已经应用到了生活的各个方面。</p><p>百度搜索：其背后有这复杂的机器学习系统在努力地进行这个跟我们目标关键词相关的检索、排序工作；</p><p>美图、美拍这样的照相软件：使用了机器学习来识别面部并进行一定程度的美化；</p><p>垃圾箱里躺着的垃圾邮件：它们都不是我们主动拖拽移动进去的，而是机器学习帮我们自动地识别了垃圾邮件；</p><p>京东、天猫购物时，推荐的一些我们感兴趣的商品：促成我们更加便捷地购买，机器学习的推荐算法在其中发挥作用；</p><p>还有，新闻的推荐系统、语音识别、自然语言处理、无人驾驶、机器翻译等众多领域都有机器学习的影子。</p><p>维基百科：<a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0</a></p><p>百度百科：<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/217599">https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/217599</a></p><p>机器学习实际上是一门”教会”计算机学习而不需要明确地进行编程的科学。比如，扫地机器人，它应该怎样帮助我们清扫我们的房子呢？一种办法是让它学习我们如何清扫，让它看看我们都捡起了什么东西，然后把它们又放到什么地方，而不需要编写固定的程序让它们识别垃圾，并将它们移动到固定的垃圾桶。</p><p>机器学习——实际上在很多问题上都是一种通用解决方案。</p><p>它只需要通过大量的实例就可以以很高的精度逼近准确的解决方案。它带来的好处是不需要严格地去分析具体问题并构造精确解，它以一种通用的解决方案框架来对问题进行抽象建模，并通过大量的实例来纠正模型中的参数，并最终以该模型来逼近精确解，最终达到应用标准。</p><p><img src="/images/ml/1-2.jpg" alt="1-2"></p><h4 id="人工智能、机器学习与深度学习"><a href="#人工智能、机器学习与深度学习" class="headerlink" title="人工智能、机器学习与深度学习"></a>人工智能、机器学习与深度学习</h4><p><img src="/images/ml/2-1.jpg" alt="2-1"></p><p><img src="/images/ml/2-2.jpg" alt="2-2"></p><p><img src="/images/ml/2-3.jpg" alt="2-3"></p><p><img src="/images/ml/2-4.jpg" alt="2-4"></p><p><img src="/images/ml/2-5.jpg" alt="2-5"></p><h4 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h4><p>机器学习根据训练方法大致可以分为3大类：</p><ol><li>监督学习</li><li>非监督学习</li><li>强化学习</li></ol><p>除此之外，大家可能还听过“半监督学习”之类的说法，但是那些都是基于上面3类的变种，本质没有改变。</p><h5 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h5><p>监督学习是指我们给算法一个数据集，并且给定正确答案。机器通过数据来学习正确答案的计算方法。</p><p><img src="/images/ml/1-31.png" alt="1-31"></p><p><img src="/images/ml/1-312.png" alt="1-312"></p><p>监督式学习采用分类和回归技术开发预测模型。</p><p>   <strong>分类技术</strong>可预测离散的响应 — 例如，电子邮件是不是垃圾邮件，肿瘤是恶性还是良性的。分类模型可将输入数据划分成不同类别。典型的应用包括医学成像、语音识别和信用评估。</p><p>如果您的数据能进行标记、分类或分为特定的组或类，则使用分类。例如，笔迹识别的应用程序使用分类来识别字母和数字。在图像处理和计算机视觉中，<a href="https://ww2.mathworks.cn/discovery/pattern-recognition.html">无监督模式识别</a>技术用于对象检测和图像分割。</p><p>  <strong>回归技术</strong>可预测连续的响应 — 例如，温度的变化或电力需求中的波动。典型的应用包括电力系统负荷预测和算法交易。</p><p>如果您在处理一个数据范围，或您的响应性质是一个实数（比如温度，或一件设备发生故障前的运行时间），则使用回归方法。</p><h5 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h5><p>非监督学习中，给定的数据集没有“正确答案”，所有的数据都是一样的。无监督学习的任务是从给定的数据集中，挖掘出潜在的结构。</p><p><img src="/images/ml/1-32.png" alt="1-32"></p><p><img src="/images/ml/1-322.png" alt="1-322"></p><p>  <strong>聚类</strong>是一种最常用的无监督学习技术。这种技术可通过探索性数据分析发现数据中隐藏的模式或分组。<a href="https://ww2.mathworks.cn/discovery/cluster-analysis.html">聚类分析</a>的应用包括基因序列分析、市场调查和对象识别。</p><p>  <strong>降维</strong>就是指采用某种映射方法，将原高维空间中的数据点映射到低维度的空间中。降维的本质是学习一个映射函数 f : x-&gt;y，其中x是原始数据点的表达，目前最多使用向量表达形式。</p><p>目前大部分降维算法处理向量表达的数据，也有一些降维算法处理高阶张量表达的数据。之所以使用降维后的数据表示是因为在原始的高维空间中，包含有冗余信息以及噪音信息，在实际应用例如图像识别中造成了误差，降低了准确率；而通过降维,我们希望减少 <a href="http://www.hudong.com/wiki/%E5%86%97%E4%BD%99%E4%BF%A1%E6%81%AF">冗余信息</a> 所造成的误差,提高识别（或其他应用）的精度。又或者希望通过降维算法来寻找数据内部的本质结构特征。</p><h5 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h5><p>强化学习更接近生物学习的本质，因此有望获得更高的智能。它关注的是智能体如何在环境中采取一系列行为，从而获得最大的累积回报。通过强化学习，一个智能体应该知道在什么状态下应该采取什么行为。</p><p><img src="/images/ml/1-33.jpg" alt="1-33"></p><h3 id="怎样由数据和答案得到规则？"><a href="#怎样由数据和答案得到规则？" class="headerlink" title="怎样由数据和答案得到规则？"></a>怎样由数据和答案得到规则？</h3><h4 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h4><h5 id="公司历史数据积累"><a href="#公司历史数据积累" class="headerlink" title="公司历史数据积累"></a>公司历史数据积累</h5><h5 id="常见公开数据集"><a href="#常见公开数据集" class="headerlink" title="常见公开数据集"></a>常见公开数据集</h5><p><a href="https://www.infoq.cn/article/zCGdpvyxJJl7*ja4RQAZ">https://www.infoq.cn/article/zCGdpvyxJJl7*ja4RQAZ</a></p><p><a href="https://zhuanlan.zhihu.com/p/34497496">https://zhuanlan.zhihu.com/p/34497496</a></p><h5 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h5><h4 id="特征表达（去噪、特征提取与选择）"><a href="#特征表达（去噪、特征提取与选择）" class="headerlink" title="特征表达（去噪、特征提取与选择）"></a>特征表达（去噪、特征提取与选择）</h4><p>其实，说白了，就是我们人眼可见的特征转化为数字特征（可以用数学公式）的过程，并且这一过程是机器学习最重要的环节。</p><p>  <strong>去噪</strong>：去除影响机器学习结果的原始数据。</p><p>  <strong>分类变量特征提取</strong>：房价预测中房子的面积、朝向、位置、装修、楼层等等，它是标记的变量，不是连续的。</p><p>  <strong>文字特征提取</strong>：很多机器学习问题涉及自然语言处理（NLP），必然要处理文字信息。文字必须转换成可以量化的特征向量。例如咱们公司的研发部算法组做的垃圾广告屏蔽器。</p><p>  <strong>图片特征提取</strong>：做图像识别时，我们人眼看到的时图片，但是在机器中则是一个数字表示的二维矩阵。</p><p>  <strong>数据标准化</strong>：主要用于对提取后的数字特征进行处理，因为提取好的数字特征可能会差距比较大，那么训练模型时，得到的特征权重会比较大或者比较小，同时也影响计算速度。</p><h4 id="模型选择"><a href="#模型选择" class="headerlink" title="模型选择"></a>模型选择</h4><p>选择正确的算法看似难以驾驭——需要从几十种监督式和非监督机器学习算法中选择，每种算法又包含不同的学习方法。</p><p>没有最佳方法或万全之策。找到正确的算法只是试错过程的一部分——即使是经验丰富的数据科学家，也无法说出某种算法是否无需试错即可使用。但算法的选择还取决于您要处理的数据的大小和类型、您要从数据中获得的洞察力以及如何运用这些洞察力。</p><p><img src="/images/ml/3-31.png" alt="3-31"></p><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p>房价预测为例</p><p><img src="/images/ml/3-4-1.png" alt="3-4-1"></p><p>算法模型以简单多变量线性回归为例</p><table><thead><tr><th>面积(㎡)</th><th>卧室数</th><th>卫生间数</th><th>房龄</th><th>售价(百万元)</th></tr></thead><tbody><tr><td>62.47</td><td>2</td><td>1</td><td>12</td><td>213</td></tr><tr><td>58.05</td><td>1</td><td>1</td><td>20</td><td>180</td></tr><tr><td>55.87</td><td>1</td><td>1</td><td>16</td><td>152</td></tr><tr><td>68.04</td><td>2</td><td>2</td><td>18</td><td>198</td></tr></tbody></table><p><img src="/images/ml/3-4-2.jpg" alt="3-4-2"></p><p>那么，这里的假设函数</p><p><img src="/images/ml/3-4-3.jpg" alt="3-4-3"></p><p>假设值与真实值之间的差就是这个模型的误差（代价）</p><p><img src="/images/ml/3-4-4.jpg" alt="3-4-4"></p><p>当代价函数的值趋近于0时，模型就比较完美了</p><h4 id="参数调整"><a href="#参数调整" class="headerlink" title="参数调整"></a>参数调整</h4><p>那怎样能是代价函数最小化？</p><p>梯度下降</p><p>共轭梯度</p><p>拟牛顿迭代法（BFGS）</p><p>L-BFGS</p><p>……</p><p>这里，我们已梯度下降法为例：</p><p><img src="/images/ml/3-4-5.jpg" alt="3-4-5"></p><h4 id><a href="#" class="headerlink" title></a><img src="/images/ml/3-4-6.jpg" alt="3-4-6"></h4><h4 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h4><p>对于分类问题：</p><p>正确率、召回率、F1值等等</p><p><img src="/images/ml/3-4-8.jpg" alt="3-4-8"></p><p><img src="/images/ml/3-4-7.jpg" alt="3-4-7"></p><p>对于回归问题：</p><p><img src="/images/ml/3-4-9.jpg" alt="3-6-3"></p><p><img src="/images/ml/3-4-10.jpg" alt="3-6-4"></p><p>与过拟合对应的，就有欠拟合</p><h4 id="实际预测"><a href="#实际预测" class="headerlink" title="实际预测"></a>实际预测</h4><p>直接将样本参数带入h假设函数，便可以得到预测值</p><h3 id="简单线性回归实现"><a href="#简单线性回归实现" class="headerlink" title="简单线性回归实现"></a>简单线性回归实现</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<span class="hljs-keyword">import</span> matplotlibmatplotlib.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]matplotlib.rcParams[<span class="hljs-string">&#x27;font.family&#x27;</span>] = <span class="hljs-string">&#x27;sans-serif&#x27;</span>matplotlib.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> axes3d<span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> cmimport matplotlib.ticker <span class="hljs-keyword">as</span> mtick<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loadDataSet</span>(<span class="hljs-params">filename</span>):</span>    X = []    Y = []    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:        <span class="hljs-keyword">for</span> idx, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f):            line = line.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).strip()            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> line:                <span class="hljs-keyword">continue</span>            eles = line.split()            <span class="hljs-keyword">if</span> idx == <span class="hljs-number">0</span>:                numFea = <span class="hljs-built_in">len</span>(eles)            eles = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, eles))            X.append(eles[:<span class="hljs-number">-1</span>])            Y.append([eles[<span class="hljs-number">-1</span>]])    <span class="hljs-keyword">return</span> np.array(X), np.array(Y)<span class="hljs-comment"># 假设函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">h</span>(<span class="hljs-params">theta, X</span>):</span>    <span class="hljs-keyword">return</span> np.dot(X, theta)<span class="hljs-comment"># 代价函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">J</span>(<span class="hljs-params">theta, X, Y</span>):</span>    m = <span class="hljs-built_in">len</span>(X)    <span class="hljs-keyword">return</span> np.<span class="hljs-built_in">sum</span>(np.dot((h(theta, X) - Y).T, (h(theta, X) - Y)) / (<span class="hljs-number">2</span> * m))<span class="hljs-comment"># 梯度下降更新公式</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bgd</span>(<span class="hljs-params">alpha, maxloop, epsilon, X, Y</span>):</span>    m, n = X.shape  <span class="hljs-comment"># m是样本数，n是特征数(包括了全部是1的x0)，其实也就是参数theta的个数</span>    theta = np.zeros((n, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 参数theta全部初始化为0</span>    count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 记录迭代轮次</span>    converged = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否已经收敛的标志</span>    error = np.inf  <span class="hljs-comment"># 当前的代价函数值</span>    errors = [J(theta, X, Y), ]  <span class="hljs-comment"># 记录每一次迭代得代价函数值</span>    thetas = &#123;&#125;    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):        thetas[i] = [theta[i, <span class="hljs-number">0</span>], ]  <span class="hljs-comment"># 记录每一个theta j的历史更新</span>    <span class="hljs-keyword">while</span> count &lt;= maxloop:        <span class="hljs-keyword">if</span> (converged):            <span class="hljs-keyword">break</span>        count = count + <span class="hljs-number">1</span>        <span class="hljs-comment"># 这里，我们的梯度计算统一了</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):            deriv = np.dot(X[:, j].T, (h(theta, X) - Y)).<span class="hljs-built_in">sum</span>() / m            thetas[j].append(theta[j, <span class="hljs-number">0</span>] - alpha * deriv)        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):            theta[j, <span class="hljs-number">0</span>] = thetas[j][<span class="hljs-number">-1</span>]        error = J(theta, X, Y)        errors.append(error)        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(errors[<span class="hljs-number">-1</span>] - errors[<span class="hljs-number">-2</span>]) &lt; epsilon):            converged = <span class="hljs-literal">True</span>    <span class="hljs-keyword">return</span> theta, errors, thetas<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">standarize</span>(<span class="hljs-params">X</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;特征标准化处理</span><span class="hljs-string"></span><span class="hljs-string">    Args:</span><span class="hljs-string">        X 样本集</span><span class="hljs-string">    Returns:</span><span class="hljs-string">        标准后的样本集</span><span class="hljs-string">    &quot;&quot;&quot;</span>    m, n = X.shape    <span class="hljs-comment"># 归一化每一个特征</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):        features = X[:, j]        meanVal = features.mean(axis=<span class="hljs-number">0</span>)        std = features.std(axis=<span class="hljs-number">0</span>)        <span class="hljs-keyword">if</span> std != <span class="hljs-number">0</span>:            X[:, j] = (features - meanVal) / std        <span class="hljs-keyword">else</span>:            X[:, j] = <span class="hljs-number">0</span>    <span class="hljs-keyword">return</span> X<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    data_set = os.path.dirname(os.path.abspath(__file__))+<span class="hljs-string">&#x27;/houses.txt&#x27;</span>    ori_X, Y = loadDataSet(data_set)  <span class="hljs-comment"># 从南京链家抓取的夫子庙附近的房屋数据</span>    print(ori_X.shape)    print(Y.shape)    m, n = ori_X.shape    X = standarize(ori_X.copy())    X = np.concatenate((np.ones((m, <span class="hljs-number">1</span>)), X), axis=<span class="hljs-number">1</span>)    alpha = <span class="hljs-number">1</span>  <span class="hljs-comment"># 学习率</span>    maxloop = <span class="hljs-number">5000</span>  <span class="hljs-comment"># 最大迭代次数</span>    epsilon = <span class="hljs-number">0.000001</span>  <span class="hljs-comment"># 收敛判断条件</span>    result = bgd(alpha, maxloop, epsilon, X, Y)    theta, errors, thetas = result    <span class="hljs-comment"># 预测</span>    normalizedSize = (<span class="hljs-number">70</span> - ori_X[:, <span class="hljs-number">0</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">0</span>].std(<span class="hljs-number">0</span>)    normalizedBr = (<span class="hljs-number">2</span> - ori_X[:, <span class="hljs-number">1</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">1</span>].std(<span class="hljs-number">0</span>)    predicateX = np.matrix([[<span class="hljs-number">1</span>, normalizedSize, normalizedBr]])    price = h(theta, predicateX)    print(<span class="hljs-string">&#x27;70㎡两居估价: ￥%.4f万元&#x27;</span> % price)    <span class="hljs-comment"># %matplotlib</span>    <span class="hljs-comment"># 打印拟合平面</span>    fittingFig = plt.figure(figsize=(<span class="hljs-number">16</span>, <span class="hljs-number">12</span>))    title = <span class="hljs-string">&#x27;bgd: rate=%.3f, maxloop=%d, epsilon=%.3f \n&#x27;</span> % (alpha, maxloop, epsilon)    ax = fittingFig.gca(projection=<span class="hljs-string">&#x27;3d&#x27;</span>)    xx = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">200</span>, <span class="hljs-number">25</span>)    yy = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">25</span>)    zz = np.zeros((<span class="hljs-number">25</span>, <span class="hljs-number">25</span>))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">25</span>):            normalizedSize = (xx[i] - ori_X[:, <span class="hljs-number">0</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">0</span>].std(<span class="hljs-number">0</span>)            normalizedSize = (xx[i] - ori_X[:, <span class="hljs-number">0</span>].mean(<span class="hljs-number">0</span>)) / ori_X[:, <span class="hljs-number">0</span>].std(<span class="hljs-number">0</span>)            x = np.matrix([[<span class="hljs-number">1</span>, normalizedSize, normalizedBr]])            zz[i, j] = h(theta, x)    xx, yy = np.meshgrid(xx, yy)    ax.zaxis.set_major_formatter(mtick.FormatStrFormatter(<span class="hljs-string">&#x27;%.2e&#x27;</span>))    ax.plot_surface(xx, yy, zz, rstride=<span class="hljs-number">1</span>, cstride=<span class="hljs-number">1</span>, cmap=cm.rainbow, alpha=<span class="hljs-number">0.1</span>, antialiased=<span class="hljs-literal">True</span>)    xs = ori_X[:, <span class="hljs-number">0</span>].flatten()    ys = ori_X[:, <span class="hljs-number">1</span>].flatten()    zs = Y[:, <span class="hljs-number">0</span>].flatten()    ax.scatter(xs, ys, zs, c=<span class="hljs-string">&#x27;b&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>)    ax.set_xlabel(<span class="hljs-string">u&#x27;面积&#x27;</span>)    ax.set_ylabel(<span class="hljs-string">u&#x27;卧室数&#x27;</span>)    ax.set_zlabel(<span class="hljs-string">u&#x27;估价&#x27;</span>)    plt.show()    errorsFig = plt.figure()    ax = errorsFig.add_subplot(<span class="hljs-number">111</span>)    ax.yaxis.set_major_formatter(mtick.FormatStrFormatter(<span class="hljs-string">&#x27;%.2e&#x27;</span>))    ax.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(errors)), errors)    ax.set_xlabel(<span class="hljs-string">u&#x27;迭代次数&#x27;</span>)    ax.set_ylabel(<span class="hljs-string">u&#x27;代价函数&#x27;</span>)    plt.show()</code></pre><p><img src="/images/ml/3-6-1.jpg" alt="3-6-1"></p><p><img src="/images/ml/3-6-2.jpg" alt="3-6-2"></p>]]></content>
    
    
    <categories>
      
      <category>ML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mac】vim环境设置</title>
    <link href="/2021/01/10/vim/"/>
    <url>/2021/01/10/vim/</url>
    
    <content type="html"><![CDATA[<h2 id="开发神器vim工具"><a href="#开发神器vim工具" class="headerlink" title="开发神器vim工具"></a>开发神器vim工具<a id="more"></a></h2><p><img src="/images/vim/vim-keymap.png"></p><h3 id="安装MacVim来替代系统自带vim"><a href="#安装MacVim来替代系统自带vim" class="headerlink" title="安装MacVim来替代系统自带vim"></a>安装MacVim来替代系统自带vim</h3><p>一般情况下，Mac 自带的Vim不能满足大多的需求，所以选择安装MacVim</p><p>通过一下命令可以查看预装vim的信息</p><pre><code class="hljs zsh"><span class="hljs-comment"># 查看预装vim版本</span>vim --version<span class="hljs-comment"># 查看预装vim路径</span><span class="hljs-built_in">where</span> vim</code></pre><h4 id="MacVim安装"><a href="#MacVim安装" class="headerlink" title="MacVim安装"></a>MacVim安装</h4><p>有两种方式来安装macvim:</p><ol><li>Github上下载<a href="https://macvim-dev.github.io/macvim"><code>macvim.dmg</code></a>安装包进行安装</li><li>使用<a href="https://brew.sh/">Homebrew</a>安装【推荐】</li></ol><p>brew安装macvim</p><pre><code class="hljs zsh">brew install macvim</code></pre><p>为macvim中的vim创建别名，覆盖掉系统自带的vim，在~/.bash_profile中添加以下命令</p><pre><code class="hljs zsh"><span class="hljs-built_in">alias</span> vi=vim<span class="hljs-built_in">alias</span> vim=mvim<span class="hljs-built_in">alias</span> mvim=<span class="hljs-string">&#x27;/usr/local/bin/mvim -v&#x27;</span><span class="hljs-comment"># 刷新配置文件</span><span class="hljs-built_in">source</span> ~/.bash_profile</code></pre><h4 id="MacVim配置"><a href="#MacVim配置" class="headerlink" title="MacVim配置"></a>MacVim配置</h4><p>在vim启动过程中，首先将查找配置文件并执行其中的命令，而这些初始化文件一般有vimrc、gvimrc和exrc三种。通过<code>:version</code>命令可以查看vim的配置文件信息。</p><p>vim的配置文件有全局和用户两种版本，分别存放于<code>$VIM</code>和<code>$HOME</code>目录中，用户配置文件默认是没有的，必要时由用户自己在<code>$HOME</code>目录下创建。可以使用<code>:echo</code>命令查看他们的路径，使用<code>:e</code>命令进入目录。</p><pre><code class="hljs zsh">:<span class="hljs-built_in">echo</span> <span class="hljs-variable">$VIM</span>/usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim:<span class="hljs-built_in">echo</span> <span class="hljs-variable">$HOME</span>/Users/wangpeng<span class="hljs-comment"># 可以通过:scriptname查看各脚本的加载顺序</span>:scriptname/usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/vimrc  2: ~/.vimrc  3: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syntax.vim  4: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/syntax/synload.vim  5: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/syntax/syncolor.vim  6: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/filetype.vim  7: ~/.vim/colors/solarized.vim  8: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/ftoff.vim  9: ~/.vim/bundle/Vundle.vim/<span class="hljs-built_in">autoload</span>/vundle.vim 10: ~/.vim/bundle/Vundle.vim/<span class="hljs-built_in">autoload</span>/vundle/config.vim 11: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/ftplugin.vim 12: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/indent.vim 13: ~/.vim/bundle/nerdtree/plugin/NERD_tree.vim 14: ~/.vim/bundle/nerdtree/<span class="hljs-built_in">autoload</span>/nerdtree.vim 15: ~/.vim/bundle/nerdtree/lib/nerdtree/path.vim 16: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_controller.vim 17: ~/.vim/bundle/nerdtree/lib/nerdtree/menu_item.vim 18: ~/.vim/bundle/nerdtree/lib/nerdtree/key_map.vim 19: ~/.vim/bundle/nerdtree/lib/nerdtree/bookmark.vim 20: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_file_node.vim 21: ~/.vim/bundle/nerdtree/lib/nerdtree/tree_dir_node.vim 22: ~/.vim/bundle/nerdtree/lib/nerdtree/opener.vim 23: ~/.vim/bundle/nerdtree/lib/nerdtree/creator.vim 24: ~/.vim/bundle/nerdtree/lib/nerdtree/flag_set.vim 25: ~/.vim/bundle/nerdtree/lib/nerdtree/nerdtree.vim 26: ~/.vim/bundle/nerdtree/lib/nerdtree/ui.vim 27: ~/.vim/bundle/nerdtree/lib/nerdtree/event.vim 28: ~/.vim/bundle/nerdtree/lib/nerdtree/notifier.vim 29: ~/.vim/bundle/nerdtree/<span class="hljs-built_in">autoload</span>/nerdtree/ui_glue.vim 30: ~/.vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim 31: ~/.vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim 32: ~/.vim/bundle/nerdtree/nerdtree_plugin/vcs.vim 33: ~/.vim/bundle/nerdtree-git-plugin/nerdtree_plugin/git_status.vim 34: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus.vim 35: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/log.vim 36: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/listener.vim 37: ~/.vim/bundle/vim-autopep8/plugin/python_autopep8.vim 38: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/getscriptPlugin.vim 39: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/gzip.vim 40: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/logiPat.vim 41: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/manpager.vim 42: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/matchparen.vim 43: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/netrwPlugin.vim 44: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/rrhelper.vim 45: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/spellfile.vim 46: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tarPlugin.vim 47: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/tohtml.vim 48: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/vimballPlugin.vim 49: /usr/<span class="hljs-built_in">local</span>/Cellar/macvim/8.2-166_1/MacVim.app/Contents/Resources/vim/runtime/plugin/zipPlugin.vim 50: ~/.vim/bundle/indentLine/after/plugin/indentLine.vim 51: ~/.vim/bundle/nerdtree/syntax/nerdtree.vim 52: ~/.vim/bundle/nerdtree-git-plugin/after/syntax/nerdtree.vim 53: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/util.vim 54: ~/.vim/bundle/nerdtree-git-plugin/<span class="hljs-built_in">autoload</span>/gitstatus/job.vim</code></pre><h5 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h5><pre><code class="hljs zsh"><span class="hljs-comment"># 切换至用户目录</span><span class="hljs-built_in">cd</span> ~<span class="hljs-comment"># 使用vim创建并打开.vimrc</span>vim .vimrc</code></pre><h5 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h5><pre><code class="hljs zsh">colorscheme solarized</code></pre><h5 id="显示帮助为中文"><a href="#显示帮助为中文" class="headerlink" title="显示帮助为中文"></a>显示帮助为中文</h5><p>下载<a href="https://sourceforge.net/projects/vimcdoc/?source=typ_redirect">vimdoc</a></p><p><img src="/images/vim/doc.png"></p><p>将文件解压到~/.vim/doc，若路径不存在则创建</p><p>打开vim执行:helptags ~/.vim/doc</p><p>在~/.vimrc中进行配置：</p><pre><code class="hljs zsh"><span class="hljs-built_in">set</span> helplang=cn <span class="hljs-keyword">if</span> version &gt;= 603    <span class="hljs-built_in">set</span> helplang=cn    <span class="hljs-built_in">set</span> encoding=utf-8endif</code></pre><p>常见的vim快捷键可以看<a href="https://stackoverflow.com/questions/5400806/what-are-the-most-used-vim-commands-keypresses/5400978#5400978">这里</a></p><h5 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h5><p>enc,fenc,fencs,tenc,一般乱码多是因这些参数设置不正确引起：</p><ol><li>enc，vim内部使用的编码，如buffer，寄存器中的字符串，windows一般是gbk，mac是utf-8</li><li>fenc，当前打开文件自身的编码，如果enc和fenc不一致，vim会做编码转换，转换成fenc编码保存文件</li><li>fencs，一个字符编码列表，编码的自动识别就是通过它实现的</li><li>tenc，终端使用的编码，或者说vim用于屏幕显示时的编码，显示时vim会把内部编码转换为屏幕编码进行输出，默认为enc</li></ol><pre><code class="hljs zsh"><span class="hljs-string">&quot; 将enc设置为utf-8</span><span class="hljs-string">set enc=utf-8</span></code></pre><h4 id="vim插件管理器—Vundle"><a href="#vim插件管理器—Vundle" class="headerlink" title="vim插件管理器—Vundle"></a>vim插件管理器—Vundle</h4><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> is short for <em>Vim bundle</em> and is a <a href="http://www.vim.org/">Vim</a> plugin manager.</p><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> allows you to…</p><ul><li>keep track of and <a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L126-L233">configure</a> your plugins right in the <code>.vimrc</code></li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L234-L254">install</a> configured plugins (a.k.a. scripts/bundle)</li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L255-L265">update</a> configured plugins</li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L266-L295">search</a> by name all available <a href="http://vim-scripts.org/vim/scripts.html">Vim scripts</a></li><li><a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L303-L318">clean</a> unused plugins up</li><li>run the above actions in a <em>single keypress</em> with <a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L319-L360">interactive mode</a></li></ul><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> automatically…</p><ul><li>manages the <a href="http://vimdoc.sourceforge.net/htmldoc/options.html#'runtimepath'">runtime path</a> of your installed scripts</li><li>regenerates <a href="http://vimdoc.sourceforge.net/htmldoc/helphelp.html#:helptags">help tags</a> after installing and updating</li></ul><p><a href="http://github.com/VundleVim/Vundle.vim">Vundle</a> is undergoing an <a href="https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L372-L396">interface change</a>, please stay up to date to get latest changes.</p><h5 id="安装Vundle"><a href="#安装Vundle" class="headerlink" title="安装Vundle"></a>安装Vundle</h5><pre><code class="hljs zsh">git <span class="hljs-built_in">clone</span> https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></pre><p>下载Vundle插件管理器，将其放置在Vim编辑器bundles文件夹中。现在，可以通过.vimrc配置文件来管理所有扩展了。</p><h5 id="配置Vundle"><a href="#配置Vundle" class="headerlink" title="配置Vundle"></a>配置Vundle</h5><pre><code class="hljs zsh"><span class="hljs-built_in">set</span> nocompatible              <span class="hljs-string">&quot; required</span><span class="hljs-string">filetype off                  &quot;</span> required<span class="hljs-string">&quot; set the runtime path to include Vundle and initialize</span><span class="hljs-string">set rtp+=~/.vim/bundle/Vundle.vim</span><span class="hljs-string">call vundle#begin()</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> alternatively, pass a path <span class="hljs-built_in">where</span> Vundle should install plugins<span class="hljs-string">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> <span class="hljs-built_in">let</span> Vundle manage Vundle, requiredPlugin <span class="hljs-string">&#x27;gmarik/Vundle.vim&#x27;</span><span class="hljs-string">&quot; Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)</span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> All of your Plugins must be added before the following linecall vundle<span class="hljs-comment">#end()            &quot; required</span>filetype plugin indent on    <span class="hljs-string">&quot; required</span></code></pre><h5 id="使用Vundle"><a href="#使用Vundle" class="headerlink" title="使用Vundle"></a>使用Vundle</h5><p>将想要安装的插件，按照地址填写方法，将地址填写在<strong>vundle#begin</strong>和<strong>vundle#end</strong>之间就可以</p><p>运行 :PluginInstall</p><pre><code class="hljs zsh">:PlugInstall</code></pre><p>执行<code>:PluginInstall</code>后的截图</p><p><img src="/images/vim/vundle.png"></p><h5 id="移除不需要的插件"><a href="#移除不需要的插件" class="headerlink" title="移除不需要的插件"></a>移除不需要的插件</h5><ol><li>编辑.vimrc文件移除的你要移除的插件所对应的plugin那一行</li><li>输入命令<code>:BundleClean</code></li></ol><h5 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h5><pre><code class="hljs zsh">:BundleList              -列举列表(也就是.vimrc)中配置的所有插件:BundleInstall          -安装列表中的全部插件:BundleInstall!         -更新列表中的全部插件:BundleSearch foo   -查找foo插件:BundleSearch! foo  -刷新foo插件缓存:BundleClean           -清除列表中没有的插件:BundleClean!          -清除列表中没有的插件</code></pre><h4 id="安装插件—打造IDE"><a href="#安装插件—打造IDE" class="headerlink" title="安装插件—打造IDE"></a>安装插件—打造IDE</h4><h5 id="添加目录树—NERDTree"><a href="#添加目录树—NERDTree" class="headerlink" title="添加目录树—NERDTree"></a>添加目录树—NERDTree</h5><p>NERDTree的作用就是列出当前路径的目录树，一般IDE都是有的。可以方便的浏览项目的总体的目录结构和创建删除重命名文件或文件名</p><h6 id="安装NERDTree"><a href="#安装NERDTree" class="headerlink" title="安装NERDTree"></a>安装NERDTree</h6><p>添加目录树：<a href="https://github.com/preservim/nerdtree">nerdtree</a></p><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span></code></pre><p>添加git状态图标：<a href="https://github.com/Xuyuanp/nerdtree-git-plugin">nerdtree-git</a></p><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;Xuyuanp/nerdtree-git-plugin&#x27;</span></code></pre><h6 id="配置NERDTree"><a href="#配置NERDTree" class="headerlink" title="配置NERDTree"></a>配置NERDTree</h6><pre><code class="hljs zsh"><span class="hljs-string">&quot;使用F3键快速调出和隐藏它</span><span class="hljs-string">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><span class="hljs-string"></span><span class="hljs-string">let NERDTreeChDirMode=1</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span>显示书签<span class="hljs-string">&quot;</span><span class="hljs-string">let NERDTreeShowBookmarks=1</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span>设置忽略文件类型<span class="hljs-string">&quot;</span><span class="hljs-string">let NERDTreeIgnore=[&#x27;\~$&#x27;, &#x27;\.pyc$&#x27;, &#x27;\.swp$&#x27;]</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span>窗口大小<span class="hljs-string">&quot;</span><span class="hljs-string">let NERDTreeWinSize=25</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 修改默认箭头<span class="hljs-built_in">let</span> g:NERDTreeDirArrowExpandable = <span class="hljs-string">&#x27;▸&#x27;</span><span class="hljs-built_in">let</span> g:NERDTreeDirArrowCollapsible = <span class="hljs-string">&#x27;▾&#x27;</span><span class="hljs-string">&quot;How can I open a NERDTree automatically when vim starts up if no files were specified?</span><span class="hljs-string">autocmd StdinReadPre * let s:std_in=1</span><span class="hljs-string">autocmd VimEnter * if argc() == 0 &amp;&amp; !exists(&quot;</span>s:std_in<span class="hljs-string">&quot;) | NERDTree | endif</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 打开vim时自动打开NERDTreeautocmd vimenter * NERDTree           <span class="hljs-string">&quot;How can I open NERDTree automatically when vim starts up on opening a directory?</span><span class="hljs-string">autocmd StdinReadPre * let s:std_in=1</span><span class="hljs-string">autocmd VimEnter * if argc() == 1 &amp;&amp; isdirectory(argv()[0]) &amp;&amp; !exists(&quot;</span>s:std_in<span class="hljs-string">&quot;) | exe &#x27;NERDTree&#x27; argv()[0] | wincmd p | ene | endif</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 关闭vim时，如果打开的文件除了NERDTree没有其他文件时，它自动关闭，减少多次按:q!autocmd bufenter * <span class="hljs-keyword">if</span> (winnr(<span class="hljs-string">&quot;$&quot;</span>) == 1 &amp;&amp; exists(<span class="hljs-string">&quot;b:NERDTree&quot;</span>) &amp;&amp; b:NERDTree.isTabTree()) | q | endif<span class="hljs-string">&quot; 开发的过程中，我们希望git信息直接在NERDTree中显示出来， 和Eclipse一样，修改的文件和增加的文件都给出相应的标注， 这时需要安装的插件就是 nerdtree-git-plugin,配置信息如下</span><span class="hljs-string">let g:NERDTreeIndicatorMapCustom = &#123;</span><span class="hljs-string">    \ &quot;</span>Modified<span class="hljs-string">&quot;  : &quot;</span>✹<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Staged<span class="hljs-string">&quot;    : &quot;</span>✚<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Untracked<span class="hljs-string">&quot; : &quot;</span>✭<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Renamed<span class="hljs-string">&quot;   : &quot;</span>➜<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Unmerged<span class="hljs-string">&quot;  : &quot;</span>═<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Deleted<span class="hljs-string">&quot;   : &quot;</span>✖<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Dirty<span class="hljs-string">&quot;     : &quot;</span>✗<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Clean<span class="hljs-string">&quot;     : &quot;</span>✔︎<span class="hljs-string">&quot;,</span><span class="hljs-string">    \ &quot;</span>Unknown<span class="hljs-string">&quot;   : &quot;</span>?<span class="hljs-string">&quot;</span><span class="hljs-string">    \ &#125;</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 显示行号<span class="hljs-built_in">let</span> NERDTreeShowLineNumbers=1<span class="hljs-built_in">let</span> NERDTreeAutoCenter=1<span class="hljs-string">&quot; 在终端启动vim时，共享NERDTree</span><span class="hljs-string">let g:nerdtree_tabs_open_on_console_startup=1</span></code></pre><h5 id="分割布局"><a href="#分割布局" class="headerlink" title="分割布局"></a>分割布局</h5><p>不用安装额外插件，只需要在.vimrc设置即可</p><pre><code class="hljs zsh"><span class="hljs-string">&quot; 指定屏幕上可以进行分割布局的区域</span><span class="hljs-string">set splitbelow               &quot;</span> 允许在下部分割布局<span class="hljs-built_in">set</span> splitright               <span class="hljs-string">&quot; 允许在右侧分隔布局</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 组合快捷键：nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;    <span class="hljs-string">&quot; 组合快捷键：- Ctrl-j 切换到下方的分割窗口</span><span class="hljs-string">nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;    &quot;</span> 组合快捷键：- Ctrl-k 切换到上方的分割窗口nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;    <span class="hljs-string">&quot; 组合快捷键：- Ctrl-l 切换到右侧的分割窗口</span><span class="hljs-string">nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;    &quot;</span> 组合快捷键：- Ctrl-h 切换到左侧的分割窗口</code></pre><p>nnoremap将一个组合快捷键映射为另一个快捷键。no部分，指的是在Vim的正常模式（Normal Mode）下，<br>而不是可视模式下重新映射，更多信息请看<a href="https://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping">这里</a></p><h5 id="python代码缩进"><a href="#python代码缩进" class="headerlink" title="python代码缩进"></a>python代码缩进</h5><p>代码的正确缩进是至关重要的，我们将从以下几个方面为vim配置代码缩进功能：</p><ol><li>python代码的自动缩进</li><li>遵从<a href="https://www.cnblogs.com/ajianbeyourself/p/4377933.html">PEP8</a>代码风格标准</li><li>自动格式化为PEP8代码</li></ol><h6 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a><strong>安装插件</strong></h6><p>自动缩进有用，但是在某些情况下（比如函数定义有多行的时候），并不总是会达到你想要的效果，尤其是在符合PEP8标准方面。我们可以利用<a href="https://github.com/vim-scripts/indentpython.vim"><code>indentpython.vim</code></a>插件，来解决这个问题：</p><pre><code class="hljs zsh">Plugin <span class="hljs-string">&#x27;vim-scripts/indentpython.vim&#x27;</span></code></pre><p>将python代码自动格式化为符合pep8标准的代码用到<a href="https://github.com/tell-k/vim-autopep8"><code>tell-k/vim-autopep8</code></a>插件：</p><pre><code class="hljs zsh">Plugin <span class="hljs-string">&#x27;tell-k/vim-autopep8&#x27;</span></code></pre><p>要使用<code>tell-k/vim-autopep8</code>插件必须先在电脑上安装python的第三方包<a href="https://pypi.org/project/autopep8/"><code>autopep8</code></a>。但奇怪的是用pip安装时找不到这个包，我们使用<code>easy-install</code>来安装，只需要在m某个python环境下安装一次即可，实测在其他环境下也可用：</p><pre><code class="hljs zsh">easy_install autopep8</code></pre><h6 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h6><p>.vimrc文件中添加下面的配置。这些设置将让Vim中的Tab键就相当于4个标准的空格符，确保每行代码长度不超过80个字符，并且会以unix格式储存文件，避免在推送到Github或分享给其他用户时出现文件转换问题。</p><pre><code class="hljs zsh"><span class="hljs-string">&quot; 按照PEP8标准来配置vim</span><span class="hljs-string">au BufNewFile,BufRead *.py set tabstop=4 |set softtabstop=4|set shiftwidth=4|set textwidth=79|set expandtab|set autoindent|set fileformat=unix</span></code></pre><p>对于全栈开发，你可以设置针对每种文件类型设置au命令：</p><pre><code class="hljs zsh">au BufNewFile,BufRead *.js, *.html, *.css <span class="hljs-built_in">set</span> tabstop=2|<span class="hljs-built_in">set</span> softtabstop=2|<span class="hljs-built_in">set</span> shiftwidth=2</code></pre><p>下面来配置vim-autopep8</p><pre><code class="hljs zsh"><span class="hljs-string">&quot; Disable show diff window</span><span class="hljs-string">let g:autopep8_disable_show_diff=1</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> vim-autopep8自1.11版本之后取消了F8快捷键，需要用户自己为:Autopep8设置快捷键：autocmd FileType python noremap &lt;buffer&gt; &lt;F8&gt; :call Autopep8()&lt;CR&gt;</code></pre><h6 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h6><p>在使用macvim编辑<code>*.py</code>文件时：</p><ul><li>代码自动按照PEP8规则进行缩进；</li><li>tap键相当于4个标准空格，每行代码不超过80字符；</li><li>使用<code>:Autopep8</code>命令或者<code>F8</code>快捷键自动按照PEP8标准格式化python代码</li></ul><p>在使用macvim编辑<code>*.js</code>, <code>*.html</code>, <code>*.css</code>文件时,tap键相当于2个标准空格</p><h5 id="添加代码缩进指示线"><a href="#添加代码缩进指示线" class="headerlink" title="添加代码缩进指示线"></a>添加代码缩进指示线</h5><h6 id="安装indentline"><a href="#安装indentline" class="headerlink" title="安装indentline"></a>安装indentline</h6><p>indentLine是一款缩进指示线，由纯字符实现，效果比较完美</p><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;Yggdroot/indentLine&#x27;</span></code></pre><h6 id="配置indentline"><a href="#配置indentline" class="headerlink" title="配置indentline"></a>配置indentline</h6><p><a href="https://github.com/Yggdroot/indentLine"><code>indentLine</code></a>默认是关闭的，因此需要在.vimrc中配置才能看到效果：</p><pre><code class="hljs bash"><span class="hljs-string">&quot; 支持任意ASCII码，也可以使用特殊字符：¦, ┆, or │ ，但只在utf-8编码下有效</span><span class="hljs-string">let g:indentLine_char=&#x27;¦&#x27;   </span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 使indentline生效<span class="hljs-built_in">let</span> g:indentLine_enabled = 1</code></pre><h6 id="使用indentline"><a href="#使用indentline" class="headerlink" title="使用indentline"></a>使用indentline</h6><p>在代码缩进处，自动生成缩进指示线</p><h5 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h5><p>大多数“现代”集成开发环境（IDE）都提供对方法（methods）或类（classes）进行折叠的手段，只显示类或方法的定义部分，而不是全部的代码。</p><h6 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h6><p>本身不用安装额外插件，但为避免出现超过你所希望的折叠数目，我们推荐<a href="https://github.com/tmhedberg/SimpylFold"><code>SimplyFold</code></a>来解决这个问题：</p><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;tmhedberg/SimpylFold&#x27;</span></code></pre><h6 id="配置插件-1"><a href="#配置插件-1" class="headerlink" title="配置插件"></a>配置插件</h6><pre><code class="hljs bash"><span class="hljs-string">&quot; 必须手动输入za来折叠（和取消折叠）</span><span class="hljs-string">set foldmethod=indent                &quot;</span> 根据每行的缩进开启折叠<span class="hljs-built_in">set</span> foldlevel=99<span class="hljs-string">&quot; 使用空格键会是更好的选择,所以在你的配置文件中加上这一行命令吧：</span><span class="hljs-string">nnoremap &lt;space&gt; za</span><span class="hljs-string"></span><span class="hljs-string">&quot;</span> 希望看到折叠代码的文档字符串？<span class="hljs-built_in">let</span> g:SimpylFold_docstring_preview=1</code></pre><h6 id="使用插件-1"><a href="#使用插件-1" class="headerlink" title="使用插件"></a>使用插件</h6><p>在程序块处会显示折叠线，当光标放于折叠线时，按空格键可以切换在该折叠线处是否折叠。</p><h5 id="括号自动补全"><a href="#括号自动补全" class="headerlink" title="括号自动补全"></a>括号自动补全</h5><p><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a>主要功能是括号和引号自动补全，输入左引号和左括号自动补全另外一半,安装好就可以无需额外配置</p><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;jiangmiao/auto-pairs&#x27;</span></code></pre><h5 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h5><h6 id="安装插件-2"><a href="#安装插件-2" class="headerlink" title="安装插件"></a>安装插件</h6><pre><code class="hljs bash">Plugin <span class="hljs-string">&#x27;scrooloose/nerdcommenter&#x27;</span></code></pre><h6 id="配置插件-2"><a href="#配置插件-2" class="headerlink" title="配置插件"></a>配置插件</h6><pre><code class="hljs xml">&quot; nerdcommenter默认热键<span class="hljs-tag">&lt;<span class="hljs-name">leader</span>&gt;</span>为&#x27;\&#x27;，这里将热键设置为&#x27;,&#x27;let mapleader=&#x27;,&#x27;&quot; 设置注释快捷键map <span class="hljs-tag">&lt;<span class="hljs-name">F4</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">leader</span>&gt;</span>ci<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span></code></pre><h6 id="使用插件-2"><a href="#使用插件-2" class="headerlink" title="使用插件"></a>使用插件</h6><p>在normal模式下按v并移动光标选择需要注释的行，再按F4就可以为所有选中的行添加注释</p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】两数求和</title>
    <link href="/2020/11/25/lts_01_two_sum/"/>
    <url>/2020/11/25/lts_01_two_sum/</url>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<a id="more"></a> </p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="hljs angelscript">给定 nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>因为 nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> + <span class="hljs-number">7</span> = <span class="hljs-number">9</span>所以返回 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</code></pre><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum</a></p><h3 id="题解OR思路"><a href="#题解OR思路" class="headerlink" title="题解OR思路"></a>题解OR思路</h3><ul><li>暴力破解</li><li>利用哈希表存储遍历过的数</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<span class="hljs-comment">/**</span><span class="hljs-comment">     * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * 示例:</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  给定 nums = [2, 7, 11, 15], target = 9</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  因为 nums[0] + nums[1] = 2 + 7 = 9</span><span class="hljs-comment">     *  所以返回 [0, 1]</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  Related Topics 数组 哈希表</span><span class="hljs-comment">     *  👍 8826 👎 0</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nums</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> flag</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span> flag) &#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;= <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;nums illagal&quot;</span>);        &#125;        <span class="hljs-keyword">switch</span> (flag)&#123;            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">// 暴力破解</span>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">1</span>; i++) &#123;                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;                        <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, j&#125;;                        &#125;                    &#125;                &#125;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;No two sum solution&quot;</span>);            <span class="hljs-keyword">default</span>: <span class="hljs-comment">// 利用哈希表存储遍历过的数</span>                Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();                <span class="hljs-keyword">int</span> temp = nums[<span class="hljs-number">0</span>];                map.put(nums[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i &lt; nums.length; i++)&#123;                    temp = target - nums[i];                    <span class="hljs-keyword">if</span> (map.containsKey(temp))&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;map.get(temp), i&#125;;                    &#125;<span class="hljs-keyword">else</span>&#123;                        map.put(nums[i], i);                    &#125;                &#125;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;No two sum solution&quot;</span>);        &#125;    &#125;</code></pre><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">self, nums: List[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span>, flag=<span class="hljs-literal">None</span></span>) -&gt; List[int]:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><span class="hljs-string">    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</span><span class="hljs-string">    示例:</span><span class="hljs-string">        给定 nums = [2, 7, 11, 15], target = 9</span><span class="hljs-string">        因为 nums[0] + nums[1] = 2 + 7 = 9</span><span class="hljs-string">        所以返回 [0, 1]</span><span class="hljs-string">    Related Topics 数组 哈希表</span><span class="hljs-string">    👍 8826 👎 0</span><span class="hljs-string">    :param nums: </span><span class="hljs-string">    :param target: </span><span class="hljs-string">    :param flag: </span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> nums <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(nums) &lt;= <span class="hljs-number">1</span>:        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Illegal nums&quot;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:         num_map = &#123;nums[<span class="hljs-number">0</span>]: <span class="hljs-number">0</span>&#125;        temp = nums[<span class="hljs-number">0</span>]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):            temp = target - nums[i]            <span class="hljs-keyword">if</span> temp <span class="hljs-keyword">in</span> num_map:                <span class="hljs-keyword">return</span> [num_map[temp], i]            <span class="hljs-keyword">else</span>:                num_map.update(&#123;<span class="hljs-built_in">int</span>(nums[i]): i&#125;)    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)<span class="hljs-number">-1</span>):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):                <span class="hljs-keyword">if</span> nums[i] + nums[j] == target:                    <span class="hljs-keyword">return</span> [nums[i], nums[j]]    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No two sum solution&quot;</span>)</code></pre><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, target, flag <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<span class="hljs-comment">/*</span><span class="hljs-comment">   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><span class="hljs-comment">   你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</span><span class="hljs-comment">     示例:</span><span class="hljs-comment">       给定 nums = [2, 7, 11, 15], target = 9</span><span class="hljs-comment">       因为 nums[0] + nums[1] = 2 + 7 = 9</span><span class="hljs-comment">       所以返回 [0, 1]</span><span class="hljs-comment">   Related Topics 数组 哈希表</span><span class="hljs-comment">   👍 8826 👎 0</span><span class="hljs-comment"> */</span><span class="hljs-keyword">if</span> nums == <span class="hljs-literal">nil</span> || <span class="hljs-built_in">len</span>(nums) &lt;= <span class="hljs-number">1</span> &#123;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;Illegal nums&quot;</span>)&#125;<span class="hljs-keyword">switch</span> flag &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(nums) <span class="hljs-number">-1</span>; i++&#123;<span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums); j++ &#123;<span class="hljs-keyword">if</span> nums[i] + nums[j] == target &#123;<span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;nums[i], nums[j]&#125;&#125;&#125;&#125;<span class="hljs-keyword">default</span>:numMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>)numMap[nums[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>temp := nums[<span class="hljs-number">0</span>]<span class="hljs-keyword">for</span> i, num := <span class="hljs-keyword">range</span> nums &#123;<span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &#123;temp = target - num<span class="hljs-keyword">if</span> v, ok := numMap[temp]; ok &#123;<span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;v, i&#125;&#125; <span class="hljs-keyword">else</span> &#123;numMap[num] = i&#125;&#125;&#125;&#125;<span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;No two sum solution&quot;</span>)&#125;</code></pre><h4 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h4><pre><code class="hljs scala"><span class="hljs-keyword">import</span> scala.collection.mutable.<span class="hljs-type">Map</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Solution</span></span>&#123;  <span class="hljs-comment">/**</span><span class="hljs-comment">    * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * 示例:</span><span class="hljs-comment">    *</span><span class="hljs-comment">    *  给定 nums = [2, 7, 11, 15], target = 9</span><span class="hljs-comment">    *</span><span class="hljs-comment">    *  因为 nums[0] + nums[1] = 2 + 7 = 9</span><span class="hljs-comment">    *  所以返回 [0, 1]</span><span class="hljs-comment">    *</span><span class="hljs-comment">    *  Related Topics 数组 哈希表</span><span class="hljs-comment">    *  👍 8826 👎 0</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * @param nums</span><span class="hljs-comment">    * @param target</span><span class="hljs-comment">    * @return</span><span class="hljs-comment">    */</span>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span></span>(nums: <span class="hljs-type">Array</span>[<span class="hljs-type">Int</span>], target: <span class="hljs-type">Int</span>): <span class="hljs-type">Array</span>[<span class="hljs-type">Int</span>] = &#123;    <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length &lt;= <span class="hljs-number">1</span>)&#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal nums&quot;</span>)    &#125;    <span class="hljs-keyword">var</span> numMap:<span class="hljs-type">Map</span>[<span class="hljs-type">Int</span>,<span class="hljs-type">Int</span>] = <span class="hljs-type">Map</span>(nums(<span class="hljs-number">0</span>) -&gt; <span class="hljs-number">0</span>)    <span class="hljs-keyword">val</span> result = <span class="hljs-keyword">new</span> <span class="hljs-type">Array</span>[<span class="hljs-type">Int</span>](<span class="hljs-number">2</span>)    <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">1</span> to nums.length - <span class="hljs-number">1</span>)&#123;      <span class="hljs-keyword">if</span> (numMap.contains(target - nums(i)))&#123;        result(<span class="hljs-number">0</span>) = numMap(target - nums(i))        result(<span class="hljs-number">1</span>) = i      &#125;<span class="hljs-keyword">else</span>&#123;        numMap += (nums(i) -&gt; i)      &#125;    &#125;    result  &#125;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    <span class="hljs-keyword">val</span> arr = <span class="hljs-type">Array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>)    <span class="hljs-keyword">val</span> res = twoSum(arr, <span class="hljs-number">6</span>)    println(res(<span class="hljs-number">0</span>), res(<span class="hljs-number">1</span>))  &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Python</tag>
      
      <tag>LeetCode</tag>
      
      <tag>Go</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【All】GitHub使用小技巧</title>
    <link href="/2020/11/25/github_note/"/>
    <url>/2020/11/25/github_note/</url>
    
    <content type="html"><![CDATA[<h3 id="Octotree-Chrome-github-浏览插件"><a href="#Octotree-Chrome-github-浏览插件" class="headerlink" title="Octotree: Chrome github 浏览插件"></a>Octotree: Chrome github 浏览插件</h3><p> 可以把 github 项目的目录树结构展示出来 </p><p><img src="/images/github_note/octotree_1.jpg"></p><p><img src="/images/github_note/octotree_2.jpg"></p><h3 id="GitHub搜索"><a href="#GitHub搜索" class="headerlink" title="GitHub搜索"></a>GitHub搜索</h3><p> 假如，正在做一个python项目，正好要用到一个爬虫处理的框架，关键词就是 <strong>Spider</strong> ，那就可以先试试搜索项目名称里面包含 <strong>Spider</strong> 的项目： </p><h4 id="in-name-Spider"><a href="#in-name-Spider" class="headerlink" title="in:name Spider"></a>in:name Spider</h4><p><img src="/images/github_note/git_hub_1.jpg"></p><h4 id="in-name-Spider-stars-gt-3000"><a href="#in-name-Spider-stars-gt-3000" class="headerlink" title="in:name Spider stars:&gt;3000"></a>in:name Spider stars:&gt;3000</h4><p>如果 需要约束搜索结果的star数大于3000+ </p><p><img src="/images/github_note/github_2.jpg"></p><h4 id="in-name-Spider-stars-gt-3000-forks-gt-1000"><a href="#in-name-Spider-stars-gt-3000-forks-gt-1000" class="headerlink" title="in:name Spider stars:&gt;3000 forks:&gt;1000"></a>in:name Spider stars:&gt;3000 forks:&gt;1000</h4><p>如果需要更小范围, 可以约束fork数 </p><p><img src="/images/github_note/github_3.jpg"></p><h4 id="in-name-Spider-stars-gt-3000-forks-gt-1000-language-python"><a href="#in-name-Spider-stars-gt-3000-forks-gt-1000-language-python" class="headerlink" title="in:name Spider stars:&gt;3000 forks:&gt;1000 language:python"></a>in:name Spider stars:&gt;3000 forks:&gt;1000 language:python</h4><p>当然，也可以约束语言</p><p><img src="/images/github_note/github_4.jpg"></p><h4 id="in-readme-Spider-stars-gt-3000-forks-gt-1000-language-python"><a href="#in-readme-Spider-stars-gt-3000-forks-gt-1000-language-python" class="headerlink" title="in:readme Spider stars:&gt;3000 forks:&gt;1000 language:python"></a>in:readme Spider stars:&gt;3000 forks:&gt;1000 language:python</h4><p> 如果不确定关键词是否会命中项目名称，那可以通过 <strong>readme</strong> 来搜索 。此时，就需要重新调整 star和fork数 了。</p><p><img src="/images/github_note/github_5.jpg"></p><h4 id="in-description-Spider-stars-gt-3000-forks-gt-1000-language-python"><a href="#in-description-Spider-stars-gt-3000-forks-gt-1000-language-python" class="headerlink" title="in:description Spider stars:&gt;3000 forks:&gt;1000 language:python"></a>in:description Spider stars:&gt;3000 forks:&gt;1000 language:python</h4><p>如果，我们想要找的项目，想不到一个英文关键词去描述，怎么办？</p><p>这种情况下，我们直接用一种简单粗暴的方式，按照 <strong>description</strong> 的方式来搜索：</p><p><img src="/images/github_note/github_6.jpg"></p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>根据开源项目的主要组成部分：</p><p>​    ◆ name: 项目名</p><p>​    ◆ description: 项目的简要描述</p><p>​    ◆ 项目的源码</p><p>​    ◆ README.md: 项目的详细情况的介绍</p><pre><code class="hljs markdown">|      筛选条件       |            备注            || ------------------ | ------------------------- || in:name xxx        | 按照项目名搜索              ｜| in:readme xxx      | 按照README搜索             ｜| in:description xxx | 按照description搜索        ｜| stars:&gt;xxx         | stars数大于xxx             ｜| forks:&gt;xxx         | forks数大于xxx             ｜| language:xxx       | 编程语言是xxx              ｜| pushed:&gt;YYYY-MM-DD | 最后更新时间大于YYYY-MM-DD  ｜</code></pre>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】设计模式</title>
    <link href="/2020/11/20/design_pattern_python/"/>
    <url>/2020/11/20/design_pattern_python/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Patterns mean “I have run out of language.” - Rich Hickey<a id="more"></a> </p></blockquote><p>之前学习设计模式的时候总是没有什么感觉，因为记性不好一直没记住多少。python不像java中比较强调设计模式(编程套路)，动态语言也内置了像是装饰器、迭代器等模式，另外python中的『一切皆对象』、鸭子类型等也导致python中实现的设计模式和其他语言有些差别。根据YAGNI(you aren’t gonna need it)和KISS(Keep it simple sutpid)原则，如果能用简单易懂的方式实现，最好不要滥用设计模式以免增加复杂度和维护难度</p><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><h4 id="Method-工厂方法"><a href="#Method-工厂方法" class="headerlink" title="Method(工厂方法)"></a>Method(工厂方法)</h4><p>执行单独的函数，通过传参提供需要的对象的信息。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 工厂方法</span><span class="hljs-string">Problem:在工厂方法模式中，我们执行函数，传入一个参数，但不需要知道任何关于对象如何实现以及对象来自哪里的细节</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/1/8 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> etree<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connector</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span>        factory = <span class="hljs-literal">None</span>        <span class="hljs-keyword">try</span>:            factory = self.connector_factory(filepath)        <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:            print(e)        self.factory = factory    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connector_factory</span>(<span class="hljs-params">self, filepath</span>):</span>        <span class="hljs-keyword">if</span> filepath.endswith(<span class="hljs-string">&#x27;json&#x27;</span>):            connector = self.JSONConnector        <span class="hljs-keyword">elif</span> filepath.endswith(<span class="hljs-string">&#x27;xml&#x27;</span>):            connector = self.XMLConnector        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Cannot connect to &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(filepath))        <span class="hljs-keyword">return</span> connector(filepath)    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JSONConnector</span>:</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        JSON工厂</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span>            self.data = <span class="hljs-built_in">dict</span>()            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath, mode=<span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:                self.data = json.load(f)<span class="hljs-meta">        @property</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parsed_data</span>(<span class="hljs-params">self</span>):</span>            <span class="hljs-keyword">return</span> self.data    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XMLConnector</span>:</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        XML工厂</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span>            self.tree = etree.parse(filepath)<span class="hljs-meta">        @property</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parsed_date</span>(<span class="hljs-params">self</span>):</span>            <span class="hljs-keyword">return</span> self.tree<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    xml_factory = Connector(<span class="hljs-string">&#x27;data/person.xml&#x27;</span>)    xml_data = xml_factory.factory.parsed_date    smiths = xml_data.findall(<span class="hljs-string">&quot;.//&#123;&#125;[&#123;&#125;=&#x27;&#123;&#125;&#x27;]&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;person&#x27;</span>, <span class="hljs-string">&#x27;lastName&#x27;</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>))    print(<span class="hljs-string">&#x27;found: &#123;&#125; persons&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(smiths)))    <span class="hljs-keyword">for</span> smith <span class="hljs-keyword">in</span> smiths:        print(<span class="hljs-string">&#x27;first name:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(smith.find(<span class="hljs-string">&#x27;firstName&#x27;</span>).text))        print(<span class="hljs-string">&#x27;last name:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(smith.find(<span class="hljs-string">&#x27;lastName&#x27;</span>).text))    print()    json_factory = Connector(<span class="hljs-string">&#x27;data/donut.json&#x27;</span>)    json_data = json_factory.factory.parsed_data    print(<span class="hljs-string">&#x27;find: &#123;&#125; donuts. &#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(json_data)))    <span class="hljs-keyword">for</span> donut <span class="hljs-keyword">in</span> json_data:        print(<span class="hljs-string">&#x27;name:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(donut[<span class="hljs-string">&#x27;name&#x27;</span>]))        print(<span class="hljs-string">&#x27;ppu:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(donut[<span class="hljs-string">&#x27;ppu&#x27;</span>]))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    main()</code></pre><h4 id="Abstract-Factory-抽象工厂-解决复杂对象创建问题"><a href="#Abstract-Factory-抽象工厂-解决复杂对象创建问题" class="headerlink" title="Abstract Factory(抽象工厂: 解决复杂对象创建问题)"></a>Abstract Factory(抽象工厂: 解决复杂对象创建问题)</h4><p>工厂方法适合对象种类较少的情况，如果有多种不同类型对象需要创建，使用抽象工厂模式。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 抽象工厂（实际上一个抽象工厂其实是一组工厂方法，每个工厂方法负责生产不同类型的对象）</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/1/8 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Frog</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    游戏角色对象-青蛙</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span>        self.name = name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">interact_with</span>(<span class="hljs-params">self, obstacle</span>):</span>        print(<span class="hljs-string">&#x27;&#123;&#125; the Frog encounters &#123;&#125; and &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(self, obstacle, obstacle.action()))<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bug</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    障碍物对象-虫子</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;a bug&#x27;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">action</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;eats it&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrogWorld</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    抽象工厂，负责创建游戏角色与障碍物对象</span><span class="hljs-string">    make_character()和make_obstacle()动态改变当前激活的工厂</span><span class="hljs-string">    在静态语言中，抽象工厂是抽象类/接口，具有一些空方法，Python中无须如此</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span>        print(self)        self.player_name = name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n\n\t------- Frog Word -------&#x27;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_character</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> Frog(self.player_name)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_obstacle</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> Bug()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Wizard</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    游戏角色对象-男巫</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span>        self.name = name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">interact_with</span>(<span class="hljs-params">self, obstacle</span>):</span>        print(<span class="hljs-string">&#x27;&#123;&#125; the Wizard battles against &#123;&#125; and &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(self, obstacle, obstacle.action()))<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ork</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    障碍物对象-怪兽</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;an evil ork&#x27;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">action</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;kills it&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WizardWorld</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    抽象工厂，负责创建游戏角色与障碍物对象</span><span class="hljs-string">    make_character()和make_obstacle()动态改变当前激活的工厂</span><span class="hljs-string">    在静态语言中，抽象工厂是抽象类/接口，具有一些空方法，Python中无须如此</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span>        print(self)        self.player_name = name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n\n\t------- Wizard Word -------&#x27;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_character</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> Wizard(self.player_name)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_obstacle</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> Ork()<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GameEnvironment</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    游戏的主入口，接收factory为输入</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, factory</span>):</span>        self.hero = factory.make_character()        self.obstacle = factory.make_obstacle()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play</span>(<span class="hljs-params">self</span>):</span>        self.hero.interact_with(self.obstacle)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate_age</span>(<span class="hljs-params">name</span>):</span>    <span class="hljs-keyword">try</span>:        age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Welcome &#123;&#125;. How old are you? &quot;</span>.<span class="hljs-built_in">format</span>(name))        age = <span class="hljs-built_in">int</span>(age)    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:        print(<span class="hljs-string">&quot;Age &#123;&#125; is invalid, please try again...&quot;</span>.<span class="hljs-built_in">format</span>(age))        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, age    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, age<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Hello. What&#x27;s your name?&quot;</span>)    valid_input = <span class="hljs-literal">False</span>    age = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> valid_input:        valid_input, age = validate_age(name)    game = FrogWorld <span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span> <span class="hljs-keyword">else</span> WizardWorld    environment = GameEnvironment(game(name))    environment.play()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    main()</code></pre><h4 id="The-Builder-Pattern-构造模式-控制复杂对象的构造"><a href="#The-Builder-Pattern-构造模式-控制复杂对象的构造" class="headerlink" title="The Builder Pattern(构造模式: 控制复杂对象的构造)"></a>The Builder Pattern(构造模式: 控制复杂对象的构造)</h4><p>当对象需要多个部分组合起来一步步创建，并且创建和表示分离的时候。可以这么理解，你要买电脑，工厂模式直接返回一个你需要型号的电脑，但是构造模式允许你自定义电脑各种配置类型，组装完成后给你。这个过程可以传入builder从而自定义创建的方式。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description:建造者设计模式demo</span><span class="hljs-string">Problem:当需要创建一个由多个部分构成的对象，而且它的构造需要一步接一步的完成；只有当各个部分都创建好，这个对象才算完整</span><span class="hljs-string">Solution：</span><span class="hljs-string">Extension:工厂模式与创建者的区别为（1）工厂模式一但个步骤创建对象；创建者以多个步骤创建对象，并且几乎始终会使用一个指挥者。</span><span class="hljs-string">                              （2）工厂模式下会立即返回一个创建好的对象，建造者仅在客户端代码才显式请求指挥者返回的最终对象</span><span class="hljs-string">                               例如：假设你想买个电脑，如果决定买一台特定配置的电脑，则使用工厂模式；如果你要购买一台定制的PC，</span><span class="hljs-string">                               你式指挥者，会向制造商提供指令说明心中理想的电脑规格。</span><span class="hljs-string">Date: 2020/1/8</span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span>MINI14 = <span class="hljs-string">&#x27;1.4GHz Mac Mini&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppleFactory</span>:</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MacMini14</span>:</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>            self.memory = <span class="hljs-number">4</span>            self.hdd = <span class="hljs-number">500</span>            self.gpu = <span class="hljs-string">&#x27;Intel HD Graphics 5000&#x27;</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>            info = (<span class="hljs-string">&#x27;Model: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(MINI14),                    <span class="hljs-string">&#x27;Memory: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.memory),                    <span class="hljs-string">&#x27;Hard Disk: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.hdd),                    <span class="hljs-string">&#x27;Graphics Card: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.gpu))            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(info)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_computer</span>(<span class="hljs-params">self, model</span>):</span>        <span class="hljs-keyword">if</span> model == MINI14:            <span class="hljs-keyword">return</span> self.MacMini14()        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I dont&#x27;t know how to build &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(model)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">apple_computer_use_factory</span>():</span>    afac = AppleFactory()    mac_mini = afac.build_computer(MINI14)    print(mac_mini)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, serial_number</span>):</span>        self.serial_number = serial_number        self.memory = <span class="hljs-literal">None</span>        self.hdd = <span class="hljs-literal">None</span>        self.gpu = <span class="hljs-literal">None</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        info = (<span class="hljs-string">&#x27;Serial: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.serial_number),                <span class="hljs-string">&#x27;Memory: &#123;&#125;GB&#x27;</span>.<span class="hljs-built_in">format</span>(self.memory),                <span class="hljs-string">&#x27;Hard Disk: &#123;&#125;GB&#x27;</span>.<span class="hljs-built_in">format</span>(self.hdd),                <span class="hljs-string">&#x27;Graphics Card: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.gpu))        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(info)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComputerBuilder</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.computer = Computer(<span class="hljs-string">&#x27;AI563924&#x27;</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conf_memory</span>(<span class="hljs-params">self, amount</span>):</span>        self.computer.memory = amount    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conf_hdd</span>(<span class="hljs-params">self, amount</span>):</span>        self.computer.hdd = amount    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conf_gpu</span>(<span class="hljs-params">self, model</span>):</span>        self.computer.gpu = model<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HardwareEngineer</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.builder = <span class="hljs-literal">None</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">construct_computer</span>(<span class="hljs-params">self, memory, hdd, gpu</span>):</span>        self.builder = ComputerBuilder()        self.builder.conf_memory(memory)        self.builder.conf_hdd(hdd)        self.builder.conf_gpu(gpu)<span class="hljs-meta">    @property</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">computer</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.builder.computer<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">apple_computer_use_builder</span>():</span>    engineer = HardwareEngineer()    engineer.construct_computer(memory=<span class="hljs-number">8</span>, hdd=<span class="hljs-number">500</span>, gpu=<span class="hljs-string">&#x27;GeForce GTX 650 Ti&#x27;</span>)    computer = engineer.computer    print(computer)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    apple_computer_use_builder()    print(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">50</span>)    apple_computer_use_factory()</code></pre><h4 id="单例模式-使得一个类最多生成一个实例"><a href="#单例模式-使得一个类最多生成一个实例" class="headerlink" title="单例模式: 使得一个类最多生成一个实例"></a>单例模式: 使得一个类最多生成一个实例</h4><p>(基于元类)单例模式</p><pre><code class="hljs Python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description:(基于元类)单例模式</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution:</span><span class="hljs-string">Date: 2020/1/6 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span>        print(<span class="hljs-string">&quot;__init__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.__name__))        cls.__instance = <span class="hljs-literal">None</span>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span>        <span class="hljs-keyword">if</span> cls.__instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            print(<span class="hljs-string">&quot;__call__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.__name__))            cls.__instance = <span class="hljs-built_in">super</span>(Singleton, cls).__call__(*args, **kwargs)        <span class="hljs-keyword">return</span> cls.__instance<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Instance</span>(<span class="hljs-params">metaclass=Singleton</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span>        self.name = name<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    i1 = Instance(<span class="hljs-string">&#x27;zhang san&#x27;</span>)    i2 = Instance(<span class="hljs-string">&#x27;li si&#x27;</span>)    print(i1 <span class="hljs-keyword">is</span> i2)</code></pre><p>通过new函数实现简单的单例模式</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 通过new函数实现简单的单例模式</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/1/20 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, name, *args, **kwargs</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">&#x27;_instance&#x27;</span>):            cls._instance = <span class="hljs-built_in">super</span>().__new__(cls, *args, **kwargs)        print(<span class="hljs-string">&quot;__call__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(cls.__class__))        <span class="hljs-keyword">return</span> cls._instance    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span>        print(<span class="hljs-string">&quot;__init__ &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.__str__()))        <span class="hljs-built_in">super</span>().__init__()        self.name = name<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    ins1 = Singleton(<span class="hljs-string">&#x27;zhang san&#x27;</span>)    ins2 = Singleton(<span class="hljs-string">&#x27;li si&#x27;</span>)    print(<span class="hljs-built_in">id</span>(ins1), <span class="hljs-built_in">id</span>(ins2))    print(ins1.name)    print(ins2.name)</code></pre><p>装饰器实现</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 通过装饰器方式实现单例模式</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/20 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-comment"># 装饰器实现</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">singleton</span>(<span class="hljs-params">class_</span>):</span>    instances = &#123;&#125;    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getinstance</span>(<span class="hljs-params">*args, **kwargs</span>):</span>        <span class="hljs-keyword">if</span> class_ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances:            instances[class_] = class_(*args, **kwargs)        <span class="hljs-keyword">return</span> instances[class_]    <span class="hljs-keyword">return</span> getinstance<span class="hljs-meta">@singleton</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>:</span>    <span class="hljs-keyword">pass</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    i1 = MyClass()    i2 = MyClass()    print(i1 <span class="hljs-keyword">is</span> i2)</code></pre><h4 id="The-Prototype-Pattern-原型模式-解决对象拷贝问题"><a href="#The-Prototype-Pattern-原型模式-解决对象拷贝问题" class="headerlink" title="The Prototype Pattern(原型模式:解决对象拷贝问题)"></a>The Prototype Pattern(原型模式:解决对象拷贝问题)</h4><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><h4 id="The-Observer-Pattern-观察者模式：用来处理多个对象之间的发布订阅问题"><a href="#The-Observer-Pattern-观察者模式：用来处理多个对象之间的发布订阅问题" class="headerlink" title="The Observer Pattern(观察者模式：用来处理多个对象之间的发布订阅问题)"></a>The Observer Pattern(观察者模式：用来处理多个对象之间的发布订阅问题)</h4><pre><code class="hljs Python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: </span><span class="hljs-string">Date: 2019/12/13 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WaterHeater</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    热水器：战胜寒冬的有利武器</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.__observers = []        self.__temperature = <span class="hljs-number">25</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTemperature</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.__temperature    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setTemperature</span>(<span class="hljs-params">self, temperature</span>):</span>        self.__temperature = temperature        print(<span class="hljs-string">&quot;current temperature is:&quot;</span>, self.__temperature)        self.notifies()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addObserver</span>(<span class="hljs-params">self, observer</span>):</span>        self.__observers.append(observer)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">notifies</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> self.__observers:            o.update(self)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    洗澡模式和饮用模式的父类</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, waterHeater</span>):</span>        <span class="hljs-keyword">pass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WashingMode</span>(<span class="hljs-params">Observer</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;该模式用于洗澡用&quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, waterHeater</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-number">50</span> &lt;= waterHeater.getTemperature() &lt; <span class="hljs-number">70</span>:            print(<span class="hljs-string">&quot;水已烧好，温度正好！可以用来洗澡了。&quot;</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DrinkingMode</span>(<span class="hljs-params">Observer</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;该模式用于饮用&quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, waterHeater</span>):</span>        <span class="hljs-keyword">if</span> waterHeater.getTemperature() &gt;= <span class="hljs-number">100</span>:            print(<span class="hljs-string">&quot;水已烧开！可以用来饮用了。&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_water_heater</span>():</span>    heater = WaterHeater()    washing_obser = WashingMode()    drinking_obser = DrinkingMode()    heater.addObserver(washing_obser)    heater.addObserver(drinking_obser)    heater.setTemperature(<span class="hljs-number">40</span>)    heater.setTemperature(<span class="hljs-number">60</span>)    heater.setTemperature(<span class="hljs-number">100</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    test_water_heater()</code></pre><h4 id="The-State-Pattern-状态模式：实现有限状态机"><a href="#The-State-Pattern-状态模式：实现有限状态机" class="headerlink" title="The State Pattern(状态模式：实现有限状态机)"></a>The State Pattern(状态模式：实现有限状态机)</h4><h4 id="The-Strategy-Pattern-策略模式：动态选择算法策略"><a href="#The-Strategy-Pattern-策略模式：动态选择算法策略" class="headerlink" title="The Strategy Pattern(策略模式：动态选择算法策略)"></a>The Strategy Pattern(策略模式：动态选择算法策略)</h4><h4 id="The-Chain-of-Responsibility-Pattern-责任链模式-创建链式对象用来接收广播消息"><a href="#The-Chain-of-Responsibility-Pattern-责任链模式-创建链式对象用来接收广播消息" class="headerlink" title="The Chain of Responsibility Pattern (责任链模式:创建链式对象用来接收广播消息)"></a>The Chain of Responsibility Pattern (责任链模式:创建链式对象用来接收广播消息)</h4><h4 id="The-Command-Pattern-命令模式：用来给应用添加Undo操作"><a href="#The-Command-Pattern-命令模式：用来给应用添加Undo操作" class="headerlink" title="The Command Pattern(命令模式：用来给应用添加Undo操作)"></a>The Command Pattern(命令模式：用来给应用添加Undo操作)</h4><h4 id="The-Interpreter-Pattern-解释器模式：用来实现Domain-Specific-Language-DSL"><a href="#The-Interpreter-Pattern-解释器模式：用来实现Domain-Specific-Language-DSL" class="headerlink" title="The Interpreter Pattern(解释器模式：用来实现Domain Specific Language(DSL))"></a>The Interpreter Pattern(解释器模式：用来实现Domain Specific Language(DSL))</h4><h4 id="The-Template-Pattern-模板模式：抽象出算法公共部分从而实现代码复用"><a href="#The-Template-Pattern-模板模式：抽象出算法公共部分从而实现代码复用" class="headerlink" title="The Template Pattern(模板模式：抽象出算法公共部分从而实现代码复用)"></a>The Template Pattern(模板模式：抽象出算法公共部分从而实现代码复用)</h4><h3 id="结构性"><a href="#结构性" class="headerlink" title="结构性"></a>结构性</h3><h4 id="The-Adapter-Pattern-适配器模式-解决接口不兼容问题"><a href="#The-Adapter-Pattern-适配器模式-解决接口不兼容问题" class="headerlink" title="The Adapter Pattern(适配器模式: 解决接口不兼容问题)"></a>The Adapter Pattern(适配器模式: 解决接口不兼容问题)</h4><h4 id="The-Decorator-Pattern-装饰器模式：-无需子类化实现扩展对象功能问题"><a href="#The-Decorator-Pattern-装饰器模式：-无需子类化实现扩展对象功能问题" class="headerlink" title="The Decorator Pattern(装饰器模式： 无需子类化实现扩展对象功能问题)"></a>The Decorator Pattern(装饰器模式： 无需子类化实现扩展对象功能问题)</h4><h4 id="The-Facade-Pattern-外观模式-简化复杂对象的访问问题"><a href="#The-Facade-Pattern-外观模式-简化复杂对象的访问问题" class="headerlink" title="The Facade Pattern(外观模式: 简化复杂对象的访问问题)"></a>The Facade Pattern(外观模式: 简化复杂对象的访问问题)</h4><h4 id="The-Flyweight-Pattern-享元模式-实现对象复用从而改善资源使用"><a href="#The-Flyweight-Pattern-享元模式-实现对象复用从而改善资源使用" class="headerlink" title="The Flyweight Pattern(享元模式: 实现对象复用从而改善资源使用)"></a>The Flyweight Pattern(享元模式: 实现对象复用从而改善资源使用)</h4><h4 id="The-Model-View-Controller-Pattern-mvc模式：解耦展示逻辑和业务逻辑"><a href="#The-Model-View-Controller-Pattern-mvc模式：解耦展示逻辑和业务逻辑" class="headerlink" title="The Model-View-Controller Pattern(mvc模式：解耦展示逻辑和业务逻辑)"></a>The Model-View-Controller Pattern(mvc模式：解耦展示逻辑和业务逻辑)</h4><h4 id="The-Proxy-Pattern-代理模式：通过一层间接保护层实现更安全的接口访问）"><a href="#The-Proxy-Pattern-代理模式：通过一层间接保护层实现更安全的接口访问）" class="headerlink" title="The Proxy Pattern(代理模式：通过一层间接保护层实现更安全的接口访问）"></a>The Proxy Pattern(代理模式：通过一层间接保护层实现更安全的接口访问）</h4>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python】基本数据结构和算法</title>
    <link href="/2020/11/20/adt_python/"/>
    <url>/2020/11/20/adt_python/</url>
    
    <content type="html"><![CDATA[<h2 id="ADT抽象数据类型"><a href="#ADT抽象数据类型" class="headerlink" title="ADT抽象数据类型"></a>ADT抽象数据类型<a id="more"></a></h2><h3 id="什么是ADT-抽象数据类型，学过数据结构的应该都知道。"><a href="#什么是ADT-抽象数据类型，学过数据结构的应该都知道。" class="headerlink" title="什么是ADT: 抽象数据类型，学过数据结构的应该都知道。"></a>什么是ADT: 抽象数据类型，学过数据结构的应该都知道。</h3><p>How to select datastructures for ADT</p><ol><li>Dose the data structure provide for the storage requirements as specified by the domain of the ADT?</li><li>Does the data structure provide the data access and manipulation functionality to fully implement the ADT?</li><li>Effcient implemention? based on complexity analysis.</li></ol><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 字符串相关</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/18 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseString</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    字符数组反转</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_string</span>(<span class="hljs-params">self, x, reverse=<span class="hljs-literal">False</span></span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        :param x: 字符数组</span><span class="hljs-string">        :param reverse: 是否之用内置库</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> reverse:            x.reverse()            <span class="hljs-keyword">return</span> x        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:                <span class="hljs-keyword">return</span>            beg, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)<span class="hljs-number">-1</span>            <span class="hljs-keyword">while</span> beg &lt; end:                x[beg], x[end] = x[end], x[beg]                beg += <span class="hljs-number">1</span>                end -= <span class="hljs-number">1</span>            <span class="hljs-keyword">return</span> x<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Palindrome</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    判断字符串是否是回文</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_palindrome</span>(<span class="hljs-params">self, x</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">and</span> x &lt; <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        xx = <span class="hljs-built_in">str</span>(x)        beg, end = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(xx)<span class="hljs-number">-1</span>        <span class="hljs-keyword">while</span> beg &lt; end:            <span class="hljs-keyword">if</span> xx[beg] == xx[end]:                beg += <span class="hljs-number">1</span>                end -= <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    r = ReverseString()    print(r.reverse_string([<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-literal">False</span>))</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/strings.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/strings.py</a></p><h3 id="Array-and-List"><a href="#Array-and-List" class="headerlink" title="Array and List"></a>Array and List</h3><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><p>定长，操作有限，但是节省内存；貌似我的生涯中还没用过，不过python3.5中我试了确实有array类，可以用import array直接导入。</p><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>会预先分配内存，操作丰富，但是耗费内存。用sys.getsizeof做实验可以发现该结构非常类似C++ STL里的vector，是使用最频繁的数据结构。</p><ul><li>list.append: 如果之前没有分配够内存，会重新开辟新区域，然后复制之前的数据，复杂度退化</li><li>list.insert: 会移动被插入区域后所有元素,O(n)</li><li>list.pop: pop不同位置需要的复杂度不同pop(0)是O(1)复杂度,pop()首位O(n)复杂度</li><li>list[]: slice操作copy数据（预留空间）到另一个list</li></ul><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/array_and_list.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/array_and_list.py</a></p><h3 id="Sets-and-Maps"><a href="#Sets-and-Maps" class="headerlink" title="Sets and Maps"></a>Sets and Maps</h3><h4 id="sets-ADT"><a href="#sets-ADT" class="headerlink" title="sets ADT"></a>sets ADT</h4><p>A set is a container that stores a collection of unique values over a given comparable domain in which the stored values have no particular ordering.</p><h4 id="Maps-or-Dict-ADT"><a href="#Maps-or-Dict-ADT" class="headerlink" title="Maps or Dict ADT"></a>Maps or Dict ADT</h4><p>python内部采用hash实现。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 基于collections.OrderedDict实现LRU_cache(最近最少使用缓存算法)</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/13 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LURCache</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, capacity=<span class="hljs-number">128</span></span>):</span>        self._od = OrderedDict()        self._capacity = capacity    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, key</span>):</span>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self._od:            val = self._od[key]            self._od.move_to_end(key)            <span class="hljs-keyword">return</span> val        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, key, value</span>):</span>        <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self._od:            <span class="hljs-keyword">del</span> self._od[key]            self._od[key] = value        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># insert</span>            self._od[key] = value            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self._od) &gt; self._capacity:                self._od.popitem(last=<span class="hljs-literal">False</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">items</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self._od.items()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    lru_cache = LURCache(<span class="hljs-number">3</span>)    lru_cache.push(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>)    lru_cache.push(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">2</span>)    lru_cache.push(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">3</span>)    lru_cache.push(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">4</span>)    lru_cache.get(<span class="hljs-string">&quot;2&quot;</span>)    print(lru_cache.items())</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/collections_examples/lru_cache.py">https://github.com/weitrue/note/blob/master/python/algorithm/collections_examples/lru_cache.py</a></p><h3 id="Algorithm-Analysis"><a href="#Algorithm-Analysis" class="headerlink" title="Algorithm Analysis"></a>Algorithm Analysis</h3><p>一般使用大O标记法来衡量算法的平均时间复杂度, 1 &lt; log(n) &lt; n &lt; nlog(n) &lt; n^2 &lt; n^3 &lt; a^n。 了解常用数据结构操作的平均时间复杂度有利于使用更高效的数据结构，当然有时候需要在时间和空间上进行衡量，有些操作甚至还会退化，比如list的append操作，如果list空间不够，会去开辟新的空间，操作复杂度退化到O(n)，有时候还需要使用均摊分析(amortized)。</p><h3 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h3><p>python内置了in操作符和bisect二分操作模块实现查找。</p><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 二分查找算法</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/1/20 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span>(<span class="hljs-params">arr, target</span>):</span>    n = <span class="hljs-built_in">len</span>(arr)    left = <span class="hljs-number">0</span>    right = n - <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> left &lt;= right:        mid = (left + right) // <span class="hljs-number">2</span>        <span class="hljs-keyword">if</span> arr[mid] &lt; target:            left = mid + <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> arr[mid] &gt; target:            right = mid - <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            print(<span class="hljs-string">f&quot;index: <span class="hljs-subst">&#123;mid&#125;</span>, value:<span class="hljs-subst">&#123;arr[mid]&#125;</span>&quot;</span>)            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    l = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]    binary_search(l, <span class="hljs-number">8</span>)</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/search/binary_search.py">https://github.com/weitrue/note/blob/master/python/algorithm/search/binary_search.py</a></p><h3 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h3><p>python内置了sorted方法来实现排序操作。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 冒泡排序</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/3/23 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> random<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span>(<span class="hljs-params">self, arr</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        冒泡排序</span><span class="hljs-string">        :param arr:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        n = <span class="hljs-built_in">len</span>(arr)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-i<span class="hljs-number">-1</span>):                <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:                    arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    list_a = [random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]    print(list_a)    bs = BubbleSort()    bs.bubble_sort(list_a)    print(list_a)</code></pre><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 归并排序算法-分治法</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/15 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span>(<span class="hljs-params">self, arr</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        分治法分三步走，要注意出口</span><span class="hljs-string">        :param arr:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># 递归出口</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt;= <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span> arr        <span class="hljs-keyword">else</span>:            mid = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(arr)/<span class="hljs-number">2</span>)            left_half = self.merge_sort(arr[:mid])            right_half = self.merge_sort(arr[mid:])            <span class="hljs-keyword">return</span> self.merge_sorted_list(left_half, right_half)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sorted_list</span>(<span class="hljs-params">self, list_a, list_b</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        合并两个有序序列</span><span class="hljs-string">        :param list_a:</span><span class="hljs-string">        :param list_b:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        length_a = <span class="hljs-built_in">len</span>(list_a)        length_b = <span class="hljs-built_in">len</span>(list_b)        a = b = <span class="hljs-number">0</span>        new_list = []        <span class="hljs-keyword">while</span> a &lt; length_a <span class="hljs-keyword">and</span> b &lt; length_b:            <span class="hljs-keyword">if</span> list_a[a] &lt; list_b[b]:                new_list.append(list_a[a])                a += <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                new_list.append(list_b[b])                b += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> a &lt; length_a:            new_list.extend(list_a[a:])        <span class="hljs-keyword">if</span> b &lt; length_b:            new_list.extend(list_b[b:])        <span class="hljs-keyword">return</span> new_list<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">import</span> random    ms = MergeSort()    ll = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))    random.shuffle(ll)    print(ll)    ll = ms.merge_sort(ll)    print(ll)</code></pre><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 快速排序算法-分治法</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：Partition:选择基准分割数组为两个字数组，小于基准和大于基准</span><span class="hljs-string">         对两个字数组分别快排</span><span class="hljs-string">         合并结果</span><span class="hljs-string">Date: 2020/2/15 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> pysnooper  <span class="hljs-comment"># 调试神器</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span>:</span><span class="hljs-meta">    @pysnooper.snoop()</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">self, arr</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr) &lt; <span class="hljs-number">2</span>:            <span class="hljs-keyword">return</span> arr        pivot_index = <span class="hljs-number">0</span>  <span class="hljs-comment"># 第一个数作为pivot</span>        pivot = arr[pivot_index]        less_part = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr[pivot_index+<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &lt; pivot]        great_part = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr[pivot_index+<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt;= pivot]        <span class="hljs-keyword">return</span> self.quick_sort(less_part) + [pivot] + self.quick_sort(great_part)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    qs = QuickSort()    ll = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>))    random.shuffle(ll)    print(ll)    ll = qs.quick_sort(ll)    print(ll)</code></pre><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 拓扑排序</span><span class="hljs-string">Problem: 对应于该图的拓扑排序,每一个有向无环图都至少存在一种拓扑排序</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/3/23 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> pysnooper<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> Mapping<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopologicalSort</span>:</span><span class="hljs-meta">    @pysnooper.snoop()  # pysnooper 调试神器</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">topological_sort</span>(<span class="hljs-params">self, graph: Mapping</span>):</span>        <span class="hljs-comment"># in_degrees = &#123;&#x27;a&#x27;： 0, &#x27;b&#x27;： 0, &#x27;c&#x27;： 0, &#x27;d&#x27;： 0, &#x27;e&#x27;： 0, &#x27;f&#x27;： 0&#125;</span>        in_degrees = <span class="hljs-built_in">dict</span>((u, <span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph)        <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph:            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[u]:  <span class="hljs-comment"># 根据键找出值也就是下级节点</span>                in_degrees[v] += <span class="hljs-number">1</span>  <span class="hljs-comment"># 对获取到的下级节点的入度加 1</span>        <span class="hljs-comment"># 循环结束之后的结果： &#123;&#x27;a&#x27;： 0, &#x27;b&#x27;： 1, &#x27;c&#x27;： 1, &#x27;d&#x27;： 2, &#x27;e&#x27;： 1, &#x27;f&#x27;： 4&#125;</span>        Q = [u <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> graph <span class="hljs-keyword">if</span> in_degrees[u] == <span class="hljs-number">0</span>]  <span class="hljs-comment"># 入度为 0 的节点</span>        in_degrees_zero = []        <span class="hljs-keyword">while</span> Q:            u = Q.pop()  <span class="hljs-comment"># 默认从最后一个移除</span>            in_degrees_zero.append(u)  <span class="hljs-comment"># 存储入度为 0 的节点</span>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> graph[u]:                in_degrees[v] -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 删除入度为 0 的节点，以及移除其指向</span>                <span class="hljs-keyword">if</span> in_degrees[v] == <span class="hljs-number">0</span>:                    Q.append(v)        <span class="hljs-keyword">return</span> in_degrees_zero<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-comment"># 用字典的键值表示图的节点之间的关系，键当前节点。值是后续节点。</span>    graph_dict = &#123;        <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;bf&#x27;</span>,  <span class="hljs-comment"># 表示 a 指向 b 和 f</span>        <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;cdf&#x27;</span>,        <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">&#x27;d&#x27;</span>,        <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-string">&#x27;ef&#x27;</span>,        <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-string">&#x27;f&#x27;</span>,        <span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>    &#125;    ts = TopologicalSort()    t = ts.topological_sort(graph_dict)    print(t)</code></pre><p><a href="https://github.com/weitrue/note/tree/master/python/algorithm/sort">https://github.com/weitrue/note/tree/master/python/algorithm/sort</a></p><h3 id="Linked-Structure"><a href="#Linked-Structure" class="headerlink" title="Linked Structure"></a>Linked Structure</h3><p>list是最常用的数据结构，但是list在中间增减元素的时候效率会很低，这时候linked list会更适合，缺点就是获取元素的平均时间复杂度变成了O(n)。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 链表 </span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/16 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val</span>):</span>        self.val = val        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteNode</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    链表中删除一个节点（已知要删除的节点，不知链表的head）</span><span class="hljs-string">    思路：将要删除的链表节点node的值修改为node.next的值</span><span class="hljs-string">         node.next指向node.next.next</span><span class="hljs-string">         这样相当于删除了node节点</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, node_list=<span class="hljs-literal">None</span>, node=<span class="hljs-literal">None</span></span>):</span>        <span class="hljs-keyword">if</span> node_list <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(node_list, <span class="hljs-built_in">list</span>):            self._head = ListNode(node_list[<span class="hljs-number">0</span>])            cur_index = self._head            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(node_list)):                <span class="hljs-keyword">if</span> cur_index.val == node:                    self._node = cur_index                cur_index.<span class="hljs-built_in">next</span> = ListNode(node_list[i])                cur_index = cur_index.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">else</span>:            self._head = <span class="hljs-literal">None</span>            self._node = <span class="hljs-literal">None</span><span class="hljs-meta">    @staticmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_node_in_a_linked_list</span>(<span class="hljs-params">node</span>):</span>        next_node = node.<span class="hljs-built_in">next</span>        next_next_node = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span>        node.val = next_node.val        node.<span class="hljs-built_in">next</span> = next_next_node    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span>(<span class="hljs-params">self</span>):</span>        cur = self._head        link_list = []        <span class="hljs-keyword">while</span> cur:            link_list.append(cur.val)            cur = cur.<span class="hljs-built_in">next</span>        print(link_list)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeLinkedList</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    合并两个有序链表</span><span class="hljs-string">    思路：新建一个链表root，将list_one, list_two遍历，按大小放入root</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, list_one=<span class="hljs-literal">None</span>, list_two=<span class="hljs-literal">None</span></span>):</span>        <span class="hljs-keyword">if</span> list_one <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(list_one, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> list_two <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(list_two, <span class="hljs-built_in">list</span>):            self.list_one = ListNode(list_one[<span class="hljs-number">0</span>])            cur_index = self.list_one            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(list_one)):                cur_index.<span class="hljs-built_in">next</span> = ListNode(list_one[i])                cur_index = cur_index.<span class="hljs-built_in">next</span>            self.list_two = ListNode(list_two[<span class="hljs-number">0</span>])            cur_index = self.list_two            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(list_two)):                cur_index.<span class="hljs-built_in">next</span> = ListNode(list_two[i])                cur_index = cur_index.<span class="hljs-built_in">next</span>        <span class="hljs-keyword">else</span>:            self.list_one = <span class="hljs-literal">None</span>            self.list_two = <span class="hljs-literal">None</span>        self._head = <span class="hljs-literal">None</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_linked_list</span>(<span class="hljs-params">self</span>):</span>        one_cur_val = self.list_one        two_cur_val = self.list_two        self._head = ListNode(<span class="hljs-literal">None</span>)        cur = self._head        <span class="hljs-keyword">while</span> one_cur_val <span class="hljs-keyword">and</span> two_cur_val:            <span class="hljs-keyword">if</span> one_cur_val.val &lt; two_cur_val.val:                node = ListNode(one_cur_val.val)                one_cur_val = one_cur_val.<span class="hljs-built_in">next</span>            <span class="hljs-keyword">else</span>:                node = ListNode(two_cur_val.val)                two_cur_val = two_cur_val.<span class="hljs-built_in">next</span>            cur.<span class="hljs-built_in">next</span> = node            cur = node        cur.<span class="hljs-built_in">next</span> = one_cur_val <span class="hljs-keyword">or</span> two_cur_val    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span>(<span class="hljs-params">self</span>):</span>        cur = self._head.<span class="hljs-built_in">next</span>        link_list = []        <span class="hljs-keyword">while</span> cur:            link_list.append(cur.val)            cur = cur.<span class="hljs-built_in">next</span>        print(link_list)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseLinkList</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    单链表反转</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, head=<span class="hljs-literal">None</span></span>):</span>        <span class="hljs-string">&quot;&quot;&quot;链表的头部&quot;&quot;&quot;</span>        self._head = head    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">self, val: <span class="hljs-built_in">int</span></span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        给链表添加元素</span><span class="hljs-string">        ：param val： 传过来的数字</span><span class="hljs-string">        ：return：</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># 创建一个节点</span>        node = ListNode(val)        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            self._head = node        <span class="hljs-keyword">else</span>:            cur = self._head            <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                cur = cur.<span class="hljs-built_in">next</span>  <span class="hljs-comment"># 移动游标</span>            cur.<span class="hljs-built_in">next</span> = node  <span class="hljs-comment"># 如果 next 后面没了证明以及到最后一个节点了</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">traversal</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._head:            <span class="hljs-keyword">return</span>        cur = self._head        link_list = []        <span class="hljs-keyword">while</span> cur:            link_list.append(cur.val)            cur = cur.<span class="hljs-built_in">next</span>        print(link_list)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">size</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        获取链表的大小</span><span class="hljs-string">        ：return：</span><span class="hljs-string">        &quot;&quot;&quot;</span>        count = <span class="hljs-number">0</span>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:            <span class="hljs-keyword">return</span> count        <span class="hljs-keyword">else</span>:            cur = self._head            <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                count += <span class="hljs-number">1</span>                cur = cur.<span class="hljs-built_in">next</span>            <span class="hljs-keyword">return</span> count    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_link</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        单链表反转</span><span class="hljs-string">        思路：</span><span class="hljs-string">        让 cur.next 先断开即指向 none，指向设定 pre 游标指向断开的元素，然后</span><span class="hljs-string">        cur.next 指向断开的元素，再把开始 self._head 再最后一个元素的时候.</span><span class="hljs-string">        ：return：</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> self.size() == <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span>        <span class="hljs-keyword">else</span>:            pre = <span class="hljs-literal">None</span>            cur = self._head            <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:                post = cur.<span class="hljs-built_in">next</span>                cur.<span class="hljs-built_in">next</span> = pre                pre = cur                cur = post            self._head = pre  <span class="hljs-comment"># 逆向后的头节点</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkListIntersectionNode</span>:</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">两个链表的的交叉节点</span><span class="hljs-string">&quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_intersection_node</span>(<span class="hljs-params">self, headA, headB</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        cur1、cur2，2 个指针的初始位置是链表 headA、headB 头结点，cur1、cur2 两个指针一直往后遍历。</span><span class="hljs-string">        直到 cur1 指针走到链表的末尾，然后 cur1 指向 headB；</span><span class="hljs-string">        直到 cur2 指针走到链表的末尾，然后 cur2 指向 headA；</span><span class="hljs-string">        然后再继续遍历；</span><span class="hljs-string">        每次 cur1、cur2 指向 None，则将 cur1、cur2 分别指向 headB、headA。</span><span class="hljs-string">        循环的次数越多，cur1、cur2 的距离越接近，直到 cur1 等于 cur2。则是两个链表的相交点。</span><span class="hljs-string">        ：tye head1, head1： ListNode</span><span class="hljs-string">        ：rtye： ListNode</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> headA <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> headB <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:            cur1, cur2 = headA, headB            <span class="hljs-keyword">while</span> cur1 != cur2:                cur1 = cur1.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> headA                cur2 = cur2.<span class="hljs-built_in">next</span> <span class="hljs-keyword">if</span> cur2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> headB            <span class="hljs-keyword">return</span> cur1<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    dn = DeleteNode([<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>], <span class="hljs-number">3</span>)    dn.traversal()    dn.delete_node_in_a_linked_list(dn._node)    dn.traversal()    mn = MergeLinkedList([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>])    mn.merge_linked_list()    mn.traversal()    r_link = ReverseLinkList()    r_link.add(<span class="hljs-number">3</span>)    r_link.add(<span class="hljs-number">5</span>)    r_link.add(<span class="hljs-number">6</span>)    r_link.add(<span class="hljs-number">7</span>)    r_link.add(<span class="hljs-number">8</span>)    print(<span class="hljs-string">&quot;对链表进行遍历&quot;</span>)    r_link.traversal()    print(<span class="hljs-string">f&quot;size：<span class="hljs-subst">&#123;r_link.size()&#125;</span>&quot;</span>)    print(<span class="hljs-string">&quot;对链表进行逆向操作之后&quot;</span>)    r_link.reverse_link()    r_link.traversal()</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/link_list_cases.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/link_list_cases.py</a></p><h3 id="Advanced-Linked-Lists"><a href="#Advanced-Linked-Lists" class="headerlink" title="Advanced Linked Lists"></a>Advanced Linked Lists</h3><h4 id="Doubly-Linked-List"><a href="#Doubly-Linked-List" class="headerlink" title="Doubly Linked List"></a>Doubly Linked List</h4><p>双链表，每个节点多了个prev指向前一个节点。双链表可以用来编写文本编辑器的buffer。</p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>利用循环双端链表我们可以实现一个经典的缓存失效算法，lru：</p><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, prev=<span class="hljs-literal">None</span>, <span class="hljs-built_in">next</span>=<span class="hljs-literal">None</span>, key=<span class="hljs-literal">None</span>, value=<span class="hljs-literal">None</span></span>):</span>        self.prev, self.<span class="hljs-built_in">next</span>, self.key, self.value = prev, <span class="hljs-built_in">next</span>, key, value               <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircularDoubleLinkedList</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        node = Node()        node.prev, node.<span class="hljs-built_in">next</span> = node, node        self.rootnode = node            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">headnode</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.rootnode.<span class="hljs-built_in">next</span>          <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tailnode</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.rootnode.prev          <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span>(<span class="hljs-params">self, node</span>):</span>        <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> self.rootnode:            <span class="hljs-keyword">return</span>        <span class="hljs-keyword">else</span>:            node.prev.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>            node.<span class="hljs-built_in">next</span>.prev = node.prev                <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">append</span>(<span class="hljs-params">self, node</span>):</span>        tailnode = self.tailnode()        tailnode.<span class="hljs-built_in">next</span> = node        node.<span class="hljs-built_in">next</span> = self.rootnode        self.rootnode.prev = node                <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, maxsize=<span class="hljs-number">16</span></span>):</span>        self.maxsize = maxsize        self.cache = &#123;&#125;        self.access = CircularDoubleLinkedList()        self.isfull = <span class="hljs-built_in">len</span>(self.cache) &gt;= self.maxsize            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, func</span>):</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">n</span>):</span>            cachenode = self.cache.get(n)            <span class="hljs-keyword">if</span> cachenode <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:  <span class="hljs-comment"># hit</span>                self.access.remove(cachenode)                self.access.append(cachenode)                <span class="hljs-keyword">return</span> cachenode.value            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># miss</span>                value = func(n)                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.isfull:                    tailnode = self.access.tailnode()                    newnode = Node(tailnode, self.access.rootnode, n, value)                    self.access.append(newnode)                    self.cache[n] = newnode                    self.isfull = <span class="hljs-built_in">len</span>(self.cache) &gt;= self.maxsize                    <span class="hljs-keyword">return</span> value                <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># full</span>                    lru_node = self.access.headnode()                    <span class="hljs-keyword">del</span> self.cache[lru_node.key]                    self.access.remove(lru_node)                    tailnode = self.access.tailnode()                    newnode = Node(tailnode, self.access.rootnode, n, value)                    self.access.append(newnode)                    self.cache[n] = newnode                <span class="hljs-keyword">return</span> value        <span class="hljs-keyword">return</span> wrapper            <span class="hljs-meta">@LRUCache()</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>):</span>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):    print(fib(i))        <span class="hljs-comment"># 输出</span><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">5</span><span class="hljs-number">8</span><span class="hljs-number">13</span><span class="hljs-number">21</span><span class="hljs-number">34</span></code></pre><h3 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h3><p>栈，一种后进先出的数据结构。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 基队列实现栈</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：基于collections.deque实现栈</span><span class="hljs-string">          基于 2 个队列实现</span><span class="hljs-string">          基于 1 个队列实现</span><span class="hljs-string">Date: 2020/2/15 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.items = deque()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span>        self.items.append(val)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.items[<span class="hljs-number">-1</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.items.pop()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items) == <span class="hljs-number">0</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    使用 2 个队列实现</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        初始化</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># q1 作为进栈出栈，q2 作为中转站</span>        self.q1 = Queue()        self.q2 = Queue()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, x</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        入栈</span><span class="hljs-string">        ：type x： int</span><span class="hljs-string">        ：rtype： void</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.q1.put(x)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        出栈</span><span class="hljs-string">        ：rtype： int</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">while</span> self.q1.qsize() &gt; <span class="hljs-number">1</span>:            self.q2.put(self.q1.get())  <span class="hljs-comment"># 将 q1 中除尾元素外的所有元素转到 q2 中</span>        <span class="hljs-keyword">if</span> self.q1.qsize() == <span class="hljs-number">1</span>:            res = self.q1.get()  <span class="hljs-comment"># 弹出 q1 的最后一个元素</span>            self.q1, self.q2 = self.q2, self.q1  <span class="hljs-comment"># 交换 q1,q2</span>            <span class="hljs-keyword">return</span> res    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        栈顶</span><span class="hljs-string">        ：rtype： int</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">while</span> self.q1.qsize() &gt; <span class="hljs-number">1</span>:            self.q2.put(self.q1.get())  <span class="hljs-comment"># 将 q1 中除尾元素外的所有元素转到 q2 中</span>        <span class="hljs-keyword">if</span> self.q1.qsize() == <span class="hljs-number">1</span>:            res = self.q1.get()  <span class="hljs-comment"># 弹出 q1 的最后一个元素</span>            self.q2.put(res)  <span class="hljs-comment"># 与 pop 唯一不同的是需要将 q1 最后一个元素保存到 q2 中</span>            self.q1, self.q2 = self.q2, self.q1  <span class="hljs-comment"># 交换 q1,q2</span>            <span class="hljs-keyword">return</span> res    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        判断是否为空</span><span class="hljs-string">        ：rtype： bool</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">bool</span>(self.q1.qsize() + self.q2.qsize())  <span class="hljs-comment"># 为空返回 True，不为空返回 False</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack2</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    使用 1 个队列实现</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        初始化</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.sq1 = Queue()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, x</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        入栈</span><span class="hljs-string">        ：type x： int</span><span class="hljs-string">        ：rtype： void</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.sq1.put(x)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        出栈</span><span class="hljs-string">        ：rtype： int</span><span class="hljs-string">        &quot;&quot;&quot;</span>        count = self.sq1.qsize()        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">1</span>:            x = self.sq1.get()            self.sq1.put(x)            count -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> self.sq1.get()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        Get the top element.</span><span class="hljs-string">        ：rtype： int</span><span class="hljs-string">        &quot;&quot;&quot;</span>        count = self.sq1.qsize()        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">while</span> count:            x = self.sq1.get()            self.sq1.put(x)            count -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> x    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        Returns whether the stack is empty.</span><span class="hljs-string">        ：rtype： bool</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">return</span> self.sq1.empty()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    obj = MyStack2()    obj.push(<span class="hljs-number">1</span>)    obj.push(<span class="hljs-number">3</span>)    print(obj.pop())    obj.push(<span class="hljs-number">4</span>)    print(obj.pop())    print(obj.pop())    print(obj.empty())</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/stack_cases.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/stack_cases.py</a></p><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><p>队列也是经常使用的数据结构，比如发送消息等，celery可以使用redis提供的list实现消息队列。</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 基于collections.deque实现队列</span><span class="hljs-string">                    基于栈实现队列</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/15 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<span class="hljs-keyword">from</span> examples.example_0x_cases.algorithm.data_structure.stack_cases <span class="hljs-keyword">import</span> Stack<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.items = deque()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span>        self.items.append(val)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.items.popleft()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.items) == <span class="hljs-number">0</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueByStack</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        self.stack_one = Stack()        self.stack_two = Stack()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span>        self.stack_one.push(val)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.stack_two.empty():            <span class="hljs-keyword">if</span> self.stack_one.empty():                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nil&#x27;</span>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.stack_one.empty():                self.stack_two.push(self.stack_one.pop())        <span class="hljs-keyword">return</span> self.stack_two.pop()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">peek</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">if</span> self.stack_two.empty():            <span class="hljs-keyword">if</span> self.stack_one.empty():                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nil&#x27;</span>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.stack_one.empty():                self.stack_two.push(self.stack_one.pop())        <span class="hljs-keyword">return</span> self.stack_two.top()    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.stack_two<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    qu = QueueByStack()    qu.push(<span class="hljs-number">1</span>)    qu.push(<span class="hljs-number">2</span>)    qu.push(<span class="hljs-number">3</span>)    print(qu.pop())    print(qu.peek())    print(qu.pop())    print(qu.pop())    print(qu.pop())</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/queue_cases.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/queue_cases.py</a></p><h2 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h2><p>二叉树，每个节点做多只有两个子节点</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 二叉树的遍历：前序、中序、后序、层次遍历</span><span class="hljs-string">                    二叉树的反转</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/16 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, val, left, right</span>):</span>        self.val, self.left, self.right = val, left, right<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinTreeTravel</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, node_list=<span class="hljs-literal">None</span></span>):</span>        <span class="hljs-keyword">if</span> node_list <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(node_list, <span class="hljs-built_in">list</span>):            tree_node_list = []            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(node_list)):                tree_node_list.append(TreeNode(node_list[i], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>))            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(node_list)):                <span class="hljs-keyword">if</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span>:                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]                    tree_node_list[i].right = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]                <span class="hljs-keyword">elif</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> &lt; i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>:                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]                <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">break</span>            self.root = tree_node_list[<span class="hljs-number">0</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_order_travel</span>(<span class="hljs-params">self, sub_tree</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        先序遍历</span><span class="hljs-string">        :param sub_tree:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> sub_tree:            print(sub_tree.val)            self.pre_order_travel(sub_tree.left)            self.pre_order_travel(sub_tree.right)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">in_order_travel</span>(<span class="hljs-params">self, sub_tree</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        中序遍历</span><span class="hljs-string">        :param sub_tree:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> sub_tree:            self.in_order_travel(sub_tree.left)            print(sub_tree.val)            self.in_order_travel(sub_tree.right)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post_order_travel</span>(<span class="hljs-params">self, sub_tree</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        后序遍历</span><span class="hljs-string">        :param sub_tree:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> sub_tree:            self.post_order_travel(sub_tree.left)            self.post_order_travel(sub_tree.right)            print(sub_tree.val)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">level_order_travel</span>(<span class="hljs-params">self, root</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        层次遍历</span><span class="hljs-string">        :param root:</span><span class="hljs-string">        :return: list[list[int]]</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:            print([])            <span class="hljs-keyword">return</span>        cur_nodes = [root]        next_nodes = []        print([i.val <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cur_nodes])        <span class="hljs-keyword">while</span> cur_nodes <span class="hljs-keyword">or</span> next_nodes:            <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> cur_nodes:                <span class="hljs-keyword">if</span> node.left:                    next_nodes.append(node.left)                <span class="hljs-keyword">if</span> node.right:                    next_nodes.append(node.right)            <span class="hljs-keyword">if</span> next_nodes:                print([i.val <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> next_nodes])            cur_nodes = next_nodes            next_nodes = []<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReverseBinaryTree</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    反转二叉树</span><span class="hljs-string">               1                         1</span><span class="hljs-string">            3     4                   4     3</span><span class="hljs-string">         5   7  8   9      =&gt;       9  8  7   5</span><span class="hljs-string">      10                                        10</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, node_list=<span class="hljs-literal">None</span></span>):</span>        <span class="hljs-keyword">if</span> node_list <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(node_list, <span class="hljs-built_in">list</span>):            tree_node_list = []            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(node_list)):                tree_node_list.append(TreeNode(node_list[i], <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>))            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(node_list)):                <span class="hljs-keyword">if</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span>:                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]                    tree_node_list[i].right = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]                <span class="hljs-keyword">elif</span> i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= <span class="hljs-built_in">len</span>(tree_node_list) - <span class="hljs-number">1</span> &lt; i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>:                    tree_node_list[i].left = tree_node_list[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]                <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">break</span>            self.root = tree_node_list[<span class="hljs-number">0</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_tree</span>(<span class="hljs-params">self, root</span>):</span>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">and</span> root.left <span class="hljs-keyword">and</span> root.right:            root.left, root.right = root.right, root.left            self.reverse_tree(root.left)            self.reverse_tree(root.right)        self.root = root<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindTreeKthSmallest</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    二叉搜索树中第 K 小的元素</span><span class="hljs-string">    二叉搜索树按照中序遍历的顺序打印出来正好就是排序好的顺序。所以对其遍历一个节点就进行计数，计数达到 k 的时候就结束。</span><span class="hljs-string">    &quot;&quot;&quot;</span>    count = <span class="hljs-number">0</span>    node_val = <span class="hljs-number">0</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kth_smallest</span>(<span class="hljs-params">self, root: TreeNode, k</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        ：type root： TreeNode</span><span class="hljs-string">        ：type k： int</span><span class="hljs-string">        ：rtype： int</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.dfs(root, k)        <span class="hljs-keyword">return</span> self.node_val    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">self, node: TreeNode, k</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:            <span class="hljs-keyword">return</span>        self.dfs(node.left, k)        self.count = self.count + <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> self.count == k:            self.node_val = node.val            <span class="hljs-comment"># 将该节点的左右子树置为 None,来结束递归，减少时间复杂度</span>            node.left = <span class="hljs-literal">None</span>            node.right = <span class="hljs-literal">None</span>        self.dfs(node.right, k)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    bt = BinTreeTravel([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>])    bt.pre_order_travel(bt.root)    bt.in_order_travel(bt.root)    bt.post_order_travel(bt.root)    bt.level_order_travel(bt.root)    print(<span class="hljs-string">&quot;#################################################&quot;</span>)    it = ReverseBinaryTree()    it.reverse_tree(bt.root)    bt.pre_order_travel(bt.root)</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/tree_cases.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/tree_cases.py</a></p><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p>二叉树最直接的一个应用就是实现堆。堆就是一颗完全二叉树，最大堆的非叶子节点的值都比孩子大，最小堆的非叶子结点的值都比孩子小。 python内置了heapq模块帮助我们实现堆操作，比如用内置的heapq模块实现个堆排序</p><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">Module Description: 获取大量元素中 top-n 大个元素，固定内存</span><span class="hljs-string">Problem:</span><span class="hljs-string">Solution：</span><span class="hljs-string">Date: 2020/2/16 </span><span class="hljs-string">Author: Wang P</span><span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-keyword">import</span> heapq<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TopN</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    先放入元素前n个建立小顶堆</span><span class="hljs-string">    迭代剩余元素：</span><span class="hljs-string">        如果当前元素小于堆顶元素，跳过该元素</span><span class="hljs-string">        否则退换堆顶元素为当前元素，并重新调整堆</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, iterable, n</span>):</span>        self.min_heap = []        self.capacity = n        self.iterable = iterable    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, val</span>):</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.min_heap) &gt;= self.capacity:            min_val = self.min_heap[<span class="hljs-number">0</span>]            <span class="hljs-keyword">if</span> val &lt; min_val:  <span class="hljs-comment"># 可以省略</span>                <span class="hljs-keyword">pass</span>            <span class="hljs-keyword">else</span>:                heapq.heapreplace(self.min_heap, val)  <span class="hljs-comment"># 返回并且pop堆顶最小值，推入心得val并调整堆</span>        <span class="hljs-keyword">else</span>:            heapq.heapreplace(self.min_heap, val)  <span class="hljs-comment"># 前n个元素直接放入堆中</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_top_n</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> self.iterable:            self.push(val)        <span class="hljs-keyword">return</span> self.min_heap</code></pre><p><a href="https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/heap_cases.py">https://github.com/weitrue/note/blob/master/python/algorithm/data_structure/heap_cases.py</a></p><h3 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h3><p>基于比较的搜索（线性搜索，有序数组的二分搜索）最好的时间复杂度只能达到O(logn)，利用hash可以实现O(1)查找，python内置dict的实现方式就是hash，你会发现dict的key必须要是实现了 <code>__hash__</code> 和 <code>__eq__</code> 方法的。</p><p>Hashing: hashing is the process of mapping a search a key to a limited range of array indeices with the goal of providing direct access to the keys.</p><p>hash方法有个hash函数用来给key计算一个hash值，作为数组下标，放到该下标对应的槽中。当不同key根据hash函数计算得到的下标相同时，就出现了冲突。解决冲突有很多方式，比如让每个槽成为链表，每次冲突以后放到该槽链表的尾部，但是查询时间就会退化，不再是O(1)。还有一种探查方式，当key的槽冲突时候，就会根据一种计算方式去寻找下一个空的槽存放，探查方式有线性探查，二次方探查法等，cpython解释器使用的是二次方探查法。还有一个问题就是当python使用的槽数量大于预分配的2/3时候，会重新分配内存并拷贝以前的数据，所以有时候dict的add操作代价还是比较高的，牺牲空间但是可以始终保证O(1)的查询效率。如果有大量的数据，建议还是使用bloomfilter或者redis提供的HyperLogLog。</p><p>如果感兴趣，可以看看这篇文章，介绍c解释器如何实现的python dict对象：<a href="http://www.laurentluce.com/posts/python-dictionary-implementation/">Python dictionary implementation</a>。我们使用Python来实现一个类似的hash结构。</p><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>递归函数：Recursion is a process for solving problems by subdividing a larger problem into smaller cases of the problem itself and then solving the smaller, more trivial parts.</p><p>Properties of Recursion: 使用stack解决的问题都能用递归解决</p><ul><li>A recursive solution must contain a base case; 递归出口，代表最小子问题(n == 0退出打印)</li><li>A recursive solution must contain a recursive case; 可以分解的子问题</li><li>A recursive solution must make progress toward the base case. 递减n使得n像递归出口靠近</li></ul><p>Tail Recursion: occurs when a function includes a single recursive call as the last statement of the function. In this case, a stack is not needed to store values to te used upon the return of the recursive call and thus a solution can be implemented using a iterative loop instead.</p>]]></content>
    
    
    <categories>
      
      <category>ADT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>ADT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【All】HDFS:Hadoop分布式文件系统</title>
    <link href="/2020/11/09/Hadoop-HDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/11/09/Hadoop-HDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/hdfs/image-20200416160250256.png"><a id="more"></a> </p><h3 id="大数据全链路架构"><a href="#大数据全链路架构" class="headerlink" title="大数据全链路架构"></a>大数据全链路架构</h3><p>数据在生产环境中的流向及处理流程</p><p><img src="/images/hdfs/image-20190629152840146.png"></p><h3 id="大数据主流框架"><a href="#大数据主流框架" class="headerlink" title="大数据主流框架"></a>大数据主流框架</h3><p>1 第一代大数据框架: 各自为战</p><p><img src="/images/hdfs/image-20190629153348534.png"></p><p>2 第二代大数据计算框架</p><p><img src="/images/hdfs/image-20190629153652036.png"></p><p>3 第三代大数据计算框架 Flink</p><p><img src="/images/hdfs/image-20190629153835100.png"></p><h3 id="Hadoop的架构模块"><a href="#Hadoop的架构模块" class="headerlink" title="Hadoop的架构模块"></a>Hadoop的架构模块</h3><div align="center">  <img src="/images/hdfs/image-20200414134203318.png" alt="image-20200414134203318" style="zoom:50%;align: center"></div><ul><li>Hadoop由三个模块组成：**<em>分布式**</em>存储HDFS、分布式计算MapReduce、资源调度引擎Yarn</li></ul><div align="center">  <img src="/images/hdfs/image-20200414134230170.png" alt="image-20200414134230170" style="zoom: 33%;align: center"></div><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> HDFS模块：<span class="hljs-bullet">  -</span>  namenode：主节点，主要负责集群的管理以及元数据信息管理<span class="hljs-bullet">  -</span>  datanode：从节点，主要负责存储用户数据<span class="hljs-bullet">  -</span>  secondaryNameNode：辅助namenode管理元数据信息，以及元数据信息的冷备份<span class="hljs-bullet">-</span> Yarn模块：<span class="hljs-bullet">  -</span> ResourceManager：主节点，主要负责资源分配<span class="hljs-bullet">  -</span> NodeManager：从节点，主要负责执行任务</code></pre><h3 id="HDFS功能模块"><a href="#HDFS功能模块" class="headerlink" title="HDFS功能模块"></a>HDFS功能模块</h3><h4 id="hdfs的架构"><a href="#hdfs的架构" class="headerlink" title="hdfs的架构"></a>hdfs的架构</h4><h5 id="文件分块存储-amp-3副本"><a href="#文件分块存储-amp-3副本" class="headerlink" title="文件分块存储&amp;3副本"></a>文件分块存储&amp;3副本</h5><p><img src="/images/hdfs/block3.gif"></p><p><img src="/images/hdfs/image-20200414151438737.png"></p><ul><li><p>保存文件到HDFS时，会先默认按**<em>128M**</em>的大小对文件进行切分；效果如上图</p><ul><li>数据以block块的形式进统一存储管理，每个block块默认最多可以存储128M的文件。</li><li>如果有一个文件大小为1KB，也是要占用一个block块，但是实际占用磁盘空间还是1KB大小，类似于有一个水桶可以装128斤的水，但是我只装了1斤的水，那么我的水桶里面水的重量就是1斤，而不是128斤</li></ul></li><li><p>每个block块的元数据大小大概为150字节</p></li><li><p>所有的文件都是以block块的方式存放在HDFS文件系统当中，在hadoop1当中，文件的block块默认大小是64M，hadoop2当中，文件的block块大小默认是128M，block块的大小可以通过hdfs-site.xml当中的配置文件进行指定</p></li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.block.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>块大小 以字节为单位<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-comment">&lt;!-- 只写数值就可以 --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><ul><li><p>为了保证block块的安全性，也就是数据的安全性，在hadoop2当中，文件默认保存**<em>三个副本**</em>，我们可以更改副本数以提高数据的安全性</p></li><li><p>在hdfs-site.xml当中修改以下配置属性，即可更改文件的副本数</p></li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><h5 id="抽象成数据块的好处"><a href="#抽象成数据块的好处" class="headerlink" title="抽象成数据块的好处"></a>抽象成数据块的好处</h5><ol><li><p>一个文件有可能大于集群中任意一个磁盘<br>10T*3/128 = xxx块 2T，2T，2T 文件方式存—–&gt;多个block块，这些block块属于一个文件</p></li><li><p>使用块抽象而不是文件可以简化存储子系统</p><p>hdfs将所有的文件全部抽象成为block块来进行存储，不管文件大小，全部一视同仁都是以block块的形式进行存储，方便我们的分布式文件系统对文件的管理</p></li><li><p>块非常适合用于数据备份进而提供数据容错能力和可用性</p></li></ol><h5 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h5><p><img src="/images/hdfs/image-20200416160250256.png"></p><ul><li>HDFS集群包括，NameNode和DataNode以及Secondary Namenode。<ul><li>NameNode负责管理整个文件系统的元数据，以及每一个路径（文件）所对应的数据块信息。</li><li>DataNode 负责管理用户的文件数据块，每一个数据块都可以在多个datanode上存储多个副本。</li><li>Secondary NameNode用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。最主要作用是辅助namenode管理元数据信息</li></ul></li><li>NameNode与Datanode的总结概述</li></ul><p><img src="/images/hdfs/image-20200416160339310.png"></p><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>块缓存</p><ul><li><p>通常DataNode从磁盘中读取块，但对于访问频繁的文件，其对应的块可能被显示的缓存在DataNode的内存中，以堆外块缓存的形式存在。默认情况下，一个块仅缓存在一个DataNode的内存中，当然可以针对每个文件配置DataNode的数量。作业调度器通过在缓存块的DataNode上运行任务，可以利用块缓存的优势提高读操作的性能。</p><p>例如：<br> 连接（join）操作中使用的一个小的查询表就是块缓存的一个很好的候选。<br> 用户或应用通过在缓存池中增加一个cache directive来告诉namenode需要缓存哪些文件及存多久。缓存池（cache pool）是一个拥有管理缓存权限和资源使用的管理性分组</p></li></ul><p>hdfs的文件权限验证</p><ul><li><p>hdfs的文件权限机制与linux系统的文件权限机制类似</p><p>r:read  w:write x:execute 权限x对于文件表示忽略，对于文件夹表示是否有权限访问其内容</p><p>如果linux系统用户zhangsan使用hadoop命令创建一个文件，那么这个文件在HDFS当中的owner就是zhangsan</p><p>HDFS文件权限的目的，防止好人做错事，而不是阻止坏人做坏事。HDFS相信你告诉我你是谁，你就是谁</p></li></ul><h4 id="HDFS的shell命令操作"><a href="#HDFS的shell命令操作" class="headerlink" title="HDFS的shell命令操作"></a>HDFS的shell命令操作</h4><ul><li>HDFS命令有两种风格：<ul><li>hadoop fs开头的</li><li>hdfs dfs开头的</li><li>两种命令均可使用，效果相同</li></ul></li></ul><p>查看hdfs或hadoop子命令的帮助信息，如ls子命令</p><pre><code class="hljs shell">hdfs dfs -help lshadoop fs -help ls #两个命令等价</code></pre><p>查看hdfs文件系统中指定目录的文件列表。对比linux命令ls</p><pre><code class="hljs shell">hdfs dfs -ls /hadoop fs -ls /hdfs dfs -ls -R /</code></pre><p>在hdfs文件系统中创建文件</p><pre><code class="hljs shell">hdfs dfs -touchz /edits.txt</code></pre><p>向HDFS文件中追加内容</p><pre><code class="hljs shell">hadoop fs -appendToFile edit1.xml /edits.txt #将本地磁盘当前目录的edit1.xml内容追加到HDFS根目录 的edits.txt文件</code></pre><p>查看HDFS文件内容</p><pre><code class="hljs shell">hdfs dfs -cat /edits.txt</code></pre><p>从本地路径上传文件至HDFS</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">用法：hdfs dfs -put /本地路径 /hdfs路径</span>hdfs dfs -put /linux本地磁盘文件 /hdfs路径文件hdfs dfs -copyFromLocal /linux本地磁盘文件 /hdfs路径文件  #跟put作用一样hdfs dfs -moveFromLocal /linux本地磁盘文件 /hdfs路径文件  #跟put作用一样，只不过，源文件被拷贝成功后，会被删除</code></pre><p>在hdfs文件系统中下载文件</p><pre><code class="hljs shell">hdfs dfs -get /hdfs路径 /本地路径hdfs dfs -copyToLocal /hdfs路径 /本地路径  #根get作用一样</code></pre><p>在hdfs文件系统中创建目录</p><pre><code class="hljs shell">hdfs dfs -mkdir /shell</code></pre><p>在hdfs文件系统中删除文件</p><pre><code class="hljs shell">hdfs dfs -rm /edits.txt</code></pre><p>在hdfs文件系统中修改文件名称（也可以用来移动文件到目录）</p><pre><code class="hljs shell">hdfs dfs -mv /xcall.sh /call.shhdfs dfs -mv /call.sh /shell</code></pre><p>在hdfs中拷贝文件到目录</p><pre><code class="hljs shell">hdfs dfs -cp /xrsync.sh /shell</code></pre><p>递归删除目录</p><pre><code class="hljs shell">hdfs dfs -rm -r /shell</code></pre><p>列出本地文件的内容（默认是hdfs文件系统）</p><pre><code class="hljs shell">hdfs dfs -ls file:///home/hadoop/</code></pre><p>查找文件</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> linux find命令</span>find . -name &#x27;edit*&#x27;<span class="hljs-meta">#</span><span class="bash"> HDFS find命令</span>hadoop fs -find / -name part-r-00000 # 在HDFS根目录中，查找part-r-00000文件</code></pre><h4 id="HDFS安全模式"><a href="#HDFS安全模式" class="headerlink" title="HDFS安全模式"></a>HDFS安全模式</h4><ul><li>安全模式是HDFS所处的一种特殊状态，在这种状态下，文件系统只接受读数据请求，而不接受删除、修改等变更请求。在NameNode主节点启动时，HDFS首先进入安全模式，DataNode在启动的时候会向namenode汇报可用的block等状态，当整个系统达到安全标准时，HDFS自动离开安全模式。如果HDFS出于安全模式下，则文件block不能进行任何的副本复制操作，因此达到最小的副本数量要求是基于datanode启动时的状态来判定的，启动时不会再做任何复制（从而达到最小副本数量要求），hdfs集群刚启动的时候，默认30S钟的时间是出于安全期的，只有过了30S之后，集群脱离了安全期，然后才可以对集群进行操作</li><li>何时推出安全模式<ul><li>namenode知道集群共多少个block（不考虑副本），假设值是total；</li><li>namenode启动后，会上报block report，namenode开始累加统计满足最小副本数（默认1）的block个数，假设是num</li><li>当num/total &gt; 99.9%时，推出安全模式</li></ul></li></ul><pre><code class="hljs shell">[hadoop@node01 hadoop]$ hdfs dfsadmin -safemode  Usage: hdfs dfsadmin [-safemode enter | leave | get | wait]</code></pre><h4 id="NameNode和SecondaryNameNode"><a href="#NameNode和SecondaryNameNode" class="headerlink" title="NameNode和SecondaryNameNode"></a>NameNode和SecondaryNameNode</h4><h5 id="namenode与secondaryName"><a href="#namenode与secondaryName" class="headerlink" title="namenode与secondaryName"></a>namenode与secondaryName</h5><ul><li><p>NameNode主要负责集群当中的元数据信息管理，而且元数据信息需要经常随机访问，因为元数据信息必须高效的检索，那么如何保证namenode快速检索呢？？元数据信息保存在哪里能够快速检索呢？？如何保证元数据的持久安全呢？？</p></li><li><p>为了保证元数据信息的快速检索，那么我们就必须将元数据存放在内存当中，因为在内存当中元数据信息能够最快速的检索，那么随着元数据信息的增多（每个block块大概占用150字节的元数据信息），内存的消耗也会越来越多。</p></li><li><p>如果所有的元数据信息都存放内存，服务器断电，内存当中所有数据都消失，为了保证元数据的安全持久，元数据信息必须做可靠的持久化，在hadoop当中为了持久化存储元数据信息，将所有的元数据信息保存在了FSImage文件当中，那么FSImage随着时间推移，必然越来越膨胀，FSImage的操作变得越来越难，为了解决元数据信息的增删改，hadoop当中还引入了元数据操作日志edits文件，edits文件记录了客户端操作元数据的信息，随着时间的推移，edits信息也会越来越大，为了解决edits文件膨胀的问题，hadoop当中引入了secondaryNamenode来专门做fsimage与edits文件的合并</p></li></ul><p><img src="/images/hdfs/checkpoint.gif"></p><h5 id="namenode工作机制"><a href="#namenode工作机制" class="headerlink" title="namenode工作机制"></a>namenode工作机制</h5><p>（1）第一次启动namenode格式化后，创建fsimage和edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</p><p>（2）客户端对元数据进行增删改的请求</p><p>（3）namenode记录操作日志，更新滚动日志。</p><p>（4）namenode在内存中对数据进行增删改查</p><h5 id="Secondary-NameNode工作"><a href="#Secondary-NameNode工作" class="headerlink" title="Secondary NameNode工作"></a>Secondary NameNode工作</h5><p>（1）Secondary NameNode询问namenode是否需要checkpoint。直接带回namenode是否检查结果。</p><p>（2）Secondary NameNode请求执行checkpoint。</p><p>（3）namenode滚动正在写的edits日志</p><p>（4）将滚动前的编辑日志和镜像文件拷贝到Secondary NameNode</p><p>（5）Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</p><p>（6）生成新的镜像文件fsimage.chkpoint</p><p>（7） 拷贝fsimage.chkpoint到namenode</p><p>（8）namenode将fsimage.chkpoint重新命名成fsimage</p><h5 id="FSImage与edits详解"><a href="#FSImage与edits详解" class="headerlink" title="FSImage与edits详解"></a>FSImage与edits详解</h5><ul><li>所有的元数据信息都保存在了FsImage与Eidts文件当中，这两个文件就记录了所有的数据的元数据信息，元数据信息的保存目录配置在了hdfs-site.xml当中</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre><ul><li><p>客户端对hdfs进行写文件时会首先被记录在edits文件中。</p><p>edits修改时元数据也会更新。</p><p>每次hdfs更新时edits先更新后客户端才会看到最新信息。</p><p>fsimage:是namenode中关于元数据的镜像，一般称为检查点。</p><p>一般开始时对namenode的操作都放在edits中，为什么不放在fsimage中呢？</p><p>因为fsimage是namenode的完整的镜像，内容很大，如果每次都加载到内存的话生成树状拓扑结构，这是非常耗内存和CPU。</p><p>fsimage内容包含了namenode管理下的所有datanode中文件及文件block及block所在的datanode的元数据信息。随着edits内容增大，就需要在一定时间点和fsimage合并。</p></li></ul><h5 id="FSimage文件当中的文件信息查看"><a href="#FSimage文件当中的文件信息查看" class="headerlink" title="FSimage文件当中的文件信息查看"></a>FSimage文件当中的文件信息查看</h5><ul><li><p>官方查看文档</p><p><a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.0/hadoop-project-dist/hadoop-hdfs/HdfsImageViewer.html">http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.2/hadoop-project-dist/hadoop-hdfs/HdfsImageViewer.html</a></p></li><li><p>使用命令 hdfs oiv </p></li></ul><pre><code class="hljs shell">cd  /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas/currenthdfs oiv -i fsimage_0000000000000000864 -p XML -o hello.xml</code></pre><h5 id="edits当中的文件信息查看"><a href="#edits当中的文件信息查看" class="headerlink" title="edits当中的文件信息查看"></a>edits当中的文件信息查看</h5><ul><li><p>官方查看文档</p><p><a href="http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.0/hadoop-project-dist/hadoop-hdfs/HdfsEditsViewer.html">http://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.14.2/hadoop-project-dist/hadoop-hdfs/HdfsEditsViewer.html</a></p></li><li><p>查看命令 hdfs oev</p></li></ul><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/editshdfs oev -i edits_0000000000000000865-0000000000000000866 -o myedit.xml -p XML</code></pre><h5 id="secondarynameNode如何辅助管理FSImage与Edits文件"><a href="#secondarynameNode如何辅助管理FSImage与Edits文件" class="headerlink" title="secondarynameNode如何辅助管理FSImage与Edits文件"></a>secondarynameNode如何辅助管理FSImage与Edits文件</h5><h5 id="namenode元数据信息多目录配置"><a href="#namenode元数据信息多目录配置" class="headerlink" title="namenode元数据信息多目录配置"></a>namenode元数据信息多目录配置</h5><ul><li><p>为了保证元数据的安全性，我们一般都是先确定好我们的磁盘挂载目录，将元数据的磁盘做RAID1</p><p>namenode的本地目录可以配置成多个，且每个目录存放内容相同，增加了可靠性。</p></li><li><p>具体配置如下：</p><p>hdfs-site.xml</p></li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Bdata</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux】Docker安装与使用</title>
    <link href="/2020/06/24/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/06/24/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/mac.jpg"><a id="more"></a> </p><p><strong>Docker安装与使用</strong></p><p><strong>官方文档</strong></p><p><a href="https://links.jianshu.com/go?to=https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p><strong>安装方式</strong></p><ul><li>设置docker源的方式来安装(简单， 官方推荐)</li><li>下载rpm包的方式安装(适用于离线环境)</li><li>使用脚本安装(适用于测试和开发环境)</li></ul><p><strong>docker源方式安装</strong></p><p>（1）更新yum， 安装依赖</p><pre><code class="hljs sql">yum <span class="hljs-keyword">update</span>yum <span class="hljs-keyword">install</span> -y yum-utils device-mapper-persistent-<span class="hljs-keyword">data</span> lvm2</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1.png"></p><p>（2）将docker源添加到系统中</p><pre><code class="hljs awk">yum-config-manager --add-repo https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos/docker-ce.repo</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1-1.png"></p><p>（3）Docker安装</p><pre><code class="hljs vim">yum install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io</code></pre><p>此时，可能会报错：</p><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/2.png"></p><p>该图中原因是</p><p>containerd.io此软件包已经安装，并且是较低版本，与要安装的docker-ce所依赖containerd.io的版本不符，因此最好安装较新版本的containerd.io</p><pre><code class="hljs awk"><span class="hljs-comment"># 下面网址可以看到一系列版本的containerd.io</span>https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos<span class="hljs-regexp">/7/</span>x86_64<span class="hljs-regexp">/edge/</span>Packages/<span class="hljs-comment">#wget 命令下载指定版本的containerd.io（如果未安装wget，需要yum -y install wget）</span>wget https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>centos<span class="hljs-regexp">/7/</span>x86_64<span class="hljs-regexp">/edge/</span>Packages/containerd.io-<span class="hljs-number">1.2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">3.3</span>.el7.x86_64.rpm</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/3.png"></p><p> 重新安装Docker</p><pre><code class="hljs cmake">yum -y <span class="hljs-keyword">install</span> docker-ce</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/4.png"></p><p>（4）Docker启动设置-—启动docker和添加开启自启动</p><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">enable</span> dockersystemctl <span class="hljs-keyword">start</span> docker</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/5.png"></p><p>（5）查看Docker版本</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker -v</span></code></pre><p><strong>3. Docker使用</strong></p><p><strong>3.1 docker命令</strong></p><p>（1）命令帮助（-h已被弃用）</p><pre><code class="hljs ada">docker <span class="hljs-comment">--help</span></code></pre><p>（2）常用选项说明</p><ul><li><p>-d, –detach=false， 指定容器运行于前台还是后台，默认为false</p></li><li><p>-i, –interactive=false， 打开STDIN，用于控制台交互</p></li><li><p>-t, –tty=false， 分配tty设备，该可以支持终端登录，默认为false</p></li><li><p>-u, –user=””， 指定容器的用户</p></li><li><p>-a, –attach=[]， 登录容器（必须是以docker run -d启动的容器）</p></li><li><p>-w, –workdir=””， 指定容器的工作目录</p></li><li><p>-c, –cpu-shares=0， 设置容器CPU权重，在CPU共享场景使用</p></li><li><p>-e, –env=[]， 指定环境变量，容器中可以使用该环境变量</p></li><li><p>-m, –memory=””， 指定容器的内存上限</p></li><li><p>-P, –publish-all=false， 指定容器暴露的端口</p></li><li><p>-p, –publish=[]， 指定容器暴露的端口</p></li><li><p>-h, –hostname=””， 指定容器的主机名</p></li><li><p>-v, –volume=[]， 给容器挂载存储卷，挂载到容器的某个目录</p></li><li><p>–volumes-from=[]， 给容器挂载其他容器上的卷，挂载到容器的某个目录</p></li><li><p>–cap-add=[]， 添加权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities">http://linux.die.net/man/7/capabilities</a></p></li><li><p>–cap-drop=[]， 删除权限，权限清单详见：<a href="http://linux.die.net/man/7/capabilities">http://linux.die.net/man/7/capabilities</a></p></li><li><p>–cidfile=””， 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</p></li><li><p>–cpuset=””， 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</p></li><li><p>–device=[]， 添加主机设备给容器，相当于设备直通</p></li><li><p>–dns=[]， 指定容器的dns服务器</p></li><li><p>–dns-search=[]， 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</p></li><li><p>–entrypoint=””， 覆盖image的入口点</p></li><li><p>–env-file=[]， 指定环境变量文件，文件格式为每行一个环境变量</p></li><li><p>–expose=[]， 指定容器暴露的端口，即修改镜像的暴露端口</p></li><li><p>–link=[]， 指定容器间的关联，使用其他容器的IP、env等信息</p></li><li><p>–lxc-conf=[]， 指定容器的配置文件，只有在指定–exec-driver=lxc时使用</p></li><li><p>–name=””， 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</p></li><li><p>–net=”bridge”， 容器网络设置:</p></li><li><ul><li>bridge 使用docker daemon指定的网桥</li><li>host //容器使用主机的网络</li><li>container:NAME_or_ID &gt;//使用其他容器的网路，共享IP和PORT等网络资源</li><li>none 容器使用自己的网络（类似–net=bridge），但是不进行配置</li></ul></li><li><p>–privileged=false， 指定容器是否为特权容器，特权容器拥有所有的capabilities</p></li><li><p>–restart=”no”， 指定容器停止后的重启策略:</p></li><li><ul><li>no：容器退出时不重启</li><li>on-failure：容器故障退出（返回值非零）时重启</li><li>always：容器退出时总是重启</li></ul></li><li><p>–rm=false， 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</p></li><li><p>–sig-proxy=true， 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</p></li></ul><p><strong>3.2 部署/运行镜像</strong></p><p><strong>3.2.1 pull方式</strong></p><p>（1）下载命令</p><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull 镜像名</code></pre><p>（2）[例如]下载gitlab</p><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull gitlab/gitlab-ce</code></pre><p>下载的镜像所在位置（其中一个）</p><pre><code class="hljs crystal">cd var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">docker</span>/<span class="hljs-title">containers</span></span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/6.png"></p><p>（3）查看镜像详细信息</p><pre><code class="hljs gradle">docker <span class="hljs-keyword">inspect</span> gitlab/gitlab-ce</code></pre><p>（4）运行镜像</p><pre><code class="hljs awk">docker run --detach \  --hostname <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> \  --publish <span class="hljs-number">10443</span>:<span class="hljs-number">443</span> --publish <span class="hljs-number">1080</span>:<span class="hljs-number">80</span> --publish <span class="hljs-number">1022</span>:<span class="hljs-number">22</span> \  --name gitlab \  --restart always \  --volume <span class="hljs-regexp">/srv/gi</span>tlab<span class="hljs-regexp">/config:/</span>etc/gitlab \  --volume <span class="hljs-regexp">/srv/gi</span>tlab<span class="hljs-regexp">/logs:/</span>var<span class="hljs-regexp">/log/gi</span>tlab \  --volume <span class="hljs-regexp">/srv/gi</span>tlab<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/opt/gi</span>tlab \  gitlab/gitlab-ce:latest</code></pre><p>这里，</p><p>127.0.0.1为服务器IP地址；</p><p>–publish 10443:443 –publish 1080:80 –publish 1022:22 是指将443端口对外映射（暴露）成10443，22端口对外映射（暴露）成1022，80端口对外映射（暴露）成1080。</p><p>（5）访问gitlab</p><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/7.png"></p><p><strong>3.2.2 容器化（github.com上项目）</strong></p><p><strong>3.3 删除镜像</strong></p><p>（1）查看镜像</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps -a</span></code></pre><p>这里docker ps 的命令包括： </p><ul><li>-a 列出所有容器 </li><li>-l 列出最新创建容器 </li><li>-n=2 列出最近创建的2个容器 </li><li>-q 仅列出容器ID </li><li>-s 显示容器大小 </li></ul><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/8.png"></p><p>其中，</p><p>CONTAINER ID：容器ID</p><p>IMAGE：镜像名</p><p><strong>注意</strong>：如果容器正在运行是无法删除，需要先停止</p><p>（2）stop容器</p><pre><code class="hljs sql">docker <span class="hljs-keyword">stop</span>&lt;容器<span class="hljs-keyword">ID</span>或容器名&gt;</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/9.png"></p><p>（3）删除容器</p><pre><code class="hljs xml">docker rm <span class="hljs-tag">&lt;<span class="hljs-name">容器ID或容器名</span>&gt;</span></code></pre><p>（4）删除镜像</p><pre><code class="hljs xml">docker rmi <span class="hljs-tag">&lt;<span class="hljs-name">镜像ID或镜像名</span>&gt;</span></code></pre><p>镜像ID可以通过docker images</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/10.png"></p><p>或docker image ls</p><pre><code class="hljs mel">docker <span class="hljs-keyword">image</span> <span class="hljs-keyword">ls</span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/11.png"></p><p><strong>3.4 修改映射端口</strong></p><p><strong>3.4.1 重新部署镜像</strong></p><p><strong>3.4.2 修改部署容器配置文件</strong></p><p>（1）停止需要修改的容器</p><pre><code class="hljs livecodeserver">docker ps -<span class="hljs-keyword">a</span> docker <span class="hljs-built_in">stop</span> &lt;容器ID或容器名&gt;</code></pre><p>（2）找到hostconfig.json文件</p><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> /var/lib/docker/containers/&lt;容器对应ID目录，例如<span class="hljs-number">651</span>dcd<span class="hljs-number">904</span>c<span class="hljs-number">5</span>eec<span class="hljs-number">9617</span>ea<span class="hljs-number">006</span>f<span class="hljs-number">2</span>ac<span class="hljs-number">3</span>e<span class="hljs-number">59</span>a<span class="hljs-number">9</span>a<span class="hljs-number">015</span>de<span class="hljs-number">237</span>cae<span class="hljs-number">891</span>fc<span class="hljs-number">5</span>ef<span class="hljs-number">46</span>a<span class="hljs-number">17</span>bd<span class="hljs-number">3033</span>&gt;/</code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/12.png"></p><p>（3）修改hostconfig.json文件中”PortBindings”配置</p><pre><code class="hljs css"><span class="hljs-selector-tag">vim</span> <span class="hljs-selector-tag">hostconfig</span><span class="hljs-selector-class">.json</span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/13.png"></p><p>（4）重启docker[非常重要]，否则修改会失效</p><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span></code></pre><p>（5）启动修改后的容器</p><pre><code class="hljs sql">docker <span class="hljs-keyword">start</span> &lt;容器<span class="hljs-keyword">ID</span>或容器名&gt;</code></pre><p>（6）查看是否修改成功</p><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps -a</span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/14.png"></p><p><strong>Docker镜像部署容器</strong></p><p><strong>拉取远端镜像方式</strong></p><p><strong>1.部署gitlab（私有代码库）</strong></p><pre><code class="hljs awk">docker pull gitlab/gitlab-cedocker run --detach \  --publish <span class="hljs-number">443</span>:<span class="hljs-number">443</span> --publish <span class="hljs-number">80</span>:<span class="hljs-number">80</span> --publish <span class="hljs-number">1022</span>:<span class="hljs-number">22</span> \  --name gitlab \  --restart always \  --volume <span class="hljs-regexp">/srv/gi</span>tlab<span class="hljs-regexp">/config:/</span>etc/gitlab \  --volume <span class="hljs-regexp">/srv/gi</span>tlab<span class="hljs-regexp">/logs:/</span>var<span class="hljs-regexp">/log/gi</span>tlab \  --volume <span class="hljs-regexp">/srv/gi</span>tlab<span class="hljs-regexp">/data:/</span>var<span class="hljs-regexp">/opt/gi</span>tlab \  gitlab/gitlab-ce:latest</code></pre><p><strong>2.部署portainer（docker可视化管理工具）</strong></p><pre><code class="hljs awk">docker pull docker.io<span class="hljs-regexp">/portainer/</span>portainerdocker run --detach \    --hostname <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> \    --publish <span class="hljs-number">9000</span>:<span class="hljs-number">9000</span> \    --name portainer\    --restart=always \    --volume <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/docker.sock:/</span>var<span class="hljs-regexp">/run/</span>docker.sock \    docker.io<span class="hljs-regexp">/portainer/</span>portainer</code></pre><p><strong>3.部署jenkins</strong></p><pre><code class="hljs jboss-cli">mkdir -p <span class="hljs-string">/srv/jenkins</span>chown -R 1000<span class="hljs-function">:1000</span> <span class="hljs-string">/srv/jenkins/</span>docker pull jenkins/jenkins<span class="hljs-function">:alpine</span>docker inspect jenkins/jenkins<span class="hljs-function">:alpine</span>docker run <span class="hljs-params">--detach</span> \    <span class="hljs-params">--publish</span> 8080<span class="hljs-function">:8080</span> <span class="hljs-params">--publish</span> 50000<span class="hljs-function">:50000</span> \    <span class="hljs-params">--restart</span> unless-stopped \    <span class="hljs-params">--name</span> jenkins \    <span class="hljs-params">--volume</span> <span class="hljs-string">/srv/jenkins</span>:<span class="hljs-string">/var/jenkins_home</span> \    jenkins/jenkins<span class="hljs-function">:alpine</span></code></pre><p><strong>4.部署gitlab-runner</strong></p><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/srv/</span>docker pull gitlab/gitlab-runnerdocker run -d --name gitlab-runner --restart always \    --volume <span class="hljs-regexp">/srv/gi</span>tlab-runner<span class="hljs-regexp">/config:/</span>etc/gitlab-runner \    --volume <span class="hljs-regexp">/srv/gi</span>tlab-runner<span class="hljs-regexp">/run/</span>docker.sock:<span class="hljs-regexp">/var/</span>run/docker.sock \    gitlab/gitlab-runner:latest</code></pre><p><strong>5.部署RabbitMQ</strong></p><p>获取查询的镜像 </p><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">search</span> <span class="hljs-selector-tag">rabbitmq</span><span class="hljs-selector-pseudo">:management</span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/15.png"></p><p>拉取镜像 </p><pre><code class="hljs css"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-tag">rabbitmq</span><span class="hljs-selector-pseudo">:management</span></code></pre><p><img src="/images/Docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/16.png"></p><pre><code class="hljs crystal"><span class="hljs-comment"># 运行镜像    </span>docker run -d \    -p <span class="hljs-number">5672</span>:<span class="hljs-number">5672</span> -p <span class="hljs-number">15672</span>:<span class="hljs-number">15672</span> \    --restart=always \    --name rabbitmq \    -v <span class="hljs-string">`pwd`</span>/<span class="hljs-symbol">data:</span>/var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">rabbitmq</span> \</span>    -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=<span class="hljs-number">2018251</span> \     <span class="hljs-symbol">rabbitmq:</span>management</code></pre><pre><code class="hljs crystal">docker run -d \    -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> \    --restart always \    --name registry \    -v /srv/registry/<span class="hljs-symbol">registry:</span>/var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">registry</span> \</span>    <span class="hljs-symbol">registry:</span>latest</code></pre>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
      <tag>Center OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mac】Mac使用</title>
    <link href="/2020/06/22/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/06/22/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/mac.jpg"><a id="more"></a> </p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><h4 id="官网"><a href="#官网" class="headerlink" title="官网:"></a>官网:</h4><p><a href="https://docs.brew.sh/Installation.html">https://docs.brew.sh/Installation.html</a></p><h4 id="gihub源"><a href="#gihub源" class="headerlink" title="gihub源"></a>gihub源</h4><p><a href="https://github.com/Homebrew/install">https://github.com/Homebrew/install</a></p><h4 id="homebrew安装"><a href="#homebrew安装" class="headerlink" title="homebrew安装"></a>homebrew安装</h4><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/ruby -e &quot;$(curl -fsSL https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/</span>Homebrew<span class="hljs-regexp">/install/m</span>aster/install)<span class="hljs-string">&quot;</span></code></pre><p>可能会出现报错</p><pre><code class="hljs routeros">curl: (7) Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> raw.githubusercontent.com<span class="hljs-built_in"> port </span>443:<span class="hljs-built_in"> Connection </span>refused</code></pre><p>根据提示可以知道被raw.githubusercontent.com拒绝访问，打开浏览器访问<a href="https://raw.githubusercontent.com也是失败的,所以此时是电脑与https//raw.githubusercontent.com%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8F%AF%E4%BB%A5%E8%80%83%E8%99%91ruby%E7%9A%84%E6%9B%B4%E6%96%B0%E6%BA%90">https://raw.githubusercontent.com也是失败的，所以此时是电脑与https://raw.githubusercontent.com的连接问题：可以考虑ruby的更新源</a></p><pre><code class="hljs shell">查看当前更新源gem sources -l                // 默认情况下会显示https://rubygems.org/ 该ruby源在墙内，很多内容无法访问到gem source -a https://gems.ruby-china.com    // 更新更新源为https://gems.ruby-china.comgem sources --remove https://rubygems.org/   // 删除原更新源gem sources -l      　　　　　　               // 检测是否成功</code></pre><p>继续安装</p><p><img src="/images/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/clipboard.png" alt="img"></p><p><code>brew -v</code>检查是否已安装成功</p><pre><code class="hljs shell">Homebrew 2.4.0 Homebrew/homebrew-core (git revision c948b; last commit 2020-06-13)</code></pre><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>基于brew安装的所有软件及其依赖均会安装到目录<code>/usr/local/Cellar</code></p><h5 id="Brew-帮助信息"><a href="#Brew-帮助信息" class="headerlink" title="Brew 帮助信息"></a>Brew 帮助信息</h5><pre><code class="hljs properties"><span class="hljs-meta">$</span> <span class="hljs-string">brew help</span><span class="hljs-attr">Example</span> <span class="hljs-string">usage:</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">search [TEXT|/REGEX/]</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">info [FORMULA...]</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">install FORMULA...</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">update</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">upgrade [FORMULA...]</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">uninstall FORMULA...</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">list [FORMULA...]</span><span class="hljs-attr">Troubleshooting</span>:<span class="hljs-string"></span>  <span class="hljs-attr">brew</span> <span class="hljs-string">config</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">doctor</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">install --verbose --debug FORMULA</span><span class="hljs-attr">Contributing</span>:<span class="hljs-string"></span>  <span class="hljs-attr">brew</span> <span class="hljs-string">create [URL [--no-fetch]]</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">edit [FORMULA...]</span><span class="hljs-attr">Further</span> <span class="hljs-string">help:</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">commands</span>  <span class="hljs-attr">brew</span> <span class="hljs-string">help [COMMAND]</span>  <span class="hljs-attr">man</span> <span class="hljs-string">brew</span>  <span class="hljs-attr">https</span>:<span class="hljs-string">//docs.brew.sh</span></code></pre><h5 id="子命令帮助信息"><a href="#子命令帮助信息" class="headerlink" title="子命令帮助信息"></a>子命令帮助信息</h5><p><code>brew help [COMMAND]或brew [COMMAND] -h</code> 用于查看具体某个子命令的帮助信息。</p><p>例如，查看<code>install</code>命令的帮助详情：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew install -h</span>Usage: brew install [options] formulaInstall formula. Additional options specific to formula may be appended tothe command.Unless HOMEBREW_NO_INSTALL_CLEANUP is set, brew cleanup will then be run forthe installed formulae or, every 30 days, for all formulae.    -d, --debug                      If brewing fails, open an interactive                                     debugging session with access to IRB or a                                     shell inside the temporary build directory.        --env                        If std is passed, use the standard build                                     environment instead of superenv. If super                                     is passed, use superenv even if the formula                                     specifies the standard build environment.        --ignore-dependencies        An unsupported Homebrew development flag to                                     skip installing any dependencies of any                                     kind. If the dependencies are not already                                     present, the formula will have issues. If                                     you&#x27;re not developing Homebrew, consider                                     adjusting your PATH rather than using this                                     flag.        --only-dependencies          Install the dependencies with specified                                     options but do not install the formula                                     itself.        --cc                         Attempt to compile using the specified                                     compiler, which should be the name of the                                     compiler&#x27;s executable, e.g. gcc-7 for GCC                                     7. In order to use LLVM&#x27;s clang, specify                                     llvm_clang. To use the Apple-provided                                     clang, specify clang. This option will                                     only accept compilers that are provided by                                     Homebrew or bundled with macOS. Please do                                     not file issues if you encounter errors                                     while using this option.    -s, --build-from-source          Compile formula from source even if a                                     bottle is provided. Dependencies will still                                     be installed from bottles if they are                                     available.        --force-bottle               Install from a bottle if it exists for the                                     current or newest version of macOS, even if                                     it would not normally be used for                                     installation.        --include-test               Install testing dependencies required to                                     run brew test formula.        --devel                      If formula defines it, install the                                     development version.        --HEAD                       If formula defines it, install the HEAD                                     version, aka. master, trunk, unstable.        --fetch-HEAD                 Fetch the upstream repository to detect if                                     the HEAD installation of the formula is                                     outdated. Otherwise, the repository&#x27;s HEAD                                     will only be checked for updates when a new                                     stable or development version has been                                     released.        --keep-tmp                   Retain the temporary files created during                                     installation.        --build-bottle               Prepare the formula for eventual bottling                                     during installation, skipping any                                     post-install steps.        --bottle-arch                Optimise bottles for the specified                                     architecture rather than the oldest                                     architecture supported by the version of                                     macOS the bottles are built on.    -f, --force                      Install without checking for previously                                     installed keg-only or non-migrated                                     versions.    -v, --verbose                    Print the verification and postinstall                                     steps.        --display-times              Print install times for each formula at the                                     end of the run.    -i, --interactive                Download and patch formula, then open a                                     shell. This allows the user to run                                     ./configure --help and otherwise                                     determine how to turn the software package                                     into a Homebrew package.    -g, --git                        Create a Git repository, useful for                                     creating patches to the software.    -h, --help                       Show this message.</code></pre><h5 id="搜索软件"><a href="#搜索软件" class="headerlink" title="搜索软件"></a>搜索软件</h5><p> <code>brew search [TEXT|/REGEX/]</code> 用于搜索软件，支持使用正则表达式进行复杂的搜索。</p><p>例如，查询静态博客生成工具hugo：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew search hugo</span>==&gt; Formulaehugo</code></pre><h5 id="查看软件信息"><a href="#查看软件信息" class="headerlink" title="查看软件信息"></a>查看软件信息</h5><p> <code>brew info [FORMULA...]</code> 用于查询软件的详细信息。</p><p>例如，查看软件hugo的详细信息：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew search hugo</span>==&gt; Formulaehugo<span class="hljs-meta">$</span><span class="bash"> brew info hugo</span>hugo: stable 0.72.0 (bottled), HEADConfigurable static site generatorhttps://gohugo.io/Not installedFrom: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git/Formula/hugo.rb==&gt; DependenciesBuild: go ✘==&gt; Options--HEADInstall HEAD version==&gt; Analyticsinstall: 26,782 (30 days), 84,656 (90 days), 287,304 (365 days)install-on-request: 26,266 (30 days), 82,887 (90 days), 279,634 (365 days)build-error: 0 (30 days)</code></pre><p>以上查询所得信息，包含了软件的最新可用版本，本机是否已安装，本机已安装的版本，安装的路径、大小、时间、Tap 源，所依赖的包，以及安装的可选项等详细信息。而这些信息可以帮助我们很方便快捷的了解如何对该软件进行相应的操作。</p><h5 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h5><p> <code>brew install FORMULA... </code>用于安装一个或多个软件。</p><p>例如，安装软件hugo：</p><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>hugo</code></pre><p>安装软件命令执行之前，brew 一般会先检查更新 Homebrew 自身及 Tap 源。</p><h5 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h5><p> <code>brew upgrade [FORMULA...]</code> 用于更新一个或多个软件，不指定软件名则更新所有软件。</p><h5 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h5><p><code>brew uninstall FORMULA...</code> 用于卸载指定的一个或多个软件</p><p><code>brew uninstall --force FORMULA...</code> 彻底卸载指定软件，包括旧版本</p><h5 id="已安装的软件列表"><a href="#已安装的软件列表" class="headerlink" title="已安装的软件列表"></a>已安装的软件列表</h5><p> <code>brew list</code> 用于查询本机已安装的软件列表</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew list</span>aprgettextlz4pcre2pythonsqliteutf8procapr-utilgomysql-clientperlpython@2subversionxzgdbmlibzipopenssl@1.1pkg-configreadlinetldr</code></pre><h5 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h5><p> <code>brew services</code> 用于方便的管理 brew 安装的软件软件，类似于 Linux 下的 service 命令。</p><h5 id="检查可更新的软件列表"><a href="#检查可更新的软件列表" class="headerlink" title="检查可更新的软件列表"></a>检查可更新的软件列表</h5><p> <code>brew outdated</code> 可查询有更新版本的软件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew outdated </span>gettext (0.20.1) &lt; 0.20.2_1go (1.13.8) &lt; 1.14.3libzip (1.6.1) &lt; 1.7.1mysql-client (8.0.18) &lt; 8.0.19openssl@1.1 (1.1.1d) &lt; 1.1.1gpcre2 (10.34) &lt; 10.35perl (5.30.1) &lt; 5.30.3pkg-config (0.29.2) &lt; 0.29.2_3python (3.7.6_1) &lt; 3.7.7readline (8.0.1) &lt; 8.0.4sqlite (3.30.1) &lt; 3.32.1subversion (1.13.0_1) &lt; 1.14.0_1utf8proc (2.4.0) &lt; 2.5.0xz (5.2.4) &lt; 5.2.5</code></pre><h5 id="清理软件"><a href="#清理软件" class="headerlink" title="清理软件"></a>清理软件</h5><p><code>brew cleanup -n</code> 列出需要清理的内容</p><p><code>brew cleanup</code> 清理所有的过时软件 </p><p><code>brew cleanup [FORMULA]</code> 清理指定软件的过时包</p><h5 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h5><p><code>brew config</code> 用于查看 brew 所在环境及相关的配置情况</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew config</span>HOMEBREW_VERSION: 2.4.0ORIGIN: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.gitHEAD: 28ed0801ed5807e176e62a3ba66e47ec867ec17dLast commit: 3 days agoCore tap ORIGIN: https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitCore tap HEAD: c948bc65d13a2bdd43e5ef2ed4196930c731283cCore tap last commit: 11 hours agoHOMEBREW_PREFIX: /usr/localHOMEBREW_BOTTLE_DOMAIN: https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottlesHOMEBREW_MAKE_JOBS: 8CPU: octa-core 64-bit kabylakeHomebrew Ruby: 2.6.3 =&gt; /usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/2.6.3_1/bin/rubyClang: 11.0 build 1103Git: 2.24.1 =&gt; /Library/Developer/CommandLineTools/usr/bin/gitCurl: 7.64.1 =&gt; /usr/bin/curlJava: 1.8.0_212macOS: 10.15.4-x86_64CLT: 1103.0.32.29Xcode: N/A</code></pre><h5 id="诊断问题"><a href="#诊断问题" class="headerlink" title="诊断问题"></a>诊断问题</h5><p> <code>brew doctor</code> 诊断当前 brew 存在哪些问题，并给出解决方案</p><h5 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h5><p><code>brew tap</code> 已安装的仓库列表</p><p><code>brew tap [--full] user/repo [URL]</code> 添加仓库</p><p><code>brew untap tap</code> 移除仓库</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> brew tap</span>homebrew/caskhomebrew/cask-drivershomebrew/cask-fontshomebrew/corehomebrew/servicestldr-pages/tldr</code></pre><h4 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h4><p>清华大学开源软件镜像站</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew 镜像使用帮助</a></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 替换现有上游</span><span class="hljs-meta">#</span><span class="bash"> 以下针对 mac OS 系统上的 Homebrew</span>git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitgit -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.gitgit -C &quot;$(brew --repo homebrew/cask-fonts)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.gitgit -C &quot;$(brew --repo homebrew/cask-drivers)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git<span class="hljs-meta">#</span><span class="bash"> 更换后测试工作是否正常</span>brew update<span class="hljs-meta">#</span><span class="bash"> 复原</span><span class="hljs-meta">#</span><span class="bash"> 以下针对 mac OS 系统上的 Homebrew</span>git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://github.com/Homebrew/homebrew-core.gitgit -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask.gitgit -C &quot;$(brew --repo homebrew/cask-fonts)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask-fonts.gitgit -C &quot;$(brew --repo homebrew/cask-drivers)&quot; remote set-url origin https://github.com/Homebrew/homebrew-cask-drivers.git<span class="hljs-meta">#</span><span class="bash"> 更换后测试工作是否正常</span>brew update</code></pre><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew-bottles/">Homebrew-bottles 镜像使用帮助</a></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 临时替换</span>export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles<span class="hljs-meta">#</span><span class="bash"> 长期替换</span>echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profilesource ~/.bash_profile</code></pre><h3 id="Python虚拟环境（VirtualEnv）"><a href="#Python虚拟环境（VirtualEnv）" class="headerlink" title="Python虚拟环境（VirtualEnv）"></a>Python虚拟环境（VirtualEnv）</h3><h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><h5 id="安装virtualenv环境"><a href="#安装virtualenv环境" class="headerlink" title="安装virtualenv环境"></a>安装virtualenv环境</h5><pre><code class="hljs shell">pip install virtualenv<span class="hljs-meta">#</span><span class="bash">检查是否安装成功</span>virtualenv --version</code></pre><h5 id="创建以及使用虚拟环境"><a href="#创建以及使用虚拟环境" class="headerlink" title="创建以及使用虚拟环境"></a>创建以及使用虚拟环境</h5><h6 id="创建时指定位置方式"><a href="#创建时指定位置方式" class="headerlink" title="创建时指定位置方式"></a>创建时指定位置方式</h6><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建python3环境</span>virtualenv -p python3 ~/Projects/PythonEnv/py3_normal/<span class="hljs-meta">#</span><span class="bash"> 进入虚拟环境</span>cd ~/Projects/PythonEnv/py3_normal/binsource activate<span class="hljs-meta">#</span><span class="bash"> 退出环境</span>deactivate</code></pre><h6 id="虚拟环境管理器方式"><a href="#虚拟环境管理器方式" class="headerlink" title="虚拟环境管理器方式"></a>虚拟环境管理器方式</h6><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装虚拟环境管理器</span>pip install virtualenvwrapper<span class="hljs-meta">#</span><span class="bash"> 配置虚拟环境管理器环境-添加配置</span>vim ~/.bash_profileWORKON_HOME=~/Projects/PythonEnvPROJECT_HOME=~/Projects/MyPythonexport WORKON_HOMEexport PROJECT_HOMEVIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3source /usr/local/bin/virtualenvwrapper.sh<span class="hljs-meta">#</span><span class="bash">保存-生效配置</span>source ~/.bash_profile<span class="hljs-meta">#</span><span class="bash"> 创建虚拟环境</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 创建python2的虚拟环境</span></span>mkvirtualenv &lt;虚拟环境名&gt;<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 创建python3的虚拟环境</span></span>mkvirtualenv -p python3 &lt;虚拟环境名&gt;<span class="hljs-meta">#</span><span class="bash"> 进入/切换虚拟环境</span>workon &lt;虚拟环境名&gt;<span class="hljs-meta">#</span><span class="bash"> 退出虚拟环境</span>deactivate<span class="hljs-meta">#</span><span class="bash"> 其他命令</span>lsvirtualenv   # 查看虚拟环境列表lssitepackages # 查看当前环境中安装的那些包（启动虚拟环境后）rmvirtualenv   # 虚拟环境名 删除虚拟环境</code></pre><h4 id="Anaconda-or-Miniconda"><a href="#Anaconda-or-Miniconda" class="headerlink" title="Anaconda or Miniconda"></a>Anaconda or Miniconda</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>清华大学开源软件镜像站 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</a></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Download</span>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda-3.4.2-MacOSX-x86_64.sh<span class="hljs-meta">#</span><span class="bash"> Install</span>bash Miniconda-3.4.2-MacOSX-x86_64.sh<span class="hljs-meta">#</span><span class="bash"> Activate</span>source .bashrc</code></pre><h5 id="创建以及使用虚拟环境-1"><a href="#创建以及使用虚拟环境-1" class="headerlink" title="创建以及使用虚拟环境"></a>创建以及使用虚拟环境</h5><pre><code class="hljs shell">- Create a new environment, installing named packages into it:    conda create --name environment_name python=2.7 matplotlib- List all environments:    conda info --envs- Load or unload an environment:    conda activate|deactivate environment_name- Delete an environment (remove all packages):    conda remove --name environment_name --all- Search conda channels for a package by name:    conda search package_name- Install packages into the current environment:    conda install python=3.4 numpy- List currently installed packages in current environment:    conda list- Delete unused packages and caches:    conda clean --all</code></pre><h3 id="Python-pip-配置国内源-pip-install-Read-timed-out"><a href="#Python-pip-配置国内源-pip-install-Read-timed-out" class="headerlink" title="Python pip 配置国内源[pip install Read timed out]"></a>Python pip 配置国内源[pip install Read timed out]</h3><h4 id="【方式一】临时生效"><a href="#【方式一】临时生效" class="headerlink" title="【方式一】临时生效"></a>【方式一】临时生效</h4><pre><code class="hljs awk"><span class="hljs-comment"># 在安装时加上镜像源</span>pip install &lt;库名&gt; -i https:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span> --trusted-host pypi.douban.compyth</code></pre><p><strong>方式二】永久指定</strong></p><h5 id="国内源列表（推荐用阿里云的）"><a href="#国内源列表（推荐用阿里云的）" class="headerlink" title="国内源列表（推荐用阿里云的）"></a>国内源列表（推荐用阿里云的）</h5><p>阿里云<code>http://mirrors.aliyun.com/pypi/simple/</code></p><p>中国科技大学 <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p><p>豆瓣 (douban) <code>https://pypi.douban.com/simple/</code></p><p>清华大学 <code>https://pypi.tuna.tsinghua.edu.cn/simple/</code></p><p>中国科学技术大学 <code>http://pypi.mirrors.ustc.edu.cn/simple/</code></p><h5 id="永久指定方式"><a href="#永久指定方式" class="headerlink" title="永久指定方式"></a>永久指定方式</h5><pre><code class="hljs shell">mkdir .pip# 在家目录下创建一个.pip目录~ cd pip~ touch pip.conf # 创建一个pip配置文件<span class="hljs-meta">#</span><span class="bash"> 写入配置</span>[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host = mirrors.aliyun.com</code></pre><h3 id="更新Python版本后-命令行下pip-命令报错"><a href="#更新Python版本后-命令行下pip-命令报错" class="headerlink" title="更新Python版本后,命令行下pip 命令报错"></a>更新Python版本后,命令行下pip 命令报错</h3><p>电脑中Python3由3.7更新到3.9后，在命令行下使用<code>pip list</code>报以下错误</p><pre><code class="hljs gradle">zsh: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>pip: bad interpreter: <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/opt/</span>python<span class="hljs-regexp">/bin/</span>python3.<span class="hljs-number">7</span>: no such <span class="hljs-keyword">file</span> or directory</code></pre><p>但是命令<code>pip3 list</code>可以正常使用，这是需要考虑<code>pip</code>指向的python设置是否正确</p><pre><code class="hljs zsh"><span class="hljs-comment"># 查看pip命令配置文件</span><span class="hljs-built_in">which</span> pip/usr/<span class="hljs-built_in">local</span>/bin/pip<span class="hljs-comment"># 查看pip3命令配置文件</span>/usr/<span class="hljs-built_in">local</span>/bin/pip3</code></pre><p>对比发现/usr/local/bin/pip指向的python版本时3.7，/usr/local/bin/pip3指向的是正确的。因此，将/usr/local/bin/pip指向python版本的配置修改成/usr/local/bin/pip3指向的配置。</p><h3 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h3><h4 id="Iterm2"><a href="#Iterm2" class="headerlink" title="Iterm2"></a>Iterm2</h4><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><h4 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h4><h3 id="Catalina升级Sur-Big遇到的坑"><a href="#Catalina升级Sur-Big遇到的坑" class="headerlink" title="Catalina升级Sur Big遇到的坑"></a>Catalina升级Sur Big遇到的坑</h3><h4 id="Homebrew-1"><a href="#Homebrew-1" class="headerlink" title="Homebrew"></a>Homebrew</h4><h5 id="brew报错：-initialize’-Version-value-must-be-a-string-got-a-NilClass-TypeError"><a href="#brew报错：-initialize’-Version-value-must-be-a-string-got-a-NilClass-TypeError" class="headerlink" title="brew报错：`initialize’: Version value must be a string; got a NilClass () (TypeError)"></a>brew报错：`initialize’: Version value must be a string; got a NilClass () (TypeError)</h5><pre><code class="hljs Python">brew <span class="hljs-built_in">list</span>Traceback (most recent call last):    <span class="hljs-number">11</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/brew.rb:<span class="hljs-number">23</span>:<span class="hljs-keyword">in</span> `&lt;main&gt;<span class="hljs-string">&#x27;</span><span class="hljs-string">    10: from /usr/local/Homebrew/Library/Homebrew/brew.rb:23:in `require_relative&#x27;</span>     <span class="hljs-number">9</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/<span class="hljs-keyword">global</span>.rb:<span class="hljs-number">29</span>:<span class="hljs-keyword">in</span> `&lt;top (required)&gt;<span class="hljs-string">&#x27;</span><span class="hljs-string">     8: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require&#x27;</span>     <span class="hljs-number">7</span>: <span class="hljs-keyword">from</span> /System/Library/Frameworks/Ruby.framework/Versions/<span class="hljs-number">2.6</span>/usr/lib/ruby/<span class="hljs-number">2.6</span><span class="hljs-number">.0</span>/rubygems/core_ext/kernel_require.rb:<span class="hljs-number">54</span>:<span class="hljs-keyword">in</span> `require<span class="hljs-string">&#x27;</span><span class="hljs-string">     6: from /usr/local/Homebrew/Library/Homebrew/os.rb:3:in `&lt;top (required)&gt;&#x27;</span>     <span class="hljs-number">5</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/os.rb:<span class="hljs-number">21</span>:<span class="hljs-keyword">in</span> `&lt;module:OS&gt;<span class="hljs-string">&#x27;</span><span class="hljs-string">     4: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:58:in `prerelease?&#x27;</span>     <span class="hljs-number">3</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/os/mac.rb:<span class="hljs-number">24</span>:<span class="hljs-keyword">in</span> `version<span class="hljs-string">&#x27;</span><span class="hljs-string">     2: from /usr/local/Homebrew/Library/Homebrew/os/mac.rb:24:in `new&#x27;</span>     <span class="hljs-number">1</span>: <span class="hljs-keyword">from</span> /usr/local/Homebrew/Library/Homebrew/os/mac/version.rb:<span class="hljs-number">26</span>:<span class="hljs-keyword">in</span> `initialize<span class="hljs-string">&#x27;</span><span class="hljs-string">/usr/local/Homebrew/Library/Homebrew/version.rb:368:in `initialize&#x27;</span>: Version value must be a string; got a NilClass () (TypeError)</code></pre><p>根据Traceback信息可以发现/usr/local/Homebrew/Library/Homebrew/os/mac/version.rb中报错,vim打开该文件</p><pre><code class="hljs Python">vim /usr/local/Homebrew/Library/Homebrew/os/mac/version.rb<span class="hljs-comment"># typed: true</span><span class="hljs-comment"># frozen_string_literal: true</span>require <span class="hljs-string">&quot;hardware&quot;</span>require <span class="hljs-string">&quot;version&quot;</span>module OS  module Mac    <span class="hljs-comment"># A macOS version.</span>    <span class="hljs-comment">#</span>    <span class="hljs-comment"># @api private</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Version</span> &lt; :</span>:Version      SYMBOLS =         catalina:    <span class="hljs-string">&quot;10.15&quot;</span>,        mojave:      <span class="hljs-string">&quot;10.14&quot;</span>,        high_sierra: <span class="hljs-string">&quot;10.13&quot;</span>,        sierra:      <span class="hljs-string">&quot;10.12&quot;</span>,        el_capitan:  <span class="hljs-string">&quot;10.11&quot;</span>,        yosemite:    <span class="hljs-string">&quot;10.10&quot;</span>,      &#125;.freeze      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">self</span>.<span class="hljs-title">from_symbol</span>(<span class="hljs-params">sym</span>)</span>        str = SYMBOLS.fetch(sym) &#123; raise MacOSVersionError, sym &#125;        new(<span class="hljs-built_in">str</span>)      end      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span>(<span class="hljs-params">value</span>)</span><span class="hljs-function">        <span class="hljs-title">super</span>(<span class="hljs-params">value</span>)</span><span class="hljs-function"></span>        raise MacOSVersionError, value unless value.match?(/\A1\d+(?:\.\d+)&#123;0,2&#125;\Z/)</code></pre><p>从代码中可以看出,该版本的Homebrew不支持Sur Big系统,于是解决方案是更新Homebrew</p><pre><code class="hljs bash">brew update-reset</code></pre><p>结果,brew没了,命令输入brew报错</p><pre><code class="hljs bash">zsh:brew: <span class="hljs-built_in">command</span> not found</code></pre><p>无奈只能重新安装</p><p>但是这次就没有那么幸运,ruby源已更换成国内的</p><p>使用科学上网,也无法访问<a href="https://raw.githubusercontent.com/">https://raw.githubusercontent.com</a></p><p>于是只能另寻方法,Google上找到.bash脚本</p><p>桌面创建.bash文件</p><pre><code class="hljs awk">vim <span class="hljs-regexp">/Desktop/</span>brew_install.sh</code></pre><p>脚本内容</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">set</span> -u<span class="hljs-comment"># First check if the OS is Linux.</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> = <span class="hljs-string">&quot;Linux&quot;</span> ]]; <span class="hljs-keyword">then</span>  HOMEBREW_ON_LINUX=1<span class="hljs-keyword">fi</span><span class="hljs-comment"># Check if macOS is ARM</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname -m)</span>&quot;</span> = <span class="hljs-string">&quot;arm64&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(uname)</span>&quot;</span> = <span class="hljs-string">&quot;Darwin&quot;</span> ]]; <span class="hljs-keyword">then</span>  HOMEBREW_APPLE_SILICON=1<span class="hljs-keyword">fi</span><span class="hljs-comment"># On macOS, this script installs to /usr/local only.</span><span class="hljs-comment"># On Linux, it installs to /home/linuxbrew/.linuxbrew if you have sudo access</span><span class="hljs-comment"># and ~/.linuxbrew otherwise.</span><span class="hljs-comment"># To install elsewhere (which is unsupported)</span><span class="hljs-comment"># you can untar https://github.com/Homebrew/brew/tarball/master</span><span class="hljs-comment"># anywhere you like.</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  HOMEBREW_PREFIX=<span class="hljs-string">&quot;/usr/local&quot;</span>  HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;/usr/local/Homebrew&quot;</span>  HOMEBREW_CACHE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/Library/Caches/Homebrew&quot;</span>  STAT=<span class="hljs-string">&quot;stat -f&quot;</span>  CHOWN=<span class="hljs-string">&quot;/usr/sbin/chown&quot;</span>  CHGRP=<span class="hljs-string">&quot;/usr/bin/chgrp&quot;</span>  GROUP=<span class="hljs-string">&quot;admin&quot;</span>  TOUCH=<span class="hljs-string">&quot;/usr/bin/touch&quot;</span><span class="hljs-keyword">else</span>  HOMEBREW_PREFIX_DEFAULT=<span class="hljs-string">&quot;/home/linuxbrew/.linuxbrew&quot;</span>  HOMEBREW_CACHE=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.cache/Homebrew&quot;</span>  STAT=<span class="hljs-string">&quot;stat --printf&quot;</span>  CHOWN=<span class="hljs-string">&quot;/bin/chown&quot;</span>  CHGRP=<span class="hljs-string">&quot;/bin/chgrp&quot;</span>  GROUP=<span class="hljs-string">&quot;<span class="hljs-subst">$(id -gn)</span>&quot;</span>  TOUCH=<span class="hljs-string">&quot;/bin/touch&quot;</span><span class="hljs-keyword">fi</span>BREW_REPO=<span class="hljs-string">&quot;https://github.com/Homebrew/brew&quot;</span><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> bump version when new macOS is released</span>MACOS_LATEST_SUPPORTED=<span class="hljs-string">&quot;10.15&quot;</span><span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> bump version when new macOS is released</span>MACOS_OLDEST_SUPPORTED=<span class="hljs-string">&quot;10.13&quot;</span><span class="hljs-comment"># For Homebrew on Linux</span>REQUIRED_RUBY_VERSION=2.6  <span class="hljs-comment"># https://github.com/Homebrew/brew/pull/6556</span>REQUIRED_GLIBC_VERSION=2.13  <span class="hljs-comment"># https://docs.brew.sh/Homebrew-on-Linux#requirements</span><span class="hljs-comment"># no analytics during installation</span><span class="hljs-built_in">export</span> HOMEBREW_NO_ANALYTICS_THIS_RUN=1<span class="hljs-built_in">export</span> HOMEBREW_NO_ANALYTICS_MESSAGE_OUTPUT=1<span class="hljs-comment"># string formatters</span><span class="hljs-keyword">if</span> [[ -t 1 ]]; <span class="hljs-keyword">then</span>  <span class="hljs-function"><span class="hljs-title">tty_escape</span></span>() &#123; <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[%sm&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>; &#125;<span class="hljs-keyword">else</span>  <span class="hljs-function"><span class="hljs-title">tty_escape</span></span>() &#123; :; &#125;<span class="hljs-keyword">fi</span><span class="hljs-function"><span class="hljs-title">tty_mkbold</span></span>() &#123; tty_escape <span class="hljs-string">&quot;1;<span class="hljs-variable">$1</span>&quot;</span>; &#125;tty_underline=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_escape <span class="hljs-string">&quot;4;39&quot;</span>)</span>&quot;</span>tty_blue=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_mkbold 34)</span>&quot;</span>tty_red=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_mkbold 31)</span>&quot;</span>tty_bold=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_mkbold 39)</span>&quot;</span>tty_reset=<span class="hljs-string">&quot;<span class="hljs-subst">$(tty_escape 0)</span>&quot;</span><span class="hljs-function"><span class="hljs-title">have_sudo_access</span></span>() &#123;  <span class="hljs-built_in">local</span> -a args  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SUDO_ASKPASS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    args=(<span class="hljs-string">&quot;-A&quot;</span>)  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HAVE_SUDO_ACCESS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[*]-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>      /usr/bin/sudo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span> -l mkdir &amp;&gt;/dev/null    <span class="hljs-keyword">else</span>      /usr/bin/sudo -l mkdir &amp;&gt;/dev/null    <span class="hljs-keyword">fi</span>    HAVE_SUDO_ACCESS=<span class="hljs-string">&quot;$?&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-variable">$HAVE_SUDO_ACCESS</span>&quot;</span> -ne 0 ]]; <span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;Need sudo access on macOS (e.g. the user <span class="hljs-variable">$USER</span> to be an Administrator)!&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-built_in">return</span> <span class="hljs-string">&quot;<span class="hljs-variable">$HAVE_SUDO_ACCESS</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">shell_join</span></span>() &#123;  <span class="hljs-built_in">local</span> arg  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-built_in">shift</span>  <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot; &quot;</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arg// /\ &#125;</span>&quot;</span>  <span class="hljs-keyword">done</span>&#125;<span class="hljs-function"><span class="hljs-title">chomp</span></span>() &#123;  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1/&quot;$&#x27;\n&#x27;&quot;/&#125;</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">ohai</span></span>() &#123;  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_blue&#125;</span>==&gt;<span class="hljs-variable">$&#123;tty_bold&#125;</span> %s<span class="hljs-variable">$&#123;tty_reset&#125;</span>\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">warn</span></span>() &#123;  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;tty_red&#125;</span>Warning<span class="hljs-variable">$&#123;tty_reset&#125;</span>: %s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(chomp <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">abort</span></span>() &#123;  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-built_in">exit</span> 1&#125;<span class="hljs-function"><span class="hljs-title">execute</span></span>() &#123;  <span class="hljs-keyword">if</span> ! <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(printf <span class="hljs-string">&quot;Failed during: %s&quot;</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(shell_join <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)</span>&quot;</span>)</span>&quot;</span>  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">execute_sudo</span></span>() &#123;  <span class="hljs-built_in">local</span> -a args=(<span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>)  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SUDO_ASKPASS-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    args=(<span class="hljs-string">&quot;-A&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>)  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> have_sudo_access; <span class="hljs-keyword">then</span>    ohai <span class="hljs-string">&quot;/usr/bin/sudo&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>    execute <span class="hljs-string">&quot;/usr/bin/sudo&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">else</span>    ohai <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>    execute <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;args[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">getc</span></span>() &#123;  <span class="hljs-built_in">local</span> save_state  save_state=$(/bin/stty -g)  /bin/stty raw -<span class="hljs-built_in">echo</span>  IFS= <span class="hljs-built_in">read</span> -r -n 1 -d <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>  /bin/stty <span class="hljs-string">&quot;<span class="hljs-variable">$save_state</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">wait_for_user</span></span>() &#123;  <span class="hljs-built_in">local</span> c  <span class="hljs-built_in">echo</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Press RETURN to continue or any other key to abort&quot;</span>  getc c  <span class="hljs-comment"># we test for \r and \n because some stuff does \r instead</span>  <span class="hljs-keyword">if</span> ! [[ <span class="hljs-string">&quot;<span class="hljs-variable">$c</span>&quot;</span> == $<span class="hljs-string">&#x27;\r&#x27;</span> || <span class="hljs-string">&quot;<span class="hljs-variable">$c</span>&quot;</span> == $<span class="hljs-string">&#x27;\n&#x27;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">exit</span> 1  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">major_minor</span></span>() &#123;  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%%.*&#125;</span>.<span class="hljs-subst">$(x=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span>; echo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;x%%.*&#125;</span>&quot;</span>)</span>&quot;</span>&#125;<span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  macos_version=<span class="hljs-string">&quot;<span class="hljs-subst">$(major_minor <span class="hljs-string">&quot;<span class="hljs-subst">$(/usr/bin/sw_vers -productVersion)</span>&quot;</span>)</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-function"><span class="hljs-title">version_gt</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]&#125;<span class="hljs-function"><span class="hljs-title">version_ge</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -gt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -ge <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]&#125;<span class="hljs-function"><span class="hljs-title">version_lt</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> ]] || [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%.*&#125;</span>&quot;</span> -eq <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2%.*&#125;</span>&quot;</span> &amp;&amp; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1#*.&#125;</span>&quot;</span> -lt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;2#*.&#125;</span>&quot;</span> ]]&#125;<span class="hljs-function"><span class="hljs-title">should_install_git</span></span>() &#123;  <span class="hljs-keyword">if</span> [[ $(<span class="hljs-built_in">command</span> -v git) ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">return</span> 1  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">should_install_command_line_tools</span></span>() &#123;  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">return</span> 1  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_APPLE_SILICON-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    <span class="hljs-built_in">return</span> 1;  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.13&quot;</span>; <span class="hljs-keyword">then</span>    ! [[ -e <span class="hljs-string">&quot;/Library/Developer/CommandLineTools/usr/bin/git&quot;</span> ]]  <span class="hljs-keyword">else</span>    ! [[ -e <span class="hljs-string">&quot;/Library/Developer/CommandLineTools/usr/bin/git&quot;</span> ]] ||      ! [[ -e <span class="hljs-string">&quot;/usr/include/iconv.h&quot;</span> ]]  <span class="hljs-keyword">fi</span>&#125;<span class="hljs-function"><span class="hljs-title">get_permission</span></span>() &#123;  <span class="hljs-variable">$STAT</span> <span class="hljs-string">&quot;%A&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">user_only_chmod</span></span>() &#123;  [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(get_permission <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span> != <span class="hljs-string">&quot;755&quot;</span> ]]&#125;<span class="hljs-function"><span class="hljs-title">exists_but_not_writable</span></span>() &#123;  [[ -e <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]] &amp;&amp; ! [[ -r <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; -w <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> &amp;&amp; -x <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]]&#125;<span class="hljs-function"><span class="hljs-title">get_owner</span></span>() &#123;  <span class="hljs-variable">$STAT</span> <span class="hljs-string">&quot;%u&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">file_not_owned</span></span>() &#123;  [[ <span class="hljs-string">&quot;<span class="hljs-subst">$(get_owner <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-subst">$(id -u)</span>&quot;</span> ]]&#125;<span class="hljs-function"><span class="hljs-title">get_group</span></span>() &#123;  <span class="hljs-variable">$STAT</span> <span class="hljs-string">&quot;%g&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>&#125;<span class="hljs-function"><span class="hljs-title">file_not_grpowned</span></span>() &#123;  [[ <span class="hljs-string">&quot; <span class="hljs-subst">$(id -G <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span>)</span> &quot;</span> != *<span class="hljs-string">&quot; <span class="hljs-subst">$(get_group <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>)</span> &quot;</span>*  ]]&#125;<span class="hljs-comment"># Please sync with &#x27;test_ruby()&#x27; in &#x27;Library/Homebrew/utils/ruby.sh&#x27; from Homebrew/brew repository.</span><span class="hljs-function"><span class="hljs-title">test_ruby</span></span> () &#123;  <span class="hljs-keyword">if</span> [[ ! -x <span class="hljs-variable">$1</span> ]]  <span class="hljs-keyword">then</span>    <span class="hljs-built_in">return</span> 1  <span class="hljs-keyword">fi</span>  <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> --enable-frozen-string-literal --<span class="hljs-built_in">disable</span>=gems,did_you_mean,rubyopt -rrubygems -e \    <span class="hljs-string">&quot;abort if Gem::Version.new(RUBY_VERSION.to_s.dup).to_s.split(&#x27;.&#x27;).first(2) != \</span><span class="hljs-string">              Gem::Version.new(&#x27;<span class="hljs-variable">$REQUIRED_RUBY_VERSION</span>&#x27;).to_s.split(&#x27;.&#x27;).first(2)&quot;</span> 2&gt;/dev/null&#125;<span class="hljs-function"><span class="hljs-title">no_usable_ruby</span></span>() &#123;  <span class="hljs-built_in">local</span> ruby_exec  IFS=$<span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-comment"># Do word splitting on new lines only</span>  <span class="hljs-keyword">for</span> ruby_exec <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">which</span> -a ruby); <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> test_ruby <span class="hljs-string">&quot;<span class="hljs-variable">$ruby_exec</span>&quot;</span>; <span class="hljs-keyword">then</span>      <span class="hljs-built_in">return</span> 1    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">done</span>  IFS=$<span class="hljs-string">&#x27; \t\n&#x27;</span> <span class="hljs-comment"># Restore IFS to its default value</span>  <span class="hljs-built_in">return</span> 0&#125;<span class="hljs-function"><span class="hljs-title">outdated_glibc</span></span>() &#123;  <span class="hljs-built_in">local</span> glibc_version  glibc_version=$(ldd --version | head -n1 | grep -o <span class="hljs-string">&#x27;[0-9.]*$&#x27;</span> | grep -o <span class="hljs-string">&#x27;^[0-9]\+\.[0-9]\+&#x27;</span>)  version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$glibc_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$REQUIRED_GLIBC_VERSION</span>&quot;</span>&#125;<span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]] &amp;&amp; no_usable_ruby &amp;&amp; outdated_glibc<span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;-EOFABORT</span></span><span class="hljs-string"><span class="hljs-subst">    Homebrew requires Ruby $REQUIRED_RUBY_VERSION which was not found on your system.</span></span><span class="hljs-string"><span class="hljs-subst">    Homebrew portable Ruby requires Glibc version $REQUIRED_GLIBC_VERSION or newer,</span></span><span class="hljs-string"><span class="hljs-subst">    and your Glibc version is too old.</span></span><span class="hljs-string"><span class="hljs-subst">    See $&#123;tty_underline&#125;https://docs.brew.sh/Homebrew-on-Linux#requirements$&#123;tty_reset&#125;</span></span><span class="hljs-string"><span class="hljs-subst">    Install Ruby $REQUIRED_RUBY_VERSION and add its location to your PATH.</span></span><span class="hljs-string"><span class="hljs-subst">    EOFABORT</span></span><span class="hljs-string"><span class="hljs-subst">    )</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># USER isn&#x27;t always set so provide a fall back for the installer and subprocesses.</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;USER-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  USER=<span class="hljs-string">&quot;<span class="hljs-subst">$(chomp <span class="hljs-string">&quot;<span class="hljs-subst">$(id -un)</span>&quot;</span>)</span>&quot;</span>  <span class="hljs-built_in">export</span> USER<span class="hljs-keyword">fi</span><span class="hljs-comment"># Invalidate sudo timestamp before exiting (if it wasn&#x27;t active before).</span><span class="hljs-keyword">if</span> ! /usr/bin/sudo -n -v 2&gt;/dev/null; <span class="hljs-keyword">then</span>  <span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;/usr/bin/sudo -k&#x27;</span> EXIT<span class="hljs-keyword">fi</span><span class="hljs-comment"># Things can fail later if `pwd` doesn&#x27;t exist.</span><span class="hljs-comment"># Also sudo prints a warning message for no good reason</span><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;/usr&quot;</span> || <span class="hljs-built_in">exit</span> 1<span class="hljs-comment">####################################################################### script</span><span class="hljs-keyword">if</span> should_install_git; <span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">You must install Git before installing Homebrew. See:</span></span><span class="hljs-string"><span class="hljs-subst">  $&#123;tty_underline&#125;https://docs.brew.sh/Installation$&#123;tty_reset&#125;</span></span><span class="hljs-string"><span class="hljs-subst">EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">)</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span> have_sudo_access<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CI-&#125;</span>&quot;</span> ]] || [[ -w <span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX_DEFAULT</span>&quot;</span> ]] || [[ -w <span class="hljs-string">&quot;/home/linuxbrew&quot;</span> ]] || [[ -w <span class="hljs-string">&quot;/home&quot;</span> ]]; <span class="hljs-keyword">then</span>    HOMEBREW_PREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX_DEFAULT</span>&quot;</span>  <span class="hljs-keyword">else</span>    <span class="hljs-built_in">trap</span> <span class="hljs-built_in">exit</span> SIGINT    <span class="hljs-keyword">if</span> [[ $(/usr/bin/sudo -n -l mkdir 2&gt;&amp;1) != *<span class="hljs-string">&quot;mkdir&quot;</span>* ]]; <span class="hljs-keyword">then</span>      ohai <span class="hljs-string">&quot;Select the Homebrew installation directory&quot;</span>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- <span class="hljs-variable">$&#123;tty_bold&#125;</span>Enter your password<span class="hljs-variable">$&#123;tty_reset&#125;</span> to install to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$&#123;HOMEBREW_PREFIX_DEFAULT&#125;</span><span class="hljs-variable">$&#123;tty_reset&#125;</span> (<span class="hljs-variable">$&#123;tty_bold&#125;</span>recommended<span class="hljs-variable">$&#123;tty_reset&#125;</span>)&quot;</span>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- <span class="hljs-variable">$&#123;tty_bold&#125;</span>Press Control-D<span class="hljs-variable">$&#123;tty_reset&#125;</span> to install to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$HOME</span>/.linuxbrew<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- <span class="hljs-variable">$&#123;tty_bold&#125;</span>Press Control-C<span class="hljs-variable">$&#123;tty_reset&#125;</span> to cancel installation&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> have_sudo_access; <span class="hljs-keyword">then</span>      HOMEBREW_PREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX_DEFAULT</span>&quot;</span>    <span class="hljs-keyword">else</span>      HOMEBREW_PREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.linuxbrew&quot;</span>    <span class="hljs-keyword">fi</span>    <span class="hljs-built_in">trap</span> - SIGINT  <span class="hljs-keyword">fi</span>  HOMEBREW_REPOSITORY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/Homebrew&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$UID</span>&quot;</span> == <span class="hljs-string">&quot;0&quot;</span> ]]; <span class="hljs-keyword">then</span>  abort <span class="hljs-string">&quot;Don&#x27;t run this as root!&quot;</span><span class="hljs-keyword">elif</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX</span>&quot;</span> &amp;&amp; ! -x <span class="hljs-string">&quot;<span class="hljs-variable">$HOMEBREW_PREFIX</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">The Homebrew prefix, $&#123;HOMEBREW_PREFIX&#125;, exists but is not searchable. If this is</span></span><span class="hljs-string"><span class="hljs-subst">not intentional, please restore the default permissions and try running the</span></span><span class="hljs-string"><span class="hljs-subst">installer again:</span></span><span class="hljs-string"><span class="hljs-subst">    sudo chmod 775 $&#123;HOMEBREW_PREFIX&#125;</span></span><span class="hljs-string"><span class="hljs-subst">EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">)</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-keyword">if</span> version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.7&quot;</span>; <span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">Your Mac OS X version is too old. See:</span></span><span class="hljs-string"><span class="hljs-subst">  $&#123;tty_underline&#125;https://github.com/mistydemeo/tigerbrew$&#123;tty_reset&#125;</span></span><span class="hljs-string"><span class="hljs-subst">EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">)</span>&quot;</span>  <span class="hljs-keyword">elif</span> version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.9&quot;</span>; <span class="hljs-keyword">then</span>    abort <span class="hljs-string">&quot;Your OS X version is too old&quot;</span>  <span class="hljs-keyword">elif</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MACOS_LATEST_SUPPORTED</span>&quot;</span> || \    version_lt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MACOS_OLDEST_SUPPORTED</span>&quot;</span>; <span class="hljs-keyword">then</span>    who=<span class="hljs-string">&quot;We&quot;</span>    what=<span class="hljs-string">&quot;&quot;</span>    <span class="hljs-keyword">if</span> version_gt <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MACOS_LATEST_SUPPORTED</span>&quot;</span>; <span class="hljs-keyword">then</span>      what=<span class="hljs-string">&quot;pre-release version&quot;</span>    <span class="hljs-keyword">else</span>      who+=<span class="hljs-string">&quot; (and Apple)&quot;</span>      what=<span class="hljs-string">&quot;old version&quot;</span>    <span class="hljs-keyword">fi</span>    ohai <span class="hljs-string">&quot;You are using macOS <span class="hljs-variable">$&#123;macos_version&#125;</span>.&quot;</span>    ohai <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;who&#125;</span> do not provide support for this <span class="hljs-variable">$&#123;what&#125;</span>.&quot;</span>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOS</span></span><span class="hljs-string"><span class="hljs-subst">This installation may not succeed.</span></span><span class="hljs-string"><span class="hljs-subst">After installation, you will encounter build failures with some formulae.</span></span><span class="hljs-string"><span class="hljs-subst">Please create pull requests instead of asking for help on Homebrew\&#x27;s GitHub,</span></span><span class="hljs-string"><span class="hljs-subst">Discourse, Twitter or IRC. You are responsible for resolving any issues you</span></span><span class="hljs-string"><span class="hljs-subst">experience while you are running this $&#123;what&#125;.</span></span><span class="hljs-string"><span class="hljs-subst">EOS</span></span><span class="hljs-string"><span class="hljs-subst">)</span></span><span class="hljs-string">&quot;</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span>ohai <span class="hljs-string">&quot;This script will install:&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/share/doc/homebrew&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/share/man/man1/brew.1&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/share/zsh/site-functions/_brew&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/etc/bash_completion.d/brew&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span><span class="hljs-comment"># Keep relatively in sync with</span><span class="hljs-comment"># https://github.com/Homebrew/brew/blob/master/Library/Homebrew/keg.rb</span>directories=(bin etc include lib sbin share opt var             Frameworks             etc/bash_completion.d lib/pkgconfig             share/aclocal share/doc share/info share/locale share/man             share/man/man1 share/man/man2 share/man/man3 share/man/man4             share/man/man5 share/man/man6 share/man/man7 share/man/man8             var/<span class="hljs-built_in">log</span> var/homebrew var/homebrew/linked             bin/brew)group_chmods=()<span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>  <span class="hljs-keyword">if</span> exists_but_not_writable <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>    group_chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)  <span class="hljs-keyword">fi</span><span class="hljs-keyword">done</span><span class="hljs-comment"># zsh refuses to read from these directories if group writable</span>directories=(share/zsh share/zsh/site-functions)zsh_dirs=()<span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>  zsh_dirs+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)<span class="hljs-keyword">done</span>directories=(bin etc include lib sbin share var opt             share/zsh share/zsh/site-functions             var/homebrew var/homebrew/linked             Cellar Caskroom Homebrew Frameworks)mkdirs=()<span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;directories[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>  <span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    mkdirs+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)  <span class="hljs-keyword">fi</span><span class="hljs-keyword">done</span>user_chmods=()<span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#zsh_dirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  <span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;zsh_dirs[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> user_only_chmod <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>      user_chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">done</span><span class="hljs-keyword">fi</span>chmods=()<span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span>)<span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  chmods+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span>)<span class="hljs-keyword">fi</span>chowns=()chgrps=()<span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  <span class="hljs-keyword">for</span> dir <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chmods[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span>    <span class="hljs-keyword">if</span> file_not_owned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>      chowns+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)    <span class="hljs-keyword">fi</span>    <span class="hljs-keyword">if</span> file_not_grpowned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>      chgrps+=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span>)    <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">done</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;The following existing directories will be made group writable:&quot;</span>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;The following existing directories will be made writable by user only:&quot;</span>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chowns[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;The following existing directories will have their owner set to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$&#123;USER&#125;</span><span class="hljs-variable">$&#123;tty_reset&#125;</span>:&quot;</span>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chowns[@]&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chgrps[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;The following existing directories will have their group set to <span class="hljs-variable">$&#123;tty_underline&#125;</span><span class="hljs-variable">$&#123;GROUP&#125;</span><span class="hljs-variable">$&#123;tty_reset&#125;</span>:&quot;</span>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chgrps[@]&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#mkdirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;The following new directories will be created:&quot;</span>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%s\n&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> should_install_command_line_tools; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;The Xcode Command Line Tools will be installed.&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ -t 0 &amp;&amp; -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CI-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  wait_for_user<span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;u+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chmods[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#group_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;group_chmods[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#user_chmods[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;755&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;user_chmods[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chowns[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chowns[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span>  <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#chgrps[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;chgrps[@]&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">else</span>  execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;root:wheel&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>  <span class="hljs-keyword">else</span>    execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>:<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;#mkdirs[@]&#125;</span>&quot;</span> -gt 0 ]]; <span class="hljs-keyword">then</span>  execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>  execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mkdirs[@]&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> ! [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    execute_sudo <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>  <span class="hljs-keyword">else</span>    execute <span class="hljs-string">&quot;/bin/mkdir&quot;</span> <span class="hljs-string">&quot;-p&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> exists_but_not_writable <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>  execute_sudo <span class="hljs-string">&quot;/bin/chmod&quot;</span> <span class="hljs-string">&quot;g+rwx&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> file_not_owned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHOWN</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$USER</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> file_not_grpowned <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span>; <span class="hljs-keyword">then</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$CHGRP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$GROUP</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  execute <span class="hljs-string">&quot;<span class="hljs-variable">$TOUCH</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_CACHE&#125;</span>/.cleaned&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> should_install_command_line_tools &amp;&amp; version_ge <span class="hljs-string">&quot;<span class="hljs-variable">$macos_version</span>&quot;</span> <span class="hljs-string">&quot;10.13&quot;</span>; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;Searching online for the Command Line Tools&quot;</span>  <span class="hljs-comment"># This temporary file prompts the &#x27;softwareupdate&#x27; utility to list the Command Line Tools</span>  clt_placeholder=<span class="hljs-string">&quot;/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress&quot;</span>  execute_sudo <span class="hljs-string">&quot;<span class="hljs-variable">$TOUCH</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$clt_placeholder</span>&quot;</span>  clt_label_command=<span class="hljs-string">&quot;/usr/sbin/softwareupdate -l |</span><span class="hljs-string">                      grep -B 1 -E &#x27;Command Line Tools&#x27; |</span><span class="hljs-string">                      awk -F&#x27;*&#x27; &#x27;/^ *\\*/ &#123;print \$2&#125;&#x27; |</span><span class="hljs-string">                      sed -e &#x27;s/^ *Label: //&#x27; -e &#x27;s/^ *//&#x27; |</span><span class="hljs-string">                      sort -V |</span><span class="hljs-string">                      tail -n1&quot;</span>  clt_label=<span class="hljs-string">&quot;<span class="hljs-subst">$(chomp <span class="hljs-string">&quot;<span class="hljs-subst">$(/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-variable">$clt_label_command</span>&quot;</span>)</span>&quot;</span>)</span>&quot;</span>  <span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$clt_label</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>    ohai <span class="hljs-string">&quot;Installing <span class="hljs-variable">$clt_label</span>&quot;</span>    execute_sudo <span class="hljs-string">&quot;/usr/sbin/softwareupdate&quot;</span> <span class="hljs-string">&quot;-i&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$clt_label</span>&quot;</span>    execute_sudo <span class="hljs-string">&quot;/bin/rm&quot;</span> <span class="hljs-string">&quot;-f&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$clt_placeholder</span>&quot;</span>    execute_sudo <span class="hljs-string">&quot;/usr/bin/xcode-select&quot;</span> <span class="hljs-string">&quot;--switch&quot;</span> <span class="hljs-string">&quot;/Library/Developer/CommandLineTools&quot;</span>  <span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># Headless install may have failed, so fallback to original &#x27;xcode-select&#x27; method</span><span class="hljs-keyword">if</span> should_install_command_line_tools &amp;&amp; <span class="hljs-built_in">test</span> -t 0; <span class="hljs-keyword">then</span>  ohai <span class="hljs-string">&quot;Installing the Command Line Tools (expect a GUI popup):&quot;</span>  execute_sudo <span class="hljs-string">&quot;/usr/bin/xcode-select&quot;</span> <span class="hljs-string">&quot;--install&quot;</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Press any key when the installation has completed.&quot;</span>  getc  execute_sudo <span class="hljs-string">&quot;/usr/bin/xcode-select&quot;</span> <span class="hljs-string">&quot;--switch&quot;</span> <span class="hljs-string">&quot;/Library/Developer/CommandLineTools&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]] &amp;&amp; ! output=<span class="hljs-string">&quot;<span class="hljs-subst">$(/usr/bin/xcrun clang 2&gt;&amp;1)</span>&quot;</span> &amp;&amp; [[ <span class="hljs-string">&quot;<span class="hljs-variable">$output</span>&quot;</span> == *<span class="hljs-string">&quot;license&quot;</span>* ]]; <span class="hljs-keyword">then</span>  abort <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">You have not agreed to the Xcode license.</span></span><span class="hljs-string"><span class="hljs-subst">Before running the installer again please agree to the license by opening</span></span><span class="hljs-string"><span class="hljs-subst">Xcode.app or running:</span></span><span class="hljs-string"><span class="hljs-subst">    sudo xcodebuild -license</span></span><span class="hljs-string"><span class="hljs-subst">EOABORT</span></span><span class="hljs-string"><span class="hljs-subst">)</span>&quot;</span><span class="hljs-keyword">fi</span>ohai <span class="hljs-string">&quot;Downloading and installing Homebrew...&quot;</span>(  <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span> &gt;/dev/null || <span class="hljs-built_in">return</span>  <span class="hljs-comment"># we do it in four steps to avoid merge errors when reinstalling</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;init&quot;</span> <span class="hljs-string">&quot;-q&quot;</span>  <span class="hljs-comment"># &quot;git remote add&quot; will fail if the remote is defined in the global config</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;remote.origin.url&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BREW_REPO&#125;</span>&quot;</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;remote.origin.fetch&quot;</span> <span class="hljs-string">&quot;+refs/heads/*:refs/remotes/origin/*&quot;</span>  <span class="hljs-comment"># ensure we don&#x27;t munge line endings on checkout</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;core.autocrlf&quot;</span> <span class="hljs-string">&quot;false&quot;</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;fetch&quot;</span> <span class="hljs-string">&quot;origin&quot;</span> <span class="hljs-string">&quot;--force&quot;</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;fetch&quot;</span> <span class="hljs-string">&quot;origin&quot;</span> <span class="hljs-string">&quot;--tags&quot;</span> <span class="hljs-string">&quot;--force&quot;</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-string">&quot;--hard&quot;</span> <span class="hljs-string">&quot;origin/master&quot;</span>  execute <span class="hljs-string">&quot;ln&quot;</span> <span class="hljs-string">&quot;-sf&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>/bin/brew&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span>  execute <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin/brew&quot;</span> <span class="hljs-string">&quot;update&quot;</span> <span class="hljs-string">&quot;--force&quot;</span>) || <span class="hljs-built_in">exit</span> 1<span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;:<span class="hljs-variable">$&#123;PATH&#125;</span>:&quot;</span> != *<span class="hljs-string">&quot;:<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin:&quot;</span>* ]]; <span class="hljs-keyword">then</span>  warn <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_PREFIX&#125;</span>/bin is not in your PATH.&quot;</span><span class="hljs-keyword">fi</span>ohai <span class="hljs-string">&quot;Installation successful!&quot;</span><span class="hljs-built_in">echo</span><span class="hljs-comment"># Use the shell&#x27;s audible bell.</span><span class="hljs-keyword">if</span> [[ -t 1 ]]; <span class="hljs-keyword">then</span>  <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\a&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># Use an extra newline and bold to avoid this being missed.</span>ohai <span class="hljs-string">&quot;Homebrew has enabled anonymous aggregate formulae and cask analytics.&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOS</span></span><span class="hljs-string"><span class="hljs-subst">$&#123;tty_bold&#125;Read the analytics documentation (and how to opt-out)</span> here:</span><span class="hljs-string">  <span class="hljs-variable">$&#123;tty_underline&#125;</span>https://docs.brew.sh/Analytics<span class="hljs-variable">$&#123;tty_reset&#125;</span></span><span class="hljs-string">No analytics data has been sent yet (or will be during this \`install\` run).</span><span class="hljs-string">EOS</span><span class="hljs-string">)</span><span class="hljs-string">&quot;</span>ohai <span class="hljs-string">&quot;Homebrew is run entirely by unpaid volunteers. Please consider donating:&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(cat &lt;&lt;EOS</span></span><span class="hljs-string"><span class="hljs-subst">  $&#123;tty_underline&#125;https://github.com/Homebrew/brew#donations$&#123;tty_reset&#125;</span></span><span class="hljs-string"><span class="hljs-subst">EOS</span></span><span class="hljs-string"><span class="hljs-subst">)</span></span><span class="hljs-string">&quot;</span>(  <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_REPOSITORY&#125;</span>&quot;</span> &gt;/dev/null || <span class="hljs-built_in">return</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;--replace-all&quot;</span> <span class="hljs-string">&quot;homebrew.analyticsmessage&quot;</span> <span class="hljs-string">&quot;true&quot;</span>  execute <span class="hljs-string">&quot;git&quot;</span> <span class="hljs-string">&quot;config&quot;</span> <span class="hljs-string">&quot;--replace-all&quot;</span> <span class="hljs-string">&quot;homebrew.caskanalyticsmessage&quot;</span> <span class="hljs-string">&quot;true&quot;</span>) || <span class="hljs-built_in">exit</span> 1ohai <span class="hljs-string">&quot;Next steps:&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- Run \`brew help\` to get started&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;- Further documentation: &quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    <span class="hljs-variable">$&#123;tty_underline&#125;</span>https://docs.brew.sh<span class="hljs-variable">$&#123;tty_reset&#125;</span>&quot;</span><span class="hljs-keyword">if</span> [[ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOMEBREW_ON_LINUX-&#125;</span>&quot;</span> ]]; <span class="hljs-keyword">then</span>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$SHELL</span>&quot;</span> <span class="hljs-keyword">in</span>    */bash*)      <span class="hljs-keyword">if</span> [[ -r <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.bash_profile&quot;</span> ]]; <span class="hljs-keyword">then</span>        shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.bash_profile&quot;</span>      <span class="hljs-keyword">else</span>        shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.profile&quot;</span>      <span class="hljs-keyword">fi</span>      ;;    */zsh*)      shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.zprofile&quot;</span>      ;;    *)      shell_profile=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.profile&quot;</span>      ;;  <span class="hljs-keyword">esac</span>  cat &lt;&lt;<span class="hljs-string">EOS</span><span class="hljs-string">- Install the Homebrew dependencies if you have sudo access:</span><span class="hljs-string">  $&#123;tty_bold&#125;Debian, Ubuntu, etc.$&#123;tty_reset&#125;</span><span class="hljs-string">    sudo apt-get install build-essential</span><span class="hljs-string">  $&#123;tty_bold&#125;Fedora, Red Hat, CentOS, etc.$&#123;tty_reset&#125;</span><span class="hljs-string">    sudo yum groupinstall &#x27;Development Tools&#x27;</span><span class="hljs-string">  See $&#123;tty_underline&#125;https://docs.brew.sh/linux$&#123;tty_reset&#125; for more information.</span><span class="hljs-string">- Configure Homebrew in your $&#123;tty_underline&#125;$&#123;shell_profile&#125;$&#123;tty_reset&#125; by running</span><span class="hljs-string">    echo &#x27;eval \$($&#123;HOMEBREW_PREFIX&#125;/bin/brew shellenv)&#x27; &gt;&gt; $&#123;shell_profile&#125;</span><span class="hljs-string">- Add Homebrew to your $&#123;tty_bold&#125;PATH$&#123;tty_reset&#125;</span><span class="hljs-string">    eval \$($&#123;HOMEBREW_PREFIX&#125;/bin/brew shellenv)</span><span class="hljs-string">- We recommend that you install GCC by running:</span><span class="hljs-string">    brew install gcc</span><span class="hljs-string"></span><span class="hljs-string">EOS</span><span class="hljs-keyword">fi</span></code></pre><p>执行前,需要给改脚本赋权限</p><pre><code class="hljs bash">sudo chmod -R 777 brew_install.sh./brew_install.sh</code></pre><p>等待安装成功(中间有过两次失败,主要原因是原来安装的Homebrew没有卸载干净)</p><h4 id="VMware-Fusion"><a href="#VMware-Fusion" class="headerlink" title="VMware Fusion"></a>VMware Fusion</h4><h5 id="物理内存不足，无法使用配置的设置开启虚拟机"><a href="#物理内存不足，无法使用配置的设置开启虚拟机" class="headerlink" title="物理内存不足，无法使用配置的设置开启虚拟机"></a>物理内存不足，无法使用配置的设置开启虚拟机</h5><p>原来的VMware Fusion 版本是11</p><p><img src="/images/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/vmfusion_11.png"></p><p>Google后发现12可以用,于是下载了VMware Fusion安装,亲测可用</p><h5 id="无法将“Ethernet0”连接到虚拟网络“-dev-vmnet8”。"><a href="#无法将“Ethernet0”连接到虚拟网络“-dev-vmnet8”。" class="headerlink" title="无法将“Ethernet0”连接到虚拟网络“/dev/vmnet8”。"></a>无法将“Ethernet0”连接到虚拟网络“/dev/vmnet8”。</h5><p>VMware Fusion升级到12后，过了几天打开虚拟机时，发现“Ethernet0”连接到虚拟网络“/dev/vmnet8”</p><p>谷歌了好久后发现</p><pre><code class="hljs zsh">sudo rm /Library/Preferences/SystemConfiguration/NetworkInterfaces.plist &amp;&amp; sudo killall -9 configd</code></pre><p>解决方式来源：</p><p><a href="https://communities.vmware.com/t5/VMware-Fusion-Discussions/No-Ethernet-Connection-VMware-Fusion-12-macOS-Big-Sur-Beta-6/m-p/2303833#M140209">https://communities.vmware.com/t5/VMware-Fusion-Discussions/No-Ethernet-Connection-VMware-Fusion-12-macOS-Big-Sur-Beta-6/m-p/2303833#M140209</a></p><p>另外，当苹果电脑共享wifi时，也会造成这个结果。所以共享网络也需要关闭。</p><h3 id="命令行查看保存的密码"><a href="#命令行查看保存的密码" class="headerlink" title="命令行查看保存的密码"></a>命令行查看保存的密码</h3><h4 id="security-find-generic-password-ga-“wifi名称”"><a href="#security-find-generic-password-ga-“wifi名称”" class="headerlink" title="security find-generic-password -ga “wifi名称”"></a>security find-generic-password -ga “wifi名称”</h4><p><img src="/images/Mac%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8/wifi.png"></p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mac】hadoop开发环境配置</title>
    <link href="/2020/06/17/mac%E7%8E%AF%E5%A2%83%E4%B8%8Bhadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/17/mac%E7%8E%AF%E5%A2%83%E4%B8%8Bhadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/hadoops.png"><a id="more"></a> </p><h3 id="hdfs的java-API开发环境准备"><a href="#hdfs的java-API开发环境准备" class="headerlink" title="hdfs的java API开发环境准备"></a>hdfs的java API开发环境准备</h3><h4 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h4><ul><li><p>mac下修改hosts文件</p><p>文件所在位置<code>/etc/hosts</code></p><p>将虚拟机中/etc/hosts文件一下内容，添加到以上hosts文件末尾</p></li></ul><pre><code class="hljs accesslog"><span class="hljs-number">192.168.51.100</span> node01.hadoop.com node01<span class="hljs-number">192.168.51.110</span> node02.hadoop.com node02<span class="hljs-number">192.168.51.120</span> node03.hadoop.com node03</code></pre><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><p>拷贝集群环境下的jdk到本地</p><pre><code class="hljs routeros"><span class="hljs-comment">#添加以下配置内容，配置jdk环境变量</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/weitrue/install/jdk1.8.0_141<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH</span>:$JAVA_HOME/binCopy</code></pre><p>让修改马上生效</p><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile</code></pre><h4 id="mac下hadoop环境配置"><a href="#mac下hadoop环境配置" class="headerlink" title="mac下hadoop环境配置"></a>mac下hadoop环境配置</h4><p>拷贝集群环境下<code>hadoop-2.6.0-cdh5.14.2</code>目录文件到本地，配置环境变量</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8Bhadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/hadoop.png"></p><h4 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h4><h5 id="maven是什么？"><a href="#maven是什么？" class="headerlink" title="maven是什么？"></a>maven是什么？</h5><p>Apache Maven是一个软件项目管理和理解工具。基于项目对象模型（POM）的概念，Maven可以从一个中心信息管理项目的构建，报告和文档。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>解压安装包<code>apache-maven-3.6.1-bin.zip</code>到安装目录</p><p>编辑<code>.bash_profile</code>，新增maven环境配置</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8Bhadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/maven.png"></p><h6 id="maven的仓库"><a href="#maven的仓库" class="headerlink" title="maven的仓库"></a>maven的仓库</h6><ul><li><p>创建maven工程后，maven会自动的去本地仓库查看时候有所需的jar包，如果没有的话，默认去中央仓库，将jar包下载到本地；以后如果再次使用此jar时，就直接使用本地仓库的jar即可</p></li><li><p>此过程是maven自动完成的</p></li><li><p>本地仓库：</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8Bhadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/repo.png"></p></li><li><p>私服仓库：就是我们自己搭建的一个远程仓库</p></li><li><p>中央仓库：是官方或者第三方提供的仓库</p></li></ul><h6 id="settings文件"><a href="#settings文件" class="headerlink" title="settings文件"></a>settings文件</h6><ul><li>声明文件规范</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></code></pre><ul><li>本地仓库路径</li></ul><p><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></p><ul><li>Maven是否需要和用户交互以获得输入。如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true </li></ul><p><code>&lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</code></p><ul><li>表示Maven是否需要在离线模式下运行。如果构建系统需要在离线模式下运行，则为true，默认为false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用 </li></ul><p><code>&lt;offline&gt;false&lt;/offline&gt;</code></p><ul><li>当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。</li></ul><p><code>pluginGroups</code></p><ul><li>为仓库列表配置的下载镜像列表 </li></ul><p><code>mirrors</code></p><h6 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h6><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>     项目的模板版本<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.hadoop<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>         可以用这个来标识公司<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>TestFlume<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     可以标识工程的作用<span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>             指定打包类型       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        制定项目版本<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>       项目的依赖关系<span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>                        构建项目的信息</code></pre><p>总项目/ pom.xml 总项目的pom配置文件 </p><p>子项目1/ pom.xml 子项目1的pom文件 </p><p>子项目2/ pom.xml 子项目2的pom文件 </p><h6 id="maven简单的命令"><a href="#maven简单的命令" class="headerlink" title="maven简单的命令"></a>maven简单的命令</h6><p>mvn clean </p><p>mvn clean package</p><p>mvn install:install-file -Dfile=junit-3.8.2.jar -DgroupId=junit -DartifactId=junit -Dversion=3.8.2 -Dpackaging=jar</p><p>如果依赖下载有问题，需要自己添加依赖包进仓库，不要复制粘贴，要用 mvn install这个命令将jar包打进仓库</p><h5 id="安装idea"><a href="#安装idea" class="headerlink" title="安装idea"></a>安装idea</h5>]]></content>
    
    
    <categories>
      
      <category>Bdata</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>mac</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Mac】搭建hadoop集群环境（三台）</title>
    <link href="/2020/06/15/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/06/15/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/hadoops.png"><a id="more"></a> </p><h3 id="1-三台linux服务器的安装"><a href="#1-三台linux服务器的安装" class="headerlink" title="1. 三台linux服务器的安装"></a>1. 三台linux服务器的安装</h3><h4 id="1-安装VmWare-Fusion"><a href="#1-安装VmWare-Fusion" class="headerlink" title="1. 安装VmWare Fusion"></a>1. 安装VmWare Fusion</h4><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/fusion.png"></p><h4 id="2-通过Vmware安装三台linux机器"><a href="#2-通过Vmware安装三台linux机器" class="headerlink" title="2.通过Vmware安装三台linux机器"></a>2.通过Vmware安装三台linux机器</h4><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/linux.png"></p><h4 id="3-为linux虚拟机设置网络配置"><a href="#3-为linux虚拟机设置网络配置" class="headerlink" title="3.为linux虚拟机设置网络配置"></a>3.为linux虚拟机设置网络配置</h4><p>安装VMWare Fusion成功后，Mac OS会新增两张网卡vmnet1以及vmnet8，其中vmnet1是Host-only模式，vmnet8是NAT模式，这里选择vmnet8使用NAT进行网络设置。</p><h5 id="1-修改Fusion网络配置"><a href="#1-修改Fusion网络配置" class="headerlink" title="1.修改Fusion网络配置"></a>1.修改Fusion网络配置</h5><p>修改配置文件:/Library/Preferences/VMware\ Fusion/networking</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/fusion_net.png"></p><h5 id="2-修改网关"><a href="#2-修改网关" class="headerlink" title="2.修改网关"></a>2.修改网关</h5><p>修改配置文件：/Library/Preferences/VMware Fusion/vmnet8/nat.conf</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/net8.png"></p><h5 id="3-修改linux虚拟机网卡"><a href="#3-修改linux虚拟机网卡" class="headerlink" title="3.修改linux虚拟机网卡"></a>3.修改linux虚拟机网卡</h5><p>修改配置文件(服务器版linux):/etc/sysconfig/network-scripts/ifcfg-ens33</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/linux_net.png"></p><p>更改完成配置，重启网络服务</p><pre><code class="hljs shell">systemctl restart network</code></pre><p>安装一些常用的软件</p><pre><code class="hljs shell">yum -y install vimyum -y install net-tools</code></pre><p>关机</p><pre><code class="hljs angelscript">init <span class="hljs-number">0</span></code></pre><h5 id="4-克隆第一台linux虚拟机"><a href="#4-克隆第一台linux虚拟机" class="headerlink" title="4.克隆第一台linux虚拟机"></a>4.克隆第一台linux虚拟机</h5><p>现在已经有了种子机器了，我们可以通过种子机器进行复制或者克隆出三台机器</p><h6 id="更改克隆机器的IP地址"><a href="#更改克隆机器的IP地址" class="headerlink" title="更改克隆机器的IP地址"></a>更改克隆机器的IP地址</h6><ul><li><p>三台机器的ip地址分别是<code>192.168.51.100、192.168.51.110、192.168.51.120</code></p></li><li><p>克隆出来的机器IP地址与种子的ip地址一样，我们将第二台机器的IP地址更改为192.168.51.110即可</p></li><li><p>启动虚拟机，并通过root用户，密码******来进行登录，然后来更改linux机器的IP地址</p></li></ul><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre><pre><code class="hljs shell">IPADDR=192.168.51.110NETMASK=255.255.255.0GATEWAY=192.168.51.1DNS1=8.8.8.8</code></pre><ul><li><p>依照上面步骤，接着克隆第三台机器，并将第三台机器的IP地址设置为</p><p>192.168.51.120</p></li></ul><h3 id="2-安装大数据集群前环境准备"><a href="#2-安装大数据集群前环境准备" class="headerlink" title="2.安装大数据集群前环境准备"></a>2.安装大数据集群前环境准备</h3><h4 id="1-三台虚拟机关闭防火墙"><a href="#1-三台虚拟机关闭防火墙" class="headerlink" title="1. 三台虚拟机关闭防火墙"></a>1. 三台虚拟机关闭防火墙</h4><p>三台机器执行以下命令（<font color="red">root</font>用户来执行）</p><pre><code class="hljs shell">systemctl stop firewalldsystemctl disable firewalld</code></pre><h4 id="2-三台机器关闭selinux"><a href="#2-三台机器关闭selinux" class="headerlink" title="2. 三台机器关闭selinux"></a>2. 三台机器关闭selinux</h4><p>三台机器执行以下命令关闭selinux</p><pre><code class="hljs shell">vim /etc/sysconfig/selinuxSELINUX=disabled</code></pre><h4 id="3-三台机器更改主机名"><a href="#3-三台机器更改主机名" class="headerlink" title="3. 三台机器更改主机名"></a>3. 三台机器更改主机名</h4><p>三台机器执行以下命令更改主机名</p><pre><code class="hljs shell">vim /etc/hostname</code></pre><p>第一台机器更改内容</p><pre><code class="hljs css"><span class="hljs-selector-tag">node01</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span></code></pre><p>第二台机器更改内容</p><pre><code class="hljs css"><span class="hljs-selector-tag">node02</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span></code></pre><p>第三台机器更改内容</p><pre><code class="hljs css"><span class="hljs-selector-tag">node03</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span></code></pre><h4 id="4-三台机器做主机名与IP地址的映射"><a href="#4-三台机器做主机名与IP地址的映射" class="headerlink" title="4. 三台机器做主机名与IP地址的映射"></a>4. 三台机器做主机名与IP地址的映射</h4><p>三台机器执行以下命令更改主机名与IP地址的映射/etc/hosts</p><pre><code class="hljs shell">192.168.51.100 node01.hadoop.com node01192.168.51.110 node02.hadoop.com node02192.168.51.120 node03.hadoop.com node03</code></pre><h4 id="5-三台机器时钟同步"><a href="#5-三台机器时钟同步" class="headerlink" title="5. 三台机器时钟同步"></a>5. 三台机器时钟同步</h4><h5 id="第一种同步方式：通过网络进行时钟同步"><a href="#第一种同步方式：通过网络进行时钟同步" class="headerlink" title="第一种同步方式：通过网络进行时钟同步"></a>第一种同步方式：通过网络进行时钟同步</h5><p>通过网络连接外网进行时钟同步,必须保证虚拟机连上外网</p><p>三台机器都安装ntpdate</p><pre><code class="hljs shell">yum -y install ntpdate</code></pre><p>阿里云时钟同步服务器</p><pre><code class="hljs css"><span class="hljs-selector-tag">ntpdate</span> <span class="hljs-selector-tag">ntp4</span><span class="hljs-selector-class">.aliyun</span><span class="hljs-selector-class">.com</span></code></pre><p>三台机器定时任务</p><pre><code class="hljs shell">crontab -e</code></pre><p>添加如下内容</p><pre><code class="hljs shell">*/1 * * * * /usr/sbin/ntpdate ntp4.aliyun.com;</code></pre><h4 id="6-三台机器添加普通用户"><a href="#6-三台机器添加普通用户" class="headerlink" title="6. 三台机器添加普通用户"></a>6. 三台机器添加普通用户</h4><p>三台linux服务器统一添加普通用户hadoop，并给以sudo权限，用于以后所有的大数据软件的安装</p><p>并统一设置普通用户的密码为 ==<strong>**</strong>==</p><pre><code class="hljs shell">useradd hadooppasswd hadoop</code></pre><p>普通用户的密码设置为******</p><p>三台机器为普通用户添加sudo权限</p><pre><code class="hljs shell">visudo</code></pre><p> 增加如下内容</p><pre><code class="hljs shell">hadoop ALL=(ALL)    ALL</code></pre><h4 id="7-三台定义统一目录"><a href="#7-三台定义统一目录" class="headerlink" title="7. 三台定义统一目录"></a>7. 三台定义统一目录</h4><p>定义三台linux服务器软件压缩包存放目录，以及解压后安装目录，三台机器执行以下命令，创建两个文件夹，一个用于存放软件压缩包目录，一个用于存放解压后目录</p><pre><code class="hljs shell">mkdir -p /weitrue/soft   # 软件压缩包存放目录mkdir -p /weitrue/install # 软件解压后存放目录chown -R hadoop:hadoop /weitrue  # 将文件夹权限更改为hadoop用户</code></pre><h4 id="8-三台机器hadoop用户免密码登录"><a href="#8-三台机器hadoop用户免密码登录" class="headerlink" title="8. 三台机器hadoop用户免密码登录"></a>8. 三台机器hadoop用户免密码登录</h4><p>切换用户为hadoop</p><pre><code class="hljs shell">su hadoop</code></pre><p>第一步：三台机器在<font color="red">hadoop</font>用户下执行以下命令生成公钥与私钥</p><pre><code class="hljs shell">ssh-keygen -t rsa</code></pre><p><font color="red">执行上述命令之后，按三次Enter键即可生成了</font></p><p>第二步：三台机器在hadoop用户下，执行命令拷贝公钥到node01服务器</p><pre><code class="hljs shell">ssh-copy-id node01</code></pre><p>第三步：node01服务器将公钥拷贝给node02与node03</p><p>node01在hadoop用户下，执行以下命令，将authorized_keys拷贝到node02与node03服务器</p><pre><code class="hljs shell">cd /home/hadoop/.ssh/scp authorized_keys node02:$PWDscp authorized_keys node03:$PWD</code></pre><p>第四步：验证；从任意节点是否能免秘钥登陆其他节点；如node01免密登陆node02</p><pre><code class="hljs sh">ssh node02</code></pre><h4 id="9-三台机器关机重启"><a href="#9-三台机器关机重启" class="headerlink" title="9. 三台机器关机重启"></a>9. 三台机器关机重启</h4><p>三台机器在hadoop用户下执行以下命令，实现关机重启</p><pre><code class="hljs shell">sudo reboot -h now</code></pre><h4 id="10-三台机器安装jdk"><a href="#10-三台机器安装jdk" class="headerlink" title="10. 三台机器安装jdk"></a>10. 三台机器安装jdk</h4><ul><li><p>使用hadoop用户来重新连接三台机器，然后使用hadoop用户来安装jdk软件</p></li><li><p>上传压缩包到第一台服务器的/weitrue/soft下面，然后进行解压，配置环境变量即可，三台机器都依次安装即可</p></li></ul><pre><code class="hljs shell">cd /weitrue/soft/tar -xzvf jdk-8u141-linux-x64.tar.gz -C /weitrue/install/sudo vim /etc/profile</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">添加以下配置内容，配置jdk环境变量</span>export JAVA_HOME=/weitrue/install/jdk1.8.0_141export PATH=$PATH:$JAVA_HOME/bin</code></pre><p>让修改马上生效</p><pre><code class="hljs shell">source /etc/profile</code></pre><h3 id="3-hadoop集群的安装"><a href="#3-hadoop集群的安装" class="headerlink" title="3. hadoop集群的安装"></a>3. hadoop集群的安装</h3><p>注意：这里使用打包好的包“hadoop-2.6.0-cdh5.14.2_after_compile.tar.gz”安装部署集群</p><p>编译没有什么技巧，主要跟网络好坏有关</p><h4 id="1-CDH软件版本重新进行编译"><a href="#1-CDH软件版本重新进行编译" class="headerlink" title="1. CDH软件版本重新进行编译"></a>1. CDH软件版本重新进行编译</h4><h4 id="2-hadoop集群的安装"><a href="#2-hadoop集群的安装" class="headerlink" title="2. hadoop集群的安装"></a>2. hadoop集群的安装</h4><p>安装环境服务部署规划</p><table><thead><tr><th>服务器IP</th><th>192.168.51.100</th><th>192.168.51.110</th><th>192.168.51.120</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td></td><td></td></tr><tr><td>HDFS</td><td>SecondaryNameNode</td><td></td><td></td></tr><tr><td>HDFS</td><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>YARN</td><td>ResourceManager</td><td></td><td></td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr><tr><td>历史日志服务器</td><td>JobHistoryServer</td><td></td><td></td></tr></tbody></table><h5 id="第一步：上传压缩包并解压"><a href="#第一步：上传压缩包并解压" class="headerlink" title="第一步：上传压缩包并解压"></a>第一步：上传压缩包并解压</h5><ul><li>将我们重新编译之后支持snappy压缩的hadoop包上传到第一台服务器并解压；第一台机器执行以下命令</li></ul><pre><code class="hljs shell">cd /weitrue/soft/tar -xzvf hadoop-2.6.0-cdh5.14.2_after_compile.tar.gz -C /weitrue/install/</code></pre><h5 id="第二步：查看hadoop支持的压缩方式以及本地库"><a href="#第二步：查看hadoop支持的压缩方式以及本地库" class="headerlink" title="第二步：查看hadoop支持的压缩方式以及本地库"></a>第二步：查看hadoop支持的压缩方式以及本地库</h5><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2bin/hadoop checknative</code></pre><p>如果出现openssl为false，那么所有机器在线安装openssl即可，执行以下命令，虚拟机联网之后就可以在线进行安装了</p><pre><code class="hljs shell">sudo yum -y install openssl-devel</code></pre><h5 id="第三步：修改配置文件"><a href="#第三步：修改配置文件" class="headerlink" title="第三步：修改配置文件"></a>第三步：修改配置文件</h5><h6 id="修改hadoop-env-sh"><a href="#修改hadoop-env-sh" class="headerlink" title="修改hadoop-env.sh"></a>修改hadoop-env.sh</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim hadoop-env.sh</code></pre><pre><code class="hljs shell">export JAVA_HOME=/weitrue/install/jdk1.8.0_141</code></pre><h6 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim core-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://node01:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/tempDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 缓冲区大小，实际工作中根据服务器性能动态调整 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4096<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 开启hdfs的垃圾桶机制，删除掉的数据可以从垃圾桶中回收，单位分钟 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.trash.interval<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10080<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim hdfs-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- NameNode存储元数据信息的路径，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割   --&gt;</span> <span class="hljs-comment">&lt;!--   集群动态上下线 </span><span class="hljs-comment">&lt;property&gt;</span><span class="hljs-comment">&lt;name&gt;dfs.hosts&lt;/name&gt;</span><span class="hljs-comment">&lt;value&gt;/weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop/accept_host&lt;/value&gt;</span><span class="hljs-comment">&lt;/property&gt;</span><span class="hljs-comment">&lt;property&gt;</span><span class="hljs-comment">&lt;name&gt;dfs.hosts.exclude&lt;/name&gt;</span><span class="hljs-comment">&lt;value&gt;/weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop/deny_host&lt;/value&gt;</span><span class="hljs-comment">&lt;/property&gt;</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 定义dataNode数据存储的节点位置，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/datanodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/snn/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/snn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>134217728<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改mapred-site-xml"><a href="#修改mapred-site-xml" class="headerlink" title="修改mapred-site.xml"></a>修改mapred-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopmv mapred-site.xml.template mapred-site.xml vim mapred-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.job.ubertask.enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改yarn-site-xml"><a href="#修改yarn-site-xml" class="headerlink" title="修改yarn-site.xml"></a>修改yarn-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim yarn-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim slaves</code></pre><p>原内容替换为</p><pre><code class="hljs gcode"><span class="hljs-symbol">node01</span><span class="hljs-symbol">node02</span><span class="hljs-symbol">node03</span></code></pre><h5 id="第四步：创建文件存放目录"><a href="#第四步：创建文件存放目录" class="headerlink" title="第四步：创建文件存放目录"></a>第四步：创建文件存放目录</h5><p>第一台机器执行以下命令</p><p>node01机器上面创建以下目录</p><pre><code class="hljs shell">mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/tempDatasmkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatasmkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/datanodeDatas mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/editsmkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/snn/namemkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/snn/edits</code></pre><h5 id="第五步：安装包的分发scp与rsync"><a href="#第五步：安装包的分发scp与rsync" class="headerlink" title="第五步：安装包的分发scp与rsync"></a>第五步：安装包的分发scp与rsync</h5><p>在linux当中，用于向远程服务器拷贝文件或者文件夹可以使用scp或者rsync，这两个命令功能类似都是向远程服务器进行拷贝，只不过scp是全量拷贝，rsync可以做到增量拷贝，rsync的效率比scp更高一些</p><h6 id="通过scp直接拷贝"><a href="#通过scp直接拷贝" class="headerlink" title="通过scp直接拷贝"></a>通过scp直接拷贝</h6><p>scp（secure copy）安全拷贝</p><p>可以通过scp进行不同服务器之间的文件或者文件夹的复制</p><p>使用语法 </p><pre><code class="hljs shell">scp -r sourceFile  username@host:destpath</code></pre><p>用法示例</p><pre><code class="hljs shell">scp -r hadoop-lzo-0.4.20.jar hadoop@node01:/weitrue/</code></pre><p>node01执行以下命令进行拷贝</p><pre><code class="hljs shell">cd /weitrue/install/scp -r hadoop-2.6.0-cdh5.14.2/ node02:$PWDscp -r hadoop-2.6.0-cdh5.14.2/ node03:$PWD</code></pre><h5 id="第六步：配置hadoop的环境变量"><a href="#第六步：配置hadoop的环境变量" class="headerlink" title="第六步：配置hadoop的环境变量"></a>第六步：配置hadoop的环境变量</h5><p>三台机器都要进行配置hadoop的环境变量</p><p>三台机器执行以下命令</p><pre><code class="hljs shell">sudo vim /etc/profile</code></pre><pre><code class="hljs shell">export HADOOP_HOME=/weitrue/install/hadoop-2.6.0-cdh5.14.2export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></pre><p>配置完成之后生效</p><pre><code class="hljs shell">source /etc/profile</code></pre><h5 id="第七步：集群启动"><a href="#第七步：集群启动" class="headerlink" title="第七步：集群启动"></a>第七步：集群启动</h5><h6 id="1-格式化集群"><a href="#1-格式化集群" class="headerlink" title="1. 格式化集群"></a>1. 格式化集群</h6><p>要启动 Hadoop 集群，需要启动 HDFS 和 YARN 两个集群。 </p><p>注意：首次启动HDFS时，必须对其进行格式化操作。本质上是一些清理和准备工作，因为此时的 HDFS 在物理上还是不存在的。<font color="red">格式化操作只有在首次启动的时候需要，以后再也不需要了</font></p><p><font color="red">node01执行一遍即可</font></p><pre><code class="hljs shell">hdfs namenode -format</code></pre><p>或者</p><pre><code class="hljs shell">hadoop namenode –format</code></pre><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/hadoop.png"></p><p>启动集群有两种方式：①脚本一键启动；②单个进程逐个启动</p><h6 id="2-脚本一键启动"><a href="#2-脚本一键启动" class="headerlink" title="2. 脚本一键启动"></a>2. 脚本一键启动</h6><p>如果配置了 etc/hadoop/slaves 和 ssh 免密登录，则可以使用程序脚本启动所有Hadoop 两个集群的相关进程，在主节点所设定的机器上执行。</p><p>启动集群</p><p>node01节点上执行以下命令</p><p>第一台机器执行以下命令(hadoop/sbin目录下)</p><pre><code class="hljs shell">start-dfs.shstart-yarn.shmr-jobhistory-daemon.sh start historyserver</code></pre><p>停止集群：</p><pre><code class="hljs shell">stop-dfs.shstop-yarn.sh</code></pre><h6 id="3-单个进程逐个启动"><a href="#3-单个进程逐个启动" class="headerlink" title="3. 单个进程逐个启动"></a>3. 单个进程逐个启动</h6><pre><code class="hljs shell">在主节点上使用以下命令启动 HDFS NameNode： hadoop-daemon.sh start namenode 在每个从节点上使用以下命令启动 HDFS DataNode： hadoop-daemon.sh start datanode在主节点上使用以下命令启动 YARN ResourceManager： yarn-daemon.sh start resourcemanager 在每个从节点上使用以下命令启动 YARN nodemanager： yarn-daemon.sh start nodemanager 以上脚本位于$HADOOP_HOME/sbin/目录下。如果想要停止某个节点上某个角色，只需要把命令中的start 改为stop 即可。</code></pre><h6 id="4-一键启动hadoop集群的脚本"><a href="#4-一键启动hadoop集群的脚本" class="headerlink" title="4.一键启动hadoop集群的脚本"></a>4.一键启动hadoop集群的脚本</h6><p>我们也可以创建一键启动hadoop的脚本，以后启动hadoop都可以通过一个脚本即可</p><p>在node01服务器的/home/hadoop/bin目录下创建脚本</p><pre><code class="hljs shell">[hadoop@node01 bin]$ cd /home/hadoop/bin/[hadoop@node01 bin]$ vim hadoop.sh</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>case $1 in&quot;start&quot; )&#123; source /etc/profile; /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/start-dfs.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/start-yarn.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/mr-jobhistory-daemon.sh start historyserver&#125;;;&quot;stop&quot;)&#123; /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/stop-dfs.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/stop-yarn.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/mr-jobhistory-daemon.sh stop  historyserver&#125;;;esac</code></pre><p>修改脚本权限</p><pre><code class="hljs shell">[hadoop@node01 bin]$ chmod 777 hadoop.sh[hadoop@node01 bin]$ ./hadoop.sh start  # 启动hadoop集群[hadoop@node01 bin]$ ./hadoop.sh stop   # 停止hadoop集群</code></pre><h5 id="第八步：浏览器查看启动页面"><a href="#第八步：浏览器查看启动页面" class="headerlink" title="第八步：浏览器查看启动页面"></a>第八步：浏览器查看启动页面</h5><p>hdfs集群访问地址</p><p><a href="http://192.168.51.100:50070/">http://192.168.51.100:50070/</a></p><p>yarn集群访问地址</p><p><a href="http://192.168.51.100:8088/">http://192.168.51.100:8088</a></p><p>jobhistory访问地址：</p><p><a href="http://192.168.51.100:19888/">http://192.168.51.100:19888</a></p><p>==如果要关闭电脑时，清一定要按照以下顺序操作，否则集群可能会出问题==</p><ul><li><p>关闭hadoop集群</p></li><li><p>关闭虚拟机</p></li><li><p>关闭电脑</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Bdata</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【All】Git动图图解</title>
    <link href="/2020/06/14/git%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3/"/>
    <url>/2020/06/14/git%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git.jpg"><a id="more"></a> </p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>拥有多个分支是很方便的，这样可以将不同的新修改互相隔离开，而且还能确保你不会意外地向生产代码推送未经许可或破损的代码修改。但一旦这些修改得到了批准许可，我们就需要将其部署到我们的生产分支中！</p><p>可将一个分支的修改融入到另一个分支的一种方式是执行 git merge。Git 可执行两种类型的合并：fast-forward 和 no-fast-forward。现在你可能分不清，但我们马上就来看看它们的差异所在。</p><h4 id="Fast-forward-—ff"><a href="#Fast-forward-—ff" class="headerlink" title="Fast-forward (—ff)"></a>Fast-forward (—ff)</h4><p>在当前分支相比于我们要合并的分支没有额外的提交（commit）时，可以执行 fast-forward 合并。Git 很懒，首先会尝试执行最简单的选项：fast-forward！这类合并不会创建新的提交，而是会将我们正在合并的分支上的提交直接合并到当前分支。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image1.gif"></p><p>完美！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。那么 no-fast-forward 又是什么意思呢？</p><h4 id="No-fast-foward-—no-ff"><a href="#No-fast-foward-—no-ff" class="headerlink" title="No-fast-foward (—no-ff)"></a>No-fast-foward (—no-ff)</h4><p>如果你的当前分支相比于你想要合并的分支没有任何提交，那当然很好，但很遗憾现实情况很少如此！如果我们在当前分支上提交我们想要合并的分支不具备的改变，那么 git 将会执行 no-fast-forward 合并。</p><p>使用 no-fast-forward 合并时，Git 会在当前活动分支上创建新的 merging commit。这个提交的父提交（parent commit）即指向这个活动分支，也指向我们想要合并的分支！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image2.gif"></p><p>没什么大不了的，完美的合并！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。</p><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>尽管 Git 能够很好地决定如何合并分支以及如何向文件添加修改，但它并不总是能完全自己做决定。当我们想要合并的两个分支的同一文件中的同一行代码上有不同的修改，或者一个分支删除了一个文件而另一个分支修改了这个文件时，Git 就不知道如何取舍了。</p><p>在这样的情况下，Git 会询问你想要保留哪种选择？假设在这两个分支中，我们都编辑了 README.md 的第一行。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image3.png"></p><p>如果我们想把 dev 合并到 master，就会出现一个合并冲突：你想要标题是 Hello! 还是 Hey!？</p><p>当尝试合并这些分支时，Git 会向你展示冲突出现的位置。我们可以手动移除我们不想保留的修改，保存这些修改，再次添加这个已修改的文件，然后提交这些修改。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image4.gif"></p><p>完成！尽管合并冲突往往很让人厌烦，但这是合理的：Git 不应该瞎猜我们想要保留哪些修改。</p><h3 id="变基（Rebasing）"><a href="#变基（Rebasing）" class="headerlink" title="变基（Rebasing）"></a>变基（Rebasing）</h3><p>我们刚看到可通过执行 git merge 将一个分支的修改应用到另一个分支。另一种可将一个分支的修改融入到另一个分支的方式是执行 git rebase。</p><p>git rebase 会将当前分支的提交复制到指定的分支之上。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image5.gif"></p><p>完美，现在我们在 dev 分支上获取了 master 分支上的所有修改。</p><p>变基与合并有一个重大的区别：Git 不会尝试确定要保留或不保留哪些文件。我们执行 rebase 的分支总是含有我们想要保留的最新近的修改！这样我们不会遇到任何合并冲突，而且可以保留一个漂亮的、线性的 Git 历史记录。</p><p>上面这个例子展示了在 master 分支上的变基。但是，在更大型的项目中，你通常不需要这样的操作。git rebase 在为复制的提交创建新的 hash 时会修改项目的历史记录。</p><p>如果你在开发一个 feature 分支并且 master 分支已经更新过，那么变基就很好用。你可以在你的分支上获取所有更新，这能防止未来出现合并冲突。</p><h3 id="交互式变基（Interactive-Rebase）"><a href="#交互式变基（Interactive-Rebase）" class="headerlink" title="交互式变基（Interactive Rebase）"></a>交互式变基（Interactive Rebase）</h3><p>在为提交执行变基之前，我们可以修改它们！我们可以使用交互式变基来完成这一任务。交互式变基在你当前开发的分支上以及想要修改某些提交时会很有用。</p><p>在我们正在 rebase 的提交上，我们可以执行以下 6 个动作：</p><p>reword：修改提交信息；</p><p>edit：修改此提交；</p><p>squash：将提交融合到前一个提交中；</p><p>fixup：将提交融合到前一个提交中，不保留该提交的日志消息；</p><p>exec：在每个提交上运行我们想要 rebase 的命令；</p><p>drop：移除该提交。</p><p>很棒！这样我们就能完全控制我们的提交了。如果你想要移除一个提交，只需 drop 即可。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image6.gif"></p><p>如果你想把多个提交融合到一起以便得到清晰的提交历史，那也没有问题！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image7.gif"></p><p>交互式变基能为你在 rebase 时提供大量控制，甚至可以控制当前的活动分支。</p><h3 id="重置（Resetting）"><a href="#重置（Resetting）" class="headerlink" title="重置（Resetting）"></a>重置（Resetting）</h3><p>当我们不想要之前提交的修改时，就会用到这个命令。也许这是一个 WIP 提交或者可能是引入了 bug 的提交，这时候就要执行 git reset。</p><p>git reset 能让我们不再使用当前台面上的文件，让我们可以控制 HEAD 应该指向的位置。</p><h4 id="软重置"><a href="#软重置" class="headerlink" title="软重置"></a>软重置</h4><p>软重置会将 HEAD 移至指定的提交（或与 HEAD 相比的提交的索引），而不会移除该提交之后加入的修改！</p><p>假设我们不想保留添加了一个 style.css 文件的提交 9e78i，而且我们也不想保留添加了一个 index.js 文件的提交 035cc。但是，我们确实又想要保留新添加的 style.css 和 index.js 文件！这是软重置的一个完美用例。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image8.gif"></p><p>输入 git status 后，你会看到我们仍然可以访问在之前的提交上做过的所有修改。这很好，这意味着我们可以修复这些文件的内容，之后再重新提交它们！</p><h4 id="硬重置"><a href="#硬重置" class="headerlink" title="硬重置"></a>硬重置</h4><p>有时候我们并不想保留特定提交引入的修改。不同于软重置，我们应该再也无需访问它们。Git 应该直接将整体状态直接重置到特定提交之前的状态：这甚至包括你在工作目录中和暂存文件上的修改。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image9.gif"></p><p>Git 丢弃了 9e78i 和 035cc 引入的修改，并将状态重置到了 ec5be 的状态。</p><h3 id="还原（Reverting）"><a href="#还原（Reverting）" class="headerlink" title="还原（Reverting）"></a>还原（Reverting）</h3><p>另一种撤销修改的方法是执行 git revert。通过对特定的提交执行还原操作，我们会创建一个包含已还原修改的新提交。</p><p>假设 ec5be 添加了一个 index.js 文件。但之后我们发现其实我们再也不需要由这个提交引入的修改了。那就还原 ec5be 提交吧！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image10.gif"></p><p>完美！提交 9e78i 还原了由提交 ec5be 引入的修改。在撤销特定的提交时，git revert 非常有用，同时也不会修改分支的历史。</p><h3 id="拣选（Cherry-picking）"><a href="#拣选（Cherry-picking）" class="headerlink" title="拣选（Cherry-picking）"></a>拣选（Cherry-picking）</h3><p>当一个特定分支包含我们的活动分支需要的某个提交时，我们对那个提交执行 cherry-pick！对一个提交执行 cherry-pick 时，我们会在活动分支上创建一个新的提交，其中包含由拣选出来的提交所引入的修改。</p><p>假设 dev 分支上的提交 76d12 为 index.js 文件添加了一项修改，而我们希望将其整合到 master 分支中。我们并不想要整个 dev 分支，而只需要这个提交！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image11.gif"></p><p>现在 master 分支包含 76d12 引入的修改了。</p><h3 id="取回（Fetching）"><a href="#取回（Fetching）" class="headerlink" title="取回（Fetching）"></a>取回（Fetching）</h3><p>如果你有一个远程 Git 分支，比如在 GitHub 上的分支，当远程分支上包含当前分支没有的提交时，可以使用取回。比如当合并了另一个分支或你的同事推送了一个快速修复时。</p><p>通过在这个远程分支上执行 git fetch，我们就可在本地获取这些修改。这不会以任何方式影响你的本地分支：fetch 只是单纯地下载新的数据而已。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image12.gif"></p><p>现在我们可以看到自上次推送以来的所有修改了。这些新数据也已经在本地了，我们可以决定用这些新数据做什么了。</p><h3 id="拉取（Pulling）"><a href="#拉取（Pulling）" class="headerlink" title="拉取（Pulling）"></a>拉取（Pulling）</h3><p>尽管 git fetch 可用于获取某个分支的远程信息，但我们也可以执行 git pull。git pull 实际上是两个命令合成了一个：git fetch 和 git merge。当我们从来源拉取修改时，我们首先是像 git fetch 那样取回所有数据，然后最新的修改会自动合并到本地分支中。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image13.gif"></p><p>很好，我们现在与远程分支完美同步了，并且也有了所有最新的修改！</p><h3 id="Reflog"><a href="#Reflog" class="headerlink" title="Reflog"></a>Reflog</h3><p>每个人都会犯错，但犯错其实没啥！有时候你可能感觉你把 git repo 完全搞坏了，让你想完全删了了事。</p><p>git reflog 是一个非常有用的命令，可以展示已经执行过的所有动作的日志。包括合并、重置、还原，基本上包含你对你的分支所做的任何修改。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image14.gif"></p><p>如果你犯了错，你可以根据 reflog 提供的信息通过重置 HEAD 来轻松地重做！</p><p>假设我们实际上并不需要合并原有分支。当我们执行 git reflog 命令时，我们可以看到这个 repo 的状态在合并前位于 HEAD@{1}。那我们就执行一次 git reset，将 HEAD 重新指向在 HEAD@{1} 的位置。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image15.gif"></p><p>我们可以看到最新的动作已被推送给 reflog。</p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【windows】Git的安装与配置</title>
    <link href="/2020/06/14/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/14/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git.jpg"><a id="more"></a> </p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="查看Git所有配置"><a href="#查看Git所有配置" class="headerlink" title="查看Git所有配置"></a>查看Git所有配置</h4><p>git config –list </p><h4 id="删除全局配置项"><a href="#删除全局配置项" class="headerlink" title="删除全局配置项"></a>删除全局配置项</h4><p>(1)终端执行命令：</p><p><code>git config --global --unset user.name</code></p><p>(2)编辑配置文件：</p><p><code>git config --global --edit</code></p><p>查看系统config</p><p><code>git config --system --list</code></p><p>查看当前用户（global）配置</p><p><code>git config --global --list</code></p><p>查看当前仓库配置信息</p><p><code>git config --local --list</code></p><h4 id="切换到需要提交的分支"><a href="#切换到需要提交的分支" class="headerlink" title="切换到需要提交的分支"></a>切换到需要提交的分支</h4><pre><code class="hljs haxe">git status     <span class="hljs-meta">#  查看git状态  </span>git branch     <span class="hljs-meta">#  查看git分支  </span>git checkout feature/<span class="hljs-keyword">new</span><span class="hljs-type">_branch</span> <span class="hljs-meta"># 切换到feature/new_branch分支 </span></code></pre><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .                                          <span class="hljs-comment"># 添加数据到镜像仓库                                             </span></span>                                                   <span class="hljs-comment"># 提交单个文件，进入你要提交的文件目录          </span>                                                   <span class="hljs-comment"># git add &lt;你要提交的文件&gt; </span>git commit -m <span class="hljs-string">&#x27;你要写的注释&#x27;</span>                         <span class="hljs-comment"># 提交到本地镜像仓库</span>git push -u origin feature/new_branch    <span class="hljs-comment"># 提交到远程镜像仓库</span></code></pre><h4 id="将远程分支拉取到本地"><a href="#将远程分支拉取到本地" class="headerlink" title="将远程分支拉取到本地"></a>将远程分支拉取到本地</h4><pre><code class="hljs arduino">git branch -a                                            # 查询所有分支,包括远程分支 git checkout -b <span class="hljs-built_in">release</span> remotes/origin/<span class="hljs-built_in">release</span>  # 将远程<span class="hljs-built_in">release</span>分支拉取到本地，并在本地创建<span class="hljs-built_in">release</span>分支</code></pre><p>绿色是当前所在本地分支，白色是本地分支，红色是远程分支<br><img src="/images/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git-a.png"></p><h3 id="分支代码拉取提交流程"><a href="#分支代码拉取提交流程" class="headerlink" title="分支代码拉取提交流程"></a>分支代码拉取提交流程</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取主干最新代码 </span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> &lt;repo&gt; </span><span class="hljs-meta">$</span><span class="bash"> git checkout develop   <span class="hljs-comment"># 开发分支 </span></span><span class="hljs-meta">$</span><span class="bash"> git pull               <span class="hljs-comment"># 同步分支 </span></span><span class="hljs-meta">#</span><span class="bash"> 新建一个开发分支my_feature </span><span class="hljs-meta">$</span><span class="bash"> git checkout -b feature/my_feature  </span><span class="hljs-meta">#</span><span class="bash"> 确认已切换到当前分支 </span><span class="hljs-meta">$</span><span class="bash"> git branch </span><span class="hljs-meta">#</span><span class="bash"> 保存所有的修改变化 </span><span class="hljs-meta">$</span><span class="bash"> git add --all 或者 git add . </span><span class="hljs-meta">#</span><span class="bash"> 查看发生变动的文件 </span><span class="hljs-meta">$</span><span class="bash"> git status  </span><span class="hljs-meta">#</span><span class="bash"> 编辑备注 $ git commit -m <span class="hljs-string">&quot;implement api architecture&quot;</span> </span><span class="hljs-meta">#</span><span class="bash"> 将分支代码push到服务器 $ git push origin -u feature/my_feature </span><span class="hljs-meta">#</span><span class="bash"> 合并分支feature/my_feature到develop </span><span class="hljs-meta">$</span><span class="bash"> git checkout develop </span><span class="hljs-meta">#</span><span class="bash"> 确保当前分支是最新的 </span><span class="hljs-meta">$</span><span class="bash"> git pull </span><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff feature/my_feature  </span><span class="hljs-meta">#</span><span class="bash"> 分支开发过程中，为了减少冲突，尽量要多与主干同步 </span><span class="hljs-meta">$</span><span class="bash"> git fetch origin </span><span class="hljs-meta">$</span><span class="bash"> git rebase origin/develop </span><span class="hljs-meta">$</span><span class="bash"> git add .                <span class="hljs-comment"># 解决冲突后add </span></span><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><span class="hljs-meta">#</span><span class="bash">删除分支 $ git branch -d feature/my_feature</span><span class="hljs-meta">#</span><span class="bash">取消commit </span><span class="hljs-meta">$</span><span class="bash"> git reset --hard &lt;commit <span class="hljs-built_in">log</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【windows】基于PyCharm构建与开发Django项目</title>
    <link href="/2020/06/14/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/06/14/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/logo.jpg"><a id="more"></a> </p><p><strong>1.安装第三方库Django</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/1.png"></p><p><strong>2.pycharm创建Django项目</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/2.png"></p><p><strong>3.安装mysql第三方库</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/3.png"></p><p><strong>4.配置mysql数据库环境</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/4.png"></p><p><strong>5.生成django默认数据表</strong></p><p>tool –&gt;Run manage.py task</p><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations</span> <span class="hljs-attribute">migrate</span></code></pre><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/5.png"></p><p>查看数据表，会发现生成了django的数据表</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/5-1.png"></p><p><strong>6.创建一个app</strong></p><p>startapp user</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/6-1.png"></p><p>项目目录下会生成</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/6-2.png"></p><p><strong>7.自定义user表</strong></p><p>Django生成的user表</p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱,</li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><p>这些往往不能满足我们自身的需求，因此需要自定义user表，在user下的models.py文件添加代码</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TbUser</span>(<span class="hljs-params">AbstractUser</span>):</span>    nickname = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">50</span>, verbose_name=<span class="hljs-string">&#x27;昵称&#x27;</span>,)    birthday = models.DateField(null=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;生日&#x27;</span>)    gender = models.IntegerField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;男&#x27;</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;女&#x27;</span>)), verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>, default=<span class="hljs-number">1</span>)    address = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">200</span>, verbose_name=<span class="hljs-string">&#x27;地址&#x27;</span>)   phone = models.CharField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">11</span>, verbose_name=<span class="hljs-string">&#x27;手机&#x27;</span>)   head = models.ImageField(upload_to=<span class="hljs-string">&#x27;image/%Y/%m&#x27;</span>, max_length=<span class="hljs-number">100</span>, verbose_name=<span class="hljs-string">&#x27;头像&#x27;</span>, default=<span class="hljs-string">&#x27;image/default_m.png&#x27;</span>) <span class="hljs-comment"># 注意这里的head使用ImageField，需要安装依赖库pip install pillow</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        db_table = <span class="hljs-string">&#x27;tb_user&#x27;</span>        verbose_name = <span class="hljs-string">&#x27;用户信息&#x27;</span>        verbose_name_plural = verbose_name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.username</code></pre><p>修改settings.py文件</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-1.png"></p><p>在这里，def <strong>str</strong>(self)：方法在python3.x版本使用，用于后台展示样式是显示的是用户名。保存后，使用django敏玲重新生成表</p><p>tool –&gt;Run manage.py task</p><pre><code class="hljs routeros">makemigrations<span class="hljs-built_in"> user </span>migrate user</code></pre><p>创建后台管理用户</p><pre><code class="hljs ebnf"><span class="hljs-attribute">createsuperuser</span></code></pre><p>填写用户名、邮箱和密码</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-2.png"></p><p>可以查看到数据库中新增一条数据</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-3.png"></p><p>这样就可以登录后台管理页面了</p><p><strong>8.集成xadmin组件</strong></p><p>python3.x无法直接使用安装包</p><pre><code class="hljs awk">pip install git+git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sshwsfc/</span>xadmin.git@django2</code></pre><p>或者访问<a href="https://github.com/sshwsfc/xadmin/tree/django2%EF%BC%8C%EF%BC%88git">https://github.com/sshwsfc/xadmin/tree/django2，（git</a> clone -b django2 <a href="https://github.com/sshwsfc/xadmin.git%EF%BC%89%E5%B0%86xadmin%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%8B">https://github.com/sshwsfc/xadmin.git）将xadmin目录下文件拷贝到项目下</a></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-1.png"></p><p>在settings.py文件下添加相应配置</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-2.png"></p><p>把urls中默认admin指向Xadmin</p><pre><code class="hljs python"><span class="hljs-comment"># 导入x admin，替换admin</span><span class="hljs-keyword">import</span> xadminurlpatterns = [    path(<span class="hljs-string">&#x27;xadmin/&#x27;</span>, xadmin.site.urls),, <span class="hljs-comment"># django2中也可以是 url(r&#x27;^xadmin/&#x27;, xadmin.site.urls)</span>]</code></pre><p>点击Tools 菜单下 Run manage.py Task</p><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations</span> <span class="hljs-attribute">migrate</span></code></pre><p>访问<a href="http://127.0.0.1/admin/">http://127.0.0.1/admin/</a></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-3.png"></p><p>新建user/adminx.py，进行app model注册：</p><pre><code class="hljs python"><span class="hljs-comment"># 创建xadmin的全局管理器并与view绑定。</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseSetting</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-comment"># 开启主题功能</span>    enable_themes = <span class="hljs-literal">True</span>    use_bootswatch = <span class="hljs-literal">True</span><span class="hljs-comment"># xadmin 全局配置参数信息设置</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalSettings</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    site_title = <span class="hljs-string">&quot;supe-wa慕课小站&quot;</span>    site_footer = <span class="hljs-string">&quot;supe-wa慕课小站|后台管理系统&quot;</span>    <span class="hljs-comment"># 收起菜单</span>    menu_style = <span class="hljs-string">&quot;accordion&quot;</span>    <span class="hljs-comment"># 自定义导航楼目录</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_site_menu</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> (            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourse, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;章节信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseLesson, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;视频信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseVideo, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程资源管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseResource, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;课程评论管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbCourseComment, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;机构信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;城市信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TcCityDict, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;机构信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbOrg, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;机构讲师管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbOrgTeacher, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户信息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUser, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户验证管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbEmailVerifyRecord, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户课程管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserCourse, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户收藏管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserFavorite, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户消息管理&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserMessage, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;系统信息管理&#x27;</span>, <span class="hljs-string">&#x27;menus&#x27;</span>: (                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户咨询&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TbUserAsk, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;首页轮播&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(TcBanner, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户分组&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(Group, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;用户权限&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(Permission, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,                &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;日志记录&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: self.get_model_url(Log, <span class="hljs-string">&#x27;changelist&#x27;</span>)&#125;,            )&#125;,)            <span class="hljs-comment"># 将全局配置管理与view绑定注册</span>xadmin.site.register(views.CommAdminView, GlobalSettings)xadmin.site.register(views.BaseAdminView, BaseSetting)</code></pre><p>登录后</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-4.png"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
