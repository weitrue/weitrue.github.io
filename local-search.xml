<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mac环境下搭建hadoop集群环境（三台）</title>
    <link href="/2020/06/15/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/06/15/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/hadoops.png" srcset="/img/loading.gif" alt></p><a id="more"></a> <h3 id="1-三台linux服务器的安装"><a href="#1-三台linux服务器的安装" class="headerlink" title="1. 三台linux服务器的安装"></a>1. 三台linux服务器的安装</h3><h4 id="1-安装VmWare-Fusion"><a href="#1-安装VmWare-Fusion" class="headerlink" title="1. 安装VmWare Fusion"></a>1. 安装VmWare Fusion</h4><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/fusion.png" srcset="/img/loading.gif" alt></p><h4 id="2-通过Vmware安装三台linux机器"><a href="#2-通过Vmware安装三台linux机器" class="headerlink" title="2.通过Vmware安装三台linux机器"></a>2.通过Vmware安装三台linux机器</h4><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/linux.png" srcset="/img/loading.gif" alt></p><h4 id="3-为linux虚拟机设置网络配置"><a href="#3-为linux虚拟机设置网络配置" class="headerlink" title="3.为linux虚拟机设置网络配置"></a>3.为linux虚拟机设置网络配置</h4><p>安装VMWare Fusion成功后，Mac OS会新增两张网卡vmnet1以及vmnet8，其中vmnet1是Host-only模式，vmnet8是NAT模式，这里选择vmnet8使用NAT进行网络设置。</p><h5 id="1-修改Fusion网络配置"><a href="#1-修改Fusion网络配置" class="headerlink" title="1.修改Fusion网络配置"></a>1.修改Fusion网络配置</h5><p>修改配置文件:/Library/Preferences/VMware\ Fusion/networking</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/fusion_net.png" srcset="/img/loading.gif" alt></p><h5 id="2-修改网关"><a href="#2-修改网关" class="headerlink" title="2.修改网关"></a>2.修改网关</h5><p>修改配置文件：/Library/Preferences/VMware Fusion/vmnet8/nat.conf</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/net8.png" srcset="/img/loading.gif" alt></p><h5 id="3-修改linux虚拟机网卡"><a href="#3-修改linux虚拟机网卡" class="headerlink" title="3.修改linux虚拟机网卡"></a>3.修改linux虚拟机网卡</h5><p>修改配置文件(服务器版linux):/etc/sysconfig/network-scripts/ifcfg-ens33</p><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/linux_net.png" srcset="/img/loading.gif" alt></p><p>更改完成配置，重启网络服务</p><pre><code class="hljs shell">systemctl restart network</code></pre><p>安装一些常用的软件</p><pre><code class="hljs shell">yum -y install vimyum -y install net-tools</code></pre><p>关机</p><pre><code class="hljs angelscript">init <span class="hljs-number">0</span></code></pre><h5 id="4-克隆第一台linux虚拟机"><a href="#4-克隆第一台linux虚拟机" class="headerlink" title="4.克隆第一台linux虚拟机"></a>4.克隆第一台linux虚拟机</h5><p>现在已经有了种子机器了，我们可以通过种子机器进行复制或者克隆出三台机器</p><h6 id="更改克隆机器的IP地址"><a href="#更改克隆机器的IP地址" class="headerlink" title="更改克隆机器的IP地址"></a>更改克隆机器的IP地址</h6><ul><li><p>三台机器的ip地址分别是<code>192.168.51.100、192.168.51.110、192.168.51.120</code></p></li><li><p>克隆出来的机器IP地址与种子的ip地址一样，我们将第二台机器的IP地址更改为192.168.51.110即可</p></li><li><p>启动虚拟机，并通过root用户，密码<strong>**</strong>来进行登录，然后来更改linux机器的IP地址</p></li></ul><pre><code class="hljs shell">vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></pre><pre><code class="hljs shell">IPADDR=192.168.51.110NETMASK=255.255.255.0GATEWAY=192.168.51.1DNS1=8.8.8.8</code></pre><ul><li><p>依照上面步骤，接着克隆第三台机器，并将第三台机器的IP地址设置为</p><p>192.168.51.120</p></li></ul><h3 id="2-安装大数据集群前环境准备"><a href="#2-安装大数据集群前环境准备" class="headerlink" title="2.安装大数据集群前环境准备"></a>2.安装大数据集群前环境准备</h3><h4 id="1-三台虚拟机关闭防火墙"><a href="#1-三台虚拟机关闭防火墙" class="headerlink" title="1. 三台虚拟机关闭防火墙"></a>1. 三台虚拟机关闭防火墙</h4><p>三台机器执行以下命令（<font color="red">root</font>用户来执行）</p><pre><code class="hljs shell">systemctl stop firewalldsystemctl disable firewalld</code></pre><h4 id="2-三台机器关闭selinux"><a href="#2-三台机器关闭selinux" class="headerlink" title="2. 三台机器关闭selinux"></a>2. 三台机器关闭selinux</h4><p>三台机器执行以下命令关闭selinux</p><pre><code class="hljs shell">vim /etc/sysconfig/selinuxSELINUX=disabled</code></pre><h4 id="3-三台机器更改主机名"><a href="#3-三台机器更改主机名" class="headerlink" title="3. 三台机器更改主机名"></a>3. 三台机器更改主机名</h4><p>三台机器执行以下命令更改主机名</p><pre><code class="hljs shell">vim /etc/hostname</code></pre><p>第一台机器更改内容</p><pre><code class="hljs css"><span class="hljs-selector-tag">node01</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span></code></pre><p>第二台机器更改内容</p><pre><code class="hljs css"><span class="hljs-selector-tag">node02</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span></code></pre><p>第三台机器更改内容</p><pre><code class="hljs css"><span class="hljs-selector-tag">node03</span><span class="hljs-selector-class">.hadoop</span><span class="hljs-selector-class">.com</span></code></pre><h4 id="4-三台机器做主机名与IP地址的映射"><a href="#4-三台机器做主机名与IP地址的映射" class="headerlink" title="4. 三台机器做主机名与IP地址的映射"></a>4. 三台机器做主机名与IP地址的映射</h4><p>三台机器执行以下命令更改主机名与IP地址的映射/etc/hosts</p><pre><code class="hljs shell">192.168.51.100 node01.hadoop.com node01192.168.51.110 node02.hadoop.com node02192.168.51.120 node03.hadoop.com node03</code></pre><h4 id="5-三台机器时钟同步"><a href="#5-三台机器时钟同步" class="headerlink" title="5. 三台机器时钟同步"></a>5. 三台机器时钟同步</h4><h5 id="第一种同步方式：通过网络进行时钟同步"><a href="#第一种同步方式：通过网络进行时钟同步" class="headerlink" title="第一种同步方式：通过网络进行时钟同步"></a>第一种同步方式：通过网络进行时钟同步</h5><p>通过网络连接外网进行时钟同步,必须保证虚拟机连上外网</p><p>三台机器都安装ntpdate</p><pre><code class="hljs shell">yum -y install ntpdate</code></pre><p>阿里云时钟同步服务器</p><pre><code class="hljs css"><span class="hljs-selector-tag">ntpdate</span> <span class="hljs-selector-tag">ntp4</span><span class="hljs-selector-class">.aliyun</span><span class="hljs-selector-class">.com</span></code></pre><p>三台机器定时任务</p><pre><code class="hljs shell">crontab -e</code></pre><p>添加如下内容</p><pre><code class="hljs shell">*/1 * * * * /usr/sbin/ntpdate ntp4.aliyun.com;</code></pre><h4 id="6-三台机器添加普通用户"><a href="#6-三台机器添加普通用户" class="headerlink" title="6. 三台机器添加普通用户"></a>6. 三台机器添加普通用户</h4><p>三台linux服务器统一添加普通用户hadoop，并给以sudo权限，用于以后所有的大数据软件的安装</p><p>并统一设置普通用户的密码为 ==<strong>**</strong>==</p><pre><code class="hljs shell">useradd hadooppasswd hadoop</code></pre><p>普通用户的密码设置为<strong>**</strong></p><p>三台机器为普通用户添加sudo权限</p><pre><code class="hljs shell">visudo</code></pre><p> 增加如下内容</p><pre><code class="hljs shell">hadoop ALL=(ALL)    ALL</code></pre><h4 id="7-三台定义统一目录"><a href="#7-三台定义统一目录" class="headerlink" title="7. 三台定义统一目录"></a>7. 三台定义统一目录</h4><p>定义三台linux服务器软件压缩包存放目录，以及解压后安装目录，三台机器执行以下命令，创建两个文件夹，一个用于存放软件压缩包目录，一个用于存放解压后目录</p><pre><code class="hljs shell">mkdir -p /weitrue/soft   # 软件压缩包存放目录mkdir -p /weitrue/install # 软件解压后存放目录chown -R hadoop:hadoop /weitrue  # 将文件夹权限更改为hadoop用户</code></pre><h4 id="8-三台机器hadoop用户免密码登录"><a href="#8-三台机器hadoop用户免密码登录" class="headerlink" title="8. 三台机器hadoop用户免密码登录"></a>8. 三台机器hadoop用户免密码登录</h4><p>切换用户为hadoop</p><pre><code class="hljs shell">su hadoop</code></pre><p>第一步：三台机器在<font color="red">hadoop</font>用户下执行以下命令生成公钥与私钥</p><pre><code class="hljs shell">ssh-keygen -t rsa</code></pre><p><font color="red">执行上述命令之后，按三次Enter键即可生成了</font></p><p>第二步：三台机器在hadoop用户下，执行命令拷贝公钥到node01服务器</p><pre><code class="hljs shell">ssh-copy-id node01</code></pre><p>第三步：node01服务器将公钥拷贝给node02与node03</p><p>node01在hadoop用户下，执行以下命令，将authorized_keys拷贝到node02与node03服务器</p><pre><code class="hljs shell">cd /home/hadoop/.ssh/scp authorized_keys node02:$PWDscp authorized_keys node03:$PWD</code></pre><p>第四步：验证；从任意节点是否能免秘钥登陆其他节点；如node01免密登陆node02</p><pre><code class="hljs sh">ssh node02</code></pre><h4 id="9-三台机器关机重启"><a href="#9-三台机器关机重启" class="headerlink" title="9. 三台机器关机重启"></a>9. 三台机器关机重启</h4><p>三台机器在hadoop用户下执行以下命令，实现关机重启</p><pre><code class="hljs shell">sudo reboot -h now</code></pre><h4 id="10-三台机器安装jdk"><a href="#10-三台机器安装jdk" class="headerlink" title="10. 三台机器安装jdk"></a>10. 三台机器安装jdk</h4><ul><li><p>使用hadoop用户来重新连接三台机器，然后使用hadoop用户来安装jdk软件</p></li><li><p>上传压缩包到第一台服务器的/weitrue/soft下面，然后进行解压，配置环境变量即可，三台机器都依次安装即可</p></li></ul><pre><code class="hljs shell">cd /weitrue/soft/tar -xzvf jdk-8u141-linux-x64.tar.gz -C /weitrue/install/sudo vim /etc/profile</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">添加以下配置内容，配置jdk环境变量</span>export JAVA_HOME=/weitrue/install/jdk1.8.0_141export PATH=$PATH:$JAVA_HOME/bin</code></pre><p>让修改马上生效</p><pre><code class="hljs shell">source /etc/profile</code></pre><h3 id="3-hadoop集群的安装"><a href="#3-hadoop集群的安装" class="headerlink" title="3. hadoop集群的安装"></a>3. hadoop集群的安装</h3><p>注意：这里使用打包好的包“hadoop-2.6.0-cdh5.14.2_after_compile.tar.gz”安装部署集群</p><p>编译没有什么技巧，主要跟网络好坏有关</p><h4 id="1-CDH软件版本重新进行编译"><a href="#1-CDH软件版本重新进行编译" class="headerlink" title="1. CDH软件版本重新进行编译"></a>1. CDH软件版本重新进行编译</h4><h4 id="2-hadoop集群的安装"><a href="#2-hadoop集群的安装" class="headerlink" title="2. hadoop集群的安装"></a>2. hadoop集群的安装</h4><p>安装环境服务部署规划</p><table><thead><tr><th>服务器IP</th><th>192.168.51.100</th><th>192.168.51.110</th><th>192.168.51.120</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode</td><td></td><td></td></tr><tr><td>HDFS</td><td>SecondaryNameNode</td><td></td><td></td></tr><tr><td>HDFS</td><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>YARN</td><td>ResourceManager</td><td></td><td></td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr><tr><td>历史日志服务器</td><td>JobHistoryServer</td><td></td><td></td></tr></tbody></table><h5 id="第一步：上传压缩包并解压"><a href="#第一步：上传压缩包并解压" class="headerlink" title="第一步：上传压缩包并解压"></a>第一步：上传压缩包并解压</h5><ul><li>将我们重新编译之后支持snappy压缩的hadoop包上传到第一台服务器并解压；第一台机器执行以下命令</li></ul><pre><code class="hljs shell">cd /weitrue/soft/tar -xzvf hadoop-2.6.0-cdh5.14.2_after_compile.tar.gz -C /weitrue/install/</code></pre><h5 id="第二步：查看hadoop支持的压缩方式以及本地库"><a href="#第二步：查看hadoop支持的压缩方式以及本地库" class="headerlink" title="第二步：查看hadoop支持的压缩方式以及本地库"></a>第二步：查看hadoop支持的压缩方式以及本地库</h5><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2bin/hadoop checknative</code></pre><p>如果出现openssl为false，那么所有机器在线安装openssl即可，执行以下命令，虚拟机联网之后就可以在线进行安装了</p><pre><code class="hljs shell">sudo yum -y install openssl-devel</code></pre><h5 id="第三步：修改配置文件"><a href="#第三步：修改配置文件" class="headerlink" title="第三步：修改配置文件"></a>第三步：修改配置文件</h5><h6 id="修改hadoop-env-sh"><a href="#修改hadoop-env-sh" class="headerlink" title="修改hadoop-env.sh"></a>修改hadoop-env.sh</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim hadoop-env.sh</code></pre><pre><code class="hljs shell">export JAVA_HOME=/weitrue/install/jdk1.8.0_141</code></pre><h6 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim core-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://node01:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/tempDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 缓冲区大小，实际工作中根据服务器性能动态调整 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>io.file.buffer.size<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>4096<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 开启hdfs的垃圾桶机制，删除掉的数据可以从垃圾桶中回收，单位分钟 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.trash.interval<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10080<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim hdfs-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- NameNode存储元数据信息的路径，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割   --&gt;</span> <span class="hljs-comment">&lt;!--   集群动态上下线 &lt;property&gt;&lt;name&gt;dfs.hosts&lt;/name&gt;&lt;value&gt;/weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop/accept_host&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;dfs.hosts.exclude&lt;/name&gt;&lt;value&gt;/weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoop/deny_host&lt;/value&gt;&lt;/property&gt;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 定义dataNode数据存储的节点位置，实际工作中，一般先确定磁盘的挂载目录，然后多个目录用，进行分割 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.datanode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/datanodeDatas<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/snn/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.checkpoint.edits.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>file:///weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/snn/edits<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.blocksize<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>134217728<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改mapred-site-xml"><a href="#修改mapred-site-xml" class="headerlink" title="修改mapred-site.xml"></a>修改mapred-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopmv mapred-site.xml.template mapred-site.xml vim mapred-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.job.ubertask.enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改yarn-site-xml"><a href="#修改yarn-site-xml" class="headerlink" title="修改yarn-site.xml"></a>修改yarn-site.xml</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim yarn-site.xml</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>node01<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h6><p>第一台机器执行以下命令</p><pre><code class="hljs shell">cd /weitrue/install/hadoop-2.6.0-cdh5.14.2/etc/hadoopvim slaves</code></pre><p>原内容替换为</p><pre><code class="hljs gcode"><span class="hljs-symbol">node01</span><span class="hljs-symbol">node02</span><span class="hljs-symbol">node03</span></code></pre><h5 id="第四步：创建文件存放目录"><a href="#第四步：创建文件存放目录" class="headerlink" title="第四步：创建文件存放目录"></a>第四步：创建文件存放目录</h5><p>第一台机器执行以下命令</p><p>node01机器上面创建以下目录</p><pre><code class="hljs shell">mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/tempDatasmkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/namenodeDatasmkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/datanodeDatas mkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/editsmkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/snn/namemkdir -p /weitrue/install/hadoop-2.6.0-cdh5.14.2/hadoopDatas/dfs/nn/snn/edits</code></pre><h5 id="第五步：安装包的分发scp与rsync"><a href="#第五步：安装包的分发scp与rsync" class="headerlink" title="第五步：安装包的分发scp与rsync"></a>第五步：安装包的分发scp与rsync</h5><p>在linux当中，用于向远程服务器拷贝文件或者文件夹可以使用scp或者rsync，这两个命令功能类似都是向远程服务器进行拷贝，只不过scp是全量拷贝，rsync可以做到增量拷贝，rsync的效率比scp更高一些</p><h6 id="通过scp直接拷贝"><a href="#通过scp直接拷贝" class="headerlink" title="通过scp直接拷贝"></a>通过scp直接拷贝</h6><p>scp（secure copy）安全拷贝</p><p>可以通过scp进行不同服务器之间的文件或者文件夹的复制</p><p>使用语法 </p><pre><code class="hljs shell">scp -r sourceFile  username@host:destpath</code></pre><p>用法示例</p><pre><code class="hljs shell">scp -r hadoop-lzo-0.4.20.jar hadoop@node01:/weitrue/</code></pre><p>node01执行以下命令进行拷贝</p><pre><code class="hljs shell">cd /weitrue/install/scp -r hadoop-2.6.0-cdh5.14.2/ node02:$PWDscp -r hadoop-2.6.0-cdh5.14.2/ node03:$PWD</code></pre><h5 id="第六步：配置hadoop的环境变量"><a href="#第六步：配置hadoop的环境变量" class="headerlink" title="第六步：配置hadoop的环境变量"></a>第六步：配置hadoop的环境变量</h5><p>三台机器都要进行配置hadoop的环境变量</p><p>三台机器执行以下命令</p><pre><code class="hljs shell">sudo vim /etc/profile</code></pre><pre><code class="hljs shell">export HADOOP_HOME=/weitrue/install/hadoop-2.6.0-cdh5.14.2export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></pre><p>配置完成之后生效</p><pre><code class="hljs shell">source /etc/profile</code></pre><h5 id="第七步：集群启动"><a href="#第七步：集群启动" class="headerlink" title="第七步：集群启动"></a>第七步：集群启动</h5><h6 id="1-格式化集群"><a href="#1-格式化集群" class="headerlink" title="1. 格式化集群"></a>1. 格式化集群</h6><p>要启动 Hadoop 集群，需要启动 HDFS 和 YARN 两个集群。 </p><p>注意：首次启动HDFS时，必须对其进行格式化操作。本质上是一些清理和准备工作，因为此时的 HDFS 在物理上还是不存在的。<font color="red">格式化操作只有在首次启动的时候需要，以后再也不需要了</font></p><p><font color="red">node01执行一遍即可</font></p><pre><code class="hljs shell">hdfs namenode -format</code></pre><p>或者</p><pre><code class="hljs shell">hadoop namenode –format</code></pre><p><img src="/images/mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/hadoop.png" srcset="/img/loading.gif" alt></p><p>启动集群有两种方式：①脚本一键启动；②单个进程逐个启动</p><h6 id="2-脚本一键启动"><a href="#2-脚本一键启动" class="headerlink" title="2. 脚本一键启动"></a>2. 脚本一键启动</h6><p>如果配置了 etc/hadoop/slaves 和 ssh 免密登录，则可以使用程序脚本启动所有Hadoop 两个集群的相关进程，在主节点所设定的机器上执行。</p><p>启动集群</p><p>node01节点上执行以下命令</p><p>第一台机器执行以下命令(hadoop/sbin目录下)</p><pre><code class="hljs shell">start-dfs.shstart-yarn.shmr-jobhistory-daemon.sh start historyserver</code></pre><p>停止集群：</p><pre><code class="hljs shell">stop-dfs.shstop-yarn.sh</code></pre><h6 id="3-单个进程逐个启动"><a href="#3-单个进程逐个启动" class="headerlink" title="3. 单个进程逐个启动"></a>3. 单个进程逐个启动</h6><pre><code class="hljs shell">在主节点上使用以下命令启动 HDFS NameNode： hadoop-daemon.sh start namenode 在每个从节点上使用以下命令启动 HDFS DataNode： hadoop-daemon.sh start datanode在主节点上使用以下命令启动 YARN ResourceManager： yarn-daemon.sh start resourcemanager 在每个从节点上使用以下命令启动 YARN nodemanager： yarn-daemon.sh start nodemanager 以上脚本位于$HADOOP_HOME/sbin/目录下。如果想要停止某个节点上某个角色，只需要把命令中的start 改为stop 即可。</code></pre><h6 id="4-一键启动hadoop集群的脚本"><a href="#4-一键启动hadoop集群的脚本" class="headerlink" title="4.一键启动hadoop集群的脚本"></a>4.一键启动hadoop集群的脚本</h6><p>我们也可以创建一键启动hadoop的脚本，以后启动hadoop都可以通过一个脚本即可</p><p>在node01服务器的/home/hadoop/bin目录下创建脚本</p><pre><code class="hljs shell">[hadoop@node01 bin]$ cd /home/hadoop/bin/[hadoop@node01 bin]$ vim hadoop.sh</code></pre><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>case $1 in"start" )&#123; source /etc/profile; /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/start-dfs.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/start-yarn.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/mr-jobhistory-daemon.sh start historyserver&#125;;;"stop")&#123; /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/stop-dfs.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/stop-yarn.sh /weitrue/install/hadoop-2.6.0-cdh5.14.2/sbin/mr-jobhistory-daemon.sh stop  historyserver&#125;;;esac</code></pre><p>修改脚本权限</p><pre><code class="hljs shell">[hadoop@node01 bin]$ chmod 777 hadoop.sh[hadoop@node01 bin]$ ./hadoop.sh start  # 启动hadoop集群[hadoop@node01 bin]$ ./hadoop.sh stop   # 停止hadoop集群</code></pre><h5 id="第八步：浏览器查看启动页面"><a href="#第八步：浏览器查看启动页面" class="headerlink" title="第八步：浏览器查看启动页面"></a>第八步：浏览器查看启动页面</h5><p>hdfs集群访问地址</p><p><a href="http://192.168.51.100:50070/" target="_blank" rel="noopener">http://192.168.51.100:50070/</a></p><p>yarn集群访问地址</p><p><a href="http://192.168.51.100:8088" target="_blank" rel="noopener">http://192.168.51.100:8088</a></p><p>jobhistory访问地址：</p><p><a href="http://192.168.51.100:19888" target="_blank" rel="noopener">http://192.168.51.100:19888</a></p><p>==如果要关闭电脑时，清一定要按照以下顺序操作，否则集群可能会出问题==</p><ul><li><p>关闭hadoop集群</p></li><li><p>关闭虚拟机</p></li><li><p>关闭电脑</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Bdata</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
      <tag>大数据</tag>
      
      <tag>mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git动图图解</title>
    <link href="/2020/06/14/git%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3/"/>
    <url>/2020/06/14/git%E5%8A%A8%E5%9B%BE%E5%9B%BE%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git.jpg" srcset="/img/loading.gif" alt><a id="more"></a> </p><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>拥有多个分支是很方便的，这样可以将不同的新修改互相隔离开，而且还能确保你不会意外地向生产代码推送未经许可或破损的代码修改。但一旦这些修改得到了批准许可，我们就需要将其部署到我们的生产分支中！</p><p>可将一个分支的修改融入到另一个分支的一种方式是执行 git merge。Git 可执行两种类型的合并：fast-forward 和 no-fast-forward。现在你可能分不清，但我们马上就来看看它们的差异所在。</p><h4 id="Fast-forward-—ff"><a href="#Fast-forward-—ff" class="headerlink" title="Fast-forward (—ff)"></a>Fast-forward (—ff)</h4><p>在当前分支相比于我们要合并的分支没有额外的提交（commit）时，可以执行 fast-forward 合并。Git 很懒，首先会尝试执行最简单的选项：fast-forward！这类合并不会创建新的提交，而是会将我们正在合并的分支上的提交直接合并到当前分支。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image1.gif" srcset="/img/loading.gif" alt></p><p>完美！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。那么 no-fast-forward 又是什么意思呢？</p><h4 id="No-fast-foward-—no-ff"><a href="#No-fast-foward-—no-ff" class="headerlink" title="No-fast-foward (—no-ff)"></a>No-fast-foward (—no-ff)</h4><p>如果你的当前分支相比于你想要合并的分支没有任何提交，那当然很好，但很遗憾现实情况很少如此！如果我们在当前分支上提交我们想要合并的分支不具备的改变，那么 git 将会执行 no-fast-forward 合并。</p><p>使用 no-fast-forward 合并时，Git 会在当前活动分支上创建新的 merging commit。这个提交的父提交（parent commit）即指向这个活动分支，也指向我们想要合并的分支！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image2.gif" srcset="/img/loading.gif" alt></p><p>没什么大不了的，完美的合并！现在，我们在 dev 分支上所做的所有改变都合并到了 master 分支上。</p><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>尽管 Git 能够很好地决定如何合并分支以及如何向文件添加修改，但它并不总是能完全自己做决定。当我们想要合并的两个分支的同一文件中的同一行代码上有不同的修改，或者一个分支删除了一个文件而另一个分支修改了这个文件时，Git 就不知道如何取舍了。</p><p>在这样的情况下，Git 会询问你想要保留哪种选择？假设在这两个分支中，我们都编辑了 README.md 的第一行。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image3.png" srcset="/img/loading.gif" alt></p><p>如果我们想把 dev 合并到 master，就会出现一个合并冲突：你想要标题是 Hello! 还是 Hey!？</p><p>当尝试合并这些分支时，Git 会向你展示冲突出现的位置。我们可以手动移除我们不想保留的修改，保存这些修改，再次添加这个已修改的文件，然后提交这些修改。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image4.gif" srcset="/img/loading.gif" alt></p><p>完成！尽管合并冲突往往很让人厌烦，但这是合理的：Git 不应该瞎猜我们想要保留哪些修改。</p><h3 id="变基（Rebasing）"><a href="#变基（Rebasing）" class="headerlink" title="变基（Rebasing）"></a>变基（Rebasing）</h3><p>我们刚看到可通过执行 git merge 将一个分支的修改应用到另一个分支。另一种可将一个分支的修改融入到另一个分支的方式是执行 git rebase。</p><p>git rebase 会将当前分支的提交复制到指定的分支之上。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image5.gif" srcset="/img/loading.gif" alt></p><p>完美，现在我们在 dev 分支上获取了 master 分支上的所有修改。</p><p>变基与合并有一个重大的区别：Git 不会尝试确定要保留或不保留哪些文件。我们执行 rebase 的分支总是含有我们想要保留的最新近的修改！这样我们不会遇到任何合并冲突，而且可以保留一个漂亮的、线性的 Git 历史记录。</p><p>上面这个例子展示了在 master 分支上的变基。但是，在更大型的项目中，你通常不需要这样的操作。git rebase 在为复制的提交创建新的 hash 时会修改项目的历史记录。</p><p>如果你在开发一个 feature 分支并且 master 分支已经更新过，那么变基就很好用。你可以在你的分支上获取所有更新，这能防止未来出现合并冲突。</p><h3 id="交互式变基（Interactive-Rebase）"><a href="#交互式变基（Interactive-Rebase）" class="headerlink" title="交互式变基（Interactive Rebase）"></a>交互式变基（Interactive Rebase）</h3><p>在为提交执行变基之前，我们可以修改它们！我们可以使用交互式变基来完成这一任务。交互式变基在你当前开发的分支上以及想要修改某些提交时会很有用。</p><p>在我们正在 rebase 的提交上，我们可以执行以下 6 个动作：</p><p>reword：修改提交信息；</p><p>edit：修改此提交；</p><p>squash：将提交融合到前一个提交中；</p><p>fixup：将提交融合到前一个提交中，不保留该提交的日志消息；</p><p>exec：在每个提交上运行我们想要 rebase 的命令；</p><p>drop：移除该提交。</p><p>很棒！这样我们就能完全控制我们的提交了。如果你想要移除一个提交，只需 drop 即可。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image6.gif" srcset="/img/loading.gif" alt></p><p>如果你想把多个提交融合到一起以便得到清晰的提交历史，那也没有问题！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image7.gif" srcset="/img/loading.gif" alt></p><p>交互式变基能为你在 rebase 时提供大量控制，甚至可以控制当前的活动分支。</p><h3 id="重置（Resetting）"><a href="#重置（Resetting）" class="headerlink" title="重置（Resetting）"></a>重置（Resetting）</h3><p>当我们不想要之前提交的修改时，就会用到这个命令。也许这是一个 WIP 提交或者可能是引入了 bug 的提交，这时候就要执行 git reset。</p><p>git reset 能让我们不再使用当前台面上的文件，让我们可以控制 HEAD 应该指向的位置。</p><h4 id="软重置"><a href="#软重置" class="headerlink" title="软重置"></a>软重置</h4><p>软重置会将 HEAD 移至指定的提交（或与 HEAD 相比的提交的索引），而不会移除该提交之后加入的修改！</p><p>假设我们不想保留添加了一个 style.css 文件的提交 9e78i，而且我们也不想保留添加了一个 index.js 文件的提交 035cc。但是，我们确实又想要保留新添加的 style.css 和 index.js 文件！这是软重置的一个完美用例。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image8.gif" srcset="/img/loading.gif" alt></p><p>输入 git status 后，你会看到我们仍然可以访问在之前的提交上做过的所有修改。这很好，这意味着我们可以修复这些文件的内容，之后再重新提交它们！</p><h4 id="硬重置"><a href="#硬重置" class="headerlink" title="硬重置"></a>硬重置</h4><p>有时候我们并不想保留特定提交引入的修改。不同于软重置，我们应该再也无需访问它们。Git 应该直接将整体状态直接重置到特定提交之前的状态：这甚至包括你在工作目录中和暂存文件上的修改。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image9.gif" srcset="/img/loading.gif" alt></p><p>Git 丢弃了 9e78i 和 035cc 引入的修改，并将状态重置到了 ec5be 的状态。</p><h3 id="还原（Reverting）"><a href="#还原（Reverting）" class="headerlink" title="还原（Reverting）"></a>还原（Reverting）</h3><p>另一种撤销修改的方法是执行 git revert。通过对特定的提交执行还原操作，我们会创建一个包含已还原修改的新提交。</p><p>假设 ec5be 添加了一个 index.js 文件。但之后我们发现其实我们再也不需要由这个提交引入的修改了。那就还原 ec5be 提交吧！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image10.gif" srcset="/img/loading.gif" alt></p><p>完美！提交 9e78i 还原了由提交 ec5be 引入的修改。在撤销特定的提交时，git revert 非常有用，同时也不会修改分支的历史。</p><h3 id="拣选（Cherry-picking）"><a href="#拣选（Cherry-picking）" class="headerlink" title="拣选（Cherry-picking）"></a>拣选（Cherry-picking）</h3><p>当一个特定分支包含我们的活动分支需要的某个提交时，我们对那个提交执行 cherry-pick！对一个提交执行 cherry-pick 时，我们会在活动分支上创建一个新的提交，其中包含由拣选出来的提交所引入的修改。</p><p>假设 dev 分支上的提交 76d12 为 index.js 文件添加了一项修改，而我们希望将其整合到 master 分支中。我们并不想要整个 dev 分支，而只需要这个提交！</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image11.gif" srcset="/img/loading.gif" alt></p><p>现在 master 分支包含 76d12 引入的修改了。</p><h3 id="取回（Fetching）"><a href="#取回（Fetching）" class="headerlink" title="取回（Fetching）"></a>取回（Fetching）</h3><p>如果你有一个远程 Git 分支，比如在 GitHub 上的分支，当远程分支上包含当前分支没有的提交时，可以使用取回。比如当合并了另一个分支或你的同事推送了一个快速修复时。</p><p>通过在这个远程分支上执行 git fetch，我们就可在本地获取这些修改。这不会以任何方式影响你的本地分支：fetch 只是单纯地下载新的数据而已。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image12.gif" srcset="/img/loading.gif" alt></p><p>现在我们可以看到自上次推送以来的所有修改了。这些新数据也已经在本地了，我们可以决定用这些新数据做什么了。</p><h3 id="拉取（Pulling）"><a href="#拉取（Pulling）" class="headerlink" title="拉取（Pulling）"></a>拉取（Pulling）</h3><p>尽管 git fetch 可用于获取某个分支的远程信息，但我们也可以执行 git pull。git pull 实际上是两个命令合成了一个：git fetch 和 git merge。当我们从来源拉取修改时，我们首先是像 git fetch 那样取回所有数据，然后最新的修改会自动合并到本地分支中。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image13.gif" srcset="/img/loading.gif" alt></p><p>很好，我们现在与远程分支完美同步了，并且也有了所有最新的修改！</p><h3 id="Reflog"><a href="#Reflog" class="headerlink" title="Reflog"></a>Reflog</h3><p>每个人都会犯错，但犯错其实没啥！有时候你可能感觉你把 git repo 完全搞坏了，让你想完全删了了事。</p><p>git reflog 是一个非常有用的命令，可以展示已经执行过的所有动作的日志。包括合并、重置、还原，基本上包含你对你的分支所做的任何修改。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image14.gif" srcset="/img/loading.gif" alt></p><p>如果你犯了错，你可以根据 reflog 提供的信息通过重置 HEAD 来轻松地重做！</p><p>假设我们实际上并不需要合并原有分支。当我们执行 git reflog 命令时，我们可以看到这个 repo 的状态在合并前位于 HEAD@{1}。那我们就执行一次 git reset，将 HEAD 重新指向在 HEAD@{1} 的位置。</p><p><img src="/images/git%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A7%A3/image15.gif" srcset="/img/loading.gif" alt></p><p>我们可以看到最新的动作已被推送给 reflog。</p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【windows】git的安装与配置</title>
    <link href="/2020/06/14/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/14/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git.jpg" srcset="/img/loading.gif" alt><a id="more"></a> </p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="查看Git所有配置"><a href="#查看Git所有配置" class="headerlink" title="查看Git所有配置"></a>查看Git所有配置</h4><p>git config –list </p><h4 id="删除全局配置项"><a href="#删除全局配置项" class="headerlink" title="删除全局配置项"></a>删除全局配置项</h4><p>(1)终端执行命令：</p><p><code>git config --global --unset user.name</code></p><p>(2)编辑配置文件：</p><p><code>git config --global --edit</code></p><p>查看系统config</p><p><code>git config --system --list</code></p><p>查看当前用户（global）配置</p><p><code>git config --global --list</code></p><p>查看当前仓库配置信息</p><p><code>git config --local --list</code></p><h4 id="切换到需要提交的分支"><a href="#切换到需要提交的分支" class="headerlink" title="切换到需要提交的分支"></a>切换到需要提交的分支</h4><pre><code class="hljs haxe">git status     <span class="hljs-meta">#  查看git状态  </span>git branch     <span class="hljs-meta">#  查看git分支  </span>git checkout feature/<span class="hljs-keyword">new</span><span class="hljs-type">_branch</span> <span class="hljs-meta"># 切换到feature/new_branch分支</span></code></pre><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .                                          <span class="hljs-comment"># 添加数据到镜像仓库                                             </span></span>                                                   <span class="hljs-comment"># 提交单个文件，进入你要提交的文件目录          </span>                                                   <span class="hljs-comment"># git add &lt;你要提交的文件&gt; </span>git commit -m <span class="hljs-string">'你要写的注释'</span>                         <span class="hljs-comment"># 提交到本地镜像仓库</span>git push -u origin feature/new_branch    <span class="hljs-comment"># 提交到远程镜像仓库</span></code></pre><h4 id="将远程分支拉取到本地"><a href="#将远程分支拉取到本地" class="headerlink" title="将远程分支拉取到本地"></a>将远程分支拉取到本地</h4><pre><code class="hljs arduino">git branch -a                                            # 查询所有分支,包括远程分支 git checkout -b <span class="hljs-built_in">release</span> remotes/origin/<span class="hljs-built_in">release</span>  # 将远程<span class="hljs-built_in">release</span>分支拉取到本地，并在本地创建<span class="hljs-built_in">release</span>分支</code></pre><p>绿色是当前所在本地分支，白色是本地分支，红色是远程分支<br><img src="/images/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git-a.png" srcset="/img/loading.gif" alt></p><h3 id="分支代码拉取提交流程"><a href="#分支代码拉取提交流程" class="headerlink" title="分支代码拉取提交流程"></a>分支代码拉取提交流程</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取主干最新代码 </span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> &lt;repo&gt; </span><span class="hljs-meta">$</span><span class="bash"> git checkout develop   <span class="hljs-comment"># 开发分支 </span></span><span class="hljs-meta">$</span><span class="bash"> git pull               <span class="hljs-comment"># 同步分支 </span></span><span class="hljs-meta">#</span><span class="bash"> 新建一个开发分支my_feature </span><span class="hljs-meta">$</span><span class="bash"> git checkout -b feature/my_feature  </span><span class="hljs-meta">#</span><span class="bash"> 确认已切换到当前分支 </span><span class="hljs-meta">$</span><span class="bash"> git branch </span><span class="hljs-meta">#</span><span class="bash"> 保存所有的修改变化 </span><span class="hljs-meta">$</span><span class="bash"> git add --all 或者 git add . </span><span class="hljs-meta">#</span><span class="bash"> 查看发生变动的文件 </span><span class="hljs-meta">$</span><span class="bash"> git status  </span><span class="hljs-meta">#</span><span class="bash"> 编辑备注 $ git commit -m <span class="hljs-string">"implement api architecture"</span> </span><span class="hljs-meta">#</span><span class="bash"> 将分支代码push到服务器 $ git push origin -u feature/my_feature </span><span class="hljs-meta">#</span><span class="bash"> 合并分支feature/my_feature到develop </span><span class="hljs-meta">$</span><span class="bash"> git checkout develop </span><span class="hljs-meta">#</span><span class="bash"> 确保当前分支是最新的 </span><span class="hljs-meta">$</span><span class="bash"> git pull </span><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff feature/my_feature  </span><span class="hljs-meta">#</span><span class="bash"> 分支开发过程中，为了减少冲突，尽量要多与主干同步 </span><span class="hljs-meta">$</span><span class="bash"> git fetch origin </span><span class="hljs-meta">$</span><span class="bash"> git rebase origin/develop </span><span class="hljs-meta">$</span><span class="bash"> git add .                <span class="hljs-comment"># 解决冲突后add </span></span><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><span class="hljs-meta">#</span><span class="bash">删除分支 $ git branch -d feature/my_feature</span><span class="hljs-meta">#</span><span class="bash">取消commit </span><span class="hljs-meta">$</span><span class="bash"> git reset --hard &lt;commit <span class="hljs-built_in">log</span>&gt;</span></code></pre><p>参看文献</p><p><a href="https://segmentfault.com/a/1190000005685137" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005685137</a></p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【windows】基于PyCharm构建与开发Django项目</title>
    <link href="/2020/06/14/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/06/14/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/logo.jpg" srcset="/img/loading.gif" alt><a id="more"></a> </p><p><strong>1.安装第三方库Django</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/1.png" srcset="/img/loading.gif" alt></p><p><strong>2.pycharm创建Django项目</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/2.png" srcset="/img/loading.gif" alt></p><p><strong>3.安装mysql第三方库</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/3.png" srcset="/img/loading.gif" alt></p><p><strong>4.配置mysql数据库环境</strong></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/4.png" srcset="/img/loading.gif" alt></p><p><strong>5.生成django默认数据表</strong></p><p>tool –&gt;Run manage.py task</p><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations migrate</span></code></pre><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/5.png" srcset="/img/loading.gif" alt></p><p>查看数据表，会发现生成了django的数据表</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/5-1.png" srcset="/img/loading.gif" alt></p><p><strong>6.创建一个app</strong></p><p>startapp user</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/6-1.png" srcset="/img/loading.gif" alt></p><p>项目目录下会生成</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/6-2.png" srcset="/img/loading.gif" alt></p><p><strong>7.自定义user表</strong></p><p>Django生成的user表</p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱,</li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><p>这些往往不能满足我们自身的需求，因此需要自定义user表，在user下的models.py文件添加代码</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TbUser</span><span class="hljs-params">(AbstractUser)</span>:</span>    nickname = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">50</span>, verbose_name=<span class="hljs-string">'昵称'</span>,)    birthday = models.DateField(null=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">'生日'</span>)    gender = models.IntegerField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">'男'</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">'女'</span>)), verbose_name=<span class="hljs-string">'性别'</span>, default=<span class="hljs-number">1</span>)    address = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">200</span>, verbose_name=<span class="hljs-string">'地址'</span>)   phone = models.CharField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">11</span>, verbose_name=<span class="hljs-string">'手机'</span>)   head = models.ImageField(upload_to=<span class="hljs-string">'image/%Y/%m'</span>, max_length=<span class="hljs-number">100</span>, verbose_name=<span class="hljs-string">'头像'</span>, default=<span class="hljs-string">'image/default_m.png'</span>) <span class="hljs-comment"># 注意这里的head使用ImageField，需要安装依赖库pip install pillow</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        db_table = <span class="hljs-string">'tb_user'</span>        verbose_name = <span class="hljs-string">'用户信息'</span>        verbose_name_plural = verbose_name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> self.username</code></pre><p>修改settings.py文件</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-1.png" srcset="/img/loading.gif" alt></p><p>在这里，def <strong>str</strong>(self)：方法在python3.x版本使用，用于后台展示样式是显示的是用户名。保存后，使用django敏玲重新生成表</p><p>tool –&gt;Run manage.py task</p><pre><code class="hljs routeros">makemigrations<span class="hljs-built_in"> user </span>migrate user</code></pre><p>创建后台管理用户</p><pre><code class="hljs ebnf"><span class="hljs-attribute">createsuperuser</span></code></pre><p>填写用户名、邮箱和密码</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-2.png" srcset="/img/loading.gif" alt></p><p>可以查看到数据库中新增一条数据</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-3.png" srcset="/img/loading.gif" alt></p><p>这样就可以登录后台管理页面了</p><p><strong>8.集成xadmin组件</strong></p><p>python3.x无法直接使用安装包</p><pre><code class="hljs awk">pip install git+git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sshwsfc/</span>xadmin.git@django2</code></pre><p>或者访问<a href="https://github.com/sshwsfc/xadmin/tree/django2，（git" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin/tree/django2，（git</a> clone -b django2 <a href="https://github.com/sshwsfc/xadmin.git）将xadmin目录下文件拷贝到项目下" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin.git）将xadmin目录下文件拷贝到项目下</a></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-1.png" srcset="/img/loading.gif" alt></p><p>在settings.py文件下添加相应配置</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-2.png" srcset="/img/loading.gif" alt></p><p>把urls中默认admin指向Xadmin</p><pre><code class="hljs python"><span class="hljs-comment"># 导入x admin，替换admin</span><span class="hljs-keyword">import</span> xadminurlpatterns = [    path(<span class="hljs-string">'xadmin/'</span>, xadmin.site.urls),, <span class="hljs-comment"># django2中也可以是 url(r'^xadmin/', xadmin.site.urls)</span>]</code></pre><p>点击Tools 菜单下 Run manage.py Task</p><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations migrate</span></code></pre><p>访问<a href="http://127.0.0.1/admin/" target="_blank" rel="noopener">http://127.0.0.1/admin/</a></p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-3.png" srcset="/img/loading.gif" alt></p><p>新建user/adminx.py，进行app model注册：</p><pre><code class="hljs python"><span class="hljs-comment"># 创建xadmin的全局管理器并与view绑定。</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseSetting</span><span class="hljs-params">(object)</span>:</span>    <span class="hljs-comment"># 开启主题功能</span>    enable_themes = <span class="hljs-literal">True</span>    use_bootswatch = <span class="hljs-literal">True</span><span class="hljs-comment"># xadmin 全局配置参数信息设置</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalSettings</span><span class="hljs-params">(object)</span>:</span>    site_title = <span class="hljs-string">"supe-wa慕课小站"</span>    site_footer = <span class="hljs-string">"supe-wa慕课小站|后台管理系统"</span>    <span class="hljs-comment"># 收起菜单</span>    menu_style = <span class="hljs-string">"accordion"</span>    <span class="hljs-comment"># 自定义导航楼目录</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_site_menu</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> (            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourse, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'章节信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseLesson, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'视频信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseVideo, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程资源管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseResource, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程评论管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseComment, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'机构信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'城市信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TcCityDict, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'机构信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbOrg, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'机构讲师管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbOrgTeacher, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUser, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户验证管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbEmailVerifyRecord, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户课程管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserCourse, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户收藏管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserFavorite, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户消息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserMessage, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'系统信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户咨询'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserAsk, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'首页轮播'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TcBanner, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户分组'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(Group, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户权限'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(Permission, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'日志记录'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(Log, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,)            <span class="hljs-comment"># 将全局配置管理与view绑定注册</span>xadmin.site.register(views.CommAdminView, GlobalSettings)xadmin.site.register(views.BaseAdminView, BaseSetting)</code></pre><p>登录后</p><p><img src="/images/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-4.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
