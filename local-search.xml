<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【windows】git的安装与配置</title>
    <link href="/2020/06/14/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/14/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git.jpg" srcset="/img/loading.gif" alt><a id="more"></a> </p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="查看Git所有配置"><a href="#查看Git所有配置" class="headerlink" title="查看Git所有配置"></a>查看Git所有配置</h4><p>git config –list </p><h4 id="删除全局配置项"><a href="#删除全局配置项" class="headerlink" title="删除全局配置项"></a>删除全局配置项</h4><p>(1)终端执行命令：</p><p><code>git config --global --unset user.name</code></p><p>(2)编辑配置文件：</p><p><code>git config --global --edit</code></p><p>查看系统config</p><p><code>git config --system --list</code></p><p>查看当前用户（global）配置</p><p><code>git config --global --list</code></p><p>查看当前仓库配置信息</p><p><code>git config --local --list</code></p><h4 id="切换到需要提交的分支"><a href="#切换到需要提交的分支" class="headerlink" title="切换到需要提交的分支"></a>切换到需要提交的分支</h4><pre><code class="hljs haxe">git status     <span class="hljs-meta">#  查看git状态  </span>git branch     <span class="hljs-meta">#  查看git分支  </span>git checkout feature/<span class="hljs-keyword">new</span><span class="hljs-type">_branch</span> <span class="hljs-meta"># 切换到feature/new_branch分支</span></code></pre><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .                                          <span class="hljs-comment"># 添加数据到镜像仓库                                             </span></span>                                                   <span class="hljs-comment"># 提交单个文件，进入你要提交的文件目录          </span>                                                   <span class="hljs-comment"># git add &lt;你要提交的文件&gt; </span>git commit -m <span class="hljs-string">'你要写的注释'</span>                         <span class="hljs-comment"># 提交到本地镜像仓库</span>git push -u origin feature/new_branch    <span class="hljs-comment"># 提交到远程镜像仓库</span></code></pre><h4 id="将远程分支拉取到本地"><a href="#将远程分支拉取到本地" class="headerlink" title="将远程分支拉取到本地"></a>将远程分支拉取到本地</h4><pre><code class="hljs arduino">git branch -a                                            # 查询所有分支,包括远程分支 git checkout -b <span class="hljs-built_in">release</span> remotes/origin/<span class="hljs-built_in">release</span>  # 将远程<span class="hljs-built_in">release</span>分支拉取到本地，并在本地创建<span class="hljs-built_in">release</span>分支</code></pre><p>绿色是当前所在本地分支，白色是本地分支，红色是远程分支<br><img src="/Windows%E4%B8%8B%E7%9A%84git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/git-a.png" srcset="/img/loading.gif" alt></p><h3 id="分支代码拉取提交流程"><a href="#分支代码拉取提交流程" class="headerlink" title="分支代码拉取提交流程"></a>分支代码拉取提交流程</h3><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 获取主干最新代码 </span><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> &lt;repo&gt; </span><span class="hljs-meta">$</span><span class="bash"> git checkout develop   <span class="hljs-comment"># 开发分支 </span></span><span class="hljs-meta">$</span><span class="bash"> git pull               <span class="hljs-comment"># 同步分支 </span></span><span class="hljs-meta">#</span><span class="bash"> 新建一个开发分支my_feature </span><span class="hljs-meta">$</span><span class="bash"> git checkout -b feature/my_feature  </span><span class="hljs-meta">#</span><span class="bash"> 确认已切换到当前分支 </span><span class="hljs-meta">$</span><span class="bash"> git branch </span><span class="hljs-meta">#</span><span class="bash"> 保存所有的修改变化 </span><span class="hljs-meta">$</span><span class="bash"> git add --all 或者 git add . </span><span class="hljs-meta">#</span><span class="bash"> 查看发生变动的文件 </span><span class="hljs-meta">$</span><span class="bash"> git status  </span><span class="hljs-meta">#</span><span class="bash"> 编辑备注 $ git commit -m <span class="hljs-string">"implement api architecture"</span> </span><span class="hljs-meta">#</span><span class="bash"> 将分支代码push到服务器 $ git push origin -u feature/my_feature </span><span class="hljs-meta">#</span><span class="bash"> 合并分支feature/my_feature到develop </span><span class="hljs-meta">$</span><span class="bash"> git checkout develop </span><span class="hljs-meta">#</span><span class="bash"> 确保当前分支是最新的 </span><span class="hljs-meta">$</span><span class="bash"> git pull </span><span class="hljs-meta">$</span><span class="bash"> git merge --no-ff feature/my_feature  </span><span class="hljs-meta">#</span><span class="bash"> 分支开发过程中，为了减少冲突，尽量要多与主干同步 </span><span class="hljs-meta">$</span><span class="bash"> git fetch origin </span><span class="hljs-meta">$</span><span class="bash"> git rebase origin/develop </span><span class="hljs-meta">$</span><span class="bash"> git add .                <span class="hljs-comment"># 解决冲突后add </span></span><span class="hljs-meta">$</span><span class="bash"> git rebase --<span class="hljs-built_in">continue</span></span><span class="hljs-meta">#</span><span class="bash">删除分支 $ git branch -d feature/my_feature</span><span class="hljs-meta">#</span><span class="bash">取消commit </span><span class="hljs-meta">$</span><span class="bash"> git reset --hard &lt;commit <span class="hljs-built_in">log</span>&gt;</span></code></pre><p>参看文献</p><p><a href="https://segmentfault.com/a/1190000005685137" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005685137</a></p>]]></content>
    
    
    <categories>
      
      <category>Develop</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【windows】基于PyCharm构建与开发Django项目</title>
    <link href="/2020/06/14/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/06/14/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/logo.jpg" srcset="/img/loading.gif" alt><a id="more"></a> </p><p><strong>1.安装第三方库Django</strong></p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/1.png" srcset="/img/loading.gif" alt></p><p><strong>2.pycharm创建Django项目</strong></p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/2.png" srcset="/img/loading.gif" alt></p><p><strong>3.安装mysql第三方库</strong></p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/3.png" srcset="/img/loading.gif" alt></p><p><strong>4.配置mysql数据库环境</strong></p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/4.png" srcset="/img/loading.gif" alt></p><p><strong>5.生成django默认数据表</strong></p><p>tool –&gt;Run manage.py task</p><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations migrate</span></code></pre><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/5.png" srcset="/img/loading.gif" alt></p><p>查看数据表，会发现生成了django的数据表</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/5-1.png" srcset="/img/loading.gif" alt></p><p><strong>6.创建一个app</strong></p><p>startapp user</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/6-1.png" srcset="/img/loading.gif" alt></p><p>项目目录下会生成</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/6-2.png" srcset="/img/loading.gif" alt></p><p><strong>7.自定义user表</strong></p><p>Django生成的user表</p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱,</li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><p>这些往往不能满足我们自身的需求，因此需要自定义user表，在user下的models.py文件添加代码</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TbUser</span><span class="hljs-params">(AbstractUser)</span>:</span>    nickname = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">50</span>, verbose_name=<span class="hljs-string">'昵称'</span>,)    birthday = models.DateField(null=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">'生日'</span>)    gender = models.IntegerField(choices=((<span class="hljs-number">1</span>, <span class="hljs-string">'男'</span>), (<span class="hljs-number">0</span>, <span class="hljs-string">'女'</span>)), verbose_name=<span class="hljs-string">'性别'</span>, default=<span class="hljs-number">1</span>)    address = models.CharField(null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">200</span>, verbose_name=<span class="hljs-string">'地址'</span>)   phone = models.CharField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">11</span>, verbose_name=<span class="hljs-string">'手机'</span>)   head = models.ImageField(upload_to=<span class="hljs-string">'image/%Y/%m'</span>, max_length=<span class="hljs-number">100</span>, verbose_name=<span class="hljs-string">'头像'</span>, default=<span class="hljs-string">'image/default_m.png'</span>) <span class="hljs-comment"># 注意这里的head使用ImageField，需要安装依赖库pip install pillow</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span>        db_table = <span class="hljs-string">'tb_user'</span>        verbose_name = <span class="hljs-string">'用户信息'</span>        verbose_name_plural = verbose_name    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> self.username</code></pre><p>修改settings.py文件</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-1.png" srcset="/img/loading.gif" alt></p><p>在这里，def <strong>str</strong>(self)：方法在python3.x版本使用，用于后台展示样式是显示的是用户名。保存后，使用django敏玲重新生成表</p><p>tool –&gt;Run manage.py task</p><pre><code class="hljs routeros">makemigrations<span class="hljs-built_in"> user </span>migrate user</code></pre><p>创建后台管理用户</p><pre><code class="hljs ebnf"><span class="hljs-attribute">createsuperuser</span></code></pre><p>填写用户名、邮箱和密码</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-2.png" srcset="/img/loading.gif" alt></p><p>可以查看到数据库中新增一条数据</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/7-3.png" srcset="/img/loading.gif" alt></p><p>这样就可以登录后台管理页面了</p><p><strong>8.集成xadmin组件</strong></p><p>python3.x无法直接使用安装包</p><pre><code class="hljs awk">pip install git+git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/sshwsfc/</span>xadmin.git@django2</code></pre><p>或者访问<a href="https://github.com/sshwsfc/xadmin/tree/django2，（git" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin/tree/django2，（git</a> clone -b django2 <a href="https://github.com/sshwsfc/xadmin.git）将xadmin目录下文件拷贝到项目下" target="_blank" rel="noopener">https://github.com/sshwsfc/xadmin.git）将xadmin目录下文件拷贝到项目下</a></p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-1.png" srcset="/img/loading.gif" alt></p><p>在settings.py文件下添加相应配置</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-2.png" srcset="/img/loading.gif" alt></p><p>把urls中默认admin指向Xadmin</p><pre><code class="hljs python"><span class="hljs-comment"># 导入x admin，替换admin</span><span class="hljs-keyword">import</span> xadminurlpatterns = [    path(<span class="hljs-string">'xadmin/'</span>, xadmin.site.urls),, <span class="hljs-comment"># django2中也可以是 url(r'^xadmin/', xadmin.site.urls)</span>]</code></pre><p>点击Tools 菜单下 Run manage.py Task</p><pre><code class="hljs ebnf"><span class="hljs-attribute">makemigrations migrate</span></code></pre><p>访问<a href="http://127.0.0.1/admin/" target="_blank" rel="noopener">http://127.0.0.1/admin/</a></p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-3.png" srcset="/img/loading.gif" alt></p><p>新建user/adminx.py，进行app model注册：</p><pre><code class="hljs python"><span class="hljs-comment"># 创建xadmin的全局管理器并与view绑定。</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseSetting</span><span class="hljs-params">(object)</span>:</span>    <span class="hljs-comment"># 开启主题功能</span>    enable_themes = <span class="hljs-literal">True</span>    use_bootswatch = <span class="hljs-literal">True</span><span class="hljs-comment"># xadmin 全局配置参数信息设置</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalSettings</span><span class="hljs-params">(object)</span>:</span>    site_title = <span class="hljs-string">"supe-wa慕课小站"</span>    site_footer = <span class="hljs-string">"supe-wa慕课小站|后台管理系统"</span>    <span class="hljs-comment"># 收起菜单</span>    menu_style = <span class="hljs-string">"accordion"</span>    <span class="hljs-comment"># 自定义导航楼目录</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_site_menu</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> (            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourse, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'章节信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseLesson, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'视频信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseVideo, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程资源管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseResource, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'课程评论管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbCourseComment, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'机构信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'城市信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TcCityDict, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'机构信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbOrg, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'机构讲师管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbOrgTeacher, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户信息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUser, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户验证管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbEmailVerifyRecord, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户课程管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserCourse, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户收藏管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserFavorite, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户消息管理'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserMessage, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,            &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'系统信息管理'</span>, <span class="hljs-string">'menus'</span>: (                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户咨询'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TbUserAsk, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'首页轮播'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(TcBanner, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户分组'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(Group, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'用户权限'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(Permission, <span class="hljs-string">'changelist'</span>)&#125;,                &#123;<span class="hljs-string">'title'</span>: <span class="hljs-string">'日志记录'</span>, <span class="hljs-string">'url'</span>: self.get_model_url(Log, <span class="hljs-string">'changelist'</span>)&#125;,            )&#125;,)            <span class="hljs-comment"># 将全局配置管理与view绑定注册</span>xadmin.site.register(views.CommAdminView, GlobalSettings)xadmin.site.register(views.BaseAdminView, BaseSetting)</code></pre><p>登录后</p><p><img src="/windows%E4%B8%8B%E5%9F%BA%E4%BA%8Epycharm%E6%9E%84%E5%BB%BAdjango-web%E9%A1%B9%E7%9B%AE/8-4.png" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
